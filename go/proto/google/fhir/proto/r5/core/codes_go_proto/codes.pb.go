//    Copyright 2023 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.21.12
// source: proto/google/fhir/proto/r5/core/codes.proto

package codes_go_proto

import (
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AccountStatusCode_Value int32

const (
	AccountStatusCode_INVALID_UNINITIALIZED AccountStatusCode_Value = 0
	AccountStatusCode_ACTIVE                AccountStatusCode_Value = 1
	AccountStatusCode_INACTIVE              AccountStatusCode_Value = 2
	AccountStatusCode_ENTERED_IN_ERROR      AccountStatusCode_Value = 3
	AccountStatusCode_ON_HOLD               AccountStatusCode_Value = 4
	AccountStatusCode_UNKNOWN               AccountStatusCode_Value = 5
)

// Enum value maps for AccountStatusCode_Value.
var (
	AccountStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "INACTIVE",
		3: "ENTERED_IN_ERROR",
		4: "ON_HOLD",
		5: "UNKNOWN",
	}
	AccountStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"INACTIVE":              2,
		"ENTERED_IN_ERROR":      3,
		"ON_HOLD":               4,
		"UNKNOWN":               5,
	}
)

func (x AccountStatusCode_Value) Enum() *AccountStatusCode_Value {
	p := new(AccountStatusCode_Value)
	*p = x
	return p
}

func (x AccountStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[0].Descriptor()
}

func (AccountStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[0]
}

func (x AccountStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountStatusCode_Value.Descriptor instead.
func (AccountStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{0, 0}
}

type ActionCardinalityBehaviorCode_Value int32

const (
	ActionCardinalityBehaviorCode_INVALID_UNINITIALIZED ActionCardinalityBehaviorCode_Value = 0
	ActionCardinalityBehaviorCode_SINGLE                ActionCardinalityBehaviorCode_Value = 1
	ActionCardinalityBehaviorCode_MULTIPLE              ActionCardinalityBehaviorCode_Value = 2
)

// Enum value maps for ActionCardinalityBehaviorCode_Value.
var (
	ActionCardinalityBehaviorCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "SINGLE",
		2: "MULTIPLE",
	}
	ActionCardinalityBehaviorCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"SINGLE":                1,
		"MULTIPLE":              2,
	}
)

func (x ActionCardinalityBehaviorCode_Value) Enum() *ActionCardinalityBehaviorCode_Value {
	p := new(ActionCardinalityBehaviorCode_Value)
	*p = x
	return p
}

func (x ActionCardinalityBehaviorCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionCardinalityBehaviorCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[1].Descriptor()
}

func (ActionCardinalityBehaviorCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[1]
}

func (x ActionCardinalityBehaviorCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionCardinalityBehaviorCode_Value.Descriptor instead.
func (ActionCardinalityBehaviorCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{1, 0}
}

type ActionConditionKindCode_Value int32

const (
	ActionConditionKindCode_INVALID_UNINITIALIZED ActionConditionKindCode_Value = 0
	ActionConditionKindCode_APPLICABILITY         ActionConditionKindCode_Value = 1
	ActionConditionKindCode_START                 ActionConditionKindCode_Value = 2
	ActionConditionKindCode_STOP                  ActionConditionKindCode_Value = 3
)

// Enum value maps for ActionConditionKindCode_Value.
var (
	ActionConditionKindCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "APPLICABILITY",
		2: "START",
		3: "STOP",
	}
	ActionConditionKindCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"APPLICABILITY":         1,
		"START":                 2,
		"STOP":                  3,
	}
)

func (x ActionConditionKindCode_Value) Enum() *ActionConditionKindCode_Value {
	p := new(ActionConditionKindCode_Value)
	*p = x
	return p
}

func (x ActionConditionKindCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionConditionKindCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[2].Descriptor()
}

func (ActionConditionKindCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[2]
}

func (x ActionConditionKindCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionConditionKindCode_Value.Descriptor instead.
func (ActionConditionKindCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{2, 0}
}

type ActionGroupingBehaviorCode_Value int32

const (
	ActionGroupingBehaviorCode_INVALID_UNINITIALIZED ActionGroupingBehaviorCode_Value = 0
	ActionGroupingBehaviorCode_VISUAL_GROUP          ActionGroupingBehaviorCode_Value = 1
	ActionGroupingBehaviorCode_LOGICAL_GROUP         ActionGroupingBehaviorCode_Value = 2
	ActionGroupingBehaviorCode_SENTENCE_GROUP        ActionGroupingBehaviorCode_Value = 3
)

// Enum value maps for ActionGroupingBehaviorCode_Value.
var (
	ActionGroupingBehaviorCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "VISUAL_GROUP",
		2: "LOGICAL_GROUP",
		3: "SENTENCE_GROUP",
	}
	ActionGroupingBehaviorCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"VISUAL_GROUP":          1,
		"LOGICAL_GROUP":         2,
		"SENTENCE_GROUP":        3,
	}
)

func (x ActionGroupingBehaviorCode_Value) Enum() *ActionGroupingBehaviorCode_Value {
	p := new(ActionGroupingBehaviorCode_Value)
	*p = x
	return p
}

func (x ActionGroupingBehaviorCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionGroupingBehaviorCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[3].Descriptor()
}

func (ActionGroupingBehaviorCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[3]
}

func (x ActionGroupingBehaviorCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionGroupingBehaviorCode_Value.Descriptor instead.
func (ActionGroupingBehaviorCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{3, 0}
}

type ActionParticipantTypeCode_Value int32

const (
	ActionParticipantTypeCode_INVALID_UNINITIALIZED ActionParticipantTypeCode_Value = 0
	ActionParticipantTypeCode_CARETEAM              ActionParticipantTypeCode_Value = 5
	ActionParticipantTypeCode_DEVICE                ActionParticipantTypeCode_Value = 4
	ActionParticipantTypeCode_GROUP                 ActionParticipantTypeCode_Value = 6
	ActionParticipantTypeCode_HEALTHCARESERVICE     ActionParticipantTypeCode_Value = 7
	ActionParticipantTypeCode_LOCATION              ActionParticipantTypeCode_Value = 8
	ActionParticipantTypeCode_ORGANIZATION          ActionParticipantTypeCode_Value = 9
	ActionParticipantTypeCode_PATIENT               ActionParticipantTypeCode_Value = 1
	ActionParticipantTypeCode_PRACTITIONER          ActionParticipantTypeCode_Value = 2
	ActionParticipantTypeCode_PRACTITIONERROLE      ActionParticipantTypeCode_Value = 10
	ActionParticipantTypeCode_RELATEDPERSON         ActionParticipantTypeCode_Value = 11
)

// Enum value maps for ActionParticipantTypeCode_Value.
var (
	ActionParticipantTypeCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		5:  "CARETEAM",
		4:  "DEVICE",
		6:  "GROUP",
		7:  "HEALTHCARESERVICE",
		8:  "LOCATION",
		9:  "ORGANIZATION",
		1:  "PATIENT",
		2:  "PRACTITIONER",
		10: "PRACTITIONERROLE",
		11: "RELATEDPERSON",
	}
	ActionParticipantTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CARETEAM":              5,
		"DEVICE":                4,
		"GROUP":                 6,
		"HEALTHCARESERVICE":     7,
		"LOCATION":              8,
		"ORGANIZATION":          9,
		"PATIENT":               1,
		"PRACTITIONER":          2,
		"PRACTITIONERROLE":      10,
		"RELATEDPERSON":         11,
	}
)

func (x ActionParticipantTypeCode_Value) Enum() *ActionParticipantTypeCode_Value {
	p := new(ActionParticipantTypeCode_Value)
	*p = x
	return p
}

func (x ActionParticipantTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionParticipantTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[4].Descriptor()
}

func (ActionParticipantTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[4]
}

func (x ActionParticipantTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionParticipantTypeCode_Value.Descriptor instead.
func (ActionParticipantTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{4, 0}
}

type ActionPrecheckBehaviorCode_Value int32

const (
	ActionPrecheckBehaviorCode_INVALID_UNINITIALIZED ActionPrecheckBehaviorCode_Value = 0
	ActionPrecheckBehaviorCode_YES                   ActionPrecheckBehaviorCode_Value = 1
	ActionPrecheckBehaviorCode_NO                    ActionPrecheckBehaviorCode_Value = 2
)

// Enum value maps for ActionPrecheckBehaviorCode_Value.
var (
	ActionPrecheckBehaviorCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "YES",
		2: "NO",
	}
	ActionPrecheckBehaviorCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"YES":                   1,
		"NO":                    2,
	}
)

func (x ActionPrecheckBehaviorCode_Value) Enum() *ActionPrecheckBehaviorCode_Value {
	p := new(ActionPrecheckBehaviorCode_Value)
	*p = x
	return p
}

func (x ActionPrecheckBehaviorCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionPrecheckBehaviorCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[5].Descriptor()
}

func (ActionPrecheckBehaviorCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[5]
}

func (x ActionPrecheckBehaviorCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionPrecheckBehaviorCode_Value.Descriptor instead.
func (ActionPrecheckBehaviorCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{5, 0}
}

type ActionRelationshipTypeCode_Value int32

const (
	ActionRelationshipTypeCode_INVALID_UNINITIALIZED ActionRelationshipTypeCode_Value = 0
	ActionRelationshipTypeCode_BEFORE                ActionRelationshipTypeCode_Value = 2
	ActionRelationshipTypeCode_BEFORE_START          ActionRelationshipTypeCode_Value = 1
	ActionRelationshipTypeCode_BEFORE_END            ActionRelationshipTypeCode_Value = 3
	ActionRelationshipTypeCode_CONCURRENT            ActionRelationshipTypeCode_Value = 5
	ActionRelationshipTypeCode_CONCURRENT_WITH_START ActionRelationshipTypeCode_Value = 4
	ActionRelationshipTypeCode_CONCURRENT_WITH_END   ActionRelationshipTypeCode_Value = 6
	ActionRelationshipTypeCode_AFTER                 ActionRelationshipTypeCode_Value = 8
	ActionRelationshipTypeCode_AFTER_START           ActionRelationshipTypeCode_Value = 7
	ActionRelationshipTypeCode_AFTER_END             ActionRelationshipTypeCode_Value = 9
)

// Enum value maps for ActionRelationshipTypeCode_Value.
var (
	ActionRelationshipTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		2: "BEFORE",
		1: "BEFORE_START",
		3: "BEFORE_END",
		5: "CONCURRENT",
		4: "CONCURRENT_WITH_START",
		6: "CONCURRENT_WITH_END",
		8: "AFTER",
		7: "AFTER_START",
		9: "AFTER_END",
	}
	ActionRelationshipTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"BEFORE":                2,
		"BEFORE_START":          1,
		"BEFORE_END":            3,
		"CONCURRENT":            5,
		"CONCURRENT_WITH_START": 4,
		"CONCURRENT_WITH_END":   6,
		"AFTER":                 8,
		"AFTER_START":           7,
		"AFTER_END":             9,
	}
)

func (x ActionRelationshipTypeCode_Value) Enum() *ActionRelationshipTypeCode_Value {
	p := new(ActionRelationshipTypeCode_Value)
	*p = x
	return p
}

func (x ActionRelationshipTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionRelationshipTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[6].Descriptor()
}

func (ActionRelationshipTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[6]
}

func (x ActionRelationshipTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionRelationshipTypeCode_Value.Descriptor instead.
func (ActionRelationshipTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{6, 0}
}

type ActionRequiredBehaviorCode_Value int32

const (
	ActionRequiredBehaviorCode_INVALID_UNINITIALIZED  ActionRequiredBehaviorCode_Value = 0
	ActionRequiredBehaviorCode_MUST                   ActionRequiredBehaviorCode_Value = 1
	ActionRequiredBehaviorCode_COULD                  ActionRequiredBehaviorCode_Value = 2
	ActionRequiredBehaviorCode_MUST_UNLESS_DOCUMENTED ActionRequiredBehaviorCode_Value = 3
)

// Enum value maps for ActionRequiredBehaviorCode_Value.
var (
	ActionRequiredBehaviorCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "MUST",
		2: "COULD",
		3: "MUST_UNLESS_DOCUMENTED",
	}
	ActionRequiredBehaviorCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":  0,
		"MUST":                   1,
		"COULD":                  2,
		"MUST_UNLESS_DOCUMENTED": 3,
	}
)

func (x ActionRequiredBehaviorCode_Value) Enum() *ActionRequiredBehaviorCode_Value {
	p := new(ActionRequiredBehaviorCode_Value)
	*p = x
	return p
}

func (x ActionRequiredBehaviorCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionRequiredBehaviorCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[7].Descriptor()
}

func (ActionRequiredBehaviorCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[7]
}

func (x ActionRequiredBehaviorCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionRequiredBehaviorCode_Value.Descriptor instead.
func (ActionRequiredBehaviorCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{7, 0}
}

type ActionSelectionBehaviorCode_Value int32

const (
	ActionSelectionBehaviorCode_INVALID_UNINITIALIZED ActionSelectionBehaviorCode_Value = 0
	ActionSelectionBehaviorCode_ANY                   ActionSelectionBehaviorCode_Value = 1
	ActionSelectionBehaviorCode_ALL                   ActionSelectionBehaviorCode_Value = 2
	ActionSelectionBehaviorCode_ALL_OR_NONE           ActionSelectionBehaviorCode_Value = 3
	ActionSelectionBehaviorCode_EXACTLY_ONE           ActionSelectionBehaviorCode_Value = 4
	ActionSelectionBehaviorCode_AT_MOST_ONE           ActionSelectionBehaviorCode_Value = 5
	ActionSelectionBehaviorCode_ONE_OR_MORE           ActionSelectionBehaviorCode_Value = 6
)

// Enum value maps for ActionSelectionBehaviorCode_Value.
var (
	ActionSelectionBehaviorCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ANY",
		2: "ALL",
		3: "ALL_OR_NONE",
		4: "EXACTLY_ONE",
		5: "AT_MOST_ONE",
		6: "ONE_OR_MORE",
	}
	ActionSelectionBehaviorCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ANY":                   1,
		"ALL":                   2,
		"ALL_OR_NONE":           3,
		"EXACTLY_ONE":           4,
		"AT_MOST_ONE":           5,
		"ONE_OR_MORE":           6,
	}
)

func (x ActionSelectionBehaviorCode_Value) Enum() *ActionSelectionBehaviorCode_Value {
	p := new(ActionSelectionBehaviorCode_Value)
	*p = x
	return p
}

func (x ActionSelectionBehaviorCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionSelectionBehaviorCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[8].Descriptor()
}

func (ActionSelectionBehaviorCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[8]
}

func (x ActionSelectionBehaviorCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionSelectionBehaviorCode_Value.Descriptor instead.
func (ActionSelectionBehaviorCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{8, 0}
}

type AdditionalBindingPurposeCode_Value int32

const (
	AdditionalBindingPurposeCode_INVALID_UNINITIALIZED AdditionalBindingPurposeCode_Value = 0
	AdditionalBindingPurposeCode_MAXIMUM               AdditionalBindingPurposeCode_Value = 1
	AdditionalBindingPurposeCode_MINIMUM               AdditionalBindingPurposeCode_Value = 2
	AdditionalBindingPurposeCode_REQUIRED              AdditionalBindingPurposeCode_Value = 3
	AdditionalBindingPurposeCode_EXTENSIBLE            AdditionalBindingPurposeCode_Value = 4
	AdditionalBindingPurposeCode_CANDIDATE             AdditionalBindingPurposeCode_Value = 5
	AdditionalBindingPurposeCode_CURRENT               AdditionalBindingPurposeCode_Value = 6
	AdditionalBindingPurposeCode_PREFERRED             AdditionalBindingPurposeCode_Value = 7
	AdditionalBindingPurposeCode_UI                    AdditionalBindingPurposeCode_Value = 8
	AdditionalBindingPurposeCode_STARTER               AdditionalBindingPurposeCode_Value = 9
	AdditionalBindingPurposeCode_COMPONENT             AdditionalBindingPurposeCode_Value = 10
)

// Enum value maps for AdditionalBindingPurposeCode_Value.
var (
	AdditionalBindingPurposeCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "MAXIMUM",
		2:  "MINIMUM",
		3:  "REQUIRED",
		4:  "EXTENSIBLE",
		5:  "CANDIDATE",
		6:  "CURRENT",
		7:  "PREFERRED",
		8:  "UI",
		9:  "STARTER",
		10: "COMPONENT",
	}
	AdditionalBindingPurposeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"MAXIMUM":               1,
		"MINIMUM":               2,
		"REQUIRED":              3,
		"EXTENSIBLE":            4,
		"CANDIDATE":             5,
		"CURRENT":               6,
		"PREFERRED":             7,
		"UI":                    8,
		"STARTER":               9,
		"COMPONENT":             10,
	}
)

func (x AdditionalBindingPurposeCode_Value) Enum() *AdditionalBindingPurposeCode_Value {
	p := new(AdditionalBindingPurposeCode_Value)
	*p = x
	return p
}

func (x AdditionalBindingPurposeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdditionalBindingPurposeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[9].Descriptor()
}

func (AdditionalBindingPurposeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[9]
}

func (x AdditionalBindingPurposeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdditionalBindingPurposeCode_Value.Descriptor instead.
func (AdditionalBindingPurposeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{9, 0}
}

type AddressTypeCode_Value int32

const (
	AddressTypeCode_INVALID_UNINITIALIZED AddressTypeCode_Value = 0
	AddressTypeCode_POSTAL                AddressTypeCode_Value = 1
	AddressTypeCode_PHYSICAL              AddressTypeCode_Value = 2
	AddressTypeCode_BOTH                  AddressTypeCode_Value = 3
)

// Enum value maps for AddressTypeCode_Value.
var (
	AddressTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "POSTAL",
		2: "PHYSICAL",
		3: "BOTH",
	}
	AddressTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"POSTAL":                1,
		"PHYSICAL":              2,
		"BOTH":                  3,
	}
)

func (x AddressTypeCode_Value) Enum() *AddressTypeCode_Value {
	p := new(AddressTypeCode_Value)
	*p = x
	return p
}

func (x AddressTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AddressTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[10].Descriptor()
}

func (AddressTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[10]
}

func (x AddressTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AddressTypeCode_Value.Descriptor instead.
func (AddressTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{10, 0}
}

type AddressUseCode_Value int32

const (
	AddressUseCode_INVALID_UNINITIALIZED AddressUseCode_Value = 0
	AddressUseCode_HOME                  AddressUseCode_Value = 1
	AddressUseCode_WORK                  AddressUseCode_Value = 2
	AddressUseCode_TEMP                  AddressUseCode_Value = 3
	AddressUseCode_OLD                   AddressUseCode_Value = 4
	AddressUseCode_BILLING               AddressUseCode_Value = 5
)

// Enum value maps for AddressUseCode_Value.
var (
	AddressUseCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "HOME",
		2: "WORK",
		3: "TEMP",
		4: "OLD",
		5: "BILLING",
	}
	AddressUseCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"HOME":                  1,
		"WORK":                  2,
		"TEMP":                  3,
		"OLD":                   4,
		"BILLING":               5,
	}
)

func (x AddressUseCode_Value) Enum() *AddressUseCode_Value {
	p := new(AddressUseCode_Value)
	*p = x
	return p
}

func (x AddressUseCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AddressUseCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[11].Descriptor()
}

func (AddressUseCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[11]
}

func (x AddressUseCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AddressUseCode_Value.Descriptor instead.
func (AddressUseCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{11, 0}
}

type AdministrativeGenderCode_Value int32

const (
	AdministrativeGenderCode_INVALID_UNINITIALIZED AdministrativeGenderCode_Value = 0
	AdministrativeGenderCode_MALE                  AdministrativeGenderCode_Value = 1
	AdministrativeGenderCode_FEMALE                AdministrativeGenderCode_Value = 2
	AdministrativeGenderCode_OTHER                 AdministrativeGenderCode_Value = 3
	AdministrativeGenderCode_UNKNOWN               AdministrativeGenderCode_Value = 4
)

// Enum value maps for AdministrativeGenderCode_Value.
var (
	AdministrativeGenderCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "MALE",
		2: "FEMALE",
		3: "OTHER",
		4: "UNKNOWN",
	}
	AdministrativeGenderCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"MALE":                  1,
		"FEMALE":                2,
		"OTHER":                 3,
		"UNKNOWN":               4,
	}
)

func (x AdministrativeGenderCode_Value) Enum() *AdministrativeGenderCode_Value {
	p := new(AdministrativeGenderCode_Value)
	*p = x
	return p
}

func (x AdministrativeGenderCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdministrativeGenderCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[12].Descriptor()
}

func (AdministrativeGenderCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[12]
}

func (x AdministrativeGenderCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdministrativeGenderCode_Value.Descriptor instead.
func (AdministrativeGenderCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{12, 0}
}

type AdverseEventActualityCode_Value int32

const (
	AdverseEventActualityCode_INVALID_UNINITIALIZED AdverseEventActualityCode_Value = 0
	AdverseEventActualityCode_ACTUAL                AdverseEventActualityCode_Value = 1
	AdverseEventActualityCode_POTENTIAL             AdverseEventActualityCode_Value = 2
)

// Enum value maps for AdverseEventActualityCode_Value.
var (
	AdverseEventActualityCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTUAL",
		2: "POTENTIAL",
	}
	AdverseEventActualityCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTUAL":                1,
		"POTENTIAL":             2,
	}
)

func (x AdverseEventActualityCode_Value) Enum() *AdverseEventActualityCode_Value {
	p := new(AdverseEventActualityCode_Value)
	*p = x
	return p
}

func (x AdverseEventActualityCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdverseEventActualityCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[13].Descriptor()
}

func (AdverseEventActualityCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[13]
}

func (x AdverseEventActualityCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdverseEventActualityCode_Value.Descriptor instead.
func (AdverseEventActualityCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{13, 0}
}

type AggregationModeCode_Value int32

const (
	AggregationModeCode_INVALID_UNINITIALIZED AggregationModeCode_Value = 0
	AggregationModeCode_CONTAINED             AggregationModeCode_Value = 1
	AggregationModeCode_REFERENCED            AggregationModeCode_Value = 2
	AggregationModeCode_BUNDLED               AggregationModeCode_Value = 3
)

// Enum value maps for AggregationModeCode_Value.
var (
	AggregationModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CONTAINED",
		2: "REFERENCED",
		3: "BUNDLED",
	}
	AggregationModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CONTAINED":             1,
		"REFERENCED":            2,
		"BUNDLED":               3,
	}
)

func (x AggregationModeCode_Value) Enum() *AggregationModeCode_Value {
	p := new(AggregationModeCode_Value)
	*p = x
	return p
}

func (x AggregationModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AggregationModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[14].Descriptor()
}

func (AggregationModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[14]
}

func (x AggregationModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AggregationModeCode_Value.Descriptor instead.
func (AggregationModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{14, 0}
}

type AllergyIntoleranceCategoryCode_Value int32

const (
	AllergyIntoleranceCategoryCode_INVALID_UNINITIALIZED AllergyIntoleranceCategoryCode_Value = 0
	AllergyIntoleranceCategoryCode_FOOD                  AllergyIntoleranceCategoryCode_Value = 1
	AllergyIntoleranceCategoryCode_MEDICATION            AllergyIntoleranceCategoryCode_Value = 2
	AllergyIntoleranceCategoryCode_ENVIRONMENT           AllergyIntoleranceCategoryCode_Value = 3
	AllergyIntoleranceCategoryCode_BIOLOGIC              AllergyIntoleranceCategoryCode_Value = 4
)

// Enum value maps for AllergyIntoleranceCategoryCode_Value.
var (
	AllergyIntoleranceCategoryCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "FOOD",
		2: "MEDICATION",
		3: "ENVIRONMENT",
		4: "BIOLOGIC",
	}
	AllergyIntoleranceCategoryCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"FOOD":                  1,
		"MEDICATION":            2,
		"ENVIRONMENT":           3,
		"BIOLOGIC":              4,
	}
)

func (x AllergyIntoleranceCategoryCode_Value) Enum() *AllergyIntoleranceCategoryCode_Value {
	p := new(AllergyIntoleranceCategoryCode_Value)
	*p = x
	return p
}

func (x AllergyIntoleranceCategoryCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllergyIntoleranceCategoryCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[15].Descriptor()
}

func (AllergyIntoleranceCategoryCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[15]
}

func (x AllergyIntoleranceCategoryCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllergyIntoleranceCategoryCode_Value.Descriptor instead.
func (AllergyIntoleranceCategoryCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{15, 0}
}

type AllergyIntoleranceCriticalityCode_Value int32

const (
	AllergyIntoleranceCriticalityCode_INVALID_UNINITIALIZED AllergyIntoleranceCriticalityCode_Value = 0
	AllergyIntoleranceCriticalityCode_LOW                   AllergyIntoleranceCriticalityCode_Value = 1
	AllergyIntoleranceCriticalityCode_HIGH                  AllergyIntoleranceCriticalityCode_Value = 2
	AllergyIntoleranceCriticalityCode_UNABLE_TO_ASSESS      AllergyIntoleranceCriticalityCode_Value = 3
)

// Enum value maps for AllergyIntoleranceCriticalityCode_Value.
var (
	AllergyIntoleranceCriticalityCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "LOW",
		2: "HIGH",
		3: "UNABLE_TO_ASSESS",
	}
	AllergyIntoleranceCriticalityCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"LOW":                   1,
		"HIGH":                  2,
		"UNABLE_TO_ASSESS":      3,
	}
)

func (x AllergyIntoleranceCriticalityCode_Value) Enum() *AllergyIntoleranceCriticalityCode_Value {
	p := new(AllergyIntoleranceCriticalityCode_Value)
	*p = x
	return p
}

func (x AllergyIntoleranceCriticalityCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllergyIntoleranceCriticalityCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[16].Descriptor()
}

func (AllergyIntoleranceCriticalityCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[16]
}

func (x AllergyIntoleranceCriticalityCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllergyIntoleranceCriticalityCode_Value.Descriptor instead.
func (AllergyIntoleranceCriticalityCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{16, 0}
}

type AllergyIntoleranceSeverityCode_Value int32

const (
	AllergyIntoleranceSeverityCode_INVALID_UNINITIALIZED AllergyIntoleranceSeverityCode_Value = 0
	AllergyIntoleranceSeverityCode_MILD                  AllergyIntoleranceSeverityCode_Value = 1
	AllergyIntoleranceSeverityCode_MODERATE              AllergyIntoleranceSeverityCode_Value = 2
	AllergyIntoleranceSeverityCode_SEVERE                AllergyIntoleranceSeverityCode_Value = 3
)

// Enum value maps for AllergyIntoleranceSeverityCode_Value.
var (
	AllergyIntoleranceSeverityCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "MILD",
		2: "MODERATE",
		3: "SEVERE",
	}
	AllergyIntoleranceSeverityCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"MILD":                  1,
		"MODERATE":              2,
		"SEVERE":                3,
	}
)

func (x AllergyIntoleranceSeverityCode_Value) Enum() *AllergyIntoleranceSeverityCode_Value {
	p := new(AllergyIntoleranceSeverityCode_Value)
	*p = x
	return p
}

func (x AllergyIntoleranceSeverityCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllergyIntoleranceSeverityCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[17].Descriptor()
}

func (AllergyIntoleranceSeverityCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[17]
}

func (x AllergyIntoleranceSeverityCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllergyIntoleranceSeverityCode_Value.Descriptor instead.
func (AllergyIntoleranceSeverityCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{17, 0}
}

type AppointmentStatusCode_Value int32

const (
	AppointmentStatusCode_INVALID_UNINITIALIZED AppointmentStatusCode_Value = 0
	AppointmentStatusCode_PROPOSED              AppointmentStatusCode_Value = 1
	AppointmentStatusCode_PENDING               AppointmentStatusCode_Value = 2
	AppointmentStatusCode_BOOKED                AppointmentStatusCode_Value = 3
	AppointmentStatusCode_ARRIVED               AppointmentStatusCode_Value = 4
	AppointmentStatusCode_FULFILLED             AppointmentStatusCode_Value = 5
	AppointmentStatusCode_CANCELLED             AppointmentStatusCode_Value = 6
	AppointmentStatusCode_NOSHOW                AppointmentStatusCode_Value = 7
	AppointmentStatusCode_ENTERED_IN_ERROR      AppointmentStatusCode_Value = 8
	AppointmentStatusCode_CHECKED_IN            AppointmentStatusCode_Value = 9
	AppointmentStatusCode_WAITLIST              AppointmentStatusCode_Value = 10
)

// Enum value maps for AppointmentStatusCode_Value.
var (
	AppointmentStatusCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "PROPOSED",
		2:  "PENDING",
		3:  "BOOKED",
		4:  "ARRIVED",
		5:  "FULFILLED",
		6:  "CANCELLED",
		7:  "NOSHOW",
		8:  "ENTERED_IN_ERROR",
		9:  "CHECKED_IN",
		10: "WAITLIST",
	}
	AppointmentStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PROPOSED":              1,
		"PENDING":               2,
		"BOOKED":                3,
		"ARRIVED":               4,
		"FULFILLED":             5,
		"CANCELLED":             6,
		"NOSHOW":                7,
		"ENTERED_IN_ERROR":      8,
		"CHECKED_IN":            9,
		"WAITLIST":              10,
	}
)

func (x AppointmentStatusCode_Value) Enum() *AppointmentStatusCode_Value {
	p := new(AppointmentStatusCode_Value)
	*p = x
	return p
}

func (x AppointmentStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppointmentStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[18].Descriptor()
}

func (AppointmentStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[18]
}

func (x AppointmentStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppointmentStatusCode_Value.Descriptor instead.
func (AppointmentStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{18, 0}
}

type ArtifactAssessmentDispositionCode_Value int32

const (
	ArtifactAssessmentDispositionCode_INVALID_UNINITIALIZED            ArtifactAssessmentDispositionCode_Value = 0
	ArtifactAssessmentDispositionCode_UNRESOLVED                       ArtifactAssessmentDispositionCode_Value = 1
	ArtifactAssessmentDispositionCode_NOT_PERSUASIVE                   ArtifactAssessmentDispositionCode_Value = 2
	ArtifactAssessmentDispositionCode_PERSUASIVE                       ArtifactAssessmentDispositionCode_Value = 3
	ArtifactAssessmentDispositionCode_PERSUASIVE_WITH_MODIFICATION     ArtifactAssessmentDispositionCode_Value = 4
	ArtifactAssessmentDispositionCode_NOT_PERSUASIVE_WITH_MODIFICATION ArtifactAssessmentDispositionCode_Value = 5
)

// Enum value maps for ArtifactAssessmentDispositionCode_Value.
var (
	ArtifactAssessmentDispositionCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "UNRESOLVED",
		2: "NOT_PERSUASIVE",
		3: "PERSUASIVE",
		4: "PERSUASIVE_WITH_MODIFICATION",
		5: "NOT_PERSUASIVE_WITH_MODIFICATION",
	}
	ArtifactAssessmentDispositionCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":            0,
		"UNRESOLVED":                       1,
		"NOT_PERSUASIVE":                   2,
		"PERSUASIVE":                       3,
		"PERSUASIVE_WITH_MODIFICATION":     4,
		"NOT_PERSUASIVE_WITH_MODIFICATION": 5,
	}
)

func (x ArtifactAssessmentDispositionCode_Value) Enum() *ArtifactAssessmentDispositionCode_Value {
	p := new(ArtifactAssessmentDispositionCode_Value)
	*p = x
	return p
}

func (x ArtifactAssessmentDispositionCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArtifactAssessmentDispositionCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[19].Descriptor()
}

func (ArtifactAssessmentDispositionCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[19]
}

func (x ArtifactAssessmentDispositionCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArtifactAssessmentDispositionCode_Value.Descriptor instead.
func (ArtifactAssessmentDispositionCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{19, 0}
}

type ArtifactAssessmentInformationTypeCode_Value int32

const (
	ArtifactAssessmentInformationTypeCode_INVALID_UNINITIALIZED ArtifactAssessmentInformationTypeCode_Value = 0
	ArtifactAssessmentInformationTypeCode_COMMENT               ArtifactAssessmentInformationTypeCode_Value = 1
	ArtifactAssessmentInformationTypeCode_CLASSIFIER            ArtifactAssessmentInformationTypeCode_Value = 2
	ArtifactAssessmentInformationTypeCode_RATING                ArtifactAssessmentInformationTypeCode_Value = 3
	ArtifactAssessmentInformationTypeCode_CONTAINER             ArtifactAssessmentInformationTypeCode_Value = 4
	ArtifactAssessmentInformationTypeCode_RESPONSE              ArtifactAssessmentInformationTypeCode_Value = 5
	ArtifactAssessmentInformationTypeCode_CHANGE_REQUEST        ArtifactAssessmentInformationTypeCode_Value = 6
)

// Enum value maps for ArtifactAssessmentInformationTypeCode_Value.
var (
	ArtifactAssessmentInformationTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "COMMENT",
		2: "CLASSIFIER",
		3: "RATING",
		4: "CONTAINER",
		5: "RESPONSE",
		6: "CHANGE_REQUEST",
	}
	ArtifactAssessmentInformationTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"COMMENT":               1,
		"CLASSIFIER":            2,
		"RATING":                3,
		"CONTAINER":             4,
		"RESPONSE":              5,
		"CHANGE_REQUEST":        6,
	}
)

func (x ArtifactAssessmentInformationTypeCode_Value) Enum() *ArtifactAssessmentInformationTypeCode_Value {
	p := new(ArtifactAssessmentInformationTypeCode_Value)
	*p = x
	return p
}

func (x ArtifactAssessmentInformationTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArtifactAssessmentInformationTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[20].Descriptor()
}

func (ArtifactAssessmentInformationTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[20]
}

func (x ArtifactAssessmentInformationTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArtifactAssessmentInformationTypeCode_Value.Descriptor instead.
func (ArtifactAssessmentInformationTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{20, 0}
}

type ArtifactAssessmentWorkflowStatusCode_Value int32

const (
	ArtifactAssessmentWorkflowStatusCode_INVALID_UNINITIALIZED    ArtifactAssessmentWorkflowStatusCode_Value = 0
	ArtifactAssessmentWorkflowStatusCode_SUBMITTED                ArtifactAssessmentWorkflowStatusCode_Value = 1
	ArtifactAssessmentWorkflowStatusCode_TRIAGED                  ArtifactAssessmentWorkflowStatusCode_Value = 2
	ArtifactAssessmentWorkflowStatusCode_WAITING_FOR_INPUT        ArtifactAssessmentWorkflowStatusCode_Value = 3
	ArtifactAssessmentWorkflowStatusCode_RESOLVED_NO_CHANGE       ArtifactAssessmentWorkflowStatusCode_Value = 4
	ArtifactAssessmentWorkflowStatusCode_RESOLVED_CHANGE_REQUIRED ArtifactAssessmentWorkflowStatusCode_Value = 5
	ArtifactAssessmentWorkflowStatusCode_DEFERRED                 ArtifactAssessmentWorkflowStatusCode_Value = 6
	ArtifactAssessmentWorkflowStatusCode_DUPLICATE                ArtifactAssessmentWorkflowStatusCode_Value = 7
	ArtifactAssessmentWorkflowStatusCode_APPLIED                  ArtifactAssessmentWorkflowStatusCode_Value = 8
	ArtifactAssessmentWorkflowStatusCode_PUBLISHED                ArtifactAssessmentWorkflowStatusCode_Value = 9
	ArtifactAssessmentWorkflowStatusCode_ENTERED_IN_ERROR         ArtifactAssessmentWorkflowStatusCode_Value = 10
)

// Enum value maps for ArtifactAssessmentWorkflowStatusCode_Value.
var (
	ArtifactAssessmentWorkflowStatusCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "SUBMITTED",
		2:  "TRIAGED",
		3:  "WAITING_FOR_INPUT",
		4:  "RESOLVED_NO_CHANGE",
		5:  "RESOLVED_CHANGE_REQUIRED",
		6:  "DEFERRED",
		7:  "DUPLICATE",
		8:  "APPLIED",
		9:  "PUBLISHED",
		10: "ENTERED_IN_ERROR",
	}
	ArtifactAssessmentWorkflowStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":    0,
		"SUBMITTED":                1,
		"TRIAGED":                  2,
		"WAITING_FOR_INPUT":        3,
		"RESOLVED_NO_CHANGE":       4,
		"RESOLVED_CHANGE_REQUIRED": 5,
		"DEFERRED":                 6,
		"DUPLICATE":                7,
		"APPLIED":                  8,
		"PUBLISHED":                9,
		"ENTERED_IN_ERROR":         10,
	}
)

func (x ArtifactAssessmentWorkflowStatusCode_Value) Enum() *ArtifactAssessmentWorkflowStatusCode_Value {
	p := new(ArtifactAssessmentWorkflowStatusCode_Value)
	*p = x
	return p
}

func (x ArtifactAssessmentWorkflowStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArtifactAssessmentWorkflowStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[21].Descriptor()
}

func (ArtifactAssessmentWorkflowStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[21]
}

func (x ArtifactAssessmentWorkflowStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArtifactAssessmentWorkflowStatusCode_Value.Descriptor instead.
func (ArtifactAssessmentWorkflowStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{21, 0}
}

type AssertionDirectionTypeCode_Value int32

const (
	AssertionDirectionTypeCode_INVALID_UNINITIALIZED AssertionDirectionTypeCode_Value = 0
	AssertionDirectionTypeCode_RESPONSE              AssertionDirectionTypeCode_Value = 1
	AssertionDirectionTypeCode_REQUEST               AssertionDirectionTypeCode_Value = 2
)

// Enum value maps for AssertionDirectionTypeCode_Value.
var (
	AssertionDirectionTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "RESPONSE",
		2: "REQUEST",
	}
	AssertionDirectionTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"RESPONSE":              1,
		"REQUEST":               2,
	}
)

func (x AssertionDirectionTypeCode_Value) Enum() *AssertionDirectionTypeCode_Value {
	p := new(AssertionDirectionTypeCode_Value)
	*p = x
	return p
}

func (x AssertionDirectionTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssertionDirectionTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[22].Descriptor()
}

func (AssertionDirectionTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[22]
}

func (x AssertionDirectionTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssertionDirectionTypeCode_Value.Descriptor instead.
func (AssertionDirectionTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{22, 0}
}

type AssertionManualCompletionTypeCode_Value int32

const (
	AssertionManualCompletionTypeCode_INVALID_UNINITIALIZED AssertionManualCompletionTypeCode_Value = 0
	AssertionManualCompletionTypeCode_FAIL                  AssertionManualCompletionTypeCode_Value = 1
	AssertionManualCompletionTypeCode_PASS                  AssertionManualCompletionTypeCode_Value = 2
	AssertionManualCompletionTypeCode_SKIP                  AssertionManualCompletionTypeCode_Value = 3
	AssertionManualCompletionTypeCode_STOP                  AssertionManualCompletionTypeCode_Value = 4
)

// Enum value maps for AssertionManualCompletionTypeCode_Value.
var (
	AssertionManualCompletionTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "FAIL",
		2: "PASS",
		3: "SKIP",
		4: "STOP",
	}
	AssertionManualCompletionTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"FAIL":                  1,
		"PASS":                  2,
		"SKIP":                  3,
		"STOP":                  4,
	}
)

func (x AssertionManualCompletionTypeCode_Value) Enum() *AssertionManualCompletionTypeCode_Value {
	p := new(AssertionManualCompletionTypeCode_Value)
	*p = x
	return p
}

func (x AssertionManualCompletionTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssertionManualCompletionTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[23].Descriptor()
}

func (AssertionManualCompletionTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[23]
}

func (x AssertionManualCompletionTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssertionManualCompletionTypeCode_Value.Descriptor instead.
func (AssertionManualCompletionTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{23, 0}
}

type AssertionOperatorTypeCode_Value int32

const (
	AssertionOperatorTypeCode_INVALID_UNINITIALIZED AssertionOperatorTypeCode_Value = 0
	AssertionOperatorTypeCode_EQUALS                AssertionOperatorTypeCode_Value = 1
	AssertionOperatorTypeCode_NOT_EQUALS            AssertionOperatorTypeCode_Value = 2
	AssertionOperatorTypeCode_IN                    AssertionOperatorTypeCode_Value = 3
	AssertionOperatorTypeCode_NOT_IN                AssertionOperatorTypeCode_Value = 4
	AssertionOperatorTypeCode_GREATER_THAN          AssertionOperatorTypeCode_Value = 5
	AssertionOperatorTypeCode_LESS_THAN             AssertionOperatorTypeCode_Value = 6
	AssertionOperatorTypeCode_EMPTY                 AssertionOperatorTypeCode_Value = 7
	AssertionOperatorTypeCode_NOT_EMPTY             AssertionOperatorTypeCode_Value = 8
	AssertionOperatorTypeCode_CONTAINS              AssertionOperatorTypeCode_Value = 9
	AssertionOperatorTypeCode_NOT_CONTAINS          AssertionOperatorTypeCode_Value = 10
	AssertionOperatorTypeCode_EVAL                  AssertionOperatorTypeCode_Value = 11
	AssertionOperatorTypeCode_MANUAL_EVAL           AssertionOperatorTypeCode_Value = 12
)

// Enum value maps for AssertionOperatorTypeCode_Value.
var (
	AssertionOperatorTypeCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "EQUALS",
		2:  "NOT_EQUALS",
		3:  "IN",
		4:  "NOT_IN",
		5:  "GREATER_THAN",
		6:  "LESS_THAN",
		7:  "EMPTY",
		8:  "NOT_EMPTY",
		9:  "CONTAINS",
		10: "NOT_CONTAINS",
		11: "EVAL",
		12: "MANUAL_EVAL",
	}
	AssertionOperatorTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"EQUALS":                1,
		"NOT_EQUALS":            2,
		"IN":                    3,
		"NOT_IN":                4,
		"GREATER_THAN":          5,
		"LESS_THAN":             6,
		"EMPTY":                 7,
		"NOT_EMPTY":             8,
		"CONTAINS":              9,
		"NOT_CONTAINS":          10,
		"EVAL":                  11,
		"MANUAL_EVAL":           12,
	}
)

func (x AssertionOperatorTypeCode_Value) Enum() *AssertionOperatorTypeCode_Value {
	p := new(AssertionOperatorTypeCode_Value)
	*p = x
	return p
}

func (x AssertionOperatorTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssertionOperatorTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[24].Descriptor()
}

func (AssertionOperatorTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[24]
}

func (x AssertionOperatorTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssertionOperatorTypeCode_Value.Descriptor instead.
func (AssertionOperatorTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{24, 0}
}

type AssertionResponseTypesCode_Value int32

const (
	AssertionResponseTypesCode_INVALID_UNINITIALIZED         AssertionResponseTypesCode_Value = 0
	AssertionResponseTypesCode_CONTINUE                      AssertionResponseTypesCode_Value = 13
	AssertionResponseTypesCode_SWITCHING_PROTOCOLS           AssertionResponseTypesCode_Value = 14
	AssertionResponseTypesCode_OKAY                          AssertionResponseTypesCode_Value = 1
	AssertionResponseTypesCode_CREATED                       AssertionResponseTypesCode_Value = 2
	AssertionResponseTypesCode_ACCEPTED                      AssertionResponseTypesCode_Value = 15
	AssertionResponseTypesCode_NON_AUTHORITATIVE_INFORMATION AssertionResponseTypesCode_Value = 16
	AssertionResponseTypesCode_NO_CONTENT                    AssertionResponseTypesCode_Value = 3
	AssertionResponseTypesCode_RESET_CONTENT                 AssertionResponseTypesCode_Value = 17
	AssertionResponseTypesCode_PARTIAL_CONTENT               AssertionResponseTypesCode_Value = 18
	AssertionResponseTypesCode_MULTIPLE_CHOICES              AssertionResponseTypesCode_Value = 19
	AssertionResponseTypesCode_MOVED_PERMANENTLY             AssertionResponseTypesCode_Value = 20
	AssertionResponseTypesCode_FOUND                         AssertionResponseTypesCode_Value = 21
	AssertionResponseTypesCode_SEE_OTHER                     AssertionResponseTypesCode_Value = 22
	AssertionResponseTypesCode_NOT_MODIFIED                  AssertionResponseTypesCode_Value = 4
	AssertionResponseTypesCode_USE_PROXY                     AssertionResponseTypesCode_Value = 23
	AssertionResponseTypesCode_TEMPORARY_REDIRECT            AssertionResponseTypesCode_Value = 24
	AssertionResponseTypesCode_PERMANENT_REDIRECT            AssertionResponseTypesCode_Value = 25
	AssertionResponseTypesCode_BAD_REQUEST                   AssertionResponseTypesCode_Value = 26
	AssertionResponseTypesCode_UNAUTHORIZED                  AssertionResponseTypesCode_Value = 27
	AssertionResponseTypesCode_PAYMENT_REQUIRED              AssertionResponseTypesCode_Value = 28
	AssertionResponseTypesCode_FORBIDDEN                     AssertionResponseTypesCode_Value = 6
	AssertionResponseTypesCode_NOT_FOUND                     AssertionResponseTypesCode_Value = 7
	AssertionResponseTypesCode_METHOD_NOT_ALLOWED            AssertionResponseTypesCode_Value = 8
	AssertionResponseTypesCode_NOT_ACCEPTABLE                AssertionResponseTypesCode_Value = 29
	AssertionResponseTypesCode_PROXY_AUTHENTICATION_REQUIRED AssertionResponseTypesCode_Value = 30
	AssertionResponseTypesCode_REQUEST_TIMEOUT               AssertionResponseTypesCode_Value = 31
	AssertionResponseTypesCode_CONFLICT                      AssertionResponseTypesCode_Value = 9
	AssertionResponseTypesCode_GONE                          AssertionResponseTypesCode_Value = 10
	AssertionResponseTypesCode_LENGTH_REQUIRED               AssertionResponseTypesCode_Value = 32
	AssertionResponseTypesCode_PRECONDITION_FAILED           AssertionResponseTypesCode_Value = 11
	AssertionResponseTypesCode_CONTENT_TOO_LARGE             AssertionResponseTypesCode_Value = 33
	AssertionResponseTypesCode_URI_TOO_LONG                  AssertionResponseTypesCode_Value = 34
	AssertionResponseTypesCode_UNSUPPORTED_MEDIA_TYPE        AssertionResponseTypesCode_Value = 35
	AssertionResponseTypesCode_RANGE_NOT_SATISFIABLE         AssertionResponseTypesCode_Value = 36
	AssertionResponseTypesCode_EXPECTATION_FAILED            AssertionResponseTypesCode_Value = 37
	AssertionResponseTypesCode_MISDIRECTED_REQUEST           AssertionResponseTypesCode_Value = 38
	AssertionResponseTypesCode_UNPROCESSABLE_CONTENT         AssertionResponseTypesCode_Value = 39
	AssertionResponseTypesCode_UPGRADE_REQUIRED              AssertionResponseTypesCode_Value = 40
	AssertionResponseTypesCode_INTERNAL_SERVER_ERROR         AssertionResponseTypesCode_Value = 41
	AssertionResponseTypesCode_NOT_IMPLEMENTED               AssertionResponseTypesCode_Value = 42
	AssertionResponseTypesCode_BAD_GATEWAY                   AssertionResponseTypesCode_Value = 43
	AssertionResponseTypesCode_SERVICE_UNAVAILABLE           AssertionResponseTypesCode_Value = 44
	AssertionResponseTypesCode_GATEWAY_TIMEOUT               AssertionResponseTypesCode_Value = 45
	AssertionResponseTypesCode_HTTP_VERSION_NOT_SUPPORTED    AssertionResponseTypesCode_Value = 46
)

// Enum value maps for AssertionResponseTypesCode_Value.
var (
	AssertionResponseTypesCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		13: "CONTINUE",
		14: "SWITCHING_PROTOCOLS",
		1:  "OKAY",
		2:  "CREATED",
		15: "ACCEPTED",
		16: "NON_AUTHORITATIVE_INFORMATION",
		3:  "NO_CONTENT",
		17: "RESET_CONTENT",
		18: "PARTIAL_CONTENT",
		19: "MULTIPLE_CHOICES",
		20: "MOVED_PERMANENTLY",
		21: "FOUND",
		22: "SEE_OTHER",
		4:  "NOT_MODIFIED",
		23: "USE_PROXY",
		24: "TEMPORARY_REDIRECT",
		25: "PERMANENT_REDIRECT",
		26: "BAD_REQUEST",
		27: "UNAUTHORIZED",
		28: "PAYMENT_REQUIRED",
		6:  "FORBIDDEN",
		7:  "NOT_FOUND",
		8:  "METHOD_NOT_ALLOWED",
		29: "NOT_ACCEPTABLE",
		30: "PROXY_AUTHENTICATION_REQUIRED",
		31: "REQUEST_TIMEOUT",
		9:  "CONFLICT",
		10: "GONE",
		32: "LENGTH_REQUIRED",
		11: "PRECONDITION_FAILED",
		33: "CONTENT_TOO_LARGE",
		34: "URI_TOO_LONG",
		35: "UNSUPPORTED_MEDIA_TYPE",
		36: "RANGE_NOT_SATISFIABLE",
		37: "EXPECTATION_FAILED",
		38: "MISDIRECTED_REQUEST",
		39: "UNPROCESSABLE_CONTENT",
		40: "UPGRADE_REQUIRED",
		41: "INTERNAL_SERVER_ERROR",
		42: "NOT_IMPLEMENTED",
		43: "BAD_GATEWAY",
		44: "SERVICE_UNAVAILABLE",
		45: "GATEWAY_TIMEOUT",
		46: "HTTP_VERSION_NOT_SUPPORTED",
	}
	AssertionResponseTypesCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":         0,
		"CONTINUE":                      13,
		"SWITCHING_PROTOCOLS":           14,
		"OKAY":                          1,
		"CREATED":                       2,
		"ACCEPTED":                      15,
		"NON_AUTHORITATIVE_INFORMATION": 16,
		"NO_CONTENT":                    3,
		"RESET_CONTENT":                 17,
		"PARTIAL_CONTENT":               18,
		"MULTIPLE_CHOICES":              19,
		"MOVED_PERMANENTLY":             20,
		"FOUND":                         21,
		"SEE_OTHER":                     22,
		"NOT_MODIFIED":                  4,
		"USE_PROXY":                     23,
		"TEMPORARY_REDIRECT":            24,
		"PERMANENT_REDIRECT":            25,
		"BAD_REQUEST":                   26,
		"UNAUTHORIZED":                  27,
		"PAYMENT_REQUIRED":              28,
		"FORBIDDEN":                     6,
		"NOT_FOUND":                     7,
		"METHOD_NOT_ALLOWED":            8,
		"NOT_ACCEPTABLE":                29,
		"PROXY_AUTHENTICATION_REQUIRED": 30,
		"REQUEST_TIMEOUT":               31,
		"CONFLICT":                      9,
		"GONE":                          10,
		"LENGTH_REQUIRED":               32,
		"PRECONDITION_FAILED":           11,
		"CONTENT_TOO_LARGE":             33,
		"URI_TOO_LONG":                  34,
		"UNSUPPORTED_MEDIA_TYPE":        35,
		"RANGE_NOT_SATISFIABLE":         36,
		"EXPECTATION_FAILED":            37,
		"MISDIRECTED_REQUEST":           38,
		"UNPROCESSABLE_CONTENT":         39,
		"UPGRADE_REQUIRED":              40,
		"INTERNAL_SERVER_ERROR":         41,
		"NOT_IMPLEMENTED":               42,
		"BAD_GATEWAY":                   43,
		"SERVICE_UNAVAILABLE":           44,
		"GATEWAY_TIMEOUT":               45,
		"HTTP_VERSION_NOT_SUPPORTED":    46,
	}
)

func (x AssertionResponseTypesCode_Value) Enum() *AssertionResponseTypesCode_Value {
	p := new(AssertionResponseTypesCode_Value)
	*p = x
	return p
}

func (x AssertionResponseTypesCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssertionResponseTypesCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[25].Descriptor()
}

func (AssertionResponseTypesCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[25]
}

func (x AssertionResponseTypesCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssertionResponseTypesCode_Value.Descriptor instead.
func (AssertionResponseTypesCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{25, 0}
}

type AuditEventActionCode_Value int32

const (
	AuditEventActionCode_INVALID_UNINITIALIZED AuditEventActionCode_Value = 0
	AuditEventActionCode_C                     AuditEventActionCode_Value = 1
	AuditEventActionCode_R                     AuditEventActionCode_Value = 2
	AuditEventActionCode_U                     AuditEventActionCode_Value = 3
	AuditEventActionCode_D                     AuditEventActionCode_Value = 4
	AuditEventActionCode_E                     AuditEventActionCode_Value = 5
)

// Enum value maps for AuditEventActionCode_Value.
var (
	AuditEventActionCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "C",
		2: "R",
		3: "U",
		4: "D",
		5: "E",
	}
	AuditEventActionCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"C":                     1,
		"R":                     2,
		"U":                     3,
		"D":                     4,
		"E":                     5,
	}
)

func (x AuditEventActionCode_Value) Enum() *AuditEventActionCode_Value {
	p := new(AuditEventActionCode_Value)
	*p = x
	return p
}

func (x AuditEventActionCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuditEventActionCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[26].Descriptor()
}

func (AuditEventActionCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[26]
}

func (x AuditEventActionCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuditEventActionCode_Value.Descriptor instead.
func (AuditEventActionCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{26, 0}
}

type AuditEventSeverityCode_Value int32

const (
	AuditEventSeverityCode_INVALID_UNINITIALIZED AuditEventSeverityCode_Value = 0
	AuditEventSeverityCode_EMERGENCY             AuditEventSeverityCode_Value = 1
	AuditEventSeverityCode_ALERT                 AuditEventSeverityCode_Value = 2
	AuditEventSeverityCode_CRITICAL              AuditEventSeverityCode_Value = 3
	AuditEventSeverityCode_ERROR                 AuditEventSeverityCode_Value = 4
	AuditEventSeverityCode_WARNING               AuditEventSeverityCode_Value = 5
	AuditEventSeverityCode_NOTICE                AuditEventSeverityCode_Value = 6
	AuditEventSeverityCode_INFORMATIONAL         AuditEventSeverityCode_Value = 7
	AuditEventSeverityCode_DEBUG                 AuditEventSeverityCode_Value = 8
)

// Enum value maps for AuditEventSeverityCode_Value.
var (
	AuditEventSeverityCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "EMERGENCY",
		2: "ALERT",
		3: "CRITICAL",
		4: "ERROR",
		5: "WARNING",
		6: "NOTICE",
		7: "INFORMATIONAL",
		8: "DEBUG",
	}
	AuditEventSeverityCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"EMERGENCY":             1,
		"ALERT":                 2,
		"CRITICAL":              3,
		"ERROR":                 4,
		"WARNING":               5,
		"NOTICE":                6,
		"INFORMATIONAL":         7,
		"DEBUG":                 8,
	}
)

func (x AuditEventSeverityCode_Value) Enum() *AuditEventSeverityCode_Value {
	p := new(AuditEventSeverityCode_Value)
	*p = x
	return p
}

func (x AuditEventSeverityCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuditEventSeverityCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[27].Descriptor()
}

func (AuditEventSeverityCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[27]
}

func (x AuditEventSeverityCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuditEventSeverityCode_Value.Descriptor instead.
func (AuditEventSeverityCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{27, 0}
}

type BindingStrengthCode_Value int32

const (
	BindingStrengthCode_INVALID_UNINITIALIZED BindingStrengthCode_Value = 0
	BindingStrengthCode_REQUIRED              BindingStrengthCode_Value = 1
	BindingStrengthCode_EXTENSIBLE            BindingStrengthCode_Value = 2
	BindingStrengthCode_PREFERRED             BindingStrengthCode_Value = 3
	BindingStrengthCode_EXAMPLE               BindingStrengthCode_Value = 4
)

// Enum value maps for BindingStrengthCode_Value.
var (
	BindingStrengthCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "REQUIRED",
		2: "EXTENSIBLE",
		3: "PREFERRED",
		4: "EXAMPLE",
	}
	BindingStrengthCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"REQUIRED":              1,
		"EXTENSIBLE":            2,
		"PREFERRED":             3,
		"EXAMPLE":               4,
	}
)

func (x BindingStrengthCode_Value) Enum() *BindingStrengthCode_Value {
	p := new(BindingStrengthCode_Value)
	*p = x
	return p
}

func (x BindingStrengthCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BindingStrengthCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[28].Descriptor()
}

func (BindingStrengthCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[28]
}

func (x BindingStrengthCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BindingStrengthCode_Value.Descriptor instead.
func (BindingStrengthCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{28, 0}
}

type BiologicallyDerivedProductDispenseCode_Value int32

const (
	BiologicallyDerivedProductDispenseCode_INVALID_UNINITIALIZED BiologicallyDerivedProductDispenseCode_Value = 0
	BiologicallyDerivedProductDispenseCode_PREPARATION           BiologicallyDerivedProductDispenseCode_Value = 1
	BiologicallyDerivedProductDispenseCode_IN_PROGRESS           BiologicallyDerivedProductDispenseCode_Value = 2
	BiologicallyDerivedProductDispenseCode_ALLOCATED             BiologicallyDerivedProductDispenseCode_Value = 3
	BiologicallyDerivedProductDispenseCode_ISSUED                BiologicallyDerivedProductDispenseCode_Value = 4
	BiologicallyDerivedProductDispenseCode_UNFULFILLED           BiologicallyDerivedProductDispenseCode_Value = 5
	BiologicallyDerivedProductDispenseCode_RETURNED              BiologicallyDerivedProductDispenseCode_Value = 6
	BiologicallyDerivedProductDispenseCode_ENTERED_IN_ERROR      BiologicallyDerivedProductDispenseCode_Value = 7
	BiologicallyDerivedProductDispenseCode_UNKNOWN               BiologicallyDerivedProductDispenseCode_Value = 8
)

// Enum value maps for BiologicallyDerivedProductDispenseCode_Value.
var (
	BiologicallyDerivedProductDispenseCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PREPARATION",
		2: "IN_PROGRESS",
		3: "ALLOCATED",
		4: "ISSUED",
		5: "UNFULFILLED",
		6: "RETURNED",
		7: "ENTERED_IN_ERROR",
		8: "UNKNOWN",
	}
	BiologicallyDerivedProductDispenseCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PREPARATION":           1,
		"IN_PROGRESS":           2,
		"ALLOCATED":             3,
		"ISSUED":                4,
		"UNFULFILLED":           5,
		"RETURNED":              6,
		"ENTERED_IN_ERROR":      7,
		"UNKNOWN":               8,
	}
)

func (x BiologicallyDerivedProductDispenseCode_Value) Enum() *BiologicallyDerivedProductDispenseCode_Value {
	p := new(BiologicallyDerivedProductDispenseCode_Value)
	*p = x
	return p
}

func (x BiologicallyDerivedProductDispenseCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BiologicallyDerivedProductDispenseCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[29].Descriptor()
}

func (BiologicallyDerivedProductDispenseCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[29]
}

func (x BiologicallyDerivedProductDispenseCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BiologicallyDerivedProductDispenseCode_Value.Descriptor instead.
func (BiologicallyDerivedProductDispenseCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{29, 0}
}

type BundleTypeCode_Value int32

const (
	BundleTypeCode_INVALID_UNINITIALIZED     BundleTypeCode_Value = 0
	BundleTypeCode_DOCUMENT                  BundleTypeCode_Value = 1
	BundleTypeCode_MESSAGE                   BundleTypeCode_Value = 2
	BundleTypeCode_TRANSACTION               BundleTypeCode_Value = 3
	BundleTypeCode_TRANSACTION_RESPONSE      BundleTypeCode_Value = 4
	BundleTypeCode_BATCH                     BundleTypeCode_Value = 5
	BundleTypeCode_BATCH_RESPONSE            BundleTypeCode_Value = 6
	BundleTypeCode_HISTORY                   BundleTypeCode_Value = 7
	BundleTypeCode_SEARCHSET                 BundleTypeCode_Value = 8
	BundleTypeCode_COLLECTION                BundleTypeCode_Value = 9
	BundleTypeCode_SUBSCRIPTION_NOTIFICATION BundleTypeCode_Value = 10
)

// Enum value maps for BundleTypeCode_Value.
var (
	BundleTypeCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "DOCUMENT",
		2:  "MESSAGE",
		3:  "TRANSACTION",
		4:  "TRANSACTION_RESPONSE",
		5:  "BATCH",
		6:  "BATCH_RESPONSE",
		7:  "HISTORY",
		8:  "SEARCHSET",
		9:  "COLLECTION",
		10: "SUBSCRIPTION_NOTIFICATION",
	}
	BundleTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":     0,
		"DOCUMENT":                  1,
		"MESSAGE":                   2,
		"TRANSACTION":               3,
		"TRANSACTION_RESPONSE":      4,
		"BATCH":                     5,
		"BATCH_RESPONSE":            6,
		"HISTORY":                   7,
		"SEARCHSET":                 8,
		"COLLECTION":                9,
		"SUBSCRIPTION_NOTIFICATION": 10,
	}
)

func (x BundleTypeCode_Value) Enum() *BundleTypeCode_Value {
	p := new(BundleTypeCode_Value)
	*p = x
	return p
}

func (x BundleTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BundleTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[30].Descriptor()
}

func (BundleTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[30]
}

func (x BundleTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BundleTypeCode_Value.Descriptor instead.
func (BundleTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{30, 0}
}

type CapabilityStatementKindCode_Value int32

const (
	CapabilityStatementKindCode_INVALID_UNINITIALIZED CapabilityStatementKindCode_Value = 0
	CapabilityStatementKindCode_INSTANCE              CapabilityStatementKindCode_Value = 1
	CapabilityStatementKindCode_CAPABILITY            CapabilityStatementKindCode_Value = 2
	CapabilityStatementKindCode_REQUIREMENTS          CapabilityStatementKindCode_Value = 3
)

// Enum value maps for CapabilityStatementKindCode_Value.
var (
	CapabilityStatementKindCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "INSTANCE",
		2: "CAPABILITY",
		3: "REQUIREMENTS",
	}
	CapabilityStatementKindCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"INSTANCE":              1,
		"CAPABILITY":            2,
		"REQUIREMENTS":          3,
	}
)

func (x CapabilityStatementKindCode_Value) Enum() *CapabilityStatementKindCode_Value {
	p := new(CapabilityStatementKindCode_Value)
	*p = x
	return p
}

func (x CapabilityStatementKindCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CapabilityStatementKindCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[31].Descriptor()
}

func (CapabilityStatementKindCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[31]
}

func (x CapabilityStatementKindCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CapabilityStatementKindCode_Value.Descriptor instead.
func (CapabilityStatementKindCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{31, 0}
}

type CareTeamStatusCode_Value int32

const (
	CareTeamStatusCode_INVALID_UNINITIALIZED CareTeamStatusCode_Value = 0
	CareTeamStatusCode_PROPOSED              CareTeamStatusCode_Value = 1
	CareTeamStatusCode_ACTIVE                CareTeamStatusCode_Value = 2
	CareTeamStatusCode_SUSPENDED             CareTeamStatusCode_Value = 3
	CareTeamStatusCode_INACTIVE              CareTeamStatusCode_Value = 4
	CareTeamStatusCode_ENTERED_IN_ERROR      CareTeamStatusCode_Value = 5
)

// Enum value maps for CareTeamStatusCode_Value.
var (
	CareTeamStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PROPOSED",
		2: "ACTIVE",
		3: "SUSPENDED",
		4: "INACTIVE",
		5: "ENTERED_IN_ERROR",
	}
	CareTeamStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PROPOSED":              1,
		"ACTIVE":                2,
		"SUSPENDED":             3,
		"INACTIVE":              4,
		"ENTERED_IN_ERROR":      5,
	}
)

func (x CareTeamStatusCode_Value) Enum() *CareTeamStatusCode_Value {
	p := new(CareTeamStatusCode_Value)
	*p = x
	return p
}

func (x CareTeamStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CareTeamStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[32].Descriptor()
}

func (CareTeamStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[32]
}

func (x CareTeamStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CareTeamStatusCode_Value.Descriptor instead.
func (CareTeamStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{32, 0}
}

type CharacteristicCombinationCode_Value int32

const (
	CharacteristicCombinationCode_INVALID_UNINITIALIZED CharacteristicCombinationCode_Value = 0
	CharacteristicCombinationCode_ALL_OF                CharacteristicCombinationCode_Value = 1
	CharacteristicCombinationCode_ANY_OF                CharacteristicCombinationCode_Value = 2
	CharacteristicCombinationCode_AT_LEAST              CharacteristicCombinationCode_Value = 3
	CharacteristicCombinationCode_AT_MOST               CharacteristicCombinationCode_Value = 4
	CharacteristicCombinationCode_STATISTICAL           CharacteristicCombinationCode_Value = 5
	CharacteristicCombinationCode_NET_EFFECT            CharacteristicCombinationCode_Value = 6
	CharacteristicCombinationCode_DATASET               CharacteristicCombinationCode_Value = 7
)

// Enum value maps for CharacteristicCombinationCode_Value.
var (
	CharacteristicCombinationCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ALL_OF",
		2: "ANY_OF",
		3: "AT_LEAST",
		4: "AT_MOST",
		5: "STATISTICAL",
		6: "NET_EFFECT",
		7: "DATASET",
	}
	CharacteristicCombinationCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ALL_OF":                1,
		"ANY_OF":                2,
		"AT_LEAST":              3,
		"AT_MOST":               4,
		"STATISTICAL":           5,
		"NET_EFFECT":            6,
		"DATASET":               7,
	}
)

func (x CharacteristicCombinationCode_Value) Enum() *CharacteristicCombinationCode_Value {
	p := new(CharacteristicCombinationCode_Value)
	*p = x
	return p
}

func (x CharacteristicCombinationCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CharacteristicCombinationCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[33].Descriptor()
}

func (CharacteristicCombinationCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[33]
}

func (x CharacteristicCombinationCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CharacteristicCombinationCode_Value.Descriptor instead.
func (CharacteristicCombinationCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{33, 0}
}

type ChargeItemStatusCode_Value int32

const (
	ChargeItemStatusCode_INVALID_UNINITIALIZED ChargeItemStatusCode_Value = 0
	ChargeItemStatusCode_PLANNED               ChargeItemStatusCode_Value = 1
	ChargeItemStatusCode_BILLABLE              ChargeItemStatusCode_Value = 2
	ChargeItemStatusCode_NOT_BILLABLE          ChargeItemStatusCode_Value = 3
	ChargeItemStatusCode_ABORTED               ChargeItemStatusCode_Value = 4
	ChargeItemStatusCode_BILLED                ChargeItemStatusCode_Value = 5
	ChargeItemStatusCode_ENTERED_IN_ERROR      ChargeItemStatusCode_Value = 6
	ChargeItemStatusCode_UNKNOWN               ChargeItemStatusCode_Value = 7
)

// Enum value maps for ChargeItemStatusCode_Value.
var (
	ChargeItemStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PLANNED",
		2: "BILLABLE",
		3: "NOT_BILLABLE",
		4: "ABORTED",
		5: "BILLED",
		6: "ENTERED_IN_ERROR",
		7: "UNKNOWN",
	}
	ChargeItemStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PLANNED":               1,
		"BILLABLE":              2,
		"NOT_BILLABLE":          3,
		"ABORTED":               4,
		"BILLED":                5,
		"ENTERED_IN_ERROR":      6,
		"UNKNOWN":               7,
	}
)

func (x ChargeItemStatusCode_Value) Enum() *ChargeItemStatusCode_Value {
	p := new(ChargeItemStatusCode_Value)
	*p = x
	return p
}

func (x ChargeItemStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChargeItemStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[34].Descriptor()
}

func (ChargeItemStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[34]
}

func (x ChargeItemStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChargeItemStatusCode_Value.Descriptor instead.
func (ChargeItemStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{34, 0}
}

type ClaimProcessingOutcomeCode_Value int32

const (
	ClaimProcessingOutcomeCode_INVALID_UNINITIALIZED ClaimProcessingOutcomeCode_Value = 0
	ClaimProcessingOutcomeCode_QUEUED                ClaimProcessingOutcomeCode_Value = 1
	ClaimProcessingOutcomeCode_COMPLETE              ClaimProcessingOutcomeCode_Value = 2
	ClaimProcessingOutcomeCode_ERROR                 ClaimProcessingOutcomeCode_Value = 3
	ClaimProcessingOutcomeCode_PARTIAL               ClaimProcessingOutcomeCode_Value = 4
)

// Enum value maps for ClaimProcessingOutcomeCode_Value.
var (
	ClaimProcessingOutcomeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "QUEUED",
		2: "COMPLETE",
		3: "ERROR",
		4: "PARTIAL",
	}
	ClaimProcessingOutcomeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"QUEUED":                1,
		"COMPLETE":              2,
		"ERROR":                 3,
		"PARTIAL":               4,
	}
)

func (x ClaimProcessingOutcomeCode_Value) Enum() *ClaimProcessingOutcomeCode_Value {
	p := new(ClaimProcessingOutcomeCode_Value)
	*p = x
	return p
}

func (x ClaimProcessingOutcomeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClaimProcessingOutcomeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[35].Descriptor()
}

func (ClaimProcessingOutcomeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[35]
}

func (x ClaimProcessingOutcomeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClaimProcessingOutcomeCode_Value.Descriptor instead.
func (ClaimProcessingOutcomeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{35, 0}
}

type ClinicalUseDefinitionTypeCode_Value int32

const (
	ClinicalUseDefinitionTypeCode_INVALID_UNINITIALIZED ClinicalUseDefinitionTypeCode_Value = 0
	ClinicalUseDefinitionTypeCode_INDICATION            ClinicalUseDefinitionTypeCode_Value = 1
	ClinicalUseDefinitionTypeCode_CONTRAINDICATION      ClinicalUseDefinitionTypeCode_Value = 2
	ClinicalUseDefinitionTypeCode_INTERACTION           ClinicalUseDefinitionTypeCode_Value = 3
	ClinicalUseDefinitionTypeCode_UNDESIRABLE_EFFECT    ClinicalUseDefinitionTypeCode_Value = 4
	ClinicalUseDefinitionTypeCode_WARNING               ClinicalUseDefinitionTypeCode_Value = 5
)

// Enum value maps for ClinicalUseDefinitionTypeCode_Value.
var (
	ClinicalUseDefinitionTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "INDICATION",
		2: "CONTRAINDICATION",
		3: "INTERACTION",
		4: "UNDESIRABLE_EFFECT",
		5: "WARNING",
	}
	ClinicalUseDefinitionTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"INDICATION":            1,
		"CONTRAINDICATION":      2,
		"INTERACTION":           3,
		"UNDESIRABLE_EFFECT":    4,
		"WARNING":               5,
	}
)

func (x ClinicalUseDefinitionTypeCode_Value) Enum() *ClinicalUseDefinitionTypeCode_Value {
	p := new(ClinicalUseDefinitionTypeCode_Value)
	*p = x
	return p
}

func (x ClinicalUseDefinitionTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClinicalUseDefinitionTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[36].Descriptor()
}

func (ClinicalUseDefinitionTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[36]
}

func (x ClinicalUseDefinitionTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClinicalUseDefinitionTypeCode_Value.Descriptor instead.
func (ClinicalUseDefinitionTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{36, 0}
}

type CodeSearchSupportCode_Value int32

const (
	CodeSearchSupportCode_INVALID_UNINITIALIZED   CodeSearchSupportCode_Value = 0
	CodeSearchSupportCode_IN_COMPOSE              CodeSearchSupportCode_Value = 3
	CodeSearchSupportCode_IN_EXPANSION            CodeSearchSupportCode_Value = 4
	CodeSearchSupportCode_IN_COMPOSE_OR_EXPANSION CodeSearchSupportCode_Value = 5
)

// Enum value maps for CodeSearchSupportCode_Value.
var (
	CodeSearchSupportCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		3: "IN_COMPOSE",
		4: "IN_EXPANSION",
		5: "IN_COMPOSE_OR_EXPANSION",
	}
	CodeSearchSupportCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":   0,
		"IN_COMPOSE":              3,
		"IN_EXPANSION":            4,
		"IN_COMPOSE_OR_EXPANSION": 5,
	}
)

func (x CodeSearchSupportCode_Value) Enum() *CodeSearchSupportCode_Value {
	p := new(CodeSearchSupportCode_Value)
	*p = x
	return p
}

func (x CodeSearchSupportCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CodeSearchSupportCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[37].Descriptor()
}

func (CodeSearchSupportCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[37]
}

func (x CodeSearchSupportCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CodeSearchSupportCode_Value.Descriptor instead.
func (CodeSearchSupportCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{37, 0}
}

type CodeSystemContentModeCode_Value int32

const (
	CodeSystemContentModeCode_INVALID_UNINITIALIZED CodeSystemContentModeCode_Value = 0
	CodeSystemContentModeCode_NOT_PRESENT           CodeSystemContentModeCode_Value = 1
	CodeSystemContentModeCode_EXAMPLE               CodeSystemContentModeCode_Value = 2
	CodeSystemContentModeCode_FRAGMENT              CodeSystemContentModeCode_Value = 3
	CodeSystemContentModeCode_COMPLETE              CodeSystemContentModeCode_Value = 4
	CodeSystemContentModeCode_SUPPLEMENT            CodeSystemContentModeCode_Value = 5
)

// Enum value maps for CodeSystemContentModeCode_Value.
var (
	CodeSystemContentModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "NOT_PRESENT",
		2: "EXAMPLE",
		3: "FRAGMENT",
		4: "COMPLETE",
		5: "SUPPLEMENT",
	}
	CodeSystemContentModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NOT_PRESENT":           1,
		"EXAMPLE":               2,
		"FRAGMENT":              3,
		"COMPLETE":              4,
		"SUPPLEMENT":            5,
	}
)

func (x CodeSystemContentModeCode_Value) Enum() *CodeSystemContentModeCode_Value {
	p := new(CodeSystemContentModeCode_Value)
	*p = x
	return p
}

func (x CodeSystemContentModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CodeSystemContentModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[38].Descriptor()
}

func (CodeSystemContentModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[38]
}

func (x CodeSystemContentModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CodeSystemContentModeCode_Value.Descriptor instead.
func (CodeSystemContentModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{38, 0}
}

type CodeSystemHierarchyMeaningCode_Value int32

const (
	CodeSystemHierarchyMeaningCode_INVALID_UNINITIALIZED CodeSystemHierarchyMeaningCode_Value = 0
	CodeSystemHierarchyMeaningCode_GROUPED_BY            CodeSystemHierarchyMeaningCode_Value = 1
	CodeSystemHierarchyMeaningCode_IS_A                  CodeSystemHierarchyMeaningCode_Value = 2
	CodeSystemHierarchyMeaningCode_PART_OF               CodeSystemHierarchyMeaningCode_Value = 3
	CodeSystemHierarchyMeaningCode_CLASSIFIED_WITH       CodeSystemHierarchyMeaningCode_Value = 4
)

// Enum value maps for CodeSystemHierarchyMeaningCode_Value.
var (
	CodeSystemHierarchyMeaningCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "GROUPED_BY",
		2: "IS_A",
		3: "PART_OF",
		4: "CLASSIFIED_WITH",
	}
	CodeSystemHierarchyMeaningCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"GROUPED_BY":            1,
		"IS_A":                  2,
		"PART_OF":               3,
		"CLASSIFIED_WITH":       4,
	}
)

func (x CodeSystemHierarchyMeaningCode_Value) Enum() *CodeSystemHierarchyMeaningCode_Value {
	p := new(CodeSystemHierarchyMeaningCode_Value)
	*p = x
	return p
}

func (x CodeSystemHierarchyMeaningCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CodeSystemHierarchyMeaningCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[39].Descriptor()
}

func (CodeSystemHierarchyMeaningCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[39]
}

func (x CodeSystemHierarchyMeaningCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CodeSystemHierarchyMeaningCode_Value.Descriptor instead.
func (CodeSystemHierarchyMeaningCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{39, 0}
}

type ColorCode_Value int32

const (
	ColorCode_INVALID_UNINITIALIZED ColorCode_Value = 0
	ColorCode_ALICEBLUE             ColorCode_Value = 1
	ColorCode_ANTIQUEWHITE          ColorCode_Value = 2
	ColorCode_AQUA                  ColorCode_Value = 3
	ColorCode_AQUAMARINE            ColorCode_Value = 4
	ColorCode_AZURE                 ColorCode_Value = 5
	ColorCode_BEIGE                 ColorCode_Value = 6
	ColorCode_BISQUE                ColorCode_Value = 7
	ColorCode_BLACK                 ColorCode_Value = 8
	ColorCode_BLANCHEDALMOND        ColorCode_Value = 9
	ColorCode_BLUE                  ColorCode_Value = 10
	ColorCode_BLUEVIOLET            ColorCode_Value = 11
	ColorCode_BROWN                 ColorCode_Value = 12
	ColorCode_BURLYWOOD             ColorCode_Value = 13
	ColorCode_CADETBLUE             ColorCode_Value = 14
	ColorCode_CHARTREUSE            ColorCode_Value = 15
	ColorCode_CHOCOLATE             ColorCode_Value = 16
	ColorCode_CORAL                 ColorCode_Value = 17
	ColorCode_CORNFLOWERBLUE        ColorCode_Value = 18
	ColorCode_CORNSILK              ColorCode_Value = 19
	ColorCode_CRIMSON               ColorCode_Value = 20
	ColorCode_CYAN                  ColorCode_Value = 21
	ColorCode_DARKBLUE              ColorCode_Value = 22
	ColorCode_DARKCYAN              ColorCode_Value = 23
	ColorCode_DARKGOLDENROD         ColorCode_Value = 24
	ColorCode_DARKGRAY              ColorCode_Value = 25
	ColorCode_DARKGREEN             ColorCode_Value = 26
	ColorCode_DARKGREY              ColorCode_Value = 27
	ColorCode_DARKKHAKI             ColorCode_Value = 28
	ColorCode_DARKMAGENTA           ColorCode_Value = 29
	ColorCode_DARKOLIVEGREEN        ColorCode_Value = 30
	ColorCode_DARKORANGE            ColorCode_Value = 31
	ColorCode_DARKORCHID            ColorCode_Value = 32
	ColorCode_DARKRED               ColorCode_Value = 33
	ColorCode_DARKSALMON            ColorCode_Value = 34
	ColorCode_DARKSEAGREEN          ColorCode_Value = 35
	ColorCode_DARKSLATEBLUE         ColorCode_Value = 36
	ColorCode_DARKSLATEGRAY         ColorCode_Value = 37
	ColorCode_DARKSLATEGREY         ColorCode_Value = 38
	ColorCode_DARKTURQUOISE         ColorCode_Value = 39
	ColorCode_DARKVIOLET            ColorCode_Value = 40
	ColorCode_DEEPPINK              ColorCode_Value = 41
	ColorCode_DEEPSKYBLUE           ColorCode_Value = 42
	ColorCode_DIMGRAY               ColorCode_Value = 43
	ColorCode_DIMGREY               ColorCode_Value = 44
	ColorCode_DODGERBLUE            ColorCode_Value = 45
	ColorCode_FIREBRICK             ColorCode_Value = 46
	ColorCode_FLORALWHITE           ColorCode_Value = 47
	ColorCode_FORESTGREEN           ColorCode_Value = 48
	ColorCode_FUCHSIA               ColorCode_Value = 49
	ColorCode_GAINSBORO             ColorCode_Value = 50
	ColorCode_GHOSTWHITE            ColorCode_Value = 51
	ColorCode_GOLD                  ColorCode_Value = 52
	ColorCode_GOLDENROD             ColorCode_Value = 53
	ColorCode_GRAY                  ColorCode_Value = 54
	ColorCode_GREEN                 ColorCode_Value = 55
	ColorCode_GREENYELLOW           ColorCode_Value = 56
	ColorCode_GREY                  ColorCode_Value = 57
	ColorCode_HONEYDEW              ColorCode_Value = 58
	ColorCode_HOTPINK               ColorCode_Value = 59
	ColorCode_INDIANRED             ColorCode_Value = 60
	ColorCode_INDIGO                ColorCode_Value = 61
	ColorCode_IVORY                 ColorCode_Value = 62
	ColorCode_KHAKI                 ColorCode_Value = 63
	ColorCode_LAVENDER              ColorCode_Value = 64
	ColorCode_LAVENDERBLUSH         ColorCode_Value = 65
	ColorCode_LAWNGREEN             ColorCode_Value = 66
	ColorCode_LEMONCHIFFON          ColorCode_Value = 67
	ColorCode_LIGHTBLUE             ColorCode_Value = 68
	ColorCode_LIGHTCORAL            ColorCode_Value = 69
	ColorCode_LIGHTCYAN             ColorCode_Value = 70
	ColorCode_LIGHTGOLDENRODYELLOW  ColorCode_Value = 71
	ColorCode_LIGHTGRAY             ColorCode_Value = 72
	ColorCode_LIGHTGREEN            ColorCode_Value = 73
	ColorCode_LIGHTGREY             ColorCode_Value = 74
	ColorCode_LIGHTPINK             ColorCode_Value = 75
	ColorCode_LIGHTSALMON           ColorCode_Value = 76
	ColorCode_LIGHTSEAGREEN         ColorCode_Value = 77
	ColorCode_LIGHTSKYBLUE          ColorCode_Value = 78
	ColorCode_LIGHTSLATEGRAY        ColorCode_Value = 79
	ColorCode_LIGHTSLATEGREY        ColorCode_Value = 80
	ColorCode_LIGHTSTEELBLUE        ColorCode_Value = 81
	ColorCode_LIGHTYELLOW           ColorCode_Value = 82
	ColorCode_LIME                  ColorCode_Value = 83
	ColorCode_LIMEGREEN             ColorCode_Value = 84
	ColorCode_LINEN                 ColorCode_Value = 85
	ColorCode_MAGENTA               ColorCode_Value = 86
	ColorCode_MAROON                ColorCode_Value = 87
	ColorCode_MEDIUMAQUAMARINE      ColorCode_Value = 88
	ColorCode_MEDIUMBLUE            ColorCode_Value = 89
	ColorCode_MEDIUMORCHID          ColorCode_Value = 90
	ColorCode_MEDIUMPURPLE          ColorCode_Value = 91
	ColorCode_MEDIUMSEAGREEN        ColorCode_Value = 92
	ColorCode_MEDIUMSLATEBLUE       ColorCode_Value = 93
	ColorCode_MEDIUMSPRINGGREEN     ColorCode_Value = 94
	ColorCode_MEDIUMTURQUOISE       ColorCode_Value = 95
	ColorCode_MEDIUMVIOLETRED       ColorCode_Value = 96
	ColorCode_MIDNIGHTBLUE          ColorCode_Value = 97
	ColorCode_MINTCREAM             ColorCode_Value = 98
	ColorCode_MISTYROSE             ColorCode_Value = 99
	ColorCode_MOCCASIN              ColorCode_Value = 100
	ColorCode_NAVAJOWHITE           ColorCode_Value = 101
	ColorCode_NAVY                  ColorCode_Value = 102
	ColorCode_OLDLACE               ColorCode_Value = 103
	ColorCode_OLIVE                 ColorCode_Value = 104
	ColorCode_OLIVEDRAB             ColorCode_Value = 105
	ColorCode_ORANGE                ColorCode_Value = 106
	ColorCode_ORANGERED             ColorCode_Value = 107
	ColorCode_ORCHID                ColorCode_Value = 108
	ColorCode_PALEGOLDENROD         ColorCode_Value = 109
	ColorCode_PALEGREEN             ColorCode_Value = 110
	ColorCode_PALETURQUOISE         ColorCode_Value = 111
	ColorCode_PALEVIOLETRED         ColorCode_Value = 112
	ColorCode_PAPAYAWHIP            ColorCode_Value = 113
	ColorCode_PEACHPUFF             ColorCode_Value = 114
	ColorCode_PERU                  ColorCode_Value = 115
	ColorCode_PINK                  ColorCode_Value = 116
	ColorCode_PLUM                  ColorCode_Value = 117
	ColorCode_POWDERBLUE            ColorCode_Value = 118
	ColorCode_PURPLE                ColorCode_Value = 119
	ColorCode_REBECCAPURPLE         ColorCode_Value = 120
	ColorCode_RED                   ColorCode_Value = 121
	ColorCode_ROSYBROWN             ColorCode_Value = 122
	ColorCode_ROYALBLUE             ColorCode_Value = 123
	ColorCode_SADDLEBROWN           ColorCode_Value = 124
	ColorCode_SALMON                ColorCode_Value = 125
	ColorCode_SANDYBROWN            ColorCode_Value = 126
	ColorCode_SEAGREEN              ColorCode_Value = 127
	ColorCode_SEASHELL              ColorCode_Value = 128
	ColorCode_SIENNA                ColorCode_Value = 129
	ColorCode_SILVER                ColorCode_Value = 130
	ColorCode_SKYBLUE               ColorCode_Value = 131
	ColorCode_SLATEBLUE             ColorCode_Value = 132
	ColorCode_SLATEGRAY             ColorCode_Value = 133
	ColorCode_SLATEGREY             ColorCode_Value = 134
	ColorCode_SNOW                  ColorCode_Value = 135
	ColorCode_SPRINGGREEN           ColorCode_Value = 136
	ColorCode_STEELBLUE             ColorCode_Value = 137
	ColorCode_TAN                   ColorCode_Value = 138
	ColorCode_TEAL                  ColorCode_Value = 139
	ColorCode_THISTLE               ColorCode_Value = 140
	ColorCode_TOMATO                ColorCode_Value = 141
	ColorCode_TURQUOISE             ColorCode_Value = 142
	ColorCode_VIOLET                ColorCode_Value = 143
	ColorCode_WHEAT                 ColorCode_Value = 144
	ColorCode_WHITE                 ColorCode_Value = 145
	ColorCode_WHITESMOKE            ColorCode_Value = 146
	ColorCode_YELLOW                ColorCode_Value = 147
	ColorCode_YELLOWGREEN           ColorCode_Value = 148
)

// Enum value maps for ColorCode_Value.
var (
	ColorCode_Value_name = map[int32]string{
		0:   "INVALID_UNINITIALIZED",
		1:   "ALICEBLUE",
		2:   "ANTIQUEWHITE",
		3:   "AQUA",
		4:   "AQUAMARINE",
		5:   "AZURE",
		6:   "BEIGE",
		7:   "BISQUE",
		8:   "BLACK",
		9:   "BLANCHEDALMOND",
		10:  "BLUE",
		11:  "BLUEVIOLET",
		12:  "BROWN",
		13:  "BURLYWOOD",
		14:  "CADETBLUE",
		15:  "CHARTREUSE",
		16:  "CHOCOLATE",
		17:  "CORAL",
		18:  "CORNFLOWERBLUE",
		19:  "CORNSILK",
		20:  "CRIMSON",
		21:  "CYAN",
		22:  "DARKBLUE",
		23:  "DARKCYAN",
		24:  "DARKGOLDENROD",
		25:  "DARKGRAY",
		26:  "DARKGREEN",
		27:  "DARKGREY",
		28:  "DARKKHAKI",
		29:  "DARKMAGENTA",
		30:  "DARKOLIVEGREEN",
		31:  "DARKORANGE",
		32:  "DARKORCHID",
		33:  "DARKRED",
		34:  "DARKSALMON",
		35:  "DARKSEAGREEN",
		36:  "DARKSLATEBLUE",
		37:  "DARKSLATEGRAY",
		38:  "DARKSLATEGREY",
		39:  "DARKTURQUOISE",
		40:  "DARKVIOLET",
		41:  "DEEPPINK",
		42:  "DEEPSKYBLUE",
		43:  "DIMGRAY",
		44:  "DIMGREY",
		45:  "DODGERBLUE",
		46:  "FIREBRICK",
		47:  "FLORALWHITE",
		48:  "FORESTGREEN",
		49:  "FUCHSIA",
		50:  "GAINSBORO",
		51:  "GHOSTWHITE",
		52:  "GOLD",
		53:  "GOLDENROD",
		54:  "GRAY",
		55:  "GREEN",
		56:  "GREENYELLOW",
		57:  "GREY",
		58:  "HONEYDEW",
		59:  "HOTPINK",
		60:  "INDIANRED",
		61:  "INDIGO",
		62:  "IVORY",
		63:  "KHAKI",
		64:  "LAVENDER",
		65:  "LAVENDERBLUSH",
		66:  "LAWNGREEN",
		67:  "LEMONCHIFFON",
		68:  "LIGHTBLUE",
		69:  "LIGHTCORAL",
		70:  "LIGHTCYAN",
		71:  "LIGHTGOLDENRODYELLOW",
		72:  "LIGHTGRAY",
		73:  "LIGHTGREEN",
		74:  "LIGHTGREY",
		75:  "LIGHTPINK",
		76:  "LIGHTSALMON",
		77:  "LIGHTSEAGREEN",
		78:  "LIGHTSKYBLUE",
		79:  "LIGHTSLATEGRAY",
		80:  "LIGHTSLATEGREY",
		81:  "LIGHTSTEELBLUE",
		82:  "LIGHTYELLOW",
		83:  "LIME",
		84:  "LIMEGREEN",
		85:  "LINEN",
		86:  "MAGENTA",
		87:  "MAROON",
		88:  "MEDIUMAQUAMARINE",
		89:  "MEDIUMBLUE",
		90:  "MEDIUMORCHID",
		91:  "MEDIUMPURPLE",
		92:  "MEDIUMSEAGREEN",
		93:  "MEDIUMSLATEBLUE",
		94:  "MEDIUMSPRINGGREEN",
		95:  "MEDIUMTURQUOISE",
		96:  "MEDIUMVIOLETRED",
		97:  "MIDNIGHTBLUE",
		98:  "MINTCREAM",
		99:  "MISTYROSE",
		100: "MOCCASIN",
		101: "NAVAJOWHITE",
		102: "NAVY",
		103: "OLDLACE",
		104: "OLIVE",
		105: "OLIVEDRAB",
		106: "ORANGE",
		107: "ORANGERED",
		108: "ORCHID",
		109: "PALEGOLDENROD",
		110: "PALEGREEN",
		111: "PALETURQUOISE",
		112: "PALEVIOLETRED",
		113: "PAPAYAWHIP",
		114: "PEACHPUFF",
		115: "PERU",
		116: "PINK",
		117: "PLUM",
		118: "POWDERBLUE",
		119: "PURPLE",
		120: "REBECCAPURPLE",
		121: "RED",
		122: "ROSYBROWN",
		123: "ROYALBLUE",
		124: "SADDLEBROWN",
		125: "SALMON",
		126: "SANDYBROWN",
		127: "SEAGREEN",
		128: "SEASHELL",
		129: "SIENNA",
		130: "SILVER",
		131: "SKYBLUE",
		132: "SLATEBLUE",
		133: "SLATEGRAY",
		134: "SLATEGREY",
		135: "SNOW",
		136: "SPRINGGREEN",
		137: "STEELBLUE",
		138: "TAN",
		139: "TEAL",
		140: "THISTLE",
		141: "TOMATO",
		142: "TURQUOISE",
		143: "VIOLET",
		144: "WHEAT",
		145: "WHITE",
		146: "WHITESMOKE",
		147: "YELLOW",
		148: "YELLOWGREEN",
	}
	ColorCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ALICEBLUE":             1,
		"ANTIQUEWHITE":          2,
		"AQUA":                  3,
		"AQUAMARINE":            4,
		"AZURE":                 5,
		"BEIGE":                 6,
		"BISQUE":                7,
		"BLACK":                 8,
		"BLANCHEDALMOND":        9,
		"BLUE":                  10,
		"BLUEVIOLET":            11,
		"BROWN":                 12,
		"BURLYWOOD":             13,
		"CADETBLUE":             14,
		"CHARTREUSE":            15,
		"CHOCOLATE":             16,
		"CORAL":                 17,
		"CORNFLOWERBLUE":        18,
		"CORNSILK":              19,
		"CRIMSON":               20,
		"CYAN":                  21,
		"DARKBLUE":              22,
		"DARKCYAN":              23,
		"DARKGOLDENROD":         24,
		"DARKGRAY":              25,
		"DARKGREEN":             26,
		"DARKGREY":              27,
		"DARKKHAKI":             28,
		"DARKMAGENTA":           29,
		"DARKOLIVEGREEN":        30,
		"DARKORANGE":            31,
		"DARKORCHID":            32,
		"DARKRED":               33,
		"DARKSALMON":            34,
		"DARKSEAGREEN":          35,
		"DARKSLATEBLUE":         36,
		"DARKSLATEGRAY":         37,
		"DARKSLATEGREY":         38,
		"DARKTURQUOISE":         39,
		"DARKVIOLET":            40,
		"DEEPPINK":              41,
		"DEEPSKYBLUE":           42,
		"DIMGRAY":               43,
		"DIMGREY":               44,
		"DODGERBLUE":            45,
		"FIREBRICK":             46,
		"FLORALWHITE":           47,
		"FORESTGREEN":           48,
		"FUCHSIA":               49,
		"GAINSBORO":             50,
		"GHOSTWHITE":            51,
		"GOLD":                  52,
		"GOLDENROD":             53,
		"GRAY":                  54,
		"GREEN":                 55,
		"GREENYELLOW":           56,
		"GREY":                  57,
		"HONEYDEW":              58,
		"HOTPINK":               59,
		"INDIANRED":             60,
		"INDIGO":                61,
		"IVORY":                 62,
		"KHAKI":                 63,
		"LAVENDER":              64,
		"LAVENDERBLUSH":         65,
		"LAWNGREEN":             66,
		"LEMONCHIFFON":          67,
		"LIGHTBLUE":             68,
		"LIGHTCORAL":            69,
		"LIGHTCYAN":             70,
		"LIGHTGOLDENRODYELLOW":  71,
		"LIGHTGRAY":             72,
		"LIGHTGREEN":            73,
		"LIGHTGREY":             74,
		"LIGHTPINK":             75,
		"LIGHTSALMON":           76,
		"LIGHTSEAGREEN":         77,
		"LIGHTSKYBLUE":          78,
		"LIGHTSLATEGRAY":        79,
		"LIGHTSLATEGREY":        80,
		"LIGHTSTEELBLUE":        81,
		"LIGHTYELLOW":           82,
		"LIME":                  83,
		"LIMEGREEN":             84,
		"LINEN":                 85,
		"MAGENTA":               86,
		"MAROON":                87,
		"MEDIUMAQUAMARINE":      88,
		"MEDIUMBLUE":            89,
		"MEDIUMORCHID":          90,
		"MEDIUMPURPLE":          91,
		"MEDIUMSEAGREEN":        92,
		"MEDIUMSLATEBLUE":       93,
		"MEDIUMSPRINGGREEN":     94,
		"MEDIUMTURQUOISE":       95,
		"MEDIUMVIOLETRED":       96,
		"MIDNIGHTBLUE":          97,
		"MINTCREAM":             98,
		"MISTYROSE":             99,
		"MOCCASIN":              100,
		"NAVAJOWHITE":           101,
		"NAVY":                  102,
		"OLDLACE":               103,
		"OLIVE":                 104,
		"OLIVEDRAB":             105,
		"ORANGE":                106,
		"ORANGERED":             107,
		"ORCHID":                108,
		"PALEGOLDENROD":         109,
		"PALEGREEN":             110,
		"PALETURQUOISE":         111,
		"PALEVIOLETRED":         112,
		"PAPAYAWHIP":            113,
		"PEACHPUFF":             114,
		"PERU":                  115,
		"PINK":                  116,
		"PLUM":                  117,
		"POWDERBLUE":            118,
		"PURPLE":                119,
		"REBECCAPURPLE":         120,
		"RED":                   121,
		"ROSYBROWN":             122,
		"ROYALBLUE":             123,
		"SADDLEBROWN":           124,
		"SALMON":                125,
		"SANDYBROWN":            126,
		"SEAGREEN":              127,
		"SEASHELL":              128,
		"SIENNA":                129,
		"SILVER":                130,
		"SKYBLUE":               131,
		"SLATEBLUE":             132,
		"SLATEGRAY":             133,
		"SLATEGREY":             134,
		"SNOW":                  135,
		"SPRINGGREEN":           136,
		"STEELBLUE":             137,
		"TAN":                   138,
		"TEAL":                  139,
		"THISTLE":               140,
		"TOMATO":                141,
		"TURQUOISE":             142,
		"VIOLET":                143,
		"WHEAT":                 144,
		"WHITE":                 145,
		"WHITESMOKE":            146,
		"YELLOW":                147,
		"YELLOWGREEN":           148,
	}
)

func (x ColorCode_Value) Enum() *ColorCode_Value {
	p := new(ColorCode_Value)
	*p = x
	return p
}

func (x ColorCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColorCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[40].Descriptor()
}

func (ColorCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[40]
}

func (x ColorCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ColorCode_Value.Descriptor instead.
func (ColorCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{40, 0}
}

type ColorRGBCode_Value int32

const (
	ColorRGBCode_INVALID_UNINITIALIZED ColorRGBCode_Value = 0
)

// Enum value maps for ColorRGBCode_Value.
var (
	ColorRGBCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
	}
	ColorRGBCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
	}
)

func (x ColorRGBCode_Value) Enum() *ColorRGBCode_Value {
	p := new(ColorRGBCode_Value)
	*p = x
	return p
}

func (x ColorRGBCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColorRGBCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[41].Descriptor()
}

func (ColorRGBCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[41]
}

func (x ColorRGBCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ColorRGBCode_Value.Descriptor instead.
func (ColorRGBCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{41, 0}
}

type CompartmentTypeCode_Value int32

const (
	CompartmentTypeCode_INVALID_UNINITIALIZED CompartmentTypeCode_Value = 0
	CompartmentTypeCode_PATIENT               CompartmentTypeCode_Value = 1
	CompartmentTypeCode_ENCOUNTER             CompartmentTypeCode_Value = 2
	CompartmentTypeCode_RELATED_PERSON        CompartmentTypeCode_Value = 3
	CompartmentTypeCode_PRACTITIONER          CompartmentTypeCode_Value = 4
	CompartmentTypeCode_DEVICE                CompartmentTypeCode_Value = 5
	CompartmentTypeCode_EPISODE_OF_CARE       CompartmentTypeCode_Value = 6
)

// Enum value maps for CompartmentTypeCode_Value.
var (
	CompartmentTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PATIENT",
		2: "ENCOUNTER",
		3: "RELATED_PERSON",
		4: "PRACTITIONER",
		5: "DEVICE",
		6: "EPISODE_OF_CARE",
	}
	CompartmentTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PATIENT":               1,
		"ENCOUNTER":             2,
		"RELATED_PERSON":        3,
		"PRACTITIONER":          4,
		"DEVICE":                5,
		"EPISODE_OF_CARE":       6,
	}
)

func (x CompartmentTypeCode_Value) Enum() *CompartmentTypeCode_Value {
	p := new(CompartmentTypeCode_Value)
	*p = x
	return p
}

func (x CompartmentTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompartmentTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[42].Descriptor()
}

func (CompartmentTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[42]
}

func (x CompartmentTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompartmentTypeCode_Value.Descriptor instead.
func (CompartmentTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{42, 0}
}

type CompositionStatusCode_Value int32

const (
	CompositionStatusCode_INVALID_UNINITIALIZED CompositionStatusCode_Value = 0
	CompositionStatusCode_REGISTERED            CompositionStatusCode_Value = 5
	CompositionStatusCode_PARTIAL               CompositionStatusCode_Value = 6
	CompositionStatusCode_PRELIMINARY           CompositionStatusCode_Value = 1
	CompositionStatusCode_FINAL                 CompositionStatusCode_Value = 2
	CompositionStatusCode_AMENDED               CompositionStatusCode_Value = 3
	CompositionStatusCode_CORRECTED             CompositionStatusCode_Value = 7
	CompositionStatusCode_APPENDED              CompositionStatusCode_Value = 8
	CompositionStatusCode_CANCELLED             CompositionStatusCode_Value = 9
	CompositionStatusCode_ENTERED_IN_ERROR      CompositionStatusCode_Value = 4
	CompositionStatusCode_DEPRECATED            CompositionStatusCode_Value = 10
	CompositionStatusCode_UNKNOWN               CompositionStatusCode_Value = 11
)

// Enum value maps for CompositionStatusCode_Value.
var (
	CompositionStatusCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		5:  "REGISTERED",
		6:  "PARTIAL",
		1:  "PRELIMINARY",
		2:  "FINAL",
		3:  "AMENDED",
		7:  "CORRECTED",
		8:  "APPENDED",
		9:  "CANCELLED",
		4:  "ENTERED_IN_ERROR",
		10: "DEPRECATED",
		11: "UNKNOWN",
	}
	CompositionStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"REGISTERED":            5,
		"PARTIAL":               6,
		"PRELIMINARY":           1,
		"FINAL":                 2,
		"AMENDED":               3,
		"CORRECTED":             7,
		"APPENDED":              8,
		"CANCELLED":             9,
		"ENTERED_IN_ERROR":      4,
		"DEPRECATED":            10,
		"UNKNOWN":               11,
	}
)

func (x CompositionStatusCode_Value) Enum() *CompositionStatusCode_Value {
	p := new(CompositionStatusCode_Value)
	*p = x
	return p
}

func (x CompositionStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompositionStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[43].Descriptor()
}

func (CompositionStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[43]
}

func (x CompositionStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompositionStatusCode_Value.Descriptor instead.
func (CompositionStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{43, 0}
}

type ConceptMapAttributeTypeCode_Value int32

const (
	ConceptMapAttributeTypeCode_INVALID_UNINITIALIZED ConceptMapAttributeTypeCode_Value = 0
	ConceptMapAttributeTypeCode_CODE                  ConceptMapAttributeTypeCode_Value = 1
	ConceptMapAttributeTypeCode_CODING                ConceptMapAttributeTypeCode_Value = 2
	ConceptMapAttributeTypeCode_STRING                ConceptMapAttributeTypeCode_Value = 3
	ConceptMapAttributeTypeCode_BOOLEAN               ConceptMapAttributeTypeCode_Value = 4
	ConceptMapAttributeTypeCode_QUANTITY              ConceptMapAttributeTypeCode_Value = 5
)

// Enum value maps for ConceptMapAttributeTypeCode_Value.
var (
	ConceptMapAttributeTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CODE",
		2: "CODING",
		3: "STRING",
		4: "BOOLEAN",
		5: "QUANTITY",
	}
	ConceptMapAttributeTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CODE":                  1,
		"CODING":                2,
		"STRING":                3,
		"BOOLEAN":               4,
		"QUANTITY":              5,
	}
)

func (x ConceptMapAttributeTypeCode_Value) Enum() *ConceptMapAttributeTypeCode_Value {
	p := new(ConceptMapAttributeTypeCode_Value)
	*p = x
	return p
}

func (x ConceptMapAttributeTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConceptMapAttributeTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[44].Descriptor()
}

func (ConceptMapAttributeTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[44]
}

func (x ConceptMapAttributeTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConceptMapAttributeTypeCode_Value.Descriptor instead.
func (ConceptMapAttributeTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{44, 0}
}

type ConceptMapGroupUnmappedModeCode_Value int32

const (
	ConceptMapGroupUnmappedModeCode_INVALID_UNINITIALIZED ConceptMapGroupUnmappedModeCode_Value = 0
	ConceptMapGroupUnmappedModeCode_USE_SOURCE_CODE       ConceptMapGroupUnmappedModeCode_Value = 4
	ConceptMapGroupUnmappedModeCode_FIXED                 ConceptMapGroupUnmappedModeCode_Value = 2
	ConceptMapGroupUnmappedModeCode_OTHER_MAP             ConceptMapGroupUnmappedModeCode_Value = 3
)

// Enum value maps for ConceptMapGroupUnmappedModeCode_Value.
var (
	ConceptMapGroupUnmappedModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		4: "USE_SOURCE_CODE",
		2: "FIXED",
		3: "OTHER_MAP",
	}
	ConceptMapGroupUnmappedModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"USE_SOURCE_CODE":       4,
		"FIXED":                 2,
		"OTHER_MAP":             3,
	}
)

func (x ConceptMapGroupUnmappedModeCode_Value) Enum() *ConceptMapGroupUnmappedModeCode_Value {
	p := new(ConceptMapGroupUnmappedModeCode_Value)
	*p = x
	return p
}

func (x ConceptMapGroupUnmappedModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConceptMapGroupUnmappedModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[45].Descriptor()
}

func (ConceptMapGroupUnmappedModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[45]
}

func (x ConceptMapGroupUnmappedModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConceptMapGroupUnmappedModeCode_Value.Descriptor instead.
func (ConceptMapGroupUnmappedModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{45, 0}
}

type ConceptMapPropertyTypeCode_Value int32

const (
	ConceptMapPropertyTypeCode_INVALID_UNINITIALIZED ConceptMapPropertyTypeCode_Value = 0
	ConceptMapPropertyTypeCode_CODING                ConceptMapPropertyTypeCode_Value = 1
	ConceptMapPropertyTypeCode_STRING                ConceptMapPropertyTypeCode_Value = 2
	ConceptMapPropertyTypeCode_INTEGER               ConceptMapPropertyTypeCode_Value = 3
	ConceptMapPropertyTypeCode_BOOLEAN               ConceptMapPropertyTypeCode_Value = 4
	ConceptMapPropertyTypeCode_DATE_TIME             ConceptMapPropertyTypeCode_Value = 5
	ConceptMapPropertyTypeCode_DECIMAL               ConceptMapPropertyTypeCode_Value = 6
	ConceptMapPropertyTypeCode_CODE                  ConceptMapPropertyTypeCode_Value = 7
)

// Enum value maps for ConceptMapPropertyTypeCode_Value.
var (
	ConceptMapPropertyTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CODING",
		2: "STRING",
		3: "INTEGER",
		4: "BOOLEAN",
		5: "DATE_TIME",
		6: "DECIMAL",
		7: "CODE",
	}
	ConceptMapPropertyTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CODING":                1,
		"STRING":                2,
		"INTEGER":               3,
		"BOOLEAN":               4,
		"DATE_TIME":             5,
		"DECIMAL":               6,
		"CODE":                  7,
	}
)

func (x ConceptMapPropertyTypeCode_Value) Enum() *ConceptMapPropertyTypeCode_Value {
	p := new(ConceptMapPropertyTypeCode_Value)
	*p = x
	return p
}

func (x ConceptMapPropertyTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConceptMapPropertyTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[46].Descriptor()
}

func (ConceptMapPropertyTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[46]
}

func (x ConceptMapPropertyTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConceptMapPropertyTypeCode_Value.Descriptor instead.
func (ConceptMapPropertyTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{46, 0}
}

type ConceptMapRelationshipCode_Value int32

const (
	ConceptMapRelationshipCode_INVALID_UNINITIALIZED          ConceptMapRelationshipCode_Value = 0
	ConceptMapRelationshipCode_RELATED_TO                     ConceptMapRelationshipCode_Value = 1
	ConceptMapRelationshipCode_EQUIVALENT                     ConceptMapRelationshipCode_Value = 2
	ConceptMapRelationshipCode_SOURCE_IS_NARROWER_THAN_TARGET ConceptMapRelationshipCode_Value = 3
	ConceptMapRelationshipCode_SOURCE_IS_BROADER_THAN_TARGET  ConceptMapRelationshipCode_Value = 4
	ConceptMapRelationshipCode_NOT_RELATED_TO                 ConceptMapRelationshipCode_Value = 5
)

// Enum value maps for ConceptMapRelationshipCode_Value.
var (
	ConceptMapRelationshipCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "RELATED_TO",
		2: "EQUIVALENT",
		3: "SOURCE_IS_NARROWER_THAN_TARGET",
		4: "SOURCE_IS_BROADER_THAN_TARGET",
		5: "NOT_RELATED_TO",
	}
	ConceptMapRelationshipCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":          0,
		"RELATED_TO":                     1,
		"EQUIVALENT":                     2,
		"SOURCE_IS_NARROWER_THAN_TARGET": 3,
		"SOURCE_IS_BROADER_THAN_TARGET":  4,
		"NOT_RELATED_TO":                 5,
	}
)

func (x ConceptMapRelationshipCode_Value) Enum() *ConceptMapRelationshipCode_Value {
	p := new(ConceptMapRelationshipCode_Value)
	*p = x
	return p
}

func (x ConceptMapRelationshipCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConceptMapRelationshipCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[47].Descriptor()
}

func (ConceptMapRelationshipCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[47]
}

func (x ConceptMapRelationshipCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConceptMapRelationshipCode_Value.Descriptor instead.
func (ConceptMapRelationshipCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{47, 0}
}

type ConditionPreconditionTypeCode_Value int32

const (
	ConditionPreconditionTypeCode_INVALID_UNINITIALIZED ConditionPreconditionTypeCode_Value = 0
	ConditionPreconditionTypeCode_SENSITIVE             ConditionPreconditionTypeCode_Value = 1
	ConditionPreconditionTypeCode_SPECIFIC              ConditionPreconditionTypeCode_Value = 2
)

// Enum value maps for ConditionPreconditionTypeCode_Value.
var (
	ConditionPreconditionTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "SENSITIVE",
		2: "SPECIFIC",
	}
	ConditionPreconditionTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"SENSITIVE":             1,
		"SPECIFIC":              2,
	}
)

func (x ConditionPreconditionTypeCode_Value) Enum() *ConditionPreconditionTypeCode_Value {
	p := new(ConditionPreconditionTypeCode_Value)
	*p = x
	return p
}

func (x ConditionPreconditionTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConditionPreconditionTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[48].Descriptor()
}

func (ConditionPreconditionTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[48]
}

func (x ConditionPreconditionTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConditionPreconditionTypeCode_Value.Descriptor instead.
func (ConditionPreconditionTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{48, 0}
}

type ConditionQuestionnairePurposeCode_Value int32

const (
	ConditionQuestionnairePurposeCode_INVALID_UNINITIALIZED ConditionQuestionnairePurposeCode_Value = 0
	ConditionQuestionnairePurposeCode_PREADMIT              ConditionQuestionnairePurposeCode_Value = 1
	ConditionQuestionnairePurposeCode_DIFF_DIAGNOSIS        ConditionQuestionnairePurposeCode_Value = 2
	ConditionQuestionnairePurposeCode_OUTCOME               ConditionQuestionnairePurposeCode_Value = 3
)

// Enum value maps for ConditionQuestionnairePurposeCode_Value.
var (
	ConditionQuestionnairePurposeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PREADMIT",
		2: "DIFF_DIAGNOSIS",
		3: "OUTCOME",
	}
	ConditionQuestionnairePurposeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PREADMIT":              1,
		"DIFF_DIAGNOSIS":        2,
		"OUTCOME":               3,
	}
)

func (x ConditionQuestionnairePurposeCode_Value) Enum() *ConditionQuestionnairePurposeCode_Value {
	p := new(ConditionQuestionnairePurposeCode_Value)
	*p = x
	return p
}

func (x ConditionQuestionnairePurposeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConditionQuestionnairePurposeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[49].Descriptor()
}

func (ConditionQuestionnairePurposeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[49]
}

func (x ConditionQuestionnairePurposeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConditionQuestionnairePurposeCode_Value.Descriptor instead.
func (ConditionQuestionnairePurposeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{49, 0}
}

type ConditionalDeleteStatusCode_Value int32

const (
	ConditionalDeleteStatusCode_INVALID_UNINITIALIZED ConditionalDeleteStatusCode_Value = 0
	ConditionalDeleteStatusCode_NOT_SUPPORTED         ConditionalDeleteStatusCode_Value = 1
	ConditionalDeleteStatusCode_SINGLE                ConditionalDeleteStatusCode_Value = 2
	ConditionalDeleteStatusCode_MULTIPLE              ConditionalDeleteStatusCode_Value = 3
)

// Enum value maps for ConditionalDeleteStatusCode_Value.
var (
	ConditionalDeleteStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "NOT_SUPPORTED",
		2: "SINGLE",
		3: "MULTIPLE",
	}
	ConditionalDeleteStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NOT_SUPPORTED":         1,
		"SINGLE":                2,
		"MULTIPLE":              3,
	}
)

func (x ConditionalDeleteStatusCode_Value) Enum() *ConditionalDeleteStatusCode_Value {
	p := new(ConditionalDeleteStatusCode_Value)
	*p = x
	return p
}

func (x ConditionalDeleteStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConditionalDeleteStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[50].Descriptor()
}

func (ConditionalDeleteStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[50]
}

func (x ConditionalDeleteStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConditionalDeleteStatusCode_Value.Descriptor instead.
func (ConditionalDeleteStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{50, 0}
}

type ConditionalReadStatusCode_Value int32

const (
	ConditionalReadStatusCode_INVALID_UNINITIALIZED ConditionalReadStatusCode_Value = 0
	ConditionalReadStatusCode_NOT_SUPPORTED         ConditionalReadStatusCode_Value = 1
	ConditionalReadStatusCode_MODIFIED_SINCE        ConditionalReadStatusCode_Value = 2
	ConditionalReadStatusCode_NOT_MATCH             ConditionalReadStatusCode_Value = 3
	ConditionalReadStatusCode_FULL_SUPPORT          ConditionalReadStatusCode_Value = 4
)

// Enum value maps for ConditionalReadStatusCode_Value.
var (
	ConditionalReadStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "NOT_SUPPORTED",
		2: "MODIFIED_SINCE",
		3: "NOT_MATCH",
		4: "FULL_SUPPORT",
	}
	ConditionalReadStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NOT_SUPPORTED":         1,
		"MODIFIED_SINCE":        2,
		"NOT_MATCH":             3,
		"FULL_SUPPORT":          4,
	}
)

func (x ConditionalReadStatusCode_Value) Enum() *ConditionalReadStatusCode_Value {
	p := new(ConditionalReadStatusCode_Value)
	*p = x
	return p
}

func (x ConditionalReadStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConditionalReadStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[51].Descriptor()
}

func (ConditionalReadStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[51]
}

func (x ConditionalReadStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConditionalReadStatusCode_Value.Descriptor instead.
func (ConditionalReadStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{51, 0}
}

type ConformanceExpectationCode_Value int32

const (
	ConformanceExpectationCode_INVALID_UNINITIALIZED ConformanceExpectationCode_Value = 0
	ConformanceExpectationCode_SHALL                 ConformanceExpectationCode_Value = 1
	ConformanceExpectationCode_SHOULD                ConformanceExpectationCode_Value = 2
	ConformanceExpectationCode_MAY                   ConformanceExpectationCode_Value = 3
	ConformanceExpectationCode_SHOULD_NOT            ConformanceExpectationCode_Value = 4
)

// Enum value maps for ConformanceExpectationCode_Value.
var (
	ConformanceExpectationCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "SHALL",
		2: "SHOULD",
		3: "MAY",
		4: "SHOULD_NOT",
	}
	ConformanceExpectationCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"SHALL":                 1,
		"SHOULD":                2,
		"MAY":                   3,
		"SHOULD_NOT":            4,
	}
)

func (x ConformanceExpectationCode_Value) Enum() *ConformanceExpectationCode_Value {
	p := new(ConformanceExpectationCode_Value)
	*p = x
	return p
}

func (x ConformanceExpectationCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConformanceExpectationCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[52].Descriptor()
}

func (ConformanceExpectationCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[52]
}

func (x ConformanceExpectationCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConformanceExpectationCode_Value.Descriptor instead.
func (ConformanceExpectationCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{52, 0}
}

type ConsentDataMeaningCode_Value int32

const (
	ConsentDataMeaningCode_INVALID_UNINITIALIZED ConsentDataMeaningCode_Value = 0
	ConsentDataMeaningCode_INSTANCE              ConsentDataMeaningCode_Value = 1
	ConsentDataMeaningCode_RELATED               ConsentDataMeaningCode_Value = 2
	ConsentDataMeaningCode_DEPENDENTS            ConsentDataMeaningCode_Value = 3
	ConsentDataMeaningCode_AUTHOREDBY            ConsentDataMeaningCode_Value = 4
)

// Enum value maps for ConsentDataMeaningCode_Value.
var (
	ConsentDataMeaningCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "INSTANCE",
		2: "RELATED",
		3: "DEPENDENTS",
		4: "AUTHOREDBY",
	}
	ConsentDataMeaningCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"INSTANCE":              1,
		"RELATED":               2,
		"DEPENDENTS":            3,
		"AUTHOREDBY":            4,
	}
)

func (x ConsentDataMeaningCode_Value) Enum() *ConsentDataMeaningCode_Value {
	p := new(ConsentDataMeaningCode_Value)
	*p = x
	return p
}

func (x ConsentDataMeaningCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConsentDataMeaningCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[53].Descriptor()
}

func (ConsentDataMeaningCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[53]
}

func (x ConsentDataMeaningCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConsentDataMeaningCode_Value.Descriptor instead.
func (ConsentDataMeaningCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{53, 0}
}

type ConsentProvisionTypeCode_Value int32

const (
	ConsentProvisionTypeCode_INVALID_UNINITIALIZED ConsentProvisionTypeCode_Value = 0
	ConsentProvisionTypeCode_DENY                  ConsentProvisionTypeCode_Value = 1
	ConsentProvisionTypeCode_PERMIT                ConsentProvisionTypeCode_Value = 2
)

// Enum value maps for ConsentProvisionTypeCode_Value.
var (
	ConsentProvisionTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DENY",
		2: "PERMIT",
	}
	ConsentProvisionTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DENY":                  1,
		"PERMIT":                2,
	}
)

func (x ConsentProvisionTypeCode_Value) Enum() *ConsentProvisionTypeCode_Value {
	p := new(ConsentProvisionTypeCode_Value)
	*p = x
	return p
}

func (x ConsentProvisionTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConsentProvisionTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[54].Descriptor()
}

func (ConsentProvisionTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[54]
}

func (x ConsentProvisionTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConsentProvisionTypeCode_Value.Descriptor instead.
func (ConsentProvisionTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{54, 0}
}

type ConsentStateCode_Value int32

const (
	ConsentStateCode_INVALID_UNINITIALIZED ConsentStateCode_Value = 0
	ConsentStateCode_DRAFT                 ConsentStateCode_Value = 1
	ConsentStateCode_ACTIVE                ConsentStateCode_Value = 3
	ConsentStateCode_INACTIVE              ConsentStateCode_Value = 5
	ConsentStateCode_NOT_DONE              ConsentStateCode_Value = 7
	ConsentStateCode_ENTERED_IN_ERROR      ConsentStateCode_Value = 6
	ConsentStateCode_UNKNOWN               ConsentStateCode_Value = 8
)

// Enum value maps for ConsentStateCode_Value.
var (
	ConsentStateCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DRAFT",
		3: "ACTIVE",
		5: "INACTIVE",
		7: "NOT_DONE",
		6: "ENTERED_IN_ERROR",
		8: "UNKNOWN",
	}
	ConsentStateCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DRAFT":                 1,
		"ACTIVE":                3,
		"INACTIVE":              5,
		"NOT_DONE":              7,
		"ENTERED_IN_ERROR":      6,
		"UNKNOWN":               8,
	}
)

func (x ConsentStateCode_Value) Enum() *ConsentStateCode_Value {
	p := new(ConsentStateCode_Value)
	*p = x
	return p
}

func (x ConsentStateCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConsentStateCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[55].Descriptor()
}

func (ConsentStateCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[55]
}

func (x ConsentStateCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConsentStateCode_Value.Descriptor instead.
func (ConsentStateCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{55, 0}
}

type ConstraintSeverityCode_Value int32

const (
	ConstraintSeverityCode_INVALID_UNINITIALIZED ConstraintSeverityCode_Value = 0
	ConstraintSeverityCode_ERROR                 ConstraintSeverityCode_Value = 1
	ConstraintSeverityCode_WARNING               ConstraintSeverityCode_Value = 2
)

// Enum value maps for ConstraintSeverityCode_Value.
var (
	ConstraintSeverityCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ERROR",
		2: "WARNING",
	}
	ConstraintSeverityCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ERROR":                 1,
		"WARNING":               2,
	}
)

func (x ConstraintSeverityCode_Value) Enum() *ConstraintSeverityCode_Value {
	p := new(ConstraintSeverityCode_Value)
	*p = x
	return p
}

func (x ConstraintSeverityCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConstraintSeverityCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[56].Descriptor()
}

func (ConstraintSeverityCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[56]
}

func (x ConstraintSeverityCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConstraintSeverityCode_Value.Descriptor instead.
func (ConstraintSeverityCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{56, 0}
}

type ContactPointSystemCode_Value int32

const (
	ContactPointSystemCode_INVALID_UNINITIALIZED ContactPointSystemCode_Value = 0
	ContactPointSystemCode_PHONE                 ContactPointSystemCode_Value = 1
	ContactPointSystemCode_FAX                   ContactPointSystemCode_Value = 2
	ContactPointSystemCode_EMAIL                 ContactPointSystemCode_Value = 3
	ContactPointSystemCode_PAGER                 ContactPointSystemCode_Value = 4
	ContactPointSystemCode_URL                   ContactPointSystemCode_Value = 5
	ContactPointSystemCode_SMS                   ContactPointSystemCode_Value = 6
	ContactPointSystemCode_OTHER                 ContactPointSystemCode_Value = 7
)

// Enum value maps for ContactPointSystemCode_Value.
var (
	ContactPointSystemCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PHONE",
		2: "FAX",
		3: "EMAIL",
		4: "PAGER",
		5: "URL",
		6: "SMS",
		7: "OTHER",
	}
	ContactPointSystemCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PHONE":                 1,
		"FAX":                   2,
		"EMAIL":                 3,
		"PAGER":                 4,
		"URL":                   5,
		"SMS":                   6,
		"OTHER":                 7,
	}
)

func (x ContactPointSystemCode_Value) Enum() *ContactPointSystemCode_Value {
	p := new(ContactPointSystemCode_Value)
	*p = x
	return p
}

func (x ContactPointSystemCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContactPointSystemCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[57].Descriptor()
}

func (ContactPointSystemCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[57]
}

func (x ContactPointSystemCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContactPointSystemCode_Value.Descriptor instead.
func (ContactPointSystemCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{57, 0}
}

type ContactPointUseCode_Value int32

const (
	ContactPointUseCode_INVALID_UNINITIALIZED ContactPointUseCode_Value = 0
	ContactPointUseCode_HOME                  ContactPointUseCode_Value = 1
	ContactPointUseCode_WORK                  ContactPointUseCode_Value = 2
	ContactPointUseCode_TEMP                  ContactPointUseCode_Value = 3
	ContactPointUseCode_OLD                   ContactPointUseCode_Value = 4
	ContactPointUseCode_MOBILE                ContactPointUseCode_Value = 5
)

// Enum value maps for ContactPointUseCode_Value.
var (
	ContactPointUseCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "HOME",
		2: "WORK",
		3: "TEMP",
		4: "OLD",
		5: "MOBILE",
	}
	ContactPointUseCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"HOME":                  1,
		"WORK":                  2,
		"TEMP":                  3,
		"OLD":                   4,
		"MOBILE":                5,
	}
)

func (x ContactPointUseCode_Value) Enum() *ContactPointUseCode_Value {
	p := new(ContactPointUseCode_Value)
	*p = x
	return p
}

func (x ContactPointUseCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContactPointUseCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[58].Descriptor()
}

func (ContactPointUseCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[58]
}

func (x ContactPointUseCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContactPointUseCode_Value.Descriptor instead.
func (ContactPointUseCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{58, 0}
}

type ContractPublicationStatusCode_Value int32

const (
	ContractPublicationStatusCode_INVALID_UNINITIALIZED ContractPublicationStatusCode_Value = 0
	ContractPublicationStatusCode_AMENDED               ContractPublicationStatusCode_Value = 1
	ContractPublicationStatusCode_APPENDED              ContractPublicationStatusCode_Value = 2
	ContractPublicationStatusCode_CANCELLED             ContractPublicationStatusCode_Value = 3
	ContractPublicationStatusCode_DISPUTED              ContractPublicationStatusCode_Value = 4
	ContractPublicationStatusCode_ENTERED_IN_ERROR      ContractPublicationStatusCode_Value = 5
	ContractPublicationStatusCode_EXECUTABLE            ContractPublicationStatusCode_Value = 6
	ContractPublicationStatusCode_EXECUTED              ContractPublicationStatusCode_Value = 7
	ContractPublicationStatusCode_NEGOTIABLE            ContractPublicationStatusCode_Value = 8
	ContractPublicationStatusCode_OFFERED               ContractPublicationStatusCode_Value = 9
	ContractPublicationStatusCode_POLICY                ContractPublicationStatusCode_Value = 10
	ContractPublicationStatusCode_REJECTED              ContractPublicationStatusCode_Value = 11
	ContractPublicationStatusCode_RENEWED               ContractPublicationStatusCode_Value = 12
	ContractPublicationStatusCode_REVOKED               ContractPublicationStatusCode_Value = 13
	ContractPublicationStatusCode_RESOLVED              ContractPublicationStatusCode_Value = 14
	ContractPublicationStatusCode_TERMINATED            ContractPublicationStatusCode_Value = 15
)

// Enum value maps for ContractPublicationStatusCode_Value.
var (
	ContractPublicationStatusCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "AMENDED",
		2:  "APPENDED",
		3:  "CANCELLED",
		4:  "DISPUTED",
		5:  "ENTERED_IN_ERROR",
		6:  "EXECUTABLE",
		7:  "EXECUTED",
		8:  "NEGOTIABLE",
		9:  "OFFERED",
		10: "POLICY",
		11: "REJECTED",
		12: "RENEWED",
		13: "REVOKED",
		14: "RESOLVED",
		15: "TERMINATED",
	}
	ContractPublicationStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"AMENDED":               1,
		"APPENDED":              2,
		"CANCELLED":             3,
		"DISPUTED":              4,
		"ENTERED_IN_ERROR":      5,
		"EXECUTABLE":            6,
		"EXECUTED":              7,
		"NEGOTIABLE":            8,
		"OFFERED":               9,
		"POLICY":                10,
		"REJECTED":              11,
		"RENEWED":               12,
		"REVOKED":               13,
		"RESOLVED":              14,
		"TERMINATED":            15,
	}
)

func (x ContractPublicationStatusCode_Value) Enum() *ContractPublicationStatusCode_Value {
	p := new(ContractPublicationStatusCode_Value)
	*p = x
	return p
}

func (x ContractPublicationStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContractPublicationStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[59].Descriptor()
}

func (ContractPublicationStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[59]
}

func (x ContractPublicationStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContractPublicationStatusCode_Value.Descriptor instead.
func (ContractPublicationStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{59, 0}
}

type ContractStatusCode_Value int32

const (
	ContractStatusCode_INVALID_UNINITIALIZED ContractStatusCode_Value = 0
	ContractStatusCode_AMENDED               ContractStatusCode_Value = 1
	ContractStatusCode_APPENDED              ContractStatusCode_Value = 2
	ContractStatusCode_CANCELLED             ContractStatusCode_Value = 3
	ContractStatusCode_DISPUTED              ContractStatusCode_Value = 4
	ContractStatusCode_ENTERED_IN_ERROR      ContractStatusCode_Value = 5
	ContractStatusCode_EXECUTABLE            ContractStatusCode_Value = 6
	ContractStatusCode_EXECUTED              ContractStatusCode_Value = 7
	ContractStatusCode_NEGOTIABLE            ContractStatusCode_Value = 8
	ContractStatusCode_OFFERED               ContractStatusCode_Value = 9
	ContractStatusCode_POLICY                ContractStatusCode_Value = 10
	ContractStatusCode_REJECTED              ContractStatusCode_Value = 11
	ContractStatusCode_RENEWED               ContractStatusCode_Value = 12
	ContractStatusCode_REVOKED               ContractStatusCode_Value = 13
	ContractStatusCode_RESOLVED              ContractStatusCode_Value = 14
	ContractStatusCode_TERMINATED            ContractStatusCode_Value = 15
)

// Enum value maps for ContractStatusCode_Value.
var (
	ContractStatusCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "AMENDED",
		2:  "APPENDED",
		3:  "CANCELLED",
		4:  "DISPUTED",
		5:  "ENTERED_IN_ERROR",
		6:  "EXECUTABLE",
		7:  "EXECUTED",
		8:  "NEGOTIABLE",
		9:  "OFFERED",
		10: "POLICY",
		11: "REJECTED",
		12: "RENEWED",
		13: "REVOKED",
		14: "RESOLVED",
		15: "TERMINATED",
	}
	ContractStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"AMENDED":               1,
		"APPENDED":              2,
		"CANCELLED":             3,
		"DISPUTED":              4,
		"ENTERED_IN_ERROR":      5,
		"EXECUTABLE":            6,
		"EXECUTED":              7,
		"NEGOTIABLE":            8,
		"OFFERED":               9,
		"POLICY":                10,
		"REJECTED":              11,
		"RENEWED":               12,
		"REVOKED":               13,
		"RESOLVED":              14,
		"TERMINATED":            15,
	}
)

func (x ContractStatusCode_Value) Enum() *ContractStatusCode_Value {
	p := new(ContractStatusCode_Value)
	*p = x
	return p
}

func (x ContractStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContractStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[60].Descriptor()
}

func (ContractStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[60]
}

func (x ContractStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContractStatusCode_Value.Descriptor instead.
func (ContractStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{60, 0}
}

type ContributorTypeCode_Value int32

const (
	ContributorTypeCode_INVALID_UNINITIALIZED ContributorTypeCode_Value = 0
	ContributorTypeCode_AUTHOR                ContributorTypeCode_Value = 1
	ContributorTypeCode_EDITOR                ContributorTypeCode_Value = 2
	ContributorTypeCode_REVIEWER              ContributorTypeCode_Value = 3
	ContributorTypeCode_ENDORSER              ContributorTypeCode_Value = 4
)

// Enum value maps for ContributorTypeCode_Value.
var (
	ContributorTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "AUTHOR",
		2: "EDITOR",
		3: "REVIEWER",
		4: "ENDORSER",
	}
	ContributorTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"AUTHOR":                1,
		"EDITOR":                2,
		"REVIEWER":              3,
		"ENDORSER":              4,
	}
)

func (x ContributorTypeCode_Value) Enum() *ContributorTypeCode_Value {
	p := new(ContributorTypeCode_Value)
	*p = x
	return p
}

func (x ContributorTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContributorTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[61].Descriptor()
}

func (ContributorTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[61]
}

func (x ContributorTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContributorTypeCode_Value.Descriptor instead.
func (ContributorTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{61, 0}
}

type CriteriaNotExistsBehaviorCode_Value int32

const (
	CriteriaNotExistsBehaviorCode_INVALID_UNINITIALIZED CriteriaNotExistsBehaviorCode_Value = 0
	CriteriaNotExistsBehaviorCode_TEST_PASSES           CriteriaNotExistsBehaviorCode_Value = 1
	CriteriaNotExistsBehaviorCode_TEST_FAILS            CriteriaNotExistsBehaviorCode_Value = 2
)

// Enum value maps for CriteriaNotExistsBehaviorCode_Value.
var (
	CriteriaNotExistsBehaviorCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "TEST_PASSES",
		2: "TEST_FAILS",
	}
	CriteriaNotExistsBehaviorCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"TEST_PASSES":           1,
		"TEST_FAILS":            2,
	}
)

func (x CriteriaNotExistsBehaviorCode_Value) Enum() *CriteriaNotExistsBehaviorCode_Value {
	p := new(CriteriaNotExistsBehaviorCode_Value)
	*p = x
	return p
}

func (x CriteriaNotExistsBehaviorCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CriteriaNotExistsBehaviorCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[62].Descriptor()
}

func (CriteriaNotExistsBehaviorCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[62]
}

func (x CriteriaNotExistsBehaviorCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CriteriaNotExistsBehaviorCode_Value.Descriptor instead.
func (CriteriaNotExistsBehaviorCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{62, 0}
}

type DaysOfWeekCode_Value int32

const (
	DaysOfWeekCode_INVALID_UNINITIALIZED DaysOfWeekCode_Value = 0
	DaysOfWeekCode_MON                   DaysOfWeekCode_Value = 1
	DaysOfWeekCode_TUE                   DaysOfWeekCode_Value = 2
	DaysOfWeekCode_WED                   DaysOfWeekCode_Value = 3
	DaysOfWeekCode_THU                   DaysOfWeekCode_Value = 4
	DaysOfWeekCode_FRI                   DaysOfWeekCode_Value = 5
	DaysOfWeekCode_SAT                   DaysOfWeekCode_Value = 6
	DaysOfWeekCode_SUN                   DaysOfWeekCode_Value = 7
)

// Enum value maps for DaysOfWeekCode_Value.
var (
	DaysOfWeekCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "MON",
		2: "TUE",
		3: "WED",
		4: "THU",
		5: "FRI",
		6: "SAT",
		7: "SUN",
	}
	DaysOfWeekCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"MON":                   1,
		"TUE":                   2,
		"WED":                   3,
		"THU":                   4,
		"FRI":                   5,
		"SAT":                   6,
		"SUN":                   7,
	}
)

func (x DaysOfWeekCode_Value) Enum() *DaysOfWeekCode_Value {
	p := new(DaysOfWeekCode_Value)
	*p = x
	return p
}

func (x DaysOfWeekCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DaysOfWeekCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[63].Descriptor()
}

func (DaysOfWeekCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[63]
}

func (x DaysOfWeekCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DaysOfWeekCode_Value.Descriptor instead.
func (DaysOfWeekCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{63, 0}
}

type DetectedIssueSeverityCode_Value int32

const (
	DetectedIssueSeverityCode_INVALID_UNINITIALIZED DetectedIssueSeverityCode_Value = 0
	DetectedIssueSeverityCode_HIGH                  DetectedIssueSeverityCode_Value = 1
	DetectedIssueSeverityCode_MODERATE              DetectedIssueSeverityCode_Value = 2
	DetectedIssueSeverityCode_LOW                   DetectedIssueSeverityCode_Value = 3
)

// Enum value maps for DetectedIssueSeverityCode_Value.
var (
	DetectedIssueSeverityCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "HIGH",
		2: "MODERATE",
		3: "LOW",
	}
	DetectedIssueSeverityCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"HIGH":                  1,
		"MODERATE":              2,
		"LOW":                   3,
	}
)

func (x DetectedIssueSeverityCode_Value) Enum() *DetectedIssueSeverityCode_Value {
	p := new(DetectedIssueSeverityCode_Value)
	*p = x
	return p
}

func (x DetectedIssueSeverityCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DetectedIssueSeverityCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[64].Descriptor()
}

func (DetectedIssueSeverityCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[64]
}

func (x DetectedIssueSeverityCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DetectedIssueSeverityCode_Value.Descriptor instead.
func (DetectedIssueSeverityCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{64, 0}
}

type DetectedIssueStatusCode_Value int32

const (
	DetectedIssueStatusCode_INVALID_UNINITIALIZED DetectedIssueStatusCode_Value = 0
	DetectedIssueStatusCode_MITIGATED             DetectedIssueStatusCode_Value = 1
)

// Enum value maps for DetectedIssueStatusCode_Value.
var (
	DetectedIssueStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "MITIGATED",
	}
	DetectedIssueStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"MITIGATED":             1,
	}
)

func (x DetectedIssueStatusCode_Value) Enum() *DetectedIssueStatusCode_Value {
	p := new(DetectedIssueStatusCode_Value)
	*p = x
	return p
}

func (x DetectedIssueStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DetectedIssueStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[65].Descriptor()
}

func (DetectedIssueStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[65]
}

func (x DetectedIssueStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DetectedIssueStatusCode_Value.Descriptor instead.
func (DetectedIssueStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{65, 0}
}

type DeviceAssociationCode_Value int32

const (
	DeviceAssociationCode_INVALID_UNINITIALIZED DeviceAssociationCode_Value = 0
	DeviceAssociationCode_IMPLANTED             DeviceAssociationCode_Value = 1
	DeviceAssociationCode_EXPLANTED             DeviceAssociationCode_Value = 2
	DeviceAssociationCode_ENTERED_IN_ERROR      DeviceAssociationCode_Value = 3
	DeviceAssociationCode_ATTACHED              DeviceAssociationCode_Value = 4
	DeviceAssociationCode_UNKNOWN               DeviceAssociationCode_Value = 5
)

// Enum value maps for DeviceAssociationCode_Value.
var (
	DeviceAssociationCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "IMPLANTED",
		2: "EXPLANTED",
		3: "ENTERED_IN_ERROR",
		4: "ATTACHED",
		5: "UNKNOWN",
	}
	DeviceAssociationCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"IMPLANTED":             1,
		"EXPLANTED":             2,
		"ENTERED_IN_ERROR":      3,
		"ATTACHED":              4,
		"UNKNOWN":               5,
	}
)

func (x DeviceAssociationCode_Value) Enum() *DeviceAssociationCode_Value {
	p := new(DeviceAssociationCode_Value)
	*p = x
	return p
}

func (x DeviceAssociationCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceAssociationCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[66].Descriptor()
}

func (DeviceAssociationCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[66]
}

func (x DeviceAssociationCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceAssociationCode_Value.Descriptor instead.
func (DeviceAssociationCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{66, 0}
}

type DeviceAssociationStatusReason_Value int32

const (
	DeviceAssociationStatusReason_INVALID_UNINITIALIZED DeviceAssociationStatusReason_Value = 0
	DeviceAssociationStatusReason_ATTACHED              DeviceAssociationStatusReason_Value = 1
	DeviceAssociationStatusReason_DISCONNECTED          DeviceAssociationStatusReason_Value = 2
	DeviceAssociationStatusReason_FAILED                DeviceAssociationStatusReason_Value = 3
	DeviceAssociationStatusReason_PLACED                DeviceAssociationStatusReason_Value = 4
	DeviceAssociationStatusReason_REPLACED              DeviceAssociationStatusReason_Value = 5
)

// Enum value maps for DeviceAssociationStatusReason_Value.
var (
	DeviceAssociationStatusReason_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ATTACHED",
		2: "DISCONNECTED",
		3: "FAILED",
		4: "PLACED",
		5: "REPLACED",
	}
	DeviceAssociationStatusReason_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ATTACHED":              1,
		"DISCONNECTED":          2,
		"FAILED":                3,
		"PLACED":                4,
		"REPLACED":              5,
	}
)

func (x DeviceAssociationStatusReason_Value) Enum() *DeviceAssociationStatusReason_Value {
	p := new(DeviceAssociationStatusReason_Value)
	*p = x
	return p
}

func (x DeviceAssociationStatusReason_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceAssociationStatusReason_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[67].Descriptor()
}

func (DeviceAssociationStatusReason_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[67]
}

func (x DeviceAssociationStatusReason_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceAssociationStatusReason_Value.Descriptor instead.
func (DeviceAssociationStatusReason_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{67, 0}
}

type DeviceCorrectiveActionScopeCode_Value int32

const (
	DeviceCorrectiveActionScopeCode_INVALID_UNINITIALIZED DeviceCorrectiveActionScopeCode_Value = 0
	DeviceCorrectiveActionScopeCode_MODEL                 DeviceCorrectiveActionScopeCode_Value = 1
	DeviceCorrectiveActionScopeCode_LOT_NUMBERS           DeviceCorrectiveActionScopeCode_Value = 2
	DeviceCorrectiveActionScopeCode_SERIAL_NUMBERS        DeviceCorrectiveActionScopeCode_Value = 3
)

// Enum value maps for DeviceCorrectiveActionScopeCode_Value.
var (
	DeviceCorrectiveActionScopeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "MODEL",
		2: "LOT_NUMBERS",
		3: "SERIAL_NUMBERS",
	}
	DeviceCorrectiveActionScopeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"MODEL":                 1,
		"LOT_NUMBERS":           2,
		"SERIAL_NUMBERS":        3,
	}
)

func (x DeviceCorrectiveActionScopeCode_Value) Enum() *DeviceCorrectiveActionScopeCode_Value {
	p := new(DeviceCorrectiveActionScopeCode_Value)
	*p = x
	return p
}

func (x DeviceCorrectiveActionScopeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceCorrectiveActionScopeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[68].Descriptor()
}

func (DeviceCorrectiveActionScopeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[68]
}

func (x DeviceCorrectiveActionScopeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceCorrectiveActionScopeCode_Value.Descriptor instead.
func (DeviceCorrectiveActionScopeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{68, 0}
}

type DeviceDispenseStatusCode_Value int32

const (
	DeviceDispenseStatusCode_INVALID_UNINITIALIZED DeviceDispenseStatusCode_Value = 0
	DeviceDispenseStatusCode_PREPARATION           DeviceDispenseStatusCode_Value = 1
	DeviceDispenseStatusCode_IN_PROGRESS           DeviceDispenseStatusCode_Value = 2
	DeviceDispenseStatusCode_CANCELLED             DeviceDispenseStatusCode_Value = 3
	DeviceDispenseStatusCode_ON_HOLD               DeviceDispenseStatusCode_Value = 4
	DeviceDispenseStatusCode_COMPLETED             DeviceDispenseStatusCode_Value = 5
	DeviceDispenseStatusCode_ENTERED_IN_ERROR      DeviceDispenseStatusCode_Value = 6
	DeviceDispenseStatusCode_STOPPED               DeviceDispenseStatusCode_Value = 7
	DeviceDispenseStatusCode_DECLINED              DeviceDispenseStatusCode_Value = 8
	DeviceDispenseStatusCode_UNKNOWN               DeviceDispenseStatusCode_Value = 9
)

// Enum value maps for DeviceDispenseStatusCode_Value.
var (
	DeviceDispenseStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PREPARATION",
		2: "IN_PROGRESS",
		3: "CANCELLED",
		4: "ON_HOLD",
		5: "COMPLETED",
		6: "ENTERED_IN_ERROR",
		7: "STOPPED",
		8: "DECLINED",
		9: "UNKNOWN",
	}
	DeviceDispenseStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PREPARATION":           1,
		"IN_PROGRESS":           2,
		"CANCELLED":             3,
		"ON_HOLD":               4,
		"COMPLETED":             5,
		"ENTERED_IN_ERROR":      6,
		"STOPPED":               7,
		"DECLINED":              8,
		"UNKNOWN":               9,
	}
)

func (x DeviceDispenseStatusCode_Value) Enum() *DeviceDispenseStatusCode_Value {
	p := new(DeviceDispenseStatusCode_Value)
	*p = x
	return p
}

func (x DeviceDispenseStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceDispenseStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[69].Descriptor()
}

func (DeviceDispenseStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[69]
}

func (x DeviceDispenseStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceDispenseStatusCode_Value.Descriptor instead.
func (DeviceDispenseStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{69, 0}
}

type DeviceMetricCalibrationStateCode_Value int32

const (
	DeviceMetricCalibrationStateCode_INVALID_UNINITIALIZED DeviceMetricCalibrationStateCode_Value = 0
	DeviceMetricCalibrationStateCode_NOT_CALIBRATED        DeviceMetricCalibrationStateCode_Value = 1
	DeviceMetricCalibrationStateCode_CALIBRATION_REQUIRED  DeviceMetricCalibrationStateCode_Value = 2
	DeviceMetricCalibrationStateCode_CALIBRATED            DeviceMetricCalibrationStateCode_Value = 3
	DeviceMetricCalibrationStateCode_UNSPECIFIED           DeviceMetricCalibrationStateCode_Value = 4
)

// Enum value maps for DeviceMetricCalibrationStateCode_Value.
var (
	DeviceMetricCalibrationStateCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "NOT_CALIBRATED",
		2: "CALIBRATION_REQUIRED",
		3: "CALIBRATED",
		4: "UNSPECIFIED",
	}
	DeviceMetricCalibrationStateCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NOT_CALIBRATED":        1,
		"CALIBRATION_REQUIRED":  2,
		"CALIBRATED":            3,
		"UNSPECIFIED":           4,
	}
)

func (x DeviceMetricCalibrationStateCode_Value) Enum() *DeviceMetricCalibrationStateCode_Value {
	p := new(DeviceMetricCalibrationStateCode_Value)
	*p = x
	return p
}

func (x DeviceMetricCalibrationStateCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceMetricCalibrationStateCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[70].Descriptor()
}

func (DeviceMetricCalibrationStateCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[70]
}

func (x DeviceMetricCalibrationStateCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceMetricCalibrationStateCode_Value.Descriptor instead.
func (DeviceMetricCalibrationStateCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{70, 0}
}

type DeviceMetricCalibrationTypeCode_Value int32

const (
	DeviceMetricCalibrationTypeCode_INVALID_UNINITIALIZED DeviceMetricCalibrationTypeCode_Value = 0
	DeviceMetricCalibrationTypeCode_UNSPECIFIED           DeviceMetricCalibrationTypeCode_Value = 1
	DeviceMetricCalibrationTypeCode_OFFSET                DeviceMetricCalibrationTypeCode_Value = 2
	DeviceMetricCalibrationTypeCode_GAIN                  DeviceMetricCalibrationTypeCode_Value = 3
	DeviceMetricCalibrationTypeCode_TWO_POINT             DeviceMetricCalibrationTypeCode_Value = 4
)

// Enum value maps for DeviceMetricCalibrationTypeCode_Value.
var (
	DeviceMetricCalibrationTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "UNSPECIFIED",
		2: "OFFSET",
		3: "GAIN",
		4: "TWO_POINT",
	}
	DeviceMetricCalibrationTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"UNSPECIFIED":           1,
		"OFFSET":                2,
		"GAIN":                  3,
		"TWO_POINT":             4,
	}
)

func (x DeviceMetricCalibrationTypeCode_Value) Enum() *DeviceMetricCalibrationTypeCode_Value {
	p := new(DeviceMetricCalibrationTypeCode_Value)
	*p = x
	return p
}

func (x DeviceMetricCalibrationTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceMetricCalibrationTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[71].Descriptor()
}

func (DeviceMetricCalibrationTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[71]
}

func (x DeviceMetricCalibrationTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceMetricCalibrationTypeCode_Value.Descriptor instead.
func (DeviceMetricCalibrationTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{71, 0}
}

type DeviceMetricCategoryCode_Value int32

const (
	DeviceMetricCategoryCode_INVALID_UNINITIALIZED DeviceMetricCategoryCode_Value = 0
	DeviceMetricCategoryCode_MEASUREMENT           DeviceMetricCategoryCode_Value = 1
	DeviceMetricCategoryCode_SETTING               DeviceMetricCategoryCode_Value = 2
	DeviceMetricCategoryCode_CALCULATION           DeviceMetricCategoryCode_Value = 3
	DeviceMetricCategoryCode_UNSPECIFIED           DeviceMetricCategoryCode_Value = 4
)

// Enum value maps for DeviceMetricCategoryCode_Value.
var (
	DeviceMetricCategoryCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "MEASUREMENT",
		2: "SETTING",
		3: "CALCULATION",
		4: "UNSPECIFIED",
	}
	DeviceMetricCategoryCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"MEASUREMENT":           1,
		"SETTING":               2,
		"CALCULATION":           3,
		"UNSPECIFIED":           4,
	}
)

func (x DeviceMetricCategoryCode_Value) Enum() *DeviceMetricCategoryCode_Value {
	p := new(DeviceMetricCategoryCode_Value)
	*p = x
	return p
}

func (x DeviceMetricCategoryCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceMetricCategoryCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[72].Descriptor()
}

func (DeviceMetricCategoryCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[72]
}

func (x DeviceMetricCategoryCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceMetricCategoryCode_Value.Descriptor instead.
func (DeviceMetricCategoryCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{72, 0}
}

type DeviceMetricOperationalStatusCode_Value int32

const (
	DeviceMetricOperationalStatusCode_INVALID_UNINITIALIZED DeviceMetricOperationalStatusCode_Value = 0
	DeviceMetricOperationalStatusCode_ON                    DeviceMetricOperationalStatusCode_Value = 1
	DeviceMetricOperationalStatusCode_OFF                   DeviceMetricOperationalStatusCode_Value = 2
	DeviceMetricOperationalStatusCode_STANDBY               DeviceMetricOperationalStatusCode_Value = 3
	DeviceMetricOperationalStatusCode_ENTERED_IN_ERROR      DeviceMetricOperationalStatusCode_Value = 4
)

// Enum value maps for DeviceMetricOperationalStatusCode_Value.
var (
	DeviceMetricOperationalStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ON",
		2: "OFF",
		3: "STANDBY",
		4: "ENTERED_IN_ERROR",
	}
	DeviceMetricOperationalStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ON":                    1,
		"OFF":                   2,
		"STANDBY":               3,
		"ENTERED_IN_ERROR":      4,
	}
)

func (x DeviceMetricOperationalStatusCode_Value) Enum() *DeviceMetricOperationalStatusCode_Value {
	p := new(DeviceMetricOperationalStatusCode_Value)
	*p = x
	return p
}

func (x DeviceMetricOperationalStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceMetricOperationalStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[73].Descriptor()
}

func (DeviceMetricOperationalStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[73]
}

func (x DeviceMetricOperationalStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceMetricOperationalStatusCode_Value.Descriptor instead.
func (DeviceMetricOperationalStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{73, 0}
}

type DeviceNameTypeCode_Value int32

const (
	DeviceNameTypeCode_INVALID_UNINITIALIZED DeviceNameTypeCode_Value = 0
	DeviceNameTypeCode_REGISTERED_NAME       DeviceNameTypeCode_Value = 7
	DeviceNameTypeCode_USER_FRIENDLY_NAME    DeviceNameTypeCode_Value = 2
	DeviceNameTypeCode_PATIENT_REPORTED_NAME DeviceNameTypeCode_Value = 3
)

// Enum value maps for DeviceNameTypeCode_Value.
var (
	DeviceNameTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		7: "REGISTERED_NAME",
		2: "USER_FRIENDLY_NAME",
		3: "PATIENT_REPORTED_NAME",
	}
	DeviceNameTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"REGISTERED_NAME":       7,
		"USER_FRIENDLY_NAME":    2,
		"PATIENT_REPORTED_NAME": 3,
	}
)

func (x DeviceNameTypeCode_Value) Enum() *DeviceNameTypeCode_Value {
	p := new(DeviceNameTypeCode_Value)
	*p = x
	return p
}

func (x DeviceNameTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceNameTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[74].Descriptor()
}

func (DeviceNameTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[74]
}

func (x DeviceNameTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceNameTypeCode_Value.Descriptor instead.
func (DeviceNameTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{74, 0}
}

type DeviceProductionIdentifierInUDICode_Value int32

const (
	DeviceProductionIdentifierInUDICode_INVALID_UNINITIALIZED DeviceProductionIdentifierInUDICode_Value = 0
	DeviceProductionIdentifierInUDICode_LOT_NUMBER            DeviceProductionIdentifierInUDICode_Value = 1
	DeviceProductionIdentifierInUDICode_MANUFACTURED_DATE     DeviceProductionIdentifierInUDICode_Value = 2
	DeviceProductionIdentifierInUDICode_SERIAL_NUMBER         DeviceProductionIdentifierInUDICode_Value = 3
	DeviceProductionIdentifierInUDICode_EXPIRATION_DATE       DeviceProductionIdentifierInUDICode_Value = 4
	DeviceProductionIdentifierInUDICode_BIOLOGICAL_SOURCE     DeviceProductionIdentifierInUDICode_Value = 5
	DeviceProductionIdentifierInUDICode_SOFTWARE_VERSION      DeviceProductionIdentifierInUDICode_Value = 6
)

// Enum value maps for DeviceProductionIdentifierInUDICode_Value.
var (
	DeviceProductionIdentifierInUDICode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "LOT_NUMBER",
		2: "MANUFACTURED_DATE",
		3: "SERIAL_NUMBER",
		4: "EXPIRATION_DATE",
		5: "BIOLOGICAL_SOURCE",
		6: "SOFTWARE_VERSION",
	}
	DeviceProductionIdentifierInUDICode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"LOT_NUMBER":            1,
		"MANUFACTURED_DATE":     2,
		"SERIAL_NUMBER":         3,
		"EXPIRATION_DATE":       4,
		"BIOLOGICAL_SOURCE":     5,
		"SOFTWARE_VERSION":      6,
	}
)

func (x DeviceProductionIdentifierInUDICode_Value) Enum() *DeviceProductionIdentifierInUDICode_Value {
	p := new(DeviceProductionIdentifierInUDICode_Value)
	*p = x
	return p
}

func (x DeviceProductionIdentifierInUDICode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceProductionIdentifierInUDICode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[75].Descriptor()
}

func (DeviceProductionIdentifierInUDICode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[75]
}

func (x DeviceProductionIdentifierInUDICode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceProductionIdentifierInUDICode_Value.Descriptor instead.
func (DeviceProductionIdentifierInUDICode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{75, 0}
}

type DeviceRegulatoryIdentifierTypeCode_Value int32

const (
	DeviceRegulatoryIdentifierTypeCode_INVALID_UNINITIALIZED DeviceRegulatoryIdentifierTypeCode_Value = 0
	DeviceRegulatoryIdentifierTypeCode_BASIC                 DeviceRegulatoryIdentifierTypeCode_Value = 1
	DeviceRegulatoryIdentifierTypeCode_MASTER                DeviceRegulatoryIdentifierTypeCode_Value = 2
	DeviceRegulatoryIdentifierTypeCode_LICENSE               DeviceRegulatoryIdentifierTypeCode_Value = 3
)

// Enum value maps for DeviceRegulatoryIdentifierTypeCode_Value.
var (
	DeviceRegulatoryIdentifierTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "BASIC",
		2: "MASTER",
		3: "LICENSE",
	}
	DeviceRegulatoryIdentifierTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"BASIC":                 1,
		"MASTER":                2,
		"LICENSE":               3,
	}
)

func (x DeviceRegulatoryIdentifierTypeCode_Value) Enum() *DeviceRegulatoryIdentifierTypeCode_Value {
	p := new(DeviceRegulatoryIdentifierTypeCode_Value)
	*p = x
	return p
}

func (x DeviceRegulatoryIdentifierTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceRegulatoryIdentifierTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[76].Descriptor()
}

func (DeviceRegulatoryIdentifierTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[76]
}

func (x DeviceRegulatoryIdentifierTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceRegulatoryIdentifierTypeCode_Value.Descriptor instead.
func (DeviceRegulatoryIdentifierTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{76, 0}
}

type DeviceUsageStatusCode_Value int32

const (
	DeviceUsageStatusCode_INVALID_UNINITIALIZED DeviceUsageStatusCode_Value = 0
	DeviceUsageStatusCode_ACTIVE                DeviceUsageStatusCode_Value = 1
	DeviceUsageStatusCode_COMPLETED             DeviceUsageStatusCode_Value = 2
	DeviceUsageStatusCode_NOT_DONE              DeviceUsageStatusCode_Value = 3
	DeviceUsageStatusCode_ENTERED_IN_ERROR      DeviceUsageStatusCode_Value = 4
	DeviceUsageStatusCode_INTENDED              DeviceUsageStatusCode_Value = 5
	DeviceUsageStatusCode_STOPPED               DeviceUsageStatusCode_Value = 6
	DeviceUsageStatusCode_ON_HOLD               DeviceUsageStatusCode_Value = 7
)

// Enum value maps for DeviceUsageStatusCode_Value.
var (
	DeviceUsageStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "COMPLETED",
		3: "NOT_DONE",
		4: "ENTERED_IN_ERROR",
		5: "INTENDED",
		6: "STOPPED",
		7: "ON_HOLD",
	}
	DeviceUsageStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"COMPLETED":             2,
		"NOT_DONE":              3,
		"ENTERED_IN_ERROR":      4,
		"INTENDED":              5,
		"STOPPED":               6,
		"ON_HOLD":               7,
	}
)

func (x DeviceUsageStatusCode_Value) Enum() *DeviceUsageStatusCode_Value {
	p := new(DeviceUsageStatusCode_Value)
	*p = x
	return p
}

func (x DeviceUsageStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceUsageStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[77].Descriptor()
}

func (DeviceUsageStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[77]
}

func (x DeviceUsageStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceUsageStatusCode_Value.Descriptor instead.
func (DeviceUsageStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{77, 0}
}

type DiagnosticReportStatusCode_Value int32

const (
	DiagnosticReportStatusCode_INVALID_UNINITIALIZED DiagnosticReportStatusCode_Value = 0
	DiagnosticReportStatusCode_REGISTERED            DiagnosticReportStatusCode_Value = 1
	DiagnosticReportStatusCode_PARTIAL               DiagnosticReportStatusCode_Value = 2
	DiagnosticReportStatusCode_PRELIMINARY           DiagnosticReportStatusCode_Value = 3
	DiagnosticReportStatusCode_MODIFIED              DiagnosticReportStatusCode_Value = 11
	DiagnosticReportStatusCode_FINAL                 DiagnosticReportStatusCode_Value = 4
	DiagnosticReportStatusCode_AMENDED               DiagnosticReportStatusCode_Value = 5
	DiagnosticReportStatusCode_CORRECTED             DiagnosticReportStatusCode_Value = 6
	DiagnosticReportStatusCode_APPENDED              DiagnosticReportStatusCode_Value = 7
	DiagnosticReportStatusCode_CANCELLED             DiagnosticReportStatusCode_Value = 8
	DiagnosticReportStatusCode_ENTERED_IN_ERROR      DiagnosticReportStatusCode_Value = 9
	DiagnosticReportStatusCode_UNKNOWN               DiagnosticReportStatusCode_Value = 10
)

// Enum value maps for DiagnosticReportStatusCode_Value.
var (
	DiagnosticReportStatusCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "REGISTERED",
		2:  "PARTIAL",
		3:  "PRELIMINARY",
		11: "MODIFIED",
		4:  "FINAL",
		5:  "AMENDED",
		6:  "CORRECTED",
		7:  "APPENDED",
		8:  "CANCELLED",
		9:  "ENTERED_IN_ERROR",
		10: "UNKNOWN",
	}
	DiagnosticReportStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"REGISTERED":            1,
		"PARTIAL":               2,
		"PRELIMINARY":           3,
		"MODIFIED":              11,
		"FINAL":                 4,
		"AMENDED":               5,
		"CORRECTED":             6,
		"APPENDED":              7,
		"CANCELLED":             8,
		"ENTERED_IN_ERROR":      9,
		"UNKNOWN":               10,
	}
)

func (x DiagnosticReportStatusCode_Value) Enum() *DiagnosticReportStatusCode_Value {
	p := new(DiagnosticReportStatusCode_Value)
	*p = x
	return p
}

func (x DiagnosticReportStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiagnosticReportStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[78].Descriptor()
}

func (DiagnosticReportStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[78]
}

func (x DiagnosticReportStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiagnosticReportStatusCode_Value.Descriptor instead.
func (DiagnosticReportStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{78, 0}
}

type DiscriminatorTypeCode_Value int32

const (
	DiscriminatorTypeCode_INVALID_UNINITIALIZED DiscriminatorTypeCode_Value = 0
	DiscriminatorTypeCode_VALUE                 DiscriminatorTypeCode_Value = 1
	DiscriminatorTypeCode_EXISTS                DiscriminatorTypeCode_Value = 2
	DiscriminatorTypeCode_PATTERN               DiscriminatorTypeCode_Value = 3
	DiscriminatorTypeCode_TYPE                  DiscriminatorTypeCode_Value = 4
	DiscriminatorTypeCode_PROFILE               DiscriminatorTypeCode_Value = 5
	DiscriminatorTypeCode_POSITION              DiscriminatorTypeCode_Value = 6
)

// Enum value maps for DiscriminatorTypeCode_Value.
var (
	DiscriminatorTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "VALUE",
		2: "EXISTS",
		3: "PATTERN",
		4: "TYPE",
		5: "PROFILE",
		6: "POSITION",
	}
	DiscriminatorTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"VALUE":                 1,
		"EXISTS":                2,
		"PATTERN":               3,
		"TYPE":                  4,
		"PROFILE":               5,
		"POSITION":              6,
	}
)

func (x DiscriminatorTypeCode_Value) Enum() *DiscriminatorTypeCode_Value {
	p := new(DiscriminatorTypeCode_Value)
	*p = x
	return p
}

func (x DiscriminatorTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiscriminatorTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[79].Descriptor()
}

func (DiscriminatorTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[79]
}

func (x DiscriminatorTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiscriminatorTypeCode_Value.Descriptor instead.
func (DiscriminatorTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{79, 0}
}

type DocumentModeCode_Value int32

const (
	DocumentModeCode_INVALID_UNINITIALIZED DocumentModeCode_Value = 0
	DocumentModeCode_PRODUCER              DocumentModeCode_Value = 1
	DocumentModeCode_CONSUMER              DocumentModeCode_Value = 2
)

// Enum value maps for DocumentModeCode_Value.
var (
	DocumentModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PRODUCER",
		2: "CONSUMER",
	}
	DocumentModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PRODUCER":              1,
		"CONSUMER":              2,
	}
)

func (x DocumentModeCode_Value) Enum() *DocumentModeCode_Value {
	p := new(DocumentModeCode_Value)
	*p = x
	return p
}

func (x DocumentModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DocumentModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[80].Descriptor()
}

func (DocumentModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[80]
}

func (x DocumentModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DocumentModeCode_Value.Descriptor instead.
func (DocumentModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{80, 0}
}

type DocumentReferenceStatusCode_Value int32

const (
	DocumentReferenceStatusCode_INVALID_UNINITIALIZED DocumentReferenceStatusCode_Value = 0
	DocumentReferenceStatusCode_CURRENT               DocumentReferenceStatusCode_Value = 1
	DocumentReferenceStatusCode_SUPERSEDED            DocumentReferenceStatusCode_Value = 2
	DocumentReferenceStatusCode_ENTERED_IN_ERROR      DocumentReferenceStatusCode_Value = 3
)

// Enum value maps for DocumentReferenceStatusCode_Value.
var (
	DocumentReferenceStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CURRENT",
		2: "SUPERSEDED",
		3: "ENTERED_IN_ERROR",
	}
	DocumentReferenceStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CURRENT":               1,
		"SUPERSEDED":            2,
		"ENTERED_IN_ERROR":      3,
	}
)

func (x DocumentReferenceStatusCode_Value) Enum() *DocumentReferenceStatusCode_Value {
	p := new(DocumentReferenceStatusCode_Value)
	*p = x
	return p
}

func (x DocumentReferenceStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DocumentReferenceStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[81].Descriptor()
}

func (DocumentReferenceStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[81]
}

func (x DocumentReferenceStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DocumentReferenceStatusCode_Value.Descriptor instead.
func (DocumentReferenceStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{81, 0}
}

type EligibilityOutcomeCode_Value int32

const (
	EligibilityOutcomeCode_INVALID_UNINITIALIZED EligibilityOutcomeCode_Value = 0
	EligibilityOutcomeCode_QUEUED                EligibilityOutcomeCode_Value = 1
	EligibilityOutcomeCode_COMPLETE              EligibilityOutcomeCode_Value = 2
	EligibilityOutcomeCode_ERROR                 EligibilityOutcomeCode_Value = 3
	EligibilityOutcomeCode_PARTIAL               EligibilityOutcomeCode_Value = 4
)

// Enum value maps for EligibilityOutcomeCode_Value.
var (
	EligibilityOutcomeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "QUEUED",
		2: "COMPLETE",
		3: "ERROR",
		4: "PARTIAL",
	}
	EligibilityOutcomeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"QUEUED":                1,
		"COMPLETE":              2,
		"ERROR":                 3,
		"PARTIAL":               4,
	}
)

func (x EligibilityOutcomeCode_Value) Enum() *EligibilityOutcomeCode_Value {
	p := new(EligibilityOutcomeCode_Value)
	*p = x
	return p
}

func (x EligibilityOutcomeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EligibilityOutcomeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[82].Descriptor()
}

func (EligibilityOutcomeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[82]
}

func (x EligibilityOutcomeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EligibilityOutcomeCode_Value.Descriptor instead.
func (EligibilityOutcomeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{82, 0}
}

type EligibilityRequestPurposeCode_Value int32

const (
	EligibilityRequestPurposeCode_INVALID_UNINITIALIZED EligibilityRequestPurposeCode_Value = 0
	EligibilityRequestPurposeCode_AUTH_REQUIREMENTS     EligibilityRequestPurposeCode_Value = 1
	EligibilityRequestPurposeCode_BENEFITS              EligibilityRequestPurposeCode_Value = 2
	EligibilityRequestPurposeCode_DISCOVERY             EligibilityRequestPurposeCode_Value = 3
	EligibilityRequestPurposeCode_VALIDATION            EligibilityRequestPurposeCode_Value = 4
)

// Enum value maps for EligibilityRequestPurposeCode_Value.
var (
	EligibilityRequestPurposeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "AUTH_REQUIREMENTS",
		2: "BENEFITS",
		3: "DISCOVERY",
		4: "VALIDATION",
	}
	EligibilityRequestPurposeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"AUTH_REQUIREMENTS":     1,
		"BENEFITS":              2,
		"DISCOVERY":             3,
		"VALIDATION":            4,
	}
)

func (x EligibilityRequestPurposeCode_Value) Enum() *EligibilityRequestPurposeCode_Value {
	p := new(EligibilityRequestPurposeCode_Value)
	*p = x
	return p
}

func (x EligibilityRequestPurposeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EligibilityRequestPurposeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[83].Descriptor()
}

func (EligibilityRequestPurposeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[83]
}

func (x EligibilityRequestPurposeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EligibilityRequestPurposeCode_Value.Descriptor instead.
func (EligibilityRequestPurposeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{83, 0}
}

type EligibilityResponsePurposeCode_Value int32

const (
	EligibilityResponsePurposeCode_INVALID_UNINITIALIZED EligibilityResponsePurposeCode_Value = 0
	EligibilityResponsePurposeCode_AUTH_REQUIREMENTS     EligibilityResponsePurposeCode_Value = 1
	EligibilityResponsePurposeCode_BENEFITS              EligibilityResponsePurposeCode_Value = 2
	EligibilityResponsePurposeCode_DISCOVERY             EligibilityResponsePurposeCode_Value = 3
	EligibilityResponsePurposeCode_VALIDATION            EligibilityResponsePurposeCode_Value = 4
)

// Enum value maps for EligibilityResponsePurposeCode_Value.
var (
	EligibilityResponsePurposeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "AUTH_REQUIREMENTS",
		2: "BENEFITS",
		3: "DISCOVERY",
		4: "VALIDATION",
	}
	EligibilityResponsePurposeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"AUTH_REQUIREMENTS":     1,
		"BENEFITS":              2,
		"DISCOVERY":             3,
		"VALIDATION":            4,
	}
)

func (x EligibilityResponsePurposeCode_Value) Enum() *EligibilityResponsePurposeCode_Value {
	p := new(EligibilityResponsePurposeCode_Value)
	*p = x
	return p
}

func (x EligibilityResponsePurposeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EligibilityResponsePurposeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[84].Descriptor()
}

func (EligibilityResponsePurposeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[84]
}

func (x EligibilityResponsePurposeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EligibilityResponsePurposeCode_Value.Descriptor instead.
func (EligibilityResponsePurposeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{84, 0}
}

type EnableWhenBehaviorCode_Value int32

const (
	EnableWhenBehaviorCode_INVALID_UNINITIALIZED EnableWhenBehaviorCode_Value = 0
	EnableWhenBehaviorCode_ALL                   EnableWhenBehaviorCode_Value = 1
	EnableWhenBehaviorCode_ANY                   EnableWhenBehaviorCode_Value = 2
)

// Enum value maps for EnableWhenBehaviorCode_Value.
var (
	EnableWhenBehaviorCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ALL",
		2: "ANY",
	}
	EnableWhenBehaviorCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ALL":                   1,
		"ANY":                   2,
	}
)

func (x EnableWhenBehaviorCode_Value) Enum() *EnableWhenBehaviorCode_Value {
	p := new(EnableWhenBehaviorCode_Value)
	*p = x
	return p
}

func (x EnableWhenBehaviorCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnableWhenBehaviorCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[85].Descriptor()
}

func (EnableWhenBehaviorCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[85]
}

func (x EnableWhenBehaviorCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnableWhenBehaviorCode_Value.Descriptor instead.
func (EnableWhenBehaviorCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{85, 0}
}

type EncounterLocationStatusCode_Value int32

const (
	EncounterLocationStatusCode_INVALID_UNINITIALIZED EncounterLocationStatusCode_Value = 0
	EncounterLocationStatusCode_PLANNED               EncounterLocationStatusCode_Value = 1
	EncounterLocationStatusCode_ACTIVE                EncounterLocationStatusCode_Value = 2
	EncounterLocationStatusCode_RESERVED              EncounterLocationStatusCode_Value = 3
	EncounterLocationStatusCode_COMPLETED             EncounterLocationStatusCode_Value = 4
)

// Enum value maps for EncounterLocationStatusCode_Value.
var (
	EncounterLocationStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PLANNED",
		2: "ACTIVE",
		3: "RESERVED",
		4: "COMPLETED",
	}
	EncounterLocationStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PLANNED":               1,
		"ACTIVE":                2,
		"RESERVED":              3,
		"COMPLETED":             4,
	}
)

func (x EncounterLocationStatusCode_Value) Enum() *EncounterLocationStatusCode_Value {
	p := new(EncounterLocationStatusCode_Value)
	*p = x
	return p
}

func (x EncounterLocationStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncounterLocationStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[86].Descriptor()
}

func (EncounterLocationStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[86]
}

func (x EncounterLocationStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncounterLocationStatusCode_Value.Descriptor instead.
func (EncounterLocationStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{86, 0}
}

type EncounterStatusCode_Value int32

const (
	EncounterStatusCode_INVALID_UNINITIALIZED EncounterStatusCode_Value = 0
	EncounterStatusCode_PLANNED               EncounterStatusCode_Value = 1
	EncounterStatusCode_IN_PROGRESS           EncounterStatusCode_Value = 4
	EncounterStatusCode_ON_HOLD               EncounterStatusCode_Value = 10
	EncounterStatusCode_DISCHARGED            EncounterStatusCode_Value = 11
	EncounterStatusCode_COMPLETED             EncounterStatusCode_Value = 12
	EncounterStatusCode_CANCELLED             EncounterStatusCode_Value = 7
	EncounterStatusCode_DISCONTINUED          EncounterStatusCode_Value = 13
	EncounterStatusCode_ENTERED_IN_ERROR      EncounterStatusCode_Value = 8
	EncounterStatusCode_UNKNOWN               EncounterStatusCode_Value = 9
)

// Enum value maps for EncounterStatusCode_Value.
var (
	EncounterStatusCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "PLANNED",
		4:  "IN_PROGRESS",
		10: "ON_HOLD",
		11: "DISCHARGED",
		12: "COMPLETED",
		7:  "CANCELLED",
		13: "DISCONTINUED",
		8:  "ENTERED_IN_ERROR",
		9:  "UNKNOWN",
	}
	EncounterStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PLANNED":               1,
		"IN_PROGRESS":           4,
		"ON_HOLD":               10,
		"DISCHARGED":            11,
		"COMPLETED":             12,
		"CANCELLED":             7,
		"DISCONTINUED":          13,
		"ENTERED_IN_ERROR":      8,
		"UNKNOWN":               9,
	}
)

func (x EncounterStatusCode_Value) Enum() *EncounterStatusCode_Value {
	p := new(EncounterStatusCode_Value)
	*p = x
	return p
}

func (x EncounterStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncounterStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[87].Descriptor()
}

func (EncounterStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[87]
}

func (x EncounterStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncounterStatusCode_Value.Descriptor instead.
func (EncounterStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{87, 0}
}

type EndpointStatusCode_Value int32

const (
	EndpointStatusCode_INVALID_UNINITIALIZED EndpointStatusCode_Value = 0
	EndpointStatusCode_ACTIVE                EndpointStatusCode_Value = 1
	EndpointStatusCode_SUSPENDED             EndpointStatusCode_Value = 2
	EndpointStatusCode_ERROR                 EndpointStatusCode_Value = 3
	EndpointStatusCode_OFF                   EndpointStatusCode_Value = 4
	EndpointStatusCode_ENTERED_IN_ERROR      EndpointStatusCode_Value = 5
)

// Enum value maps for EndpointStatusCode_Value.
var (
	EndpointStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "SUSPENDED",
		3: "ERROR",
		4: "OFF",
		5: "ENTERED_IN_ERROR",
	}
	EndpointStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"SUSPENDED":             2,
		"ERROR":                 3,
		"OFF":                   4,
		"ENTERED_IN_ERROR":      5,
	}
)

func (x EndpointStatusCode_Value) Enum() *EndpointStatusCode_Value {
	p := new(EndpointStatusCode_Value)
	*p = x
	return p
}

func (x EndpointStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EndpointStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[88].Descriptor()
}

func (EndpointStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[88]
}

func (x EndpointStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EndpointStatusCode_Value.Descriptor instead.
func (EndpointStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{88, 0}
}

type EnrollmentOutcomeCode_Value int32

const (
	EnrollmentOutcomeCode_INVALID_UNINITIALIZED EnrollmentOutcomeCode_Value = 0
	EnrollmentOutcomeCode_QUEUED                EnrollmentOutcomeCode_Value = 1
	EnrollmentOutcomeCode_COMPLETE              EnrollmentOutcomeCode_Value = 2
	EnrollmentOutcomeCode_ERROR                 EnrollmentOutcomeCode_Value = 3
	EnrollmentOutcomeCode_PARTIAL               EnrollmentOutcomeCode_Value = 4
)

// Enum value maps for EnrollmentOutcomeCode_Value.
var (
	EnrollmentOutcomeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "QUEUED",
		2: "COMPLETE",
		3: "ERROR",
		4: "PARTIAL",
	}
	EnrollmentOutcomeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"QUEUED":                1,
		"COMPLETE":              2,
		"ERROR":                 3,
		"PARTIAL":               4,
	}
)

func (x EnrollmentOutcomeCode_Value) Enum() *EnrollmentOutcomeCode_Value {
	p := new(EnrollmentOutcomeCode_Value)
	*p = x
	return p
}

func (x EnrollmentOutcomeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnrollmentOutcomeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[89].Descriptor()
}

func (EnrollmentOutcomeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[89]
}

func (x EnrollmentOutcomeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnrollmentOutcomeCode_Value.Descriptor instead.
func (EnrollmentOutcomeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{89, 0}
}

type EpisodeOfCareStatusCode_Value int32

const (
	EpisodeOfCareStatusCode_INVALID_UNINITIALIZED EpisodeOfCareStatusCode_Value = 0
	EpisodeOfCareStatusCode_PLANNED               EpisodeOfCareStatusCode_Value = 1
	EpisodeOfCareStatusCode_WAITLIST              EpisodeOfCareStatusCode_Value = 2
	EpisodeOfCareStatusCode_ACTIVE                EpisodeOfCareStatusCode_Value = 3
	EpisodeOfCareStatusCode_ONHOLD                EpisodeOfCareStatusCode_Value = 4
	EpisodeOfCareStatusCode_FINISHED              EpisodeOfCareStatusCode_Value = 5
	EpisodeOfCareStatusCode_CANCELLED             EpisodeOfCareStatusCode_Value = 6
	EpisodeOfCareStatusCode_ENTERED_IN_ERROR      EpisodeOfCareStatusCode_Value = 7
)

// Enum value maps for EpisodeOfCareStatusCode_Value.
var (
	EpisodeOfCareStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PLANNED",
		2: "WAITLIST",
		3: "ACTIVE",
		4: "ONHOLD",
		5: "FINISHED",
		6: "CANCELLED",
		7: "ENTERED_IN_ERROR",
	}
	EpisodeOfCareStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PLANNED":               1,
		"WAITLIST":              2,
		"ACTIVE":                3,
		"ONHOLD":                4,
		"FINISHED":              5,
		"CANCELLED":             6,
		"ENTERED_IN_ERROR":      7,
	}
)

func (x EpisodeOfCareStatusCode_Value) Enum() *EpisodeOfCareStatusCode_Value {
	p := new(EpisodeOfCareStatusCode_Value)
	*p = x
	return p
}

func (x EpisodeOfCareStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EpisodeOfCareStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[90].Descriptor()
}

func (EpisodeOfCareStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[90]
}

func (x EpisodeOfCareStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EpisodeOfCareStatusCode_Value.Descriptor instead.
func (EpisodeOfCareStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{90, 0}
}

type EventCapabilityModeCode_Value int32

const (
	EventCapabilityModeCode_INVALID_UNINITIALIZED EventCapabilityModeCode_Value = 0
	EventCapabilityModeCode_SENDER                EventCapabilityModeCode_Value = 1
	EventCapabilityModeCode_RECEIVER              EventCapabilityModeCode_Value = 2
)

// Enum value maps for EventCapabilityModeCode_Value.
var (
	EventCapabilityModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "SENDER",
		2: "RECEIVER",
	}
	EventCapabilityModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"SENDER":                1,
		"RECEIVER":              2,
	}
)

func (x EventCapabilityModeCode_Value) Enum() *EventCapabilityModeCode_Value {
	p := new(EventCapabilityModeCode_Value)
	*p = x
	return p
}

func (x EventCapabilityModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventCapabilityModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[91].Descriptor()
}

func (EventCapabilityModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[91]
}

func (x EventCapabilityModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventCapabilityModeCode_Value.Descriptor instead.
func (EventCapabilityModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{91, 0}
}

type EventStatusCode_Value int32

const (
	EventStatusCode_INVALID_UNINITIALIZED EventStatusCode_Value = 0
	EventStatusCode_PREPARATION           EventStatusCode_Value = 1
	EventStatusCode_IN_PROGRESS           EventStatusCode_Value = 2
	EventStatusCode_NOT_DONE              EventStatusCode_Value = 3
	EventStatusCode_ON_HOLD               EventStatusCode_Value = 4
	EventStatusCode_STOPPED               EventStatusCode_Value = 5
	EventStatusCode_COMPLETED             EventStatusCode_Value = 6
	EventStatusCode_ENTERED_IN_ERROR      EventStatusCode_Value = 7
	EventStatusCode_UNKNOWN               EventStatusCode_Value = 8
)

// Enum value maps for EventStatusCode_Value.
var (
	EventStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PREPARATION",
		2: "IN_PROGRESS",
		3: "NOT_DONE",
		4: "ON_HOLD",
		5: "STOPPED",
		6: "COMPLETED",
		7: "ENTERED_IN_ERROR",
		8: "UNKNOWN",
	}
	EventStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PREPARATION":           1,
		"IN_PROGRESS":           2,
		"NOT_DONE":              3,
		"ON_HOLD":               4,
		"STOPPED":               5,
		"COMPLETED":             6,
		"ENTERED_IN_ERROR":      7,
		"UNKNOWN":               8,
	}
)

func (x EventStatusCode_Value) Enum() *EventStatusCode_Value {
	p := new(EventStatusCode_Value)
	*p = x
	return p
}

func (x EventStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[92].Descriptor()
}

func (EventStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[92]
}

func (x EventStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventStatusCode_Value.Descriptor instead.
func (EventStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{92, 0}
}

type EventTimingCode_Value int32

const (
	EventTimingCode_INVALID_UNINITIALIZED EventTimingCode_Value = 0
	EventTimingCode_MORN                  EventTimingCode_Value = 1
	EventTimingCode_MORN_EARLY            EventTimingCode_Value = 2
	EventTimingCode_MORN_LATE             EventTimingCode_Value = 3
	EventTimingCode_NOON                  EventTimingCode_Value = 4
	EventTimingCode_AFT                   EventTimingCode_Value = 5
	EventTimingCode_AFT_EARLY             EventTimingCode_Value = 6
	EventTimingCode_AFT_LATE              EventTimingCode_Value = 7
	EventTimingCode_EVE                   EventTimingCode_Value = 8
	EventTimingCode_EVE_EARLY             EventTimingCode_Value = 9
	EventTimingCode_EVE_LATE              EventTimingCode_Value = 10
	EventTimingCode_NIGHT                 EventTimingCode_Value = 11
	EventTimingCode_PHS                   EventTimingCode_Value = 12
	EventTimingCode_IMD                   EventTimingCode_Value = 13
)

// Enum value maps for EventTimingCode_Value.
var (
	EventTimingCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "MORN",
		2:  "MORN_EARLY",
		3:  "MORN_LATE",
		4:  "NOON",
		5:  "AFT",
		6:  "AFT_EARLY",
		7:  "AFT_LATE",
		8:  "EVE",
		9:  "EVE_EARLY",
		10: "EVE_LATE",
		11: "NIGHT",
		12: "PHS",
		13: "IMD",
	}
	EventTimingCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"MORN":                  1,
		"MORN_EARLY":            2,
		"MORN_LATE":             3,
		"NOON":                  4,
		"AFT":                   5,
		"AFT_EARLY":             6,
		"AFT_LATE":              7,
		"EVE":                   8,
		"EVE_EARLY":             9,
		"EVE_LATE":              10,
		"NIGHT":                 11,
		"PHS":                   12,
		"IMD":                   13,
	}
)

func (x EventTimingCode_Value) Enum() *EventTimingCode_Value {
	p := new(EventTimingCode_Value)
	*p = x
	return p
}

func (x EventTimingCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventTimingCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[93].Descriptor()
}

func (EventTimingCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[93]
}

func (x EventTimingCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventTimingCode_Value.Descriptor instead.
func (EventTimingCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{93, 0}
}

type EvidenceVariableHandlingCode_Value int32

const (
	EvidenceVariableHandlingCode_INVALID_UNINITIALIZED EvidenceVariableHandlingCode_Value = 0
	EvidenceVariableHandlingCode_CONTINUOUS            EvidenceVariableHandlingCode_Value = 1
	EvidenceVariableHandlingCode_DICHOTOMOUS           EvidenceVariableHandlingCode_Value = 2
	EvidenceVariableHandlingCode_ORDINAL               EvidenceVariableHandlingCode_Value = 3
	EvidenceVariableHandlingCode_POLYCHOTOMOUS         EvidenceVariableHandlingCode_Value = 4
)

// Enum value maps for EvidenceVariableHandlingCode_Value.
var (
	EvidenceVariableHandlingCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CONTINUOUS",
		2: "DICHOTOMOUS",
		3: "ORDINAL",
		4: "POLYCHOTOMOUS",
	}
	EvidenceVariableHandlingCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CONTINUOUS":            1,
		"DICHOTOMOUS":           2,
		"ORDINAL":               3,
		"POLYCHOTOMOUS":         4,
	}
)

func (x EvidenceVariableHandlingCode_Value) Enum() *EvidenceVariableHandlingCode_Value {
	p := new(EvidenceVariableHandlingCode_Value)
	*p = x
	return p
}

func (x EvidenceVariableHandlingCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EvidenceVariableHandlingCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[94].Descriptor()
}

func (EvidenceVariableHandlingCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[94]
}

func (x EvidenceVariableHandlingCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EvidenceVariableHandlingCode_Value.Descriptor instead.
func (EvidenceVariableHandlingCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{94, 0}
}

type ExampleScenarioActorTypeCode_Value int32

const (
	ExampleScenarioActorTypeCode_INVALID_UNINITIALIZED ExampleScenarioActorTypeCode_Value = 0
	ExampleScenarioActorTypeCode_PERSON                ExampleScenarioActorTypeCode_Value = 1
	ExampleScenarioActorTypeCode_SYSTEM                ExampleScenarioActorTypeCode_Value = 3
)

// Enum value maps for ExampleScenarioActorTypeCode_Value.
var (
	ExampleScenarioActorTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PERSON",
		3: "SYSTEM",
	}
	ExampleScenarioActorTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PERSON":                1,
		"SYSTEM":                3,
	}
)

func (x ExampleScenarioActorTypeCode_Value) Enum() *ExampleScenarioActorTypeCode_Value {
	p := new(ExampleScenarioActorTypeCode_Value)
	*p = x
	return p
}

func (x ExampleScenarioActorTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExampleScenarioActorTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[95].Descriptor()
}

func (ExampleScenarioActorTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[95]
}

func (x ExampleScenarioActorTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExampleScenarioActorTypeCode_Value.Descriptor instead.
func (ExampleScenarioActorTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{95, 0}
}

type ExplanationOfBenefitStatusCode_Value int32

const (
	ExplanationOfBenefitStatusCode_INVALID_UNINITIALIZED ExplanationOfBenefitStatusCode_Value = 0
	ExplanationOfBenefitStatusCode_ACTIVE                ExplanationOfBenefitStatusCode_Value = 1
	ExplanationOfBenefitStatusCode_CANCELLED             ExplanationOfBenefitStatusCode_Value = 2
	ExplanationOfBenefitStatusCode_DRAFT                 ExplanationOfBenefitStatusCode_Value = 3
	ExplanationOfBenefitStatusCode_ENTERED_IN_ERROR      ExplanationOfBenefitStatusCode_Value = 4
)

// Enum value maps for ExplanationOfBenefitStatusCode_Value.
var (
	ExplanationOfBenefitStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "CANCELLED",
		3: "DRAFT",
		4: "ENTERED_IN_ERROR",
	}
	ExplanationOfBenefitStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"CANCELLED":             2,
		"DRAFT":                 3,
		"ENTERED_IN_ERROR":      4,
	}
)

func (x ExplanationOfBenefitStatusCode_Value) Enum() *ExplanationOfBenefitStatusCode_Value {
	p := new(ExplanationOfBenefitStatusCode_Value)
	*p = x
	return p
}

func (x ExplanationOfBenefitStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExplanationOfBenefitStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[96].Descriptor()
}

func (ExplanationOfBenefitStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[96]
}

func (x ExplanationOfBenefitStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExplanationOfBenefitStatusCode_Value.Descriptor instead.
func (ExplanationOfBenefitStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{96, 0}
}

type ExtensionContextTypeCode_Value int32

const (
	ExtensionContextTypeCode_INVALID_UNINITIALIZED ExtensionContextTypeCode_Value = 0
	ExtensionContextTypeCode_FHIRPATH              ExtensionContextTypeCode_Value = 1
	ExtensionContextTypeCode_ELEMENT               ExtensionContextTypeCode_Value = 2
	ExtensionContextTypeCode_EXTENSION             ExtensionContextTypeCode_Value = 3
)

// Enum value maps for ExtensionContextTypeCode_Value.
var (
	ExtensionContextTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "FHIRPATH",
		2: "ELEMENT",
		3: "EXTENSION",
	}
	ExtensionContextTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"FHIRPATH":              1,
		"ELEMENT":               2,
		"EXTENSION":             3,
	}
)

func (x ExtensionContextTypeCode_Value) Enum() *ExtensionContextTypeCode_Value {
	p := new(ExtensionContextTypeCode_Value)
	*p = x
	return p
}

func (x ExtensionContextTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExtensionContextTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[97].Descriptor()
}

func (ExtensionContextTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[97]
}

func (x ExtensionContextTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExtensionContextTypeCode_Value.Descriptor instead.
func (ExtensionContextTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{97, 0}
}

type FHIRCanonicalStatusCode_Value int32

const (
	FHIRCanonicalStatusCode_INVALID_UNINITIALIZED FHIRCanonicalStatusCode_Value = 0
	FHIRCanonicalStatusCode_ERROR                 FHIRCanonicalStatusCode_Value = 1
	FHIRCanonicalStatusCode_PROPOSED              FHIRCanonicalStatusCode_Value = 2
	FHIRCanonicalStatusCode_PLANNED               FHIRCanonicalStatusCode_Value = 3
	FHIRCanonicalStatusCode_DRAFT                 FHIRCanonicalStatusCode_Value = 4
	FHIRCanonicalStatusCode_REQUESTED             FHIRCanonicalStatusCode_Value = 5
	FHIRCanonicalStatusCode_RECEIVED              FHIRCanonicalStatusCode_Value = 6
	FHIRCanonicalStatusCode_DECLINED              FHIRCanonicalStatusCode_Value = 7
	FHIRCanonicalStatusCode_ACCEPTED              FHIRCanonicalStatusCode_Value = 8
	FHIRCanonicalStatusCode_ARRIVED               FHIRCanonicalStatusCode_Value = 9
	FHIRCanonicalStatusCode_ACTIVE                FHIRCanonicalStatusCode_Value = 10
	FHIRCanonicalStatusCode_SUSPENDED             FHIRCanonicalStatusCode_Value = 11
	FHIRCanonicalStatusCode_FAILED                FHIRCanonicalStatusCode_Value = 12
	FHIRCanonicalStatusCode_REPLACED              FHIRCanonicalStatusCode_Value = 13
	FHIRCanonicalStatusCode_COMPLETE              FHIRCanonicalStatusCode_Value = 14
	FHIRCanonicalStatusCode_INACTIVE              FHIRCanonicalStatusCode_Value = 15
	FHIRCanonicalStatusCode_ABANDONED             FHIRCanonicalStatusCode_Value = 16
	FHIRCanonicalStatusCode_UNKNOWN               FHIRCanonicalStatusCode_Value = 17
	FHIRCanonicalStatusCode_UNCONFIRMED           FHIRCanonicalStatusCode_Value = 18
	FHIRCanonicalStatusCode_CONFIRMED             FHIRCanonicalStatusCode_Value = 19
	FHIRCanonicalStatusCode_RESOLVED              FHIRCanonicalStatusCode_Value = 20
	FHIRCanonicalStatusCode_REFUTED               FHIRCanonicalStatusCode_Value = 21
	FHIRCanonicalStatusCode_DIFFERENTIAL          FHIRCanonicalStatusCode_Value = 22
	FHIRCanonicalStatusCode_PARTIAL               FHIRCanonicalStatusCode_Value = 23
	FHIRCanonicalStatusCode_BUSY_UNAVAILABLE      FHIRCanonicalStatusCode_Value = 24
	FHIRCanonicalStatusCode_FREE                  FHIRCanonicalStatusCode_Value = 25
	FHIRCanonicalStatusCode_ON_TARGET             FHIRCanonicalStatusCode_Value = 26
	FHIRCanonicalStatusCode_AHEAD_OF_TARGET       FHIRCanonicalStatusCode_Value = 27
	FHIRCanonicalStatusCode_BEHIND_TARGET         FHIRCanonicalStatusCode_Value = 28
	FHIRCanonicalStatusCode_NOT_READY             FHIRCanonicalStatusCode_Value = 29
	FHIRCanonicalStatusCode_TRANSDUC_DISCON       FHIRCanonicalStatusCode_Value = 30
	FHIRCanonicalStatusCode_HW_DISCON             FHIRCanonicalStatusCode_Value = 31
)

// Enum value maps for FHIRCanonicalStatusCode_Value.
var (
	FHIRCanonicalStatusCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "ERROR",
		2:  "PROPOSED",
		3:  "PLANNED",
		4:  "DRAFT",
		5:  "REQUESTED",
		6:  "RECEIVED",
		7:  "DECLINED",
		8:  "ACCEPTED",
		9:  "ARRIVED",
		10: "ACTIVE",
		11: "SUSPENDED",
		12: "FAILED",
		13: "REPLACED",
		14: "COMPLETE",
		15: "INACTIVE",
		16: "ABANDONED",
		17: "UNKNOWN",
		18: "UNCONFIRMED",
		19: "CONFIRMED",
		20: "RESOLVED",
		21: "REFUTED",
		22: "DIFFERENTIAL",
		23: "PARTIAL",
		24: "BUSY_UNAVAILABLE",
		25: "FREE",
		26: "ON_TARGET",
		27: "AHEAD_OF_TARGET",
		28: "BEHIND_TARGET",
		29: "NOT_READY",
		30: "TRANSDUC_DISCON",
		31: "HW_DISCON",
	}
	FHIRCanonicalStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ERROR":                 1,
		"PROPOSED":              2,
		"PLANNED":               3,
		"DRAFT":                 4,
		"REQUESTED":             5,
		"RECEIVED":              6,
		"DECLINED":              7,
		"ACCEPTED":              8,
		"ARRIVED":               9,
		"ACTIVE":                10,
		"SUSPENDED":             11,
		"FAILED":                12,
		"REPLACED":              13,
		"COMPLETE":              14,
		"INACTIVE":              15,
		"ABANDONED":             16,
		"UNKNOWN":               17,
		"UNCONFIRMED":           18,
		"CONFIRMED":             19,
		"RESOLVED":              20,
		"REFUTED":               21,
		"DIFFERENTIAL":          22,
		"PARTIAL":               23,
		"BUSY_UNAVAILABLE":      24,
		"FREE":                  25,
		"ON_TARGET":             26,
		"AHEAD_OF_TARGET":       27,
		"BEHIND_TARGET":         28,
		"NOT_READY":             29,
		"TRANSDUC_DISCON":       30,
		"HW_DISCON":             31,
	}
)

func (x FHIRCanonicalStatusCode_Value) Enum() *FHIRCanonicalStatusCode_Value {
	p := new(FHIRCanonicalStatusCode_Value)
	*p = x
	return p
}

func (x FHIRCanonicalStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FHIRCanonicalStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[98].Descriptor()
}

func (FHIRCanonicalStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[98]
}

func (x FHIRCanonicalStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FHIRCanonicalStatusCode_Value.Descriptor instead.
func (FHIRCanonicalStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{98, 0}
}

type FHIRDeviceStatusCode_Value int32

const (
	FHIRDeviceStatusCode_INVALID_UNINITIALIZED FHIRDeviceStatusCode_Value = 0
	FHIRDeviceStatusCode_ACTIVE                FHIRDeviceStatusCode_Value = 1
	FHIRDeviceStatusCode_INACTIVE              FHIRDeviceStatusCode_Value = 2
	FHIRDeviceStatusCode_ENTERED_IN_ERROR      FHIRDeviceStatusCode_Value = 3
)

// Enum value maps for FHIRDeviceStatusCode_Value.
var (
	FHIRDeviceStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "INACTIVE",
		3: "ENTERED_IN_ERROR",
	}
	FHIRDeviceStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"INACTIVE":              2,
		"ENTERED_IN_ERROR":      3,
	}
)

func (x FHIRDeviceStatusCode_Value) Enum() *FHIRDeviceStatusCode_Value {
	p := new(FHIRDeviceStatusCode_Value)
	*p = x
	return p
}

func (x FHIRDeviceStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FHIRDeviceStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[99].Descriptor()
}

func (FHIRDeviceStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[99]
}

func (x FHIRDeviceStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FHIRDeviceStatusCode_Value.Descriptor instead.
func (FHIRDeviceStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{99, 0}
}

type FHIROldTypesCode_Value int32

const (
	FHIROldTypesCode_INVALID_UNINITIALIZED                FHIROldTypesCode_Value = 0
	FHIROldTypesCode_BODY_SITE                            FHIROldTypesCode_Value = 1
	FHIROldTypesCode_CATALOG_ENTRY                        FHIROldTypesCode_Value = 2
	FHIROldTypesCode_CONFORMANCE                          FHIROldTypesCode_Value = 3
	FHIROldTypesCode_DATA_ELEMENT                         FHIROldTypesCode_Value = 4
	FHIROldTypesCode_DEVICE_COMPONENT                     FHIROldTypesCode_Value = 5
	FHIROldTypesCode_DEVICE_USE_REQUEST                   FHIROldTypesCode_Value = 6
	FHIROldTypesCode_DEVICE_USE_STATEMENT                 FHIROldTypesCode_Value = 7
	FHIROldTypesCode_DIAGNOSTIC_ORDER                     FHIROldTypesCode_Value = 8
	FHIROldTypesCode_DOCUMENT_MANIFEST                    FHIROldTypesCode_Value = 9
	FHIROldTypesCode_EFFECT_EVIDENCE_SYNTHESIS            FHIROldTypesCode_Value = 10
	FHIROldTypesCode_ELIGIBILITY_REQUEST                  FHIROldTypesCode_Value = 11
	FHIROldTypesCode_ELIGIBILITY_RESPONSE                 FHIROldTypesCode_Value = 12
	FHIROldTypesCode_EXPANSION_PROFILE                    FHIROldTypesCode_Value = 13
	FHIROldTypesCode_IMAGING_MANIFEST                     FHIROldTypesCode_Value = 14
	FHIROldTypesCode_IMAGING_OBJECT_SELECTION             FHIROldTypesCode_Value = 15
	FHIROldTypesCode_MEDIA                                FHIROldTypesCode_Value = 16
	FHIROldTypesCode_MEDICATION_ORDER                     FHIROldTypesCode_Value = 17
	FHIROldTypesCode_MEDICATION_USAGE                     FHIROldTypesCode_Value = 18
	FHIROldTypesCode_MEDICINAL_PRODUCT                    FHIROldTypesCode_Value = 19
	FHIROldTypesCode_MEDICINAL_PRODUCT_AUTHORIZATION      FHIROldTypesCode_Value = 20
	FHIROldTypesCode_MEDICINAL_PRODUCT_CONTRAINDICATION   FHIROldTypesCode_Value = 21
	FHIROldTypesCode_MEDICINAL_PRODUCT_INDICATION         FHIROldTypesCode_Value = 22
	FHIROldTypesCode_MEDICINAL_PRODUCT_INGREDIENT         FHIROldTypesCode_Value = 23
	FHIROldTypesCode_MEDICINAL_PRODUCT_INTERACTION        FHIROldTypesCode_Value = 24
	FHIROldTypesCode_MEDICINAL_PRODUCT_MANUFACTURED       FHIROldTypesCode_Value = 25
	FHIROldTypesCode_MEDICINAL_PRODUCT_PACKAGED           FHIROldTypesCode_Value = 26
	FHIROldTypesCode_MEDICINAL_PRODUCT_PHARMACEUTICAL     FHIROldTypesCode_Value = 27
	FHIROldTypesCode_MEDICINAL_PRODUCT_UNDESIRABLE_EFFECT FHIROldTypesCode_Value = 28
	FHIROldTypesCode_ORDER                                FHIROldTypesCode_Value = 29
	FHIROldTypesCode_ORDER_RESPONSE                       FHIROldTypesCode_Value = 30
	FHIROldTypesCode_PROCEDURE_REQUEST                    FHIROldTypesCode_Value = 31
	FHIROldTypesCode_PROCESS_REQUEST                      FHIROldTypesCode_Value = 32
	FHIROldTypesCode_PROCESS_RESPONSE                     FHIROldTypesCode_Value = 33
	FHIROldTypesCode_REFERRAL_REQUEST                     FHIROldTypesCode_Value = 34
	FHIROldTypesCode_REQUEST_GROUP                        FHIROldTypesCode_Value = 35
	FHIROldTypesCode_RESEARCH_DEFINITION                  FHIROldTypesCode_Value = 36
	FHIROldTypesCode_RESEARCH_ELEMENT_DEFINITION          FHIROldTypesCode_Value = 37
	FHIROldTypesCode_RISK_EVIDENCE_SYNTHESIS              FHIROldTypesCode_Value = 38
	FHIROldTypesCode_SEQUENCE                             FHIROldTypesCode_Value = 39
	FHIROldTypesCode_SERVICE_DEFINITION                   FHIROldTypesCode_Value = 40
	FHIROldTypesCode_SUBSTANCE_SPECIFICATION              FHIROldTypesCode_Value = 41
)

// Enum value maps for FHIROldTypesCode_Value.
var (
	FHIROldTypesCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "BODY_SITE",
		2:  "CATALOG_ENTRY",
		3:  "CONFORMANCE",
		4:  "DATA_ELEMENT",
		5:  "DEVICE_COMPONENT",
		6:  "DEVICE_USE_REQUEST",
		7:  "DEVICE_USE_STATEMENT",
		8:  "DIAGNOSTIC_ORDER",
		9:  "DOCUMENT_MANIFEST",
		10: "EFFECT_EVIDENCE_SYNTHESIS",
		11: "ELIGIBILITY_REQUEST",
		12: "ELIGIBILITY_RESPONSE",
		13: "EXPANSION_PROFILE",
		14: "IMAGING_MANIFEST",
		15: "IMAGING_OBJECT_SELECTION",
		16: "MEDIA",
		17: "MEDICATION_ORDER",
		18: "MEDICATION_USAGE",
		19: "MEDICINAL_PRODUCT",
		20: "MEDICINAL_PRODUCT_AUTHORIZATION",
		21: "MEDICINAL_PRODUCT_CONTRAINDICATION",
		22: "MEDICINAL_PRODUCT_INDICATION",
		23: "MEDICINAL_PRODUCT_INGREDIENT",
		24: "MEDICINAL_PRODUCT_INTERACTION",
		25: "MEDICINAL_PRODUCT_MANUFACTURED",
		26: "MEDICINAL_PRODUCT_PACKAGED",
		27: "MEDICINAL_PRODUCT_PHARMACEUTICAL",
		28: "MEDICINAL_PRODUCT_UNDESIRABLE_EFFECT",
		29: "ORDER",
		30: "ORDER_RESPONSE",
		31: "PROCEDURE_REQUEST",
		32: "PROCESS_REQUEST",
		33: "PROCESS_RESPONSE",
		34: "REFERRAL_REQUEST",
		35: "REQUEST_GROUP",
		36: "RESEARCH_DEFINITION",
		37: "RESEARCH_ELEMENT_DEFINITION",
		38: "RISK_EVIDENCE_SYNTHESIS",
		39: "SEQUENCE",
		40: "SERVICE_DEFINITION",
		41: "SUBSTANCE_SPECIFICATION",
	}
	FHIROldTypesCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":                0,
		"BODY_SITE":                            1,
		"CATALOG_ENTRY":                        2,
		"CONFORMANCE":                          3,
		"DATA_ELEMENT":                         4,
		"DEVICE_COMPONENT":                     5,
		"DEVICE_USE_REQUEST":                   6,
		"DEVICE_USE_STATEMENT":                 7,
		"DIAGNOSTIC_ORDER":                     8,
		"DOCUMENT_MANIFEST":                    9,
		"EFFECT_EVIDENCE_SYNTHESIS":            10,
		"ELIGIBILITY_REQUEST":                  11,
		"ELIGIBILITY_RESPONSE":                 12,
		"EXPANSION_PROFILE":                    13,
		"IMAGING_MANIFEST":                     14,
		"IMAGING_OBJECT_SELECTION":             15,
		"MEDIA":                                16,
		"MEDICATION_ORDER":                     17,
		"MEDICATION_USAGE":                     18,
		"MEDICINAL_PRODUCT":                    19,
		"MEDICINAL_PRODUCT_AUTHORIZATION":      20,
		"MEDICINAL_PRODUCT_CONTRAINDICATION":   21,
		"MEDICINAL_PRODUCT_INDICATION":         22,
		"MEDICINAL_PRODUCT_INGREDIENT":         23,
		"MEDICINAL_PRODUCT_INTERACTION":        24,
		"MEDICINAL_PRODUCT_MANUFACTURED":       25,
		"MEDICINAL_PRODUCT_PACKAGED":           26,
		"MEDICINAL_PRODUCT_PHARMACEUTICAL":     27,
		"MEDICINAL_PRODUCT_UNDESIRABLE_EFFECT": 28,
		"ORDER":                                29,
		"ORDER_RESPONSE":                       30,
		"PROCEDURE_REQUEST":                    31,
		"PROCESS_REQUEST":                      32,
		"PROCESS_RESPONSE":                     33,
		"REFERRAL_REQUEST":                     34,
		"REQUEST_GROUP":                        35,
		"RESEARCH_DEFINITION":                  36,
		"RESEARCH_ELEMENT_DEFINITION":          37,
		"RISK_EVIDENCE_SYNTHESIS":              38,
		"SEQUENCE":                             39,
		"SERVICE_DEFINITION":                   40,
		"SUBSTANCE_SPECIFICATION":              41,
	}
)

func (x FHIROldTypesCode_Value) Enum() *FHIROldTypesCode_Value {
	p := new(FHIROldTypesCode_Value)
	*p = x
	return p
}

func (x FHIROldTypesCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FHIROldTypesCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[100].Descriptor()
}

func (FHIROldTypesCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[100]
}

func (x FHIROldTypesCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FHIROldTypesCode_Value.Descriptor instead.
func (FHIROldTypesCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{100, 0}
}

type FHIRRestfulInteractionsCode_Value int32

const (
	FHIRRestfulInteractionsCode_INVALID_UNINITIALIZED FHIRRestfulInteractionsCode_Value = 0
	FHIRRestfulInteractionsCode_READ                  FHIRRestfulInteractionsCode_Value = 1
	FHIRRestfulInteractionsCode_VREAD                 FHIRRestfulInteractionsCode_Value = 2
	FHIRRestfulInteractionsCode_UPDATE                FHIRRestfulInteractionsCode_Value = 3
	FHIRRestfulInteractionsCode_PATCH                 FHIRRestfulInteractionsCode_Value = 4
	FHIRRestfulInteractionsCode_DELETE                FHIRRestfulInteractionsCode_Value = 5
	FHIRRestfulInteractionsCode_HISTORY               FHIRRestfulInteractionsCode_Value = 6
	FHIRRestfulInteractionsCode_HISTORY_INSTANCE      FHIRRestfulInteractionsCode_Value = 7
	FHIRRestfulInteractionsCode_HISTORY_TYPE          FHIRRestfulInteractionsCode_Value = 8
	FHIRRestfulInteractionsCode_HISTORY_SYSTEM        FHIRRestfulInteractionsCode_Value = 9
	FHIRRestfulInteractionsCode_CREATE                FHIRRestfulInteractionsCode_Value = 10
	FHIRRestfulInteractionsCode_SEARCH                FHIRRestfulInteractionsCode_Value = 11
	FHIRRestfulInteractionsCode_SEARCH_TYPE           FHIRRestfulInteractionsCode_Value = 12
	FHIRRestfulInteractionsCode_SEARCH_SYSTEM         FHIRRestfulInteractionsCode_Value = 13
	FHIRRestfulInteractionsCode_SEARCH_COMPARTMENT    FHIRRestfulInteractionsCode_Value = 18
	FHIRRestfulInteractionsCode_CAPABILITIES          FHIRRestfulInteractionsCode_Value = 14
	FHIRRestfulInteractionsCode_TRANSACTION           FHIRRestfulInteractionsCode_Value = 15
	FHIRRestfulInteractionsCode_BATCH                 FHIRRestfulInteractionsCode_Value = 16
	FHIRRestfulInteractionsCode_OPERATION             FHIRRestfulInteractionsCode_Value = 17
)

// Enum value maps for FHIRRestfulInteractionsCode_Value.
var (
	FHIRRestfulInteractionsCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "READ",
		2:  "VREAD",
		3:  "UPDATE",
		4:  "PATCH",
		5:  "DELETE",
		6:  "HISTORY",
		7:  "HISTORY_INSTANCE",
		8:  "HISTORY_TYPE",
		9:  "HISTORY_SYSTEM",
		10: "CREATE",
		11: "SEARCH",
		12: "SEARCH_TYPE",
		13: "SEARCH_SYSTEM",
		18: "SEARCH_COMPARTMENT",
		14: "CAPABILITIES",
		15: "TRANSACTION",
		16: "BATCH",
		17: "OPERATION",
	}
	FHIRRestfulInteractionsCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"READ":                  1,
		"VREAD":                 2,
		"UPDATE":                3,
		"PATCH":                 4,
		"DELETE":                5,
		"HISTORY":               6,
		"HISTORY_INSTANCE":      7,
		"HISTORY_TYPE":          8,
		"HISTORY_SYSTEM":        9,
		"CREATE":                10,
		"SEARCH":                11,
		"SEARCH_TYPE":           12,
		"SEARCH_SYSTEM":         13,
		"SEARCH_COMPARTMENT":    18,
		"CAPABILITIES":          14,
		"TRANSACTION":           15,
		"BATCH":                 16,
		"OPERATION":             17,
	}
)

func (x FHIRRestfulInteractionsCode_Value) Enum() *FHIRRestfulInteractionsCode_Value {
	p := new(FHIRRestfulInteractionsCode_Value)
	*p = x
	return p
}

func (x FHIRRestfulInteractionsCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FHIRRestfulInteractionsCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[101].Descriptor()
}

func (FHIRRestfulInteractionsCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[101]
}

func (x FHIRRestfulInteractionsCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FHIRRestfulInteractionsCode_Value.Descriptor instead.
func (FHIRRestfulInteractionsCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{101, 0}
}

type FHIRSubstanceStatusCode_Value int32

const (
	FHIRSubstanceStatusCode_INVALID_UNINITIALIZED FHIRSubstanceStatusCode_Value = 0
	FHIRSubstanceStatusCode_ACTIVE                FHIRSubstanceStatusCode_Value = 1
	FHIRSubstanceStatusCode_INACTIVE              FHIRSubstanceStatusCode_Value = 2
	FHIRSubstanceStatusCode_ENTERED_IN_ERROR      FHIRSubstanceStatusCode_Value = 3
)

// Enum value maps for FHIRSubstanceStatusCode_Value.
var (
	FHIRSubstanceStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "INACTIVE",
		3: "ENTERED_IN_ERROR",
	}
	FHIRSubstanceStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"INACTIVE":              2,
		"ENTERED_IN_ERROR":      3,
	}
)

func (x FHIRSubstanceStatusCode_Value) Enum() *FHIRSubstanceStatusCode_Value {
	p := new(FHIRSubstanceStatusCode_Value)
	*p = x
	return p
}

func (x FHIRSubstanceStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FHIRSubstanceStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[102].Descriptor()
}

func (FHIRSubstanceStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[102]
}

func (x FHIRSubstanceStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FHIRSubstanceStatusCode_Value.Descriptor instead.
func (FHIRSubstanceStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{102, 0}
}

type FHIRTypesCode_Value int32

const (
	FHIRTypesCode_INVALID_UNINITIALIZED                 FHIRTypesCode_Value = 0
	FHIRTypesCode_BASE                                  FHIRTypesCode_Value = 1
	FHIRTypesCode_ELEMENT                               FHIRTypesCode_Value = 2
	FHIRTypesCode_BACKBONE_ELEMENT                      FHIRTypesCode_Value = 3
	FHIRTypesCode_DATA_TYPE                             FHIRTypesCode_Value = 4
	FHIRTypesCode_ADDRESS                               FHIRTypesCode_Value = 5
	FHIRTypesCode_ANNOTATION                            FHIRTypesCode_Value = 6
	FHIRTypesCode_ATTACHMENT                            FHIRTypesCode_Value = 7
	FHIRTypesCode_AVAILABILITY                          FHIRTypesCode_Value = 8
	FHIRTypesCode_BACKBONE_TYPE                         FHIRTypesCode_Value = 9
	FHIRTypesCode_DOSAGE                                FHIRTypesCode_Value = 10
	FHIRTypesCode_ELEMENT_DEFINITION                    FHIRTypesCode_Value = 11
	FHIRTypesCode_MARKETING_STATUS                      FHIRTypesCode_Value = 12
	FHIRTypesCode_PRODUCT_SHELF_LIFE                    FHIRTypesCode_Value = 13
	FHIRTypesCode_TIMING                                FHIRTypesCode_Value = 14
	FHIRTypesCode_CODEABLE_CONCEPT                      FHIRTypesCode_Value = 15
	FHIRTypesCode_CODEABLE_REFERENCE                    FHIRTypesCode_Value = 16
	FHIRTypesCode_CODING                                FHIRTypesCode_Value = 17
	FHIRTypesCode_CONTACT_DETAIL                        FHIRTypesCode_Value = 18
	FHIRTypesCode_CONTACT_POINT                         FHIRTypesCode_Value = 19
	FHIRTypesCode_CONTRIBUTOR                           FHIRTypesCode_Value = 20
	FHIRTypesCode_DATA_REQUIREMENT                      FHIRTypesCode_Value = 21
	FHIRTypesCode_EXPRESSION                            FHIRTypesCode_Value = 22
	FHIRTypesCode_EXTENDED_CONTACT_DETAIL               FHIRTypesCode_Value = 23
	FHIRTypesCode_EXTENSION                             FHIRTypesCode_Value = 24
	FHIRTypesCode_HUMAN_NAME                            FHIRTypesCode_Value = 25
	FHIRTypesCode_IDENTIFIER                            FHIRTypesCode_Value = 26
	FHIRTypesCode_META                                  FHIRTypesCode_Value = 27
	FHIRTypesCode_MONETARY_COMPONENT                    FHIRTypesCode_Value = 28
	FHIRTypesCode_MONEY                                 FHIRTypesCode_Value = 29
	FHIRTypesCode_NARRATIVE                             FHIRTypesCode_Value = 30
	FHIRTypesCode_PARAMETER_DEFINITION                  FHIRTypesCode_Value = 31
	FHIRTypesCode_PERIOD                                FHIRTypesCode_Value = 32
	FHIRTypesCode_PRIMITIVE_TYPE                        FHIRTypesCode_Value = 33
	FHIRTypesCode_BASE64_BINARY                         FHIRTypesCode_Value = 34
	FHIRTypesCode_BOOLEAN                               FHIRTypesCode_Value = 35
	FHIRTypesCode_DATE                                  FHIRTypesCode_Value = 36
	FHIRTypesCode_DATE_TIME                             FHIRTypesCode_Value = 37
	FHIRTypesCode_DECIMAL                               FHIRTypesCode_Value = 38
	FHIRTypesCode_INSTANT                               FHIRTypesCode_Value = 39
	FHIRTypesCode_INTEGER                               FHIRTypesCode_Value = 40
	FHIRTypesCode_POSITIVE_INT                          FHIRTypesCode_Value = 41
	FHIRTypesCode_UNSIGNED_INT                          FHIRTypesCode_Value = 42
	FHIRTypesCode_INTEGER64                             FHIRTypesCode_Value = 43
	FHIRTypesCode_STRING                                FHIRTypesCode_Value = 44
	FHIRTypesCode_CODE                                  FHIRTypesCode_Value = 45
	FHIRTypesCode_ID                                    FHIRTypesCode_Value = 46
	FHIRTypesCode_MARKDOWN                              FHIRTypesCode_Value = 47
	FHIRTypesCode_TIME                                  FHIRTypesCode_Value = 48
	FHIRTypesCode_URI                                   FHIRTypesCode_Value = 49
	FHIRTypesCode_CANONICAL                             FHIRTypesCode_Value = 50
	FHIRTypesCode_OID                                   FHIRTypesCode_Value = 51
	FHIRTypesCode_URL                                   FHIRTypesCode_Value = 52
	FHIRTypesCode_UUID                                  FHIRTypesCode_Value = 53
	FHIRTypesCode_QUANTITY                              FHIRTypesCode_Value = 54
	FHIRTypesCode_AGE                                   FHIRTypesCode_Value = 55
	FHIRTypesCode_COUNT                                 FHIRTypesCode_Value = 56
	FHIRTypesCode_DISTANCE                              FHIRTypesCode_Value = 57
	FHIRTypesCode_DURATION                              FHIRTypesCode_Value = 58
	FHIRTypesCode_RANGE                                 FHIRTypesCode_Value = 59
	FHIRTypesCode_RATIO                                 FHIRTypesCode_Value = 60
	FHIRTypesCode_RATIO_RANGE                           FHIRTypesCode_Value = 61
	FHIRTypesCode_REFERENCE                             FHIRTypesCode_Value = 62
	FHIRTypesCode_RELATED_ARTIFACT                      FHIRTypesCode_Value = 63
	FHIRTypesCode_SAMPLED_DATA                          FHIRTypesCode_Value = 64
	FHIRTypesCode_SIGNATURE                             FHIRTypesCode_Value = 65
	FHIRTypesCode_TRIGGER_DEFINITION                    FHIRTypesCode_Value = 66
	FHIRTypesCode_USAGE_CONTEXT                         FHIRTypesCode_Value = 67
	FHIRTypesCode_VIRTUAL_SERVICE_DETAIL                FHIRTypesCode_Value = 68
	FHIRTypesCode_XHTML                                 FHIRTypesCode_Value = 69
	FHIRTypesCode_RESOURCE                              FHIRTypesCode_Value = 70
	FHIRTypesCode_BINARY                                FHIRTypesCode_Value = 71
	FHIRTypesCode_BUNDLE                                FHIRTypesCode_Value = 72
	FHIRTypesCode_DOMAIN_RESOURCE                       FHIRTypesCode_Value = 73
	FHIRTypesCode_ACCOUNT                               FHIRTypesCode_Value = 74
	FHIRTypesCode_ACTIVITY_DEFINITION                   FHIRTypesCode_Value = 75
	FHIRTypesCode_ACTOR_DEFINITION                      FHIRTypesCode_Value = 76
	FHIRTypesCode_ADMINISTRABLE_PRODUCT_DEFINITION      FHIRTypesCode_Value = 77
	FHIRTypesCode_ADVERSE_EVENT                         FHIRTypesCode_Value = 78
	FHIRTypesCode_ALLERGY_INTOLERANCE                   FHIRTypesCode_Value = 79
	FHIRTypesCode_APPOINTMENT                           FHIRTypesCode_Value = 80
	FHIRTypesCode_APPOINTMENT_RESPONSE                  FHIRTypesCode_Value = 81
	FHIRTypesCode_ARTIFACT_ASSESSMENT                   FHIRTypesCode_Value = 82
	FHIRTypesCode_AUDIT_EVENT                           FHIRTypesCode_Value = 83
	FHIRTypesCode_BASIC                                 FHIRTypesCode_Value = 84
	FHIRTypesCode_BIOLOGICALLY_DERIVED_PRODUCT          FHIRTypesCode_Value = 85
	FHIRTypesCode_BIOLOGICALLY_DERIVED_PRODUCT_DISPENSE FHIRTypesCode_Value = 86
	FHIRTypesCode_BODY_STRUCTURE                        FHIRTypesCode_Value = 87
	FHIRTypesCode_CANONICAL_RESOURCE                    FHIRTypesCode_Value = 88
	FHIRTypesCode_CAPABILITY_STATEMENT                  FHIRTypesCode_Value = 89
	FHIRTypesCode_CARE_PLAN                             FHIRTypesCode_Value = 90
	FHIRTypesCode_CARE_TEAM                             FHIRTypesCode_Value = 91
	FHIRTypesCode_CHARGE_ITEM                           FHIRTypesCode_Value = 92
	FHIRTypesCode_CHARGE_ITEM_DEFINITION                FHIRTypesCode_Value = 93
	FHIRTypesCode_CITATION                              FHIRTypesCode_Value = 94
	FHIRTypesCode_CLAIM                                 FHIRTypesCode_Value = 95
	FHIRTypesCode_CLAIM_RESPONSE                        FHIRTypesCode_Value = 96
	FHIRTypesCode_CLINICAL_IMPRESSION                   FHIRTypesCode_Value = 97
	FHIRTypesCode_CLINICAL_USE_DEFINITION               FHIRTypesCode_Value = 98
	FHIRTypesCode_CODE_SYSTEM                           FHIRTypesCode_Value = 99
	FHIRTypesCode_COMMUNICATION                         FHIRTypesCode_Value = 100
	FHIRTypesCode_COMMUNICATION_REQUEST                 FHIRTypesCode_Value = 101
	FHIRTypesCode_COMPARTMENT_DEFINITION                FHIRTypesCode_Value = 102
	FHIRTypesCode_COMPOSITION                           FHIRTypesCode_Value = 103
	FHIRTypesCode_CONCEPT_MAP                           FHIRTypesCode_Value = 104
	FHIRTypesCode_CONDITION                             FHIRTypesCode_Value = 105
	FHIRTypesCode_CONDITION_DEFINITION                  FHIRTypesCode_Value = 106
	FHIRTypesCode_CONSENT                               FHIRTypesCode_Value = 107
	FHIRTypesCode_CONTRACT                              FHIRTypesCode_Value = 108
	FHIRTypesCode_COVERAGE                              FHIRTypesCode_Value = 109
	FHIRTypesCode_COVERAGE_ELIGIBILITY_REQUEST          FHIRTypesCode_Value = 110
	FHIRTypesCode_COVERAGE_ELIGIBILITY_RESPONSE         FHIRTypesCode_Value = 111
	FHIRTypesCode_DETECTED_ISSUE                        FHIRTypesCode_Value = 112
	FHIRTypesCode_DEVICE                                FHIRTypesCode_Value = 113
	FHIRTypesCode_DEVICE_ASSOCIATION                    FHIRTypesCode_Value = 114
	FHIRTypesCode_DEVICE_DEFINITION                     FHIRTypesCode_Value = 115
	FHIRTypesCode_DEVICE_DISPENSE                       FHIRTypesCode_Value = 116
	FHIRTypesCode_DEVICE_METRIC                         FHIRTypesCode_Value = 117
	FHIRTypesCode_DEVICE_REQUEST                        FHIRTypesCode_Value = 118
	FHIRTypesCode_DEVICE_USAGE                          FHIRTypesCode_Value = 119
	FHIRTypesCode_DIAGNOSTIC_REPORT                     FHIRTypesCode_Value = 120
	FHIRTypesCode_DOCUMENT_REFERENCE                    FHIRTypesCode_Value = 121
	FHIRTypesCode_ENCOUNTER                             FHIRTypesCode_Value = 122
	FHIRTypesCode_ENCOUNTER_HISTORY                     FHIRTypesCode_Value = 123
	FHIRTypesCode_ENDPOINT                              FHIRTypesCode_Value = 124
	FHIRTypesCode_ENROLLMENT_REQUEST                    FHIRTypesCode_Value = 125
	FHIRTypesCode_ENROLLMENT_RESPONSE                   FHIRTypesCode_Value = 126
	FHIRTypesCode_EPISODE_OF_CARE                       FHIRTypesCode_Value = 127
	FHIRTypesCode_EVENT_DEFINITION                      FHIRTypesCode_Value = 128
	FHIRTypesCode_EVIDENCE                              FHIRTypesCode_Value = 129
	FHIRTypesCode_EVIDENCE_REPORT                       FHIRTypesCode_Value = 130
	FHIRTypesCode_EVIDENCE_VARIABLE                     FHIRTypesCode_Value = 131
	FHIRTypesCode_EXAMPLE_SCENARIO                      FHIRTypesCode_Value = 132
	FHIRTypesCode_EXPLANATION_OF_BENEFIT                FHIRTypesCode_Value = 133
	FHIRTypesCode_FAMILY_MEMBER_HISTORY                 FHIRTypesCode_Value = 134
	FHIRTypesCode_FLAG                                  FHIRTypesCode_Value = 135
	FHIRTypesCode_FORMULARY_ITEM                        FHIRTypesCode_Value = 136
	FHIRTypesCode_GENOMIC_STUDY                         FHIRTypesCode_Value = 137
	FHIRTypesCode_GOAL                                  FHIRTypesCode_Value = 138
	FHIRTypesCode_GRAPH_DEFINITION                      FHIRTypesCode_Value = 139
	FHIRTypesCode_GROUP                                 FHIRTypesCode_Value = 140
	FHIRTypesCode_GUIDANCE_RESPONSE                     FHIRTypesCode_Value = 141
	FHIRTypesCode_HEALTHCARE_SERVICE                    FHIRTypesCode_Value = 142
	FHIRTypesCode_IMAGING_SELECTION                     FHIRTypesCode_Value = 143
	FHIRTypesCode_IMAGING_STUDY                         FHIRTypesCode_Value = 144
	FHIRTypesCode_IMMUNIZATION                          FHIRTypesCode_Value = 145
	FHIRTypesCode_IMMUNIZATION_EVALUATION               FHIRTypesCode_Value = 146
	FHIRTypesCode_IMMUNIZATION_RECOMMENDATION           FHIRTypesCode_Value = 147
	FHIRTypesCode_IMPLEMENTATION_GUIDE                  FHIRTypesCode_Value = 148
	FHIRTypesCode_INGREDIENT                            FHIRTypesCode_Value = 149
	FHIRTypesCode_INSURANCE_PLAN                        FHIRTypesCode_Value = 150
	FHIRTypesCode_INVENTORY_ITEM                        FHIRTypesCode_Value = 151
	FHIRTypesCode_INVENTORY_REPORT                      FHIRTypesCode_Value = 152
	FHIRTypesCode_INVOICE                               FHIRTypesCode_Value = 153
	FHIRTypesCode_LIBRARY                               FHIRTypesCode_Value = 154
	FHIRTypesCode_LINKAGE                               FHIRTypesCode_Value = 155
	FHIRTypesCode_LIST                                  FHIRTypesCode_Value = 156
	FHIRTypesCode_LOCATION                              FHIRTypesCode_Value = 157
	FHIRTypesCode_MANUFACTURED_ITEM_DEFINITION          FHIRTypesCode_Value = 158
	FHIRTypesCode_MEASURE                               FHIRTypesCode_Value = 159
	FHIRTypesCode_MEASURE_REPORT                        FHIRTypesCode_Value = 160
	FHIRTypesCode_MEDICATION                            FHIRTypesCode_Value = 161
	FHIRTypesCode_MEDICATION_ADMINISTRATION             FHIRTypesCode_Value = 162
	FHIRTypesCode_MEDICATION_DISPENSE                   FHIRTypesCode_Value = 163
	FHIRTypesCode_MEDICATION_KNOWLEDGE                  FHIRTypesCode_Value = 164
	FHIRTypesCode_MEDICATION_REQUEST                    FHIRTypesCode_Value = 165
	FHIRTypesCode_MEDICATION_STATEMENT                  FHIRTypesCode_Value = 166
	FHIRTypesCode_MEDICINAL_PRODUCT_DEFINITION          FHIRTypesCode_Value = 167
	FHIRTypesCode_MESSAGE_DEFINITION                    FHIRTypesCode_Value = 168
	FHIRTypesCode_MESSAGE_HEADER                        FHIRTypesCode_Value = 169
	FHIRTypesCode_METADATA_RESOURCE                     FHIRTypesCode_Value = 170
	FHIRTypesCode_MOLECULAR_SEQUENCE                    FHIRTypesCode_Value = 171
	FHIRTypesCode_NAMING_SYSTEM                         FHIRTypesCode_Value = 172
	FHIRTypesCode_NUTRITION_INTAKE                      FHIRTypesCode_Value = 173
	FHIRTypesCode_NUTRITION_ORDER                       FHIRTypesCode_Value = 174
	FHIRTypesCode_NUTRITION_PRODUCT                     FHIRTypesCode_Value = 175
	FHIRTypesCode_OBSERVATION                           FHIRTypesCode_Value = 176
	FHIRTypesCode_OBSERVATION_DEFINITION                FHIRTypesCode_Value = 177
	FHIRTypesCode_OPERATION_DEFINITION                  FHIRTypesCode_Value = 178
	FHIRTypesCode_OPERATION_OUTCOME                     FHIRTypesCode_Value = 179
	FHIRTypesCode_ORGANIZATION                          FHIRTypesCode_Value = 180
	FHIRTypesCode_ORGANIZATION_AFFILIATION              FHIRTypesCode_Value = 181
	FHIRTypesCode_PACKAGED_PRODUCT_DEFINITION           FHIRTypesCode_Value = 182
	FHIRTypesCode_PATIENT                               FHIRTypesCode_Value = 183
	FHIRTypesCode_PAYMENT_NOTICE                        FHIRTypesCode_Value = 184
	FHIRTypesCode_PAYMENT_RECONCILIATION                FHIRTypesCode_Value = 185
	FHIRTypesCode_PERMISSION                            FHIRTypesCode_Value = 186
	FHIRTypesCode_PERSON                                FHIRTypesCode_Value = 187
	FHIRTypesCode_PLAN_DEFINITION                       FHIRTypesCode_Value = 188
	FHIRTypesCode_PRACTITIONER                          FHIRTypesCode_Value = 189
	FHIRTypesCode_PRACTITIONER_ROLE                     FHIRTypesCode_Value = 190
	FHIRTypesCode_PROCEDURE                             FHIRTypesCode_Value = 191
	FHIRTypesCode_PROVENANCE                            FHIRTypesCode_Value = 192
	FHIRTypesCode_QUESTIONNAIRE                         FHIRTypesCode_Value = 193
	FHIRTypesCode_QUESTIONNAIRE_RESPONSE                FHIRTypesCode_Value = 194
	FHIRTypesCode_REGULATED_AUTHORIZATION               FHIRTypesCode_Value = 195
	FHIRTypesCode_RELATED_PERSON                        FHIRTypesCode_Value = 196
	FHIRTypesCode_REQUEST_ORCHESTRATION                 FHIRTypesCode_Value = 197
	FHIRTypesCode_REQUIREMENTS                          FHIRTypesCode_Value = 198
	FHIRTypesCode_RESEARCH_STUDY                        FHIRTypesCode_Value = 199
	FHIRTypesCode_RESEARCH_SUBJECT                      FHIRTypesCode_Value = 200
	FHIRTypesCode_RISK_ASSESSMENT                       FHIRTypesCode_Value = 201
	FHIRTypesCode_SCHEDULE                              FHIRTypesCode_Value = 202
	FHIRTypesCode_SEARCH_PARAMETER                      FHIRTypesCode_Value = 203
	FHIRTypesCode_SERVICE_REQUEST                       FHIRTypesCode_Value = 204
	FHIRTypesCode_SLOT                                  FHIRTypesCode_Value = 205
	FHIRTypesCode_SPECIMEN                              FHIRTypesCode_Value = 206
	FHIRTypesCode_SPECIMEN_DEFINITION                   FHIRTypesCode_Value = 207
	FHIRTypesCode_STRUCTURE_DEFINITION                  FHIRTypesCode_Value = 208
	FHIRTypesCode_STRUCTURE_MAP                         FHIRTypesCode_Value = 209
	FHIRTypesCode_SUBSCRIPTION                          FHIRTypesCode_Value = 210
	FHIRTypesCode_SUBSCRIPTION_STATUS                   FHIRTypesCode_Value = 211
	FHIRTypesCode_SUBSCRIPTION_TOPIC                    FHIRTypesCode_Value = 212
	FHIRTypesCode_SUBSTANCE                             FHIRTypesCode_Value = 213
	FHIRTypesCode_SUBSTANCE_DEFINITION                  FHIRTypesCode_Value = 214
	FHIRTypesCode_SUBSTANCE_NUCLEIC_ACID                FHIRTypesCode_Value = 215
	FHIRTypesCode_SUBSTANCE_POLYMER                     FHIRTypesCode_Value = 216
	FHIRTypesCode_SUBSTANCE_PROTEIN                     FHIRTypesCode_Value = 217
	FHIRTypesCode_SUBSTANCE_REFERENCE_INFORMATION       FHIRTypesCode_Value = 218
	FHIRTypesCode_SUBSTANCE_SOURCE_MATERIAL             FHIRTypesCode_Value = 219
	FHIRTypesCode_SUPPLY_DELIVERY                       FHIRTypesCode_Value = 220
	FHIRTypesCode_SUPPLY_REQUEST                        FHIRTypesCode_Value = 221
	FHIRTypesCode_TASK                                  FHIRTypesCode_Value = 222
	FHIRTypesCode_TERMINOLOGY_CAPABILITIES              FHIRTypesCode_Value = 223
	FHIRTypesCode_TEST_PLAN                             FHIRTypesCode_Value = 224
	FHIRTypesCode_TEST_REPORT                           FHIRTypesCode_Value = 225
	FHIRTypesCode_TEST_SCRIPT                           FHIRTypesCode_Value = 226
	FHIRTypesCode_TRANSPORT                             FHIRTypesCode_Value = 227
	FHIRTypesCode_VALUE_SET                             FHIRTypesCode_Value = 228
	FHIRTypesCode_VERIFICATION_RESULT                   FHIRTypesCode_Value = 229
	FHIRTypesCode_VISION_PRESCRIPTION                   FHIRTypesCode_Value = 230
	FHIRTypesCode_PARAMETERS                            FHIRTypesCode_Value = 231
)

// Enum value maps for FHIRTypesCode_Value.
var (
	FHIRTypesCode_Value_name = map[int32]string{
		0:   "INVALID_UNINITIALIZED",
		1:   "BASE",
		2:   "ELEMENT",
		3:   "BACKBONE_ELEMENT",
		4:   "DATA_TYPE",
		5:   "ADDRESS",
		6:   "ANNOTATION",
		7:   "ATTACHMENT",
		8:   "AVAILABILITY",
		9:   "BACKBONE_TYPE",
		10:  "DOSAGE",
		11:  "ELEMENT_DEFINITION",
		12:  "MARKETING_STATUS",
		13:  "PRODUCT_SHELF_LIFE",
		14:  "TIMING",
		15:  "CODEABLE_CONCEPT",
		16:  "CODEABLE_REFERENCE",
		17:  "CODING",
		18:  "CONTACT_DETAIL",
		19:  "CONTACT_POINT",
		20:  "CONTRIBUTOR",
		21:  "DATA_REQUIREMENT",
		22:  "EXPRESSION",
		23:  "EXTENDED_CONTACT_DETAIL",
		24:  "EXTENSION",
		25:  "HUMAN_NAME",
		26:  "IDENTIFIER",
		27:  "META",
		28:  "MONETARY_COMPONENT",
		29:  "MONEY",
		30:  "NARRATIVE",
		31:  "PARAMETER_DEFINITION",
		32:  "PERIOD",
		33:  "PRIMITIVE_TYPE",
		34:  "BASE64_BINARY",
		35:  "BOOLEAN",
		36:  "DATE",
		37:  "DATE_TIME",
		38:  "DECIMAL",
		39:  "INSTANT",
		40:  "INTEGER",
		41:  "POSITIVE_INT",
		42:  "UNSIGNED_INT",
		43:  "INTEGER64",
		44:  "STRING",
		45:  "CODE",
		46:  "ID",
		47:  "MARKDOWN",
		48:  "TIME",
		49:  "URI",
		50:  "CANONICAL",
		51:  "OID",
		52:  "URL",
		53:  "UUID",
		54:  "QUANTITY",
		55:  "AGE",
		56:  "COUNT",
		57:  "DISTANCE",
		58:  "DURATION",
		59:  "RANGE",
		60:  "RATIO",
		61:  "RATIO_RANGE",
		62:  "REFERENCE",
		63:  "RELATED_ARTIFACT",
		64:  "SAMPLED_DATA",
		65:  "SIGNATURE",
		66:  "TRIGGER_DEFINITION",
		67:  "USAGE_CONTEXT",
		68:  "VIRTUAL_SERVICE_DETAIL",
		69:  "XHTML",
		70:  "RESOURCE",
		71:  "BINARY",
		72:  "BUNDLE",
		73:  "DOMAIN_RESOURCE",
		74:  "ACCOUNT",
		75:  "ACTIVITY_DEFINITION",
		76:  "ACTOR_DEFINITION",
		77:  "ADMINISTRABLE_PRODUCT_DEFINITION",
		78:  "ADVERSE_EVENT",
		79:  "ALLERGY_INTOLERANCE",
		80:  "APPOINTMENT",
		81:  "APPOINTMENT_RESPONSE",
		82:  "ARTIFACT_ASSESSMENT",
		83:  "AUDIT_EVENT",
		84:  "BASIC",
		85:  "BIOLOGICALLY_DERIVED_PRODUCT",
		86:  "BIOLOGICALLY_DERIVED_PRODUCT_DISPENSE",
		87:  "BODY_STRUCTURE",
		88:  "CANONICAL_RESOURCE",
		89:  "CAPABILITY_STATEMENT",
		90:  "CARE_PLAN",
		91:  "CARE_TEAM",
		92:  "CHARGE_ITEM",
		93:  "CHARGE_ITEM_DEFINITION",
		94:  "CITATION",
		95:  "CLAIM",
		96:  "CLAIM_RESPONSE",
		97:  "CLINICAL_IMPRESSION",
		98:  "CLINICAL_USE_DEFINITION",
		99:  "CODE_SYSTEM",
		100: "COMMUNICATION",
		101: "COMMUNICATION_REQUEST",
		102: "COMPARTMENT_DEFINITION",
		103: "COMPOSITION",
		104: "CONCEPT_MAP",
		105: "CONDITION",
		106: "CONDITION_DEFINITION",
		107: "CONSENT",
		108: "CONTRACT",
		109: "COVERAGE",
		110: "COVERAGE_ELIGIBILITY_REQUEST",
		111: "COVERAGE_ELIGIBILITY_RESPONSE",
		112: "DETECTED_ISSUE",
		113: "DEVICE",
		114: "DEVICE_ASSOCIATION",
		115: "DEVICE_DEFINITION",
		116: "DEVICE_DISPENSE",
		117: "DEVICE_METRIC",
		118: "DEVICE_REQUEST",
		119: "DEVICE_USAGE",
		120: "DIAGNOSTIC_REPORT",
		121: "DOCUMENT_REFERENCE",
		122: "ENCOUNTER",
		123: "ENCOUNTER_HISTORY",
		124: "ENDPOINT",
		125: "ENROLLMENT_REQUEST",
		126: "ENROLLMENT_RESPONSE",
		127: "EPISODE_OF_CARE",
		128: "EVENT_DEFINITION",
		129: "EVIDENCE",
		130: "EVIDENCE_REPORT",
		131: "EVIDENCE_VARIABLE",
		132: "EXAMPLE_SCENARIO",
		133: "EXPLANATION_OF_BENEFIT",
		134: "FAMILY_MEMBER_HISTORY",
		135: "FLAG",
		136: "FORMULARY_ITEM",
		137: "GENOMIC_STUDY",
		138: "GOAL",
		139: "GRAPH_DEFINITION",
		140: "GROUP",
		141: "GUIDANCE_RESPONSE",
		142: "HEALTHCARE_SERVICE",
		143: "IMAGING_SELECTION",
		144: "IMAGING_STUDY",
		145: "IMMUNIZATION",
		146: "IMMUNIZATION_EVALUATION",
		147: "IMMUNIZATION_RECOMMENDATION",
		148: "IMPLEMENTATION_GUIDE",
		149: "INGREDIENT",
		150: "INSURANCE_PLAN",
		151: "INVENTORY_ITEM",
		152: "INVENTORY_REPORT",
		153: "INVOICE",
		154: "LIBRARY",
		155: "LINKAGE",
		156: "LIST",
		157: "LOCATION",
		158: "MANUFACTURED_ITEM_DEFINITION",
		159: "MEASURE",
		160: "MEASURE_REPORT",
		161: "MEDICATION",
		162: "MEDICATION_ADMINISTRATION",
		163: "MEDICATION_DISPENSE",
		164: "MEDICATION_KNOWLEDGE",
		165: "MEDICATION_REQUEST",
		166: "MEDICATION_STATEMENT",
		167: "MEDICINAL_PRODUCT_DEFINITION",
		168: "MESSAGE_DEFINITION",
		169: "MESSAGE_HEADER",
		170: "METADATA_RESOURCE",
		171: "MOLECULAR_SEQUENCE",
		172: "NAMING_SYSTEM",
		173: "NUTRITION_INTAKE",
		174: "NUTRITION_ORDER",
		175: "NUTRITION_PRODUCT",
		176: "OBSERVATION",
		177: "OBSERVATION_DEFINITION",
		178: "OPERATION_DEFINITION",
		179: "OPERATION_OUTCOME",
		180: "ORGANIZATION",
		181: "ORGANIZATION_AFFILIATION",
		182: "PACKAGED_PRODUCT_DEFINITION",
		183: "PATIENT",
		184: "PAYMENT_NOTICE",
		185: "PAYMENT_RECONCILIATION",
		186: "PERMISSION",
		187: "PERSON",
		188: "PLAN_DEFINITION",
		189: "PRACTITIONER",
		190: "PRACTITIONER_ROLE",
		191: "PROCEDURE",
		192: "PROVENANCE",
		193: "QUESTIONNAIRE",
		194: "QUESTIONNAIRE_RESPONSE",
		195: "REGULATED_AUTHORIZATION",
		196: "RELATED_PERSON",
		197: "REQUEST_ORCHESTRATION",
		198: "REQUIREMENTS",
		199: "RESEARCH_STUDY",
		200: "RESEARCH_SUBJECT",
		201: "RISK_ASSESSMENT",
		202: "SCHEDULE",
		203: "SEARCH_PARAMETER",
		204: "SERVICE_REQUEST",
		205: "SLOT",
		206: "SPECIMEN",
		207: "SPECIMEN_DEFINITION",
		208: "STRUCTURE_DEFINITION",
		209: "STRUCTURE_MAP",
		210: "SUBSCRIPTION",
		211: "SUBSCRIPTION_STATUS",
		212: "SUBSCRIPTION_TOPIC",
		213: "SUBSTANCE",
		214: "SUBSTANCE_DEFINITION",
		215: "SUBSTANCE_NUCLEIC_ACID",
		216: "SUBSTANCE_POLYMER",
		217: "SUBSTANCE_PROTEIN",
		218: "SUBSTANCE_REFERENCE_INFORMATION",
		219: "SUBSTANCE_SOURCE_MATERIAL",
		220: "SUPPLY_DELIVERY",
		221: "SUPPLY_REQUEST",
		222: "TASK",
		223: "TERMINOLOGY_CAPABILITIES",
		224: "TEST_PLAN",
		225: "TEST_REPORT",
		226: "TEST_SCRIPT",
		227: "TRANSPORT",
		228: "VALUE_SET",
		229: "VERIFICATION_RESULT",
		230: "VISION_PRESCRIPTION",
		231: "PARAMETERS",
	}
	FHIRTypesCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":                 0,
		"BASE":                                  1,
		"ELEMENT":                               2,
		"BACKBONE_ELEMENT":                      3,
		"DATA_TYPE":                             4,
		"ADDRESS":                               5,
		"ANNOTATION":                            6,
		"ATTACHMENT":                            7,
		"AVAILABILITY":                          8,
		"BACKBONE_TYPE":                         9,
		"DOSAGE":                                10,
		"ELEMENT_DEFINITION":                    11,
		"MARKETING_STATUS":                      12,
		"PRODUCT_SHELF_LIFE":                    13,
		"TIMING":                                14,
		"CODEABLE_CONCEPT":                      15,
		"CODEABLE_REFERENCE":                    16,
		"CODING":                                17,
		"CONTACT_DETAIL":                        18,
		"CONTACT_POINT":                         19,
		"CONTRIBUTOR":                           20,
		"DATA_REQUIREMENT":                      21,
		"EXPRESSION":                            22,
		"EXTENDED_CONTACT_DETAIL":               23,
		"EXTENSION":                             24,
		"HUMAN_NAME":                            25,
		"IDENTIFIER":                            26,
		"META":                                  27,
		"MONETARY_COMPONENT":                    28,
		"MONEY":                                 29,
		"NARRATIVE":                             30,
		"PARAMETER_DEFINITION":                  31,
		"PERIOD":                                32,
		"PRIMITIVE_TYPE":                        33,
		"BASE64_BINARY":                         34,
		"BOOLEAN":                               35,
		"DATE":                                  36,
		"DATE_TIME":                             37,
		"DECIMAL":                               38,
		"INSTANT":                               39,
		"INTEGER":                               40,
		"POSITIVE_INT":                          41,
		"UNSIGNED_INT":                          42,
		"INTEGER64":                             43,
		"STRING":                                44,
		"CODE":                                  45,
		"ID":                                    46,
		"MARKDOWN":                              47,
		"TIME":                                  48,
		"URI":                                   49,
		"CANONICAL":                             50,
		"OID":                                   51,
		"URL":                                   52,
		"UUID":                                  53,
		"QUANTITY":                              54,
		"AGE":                                   55,
		"COUNT":                                 56,
		"DISTANCE":                              57,
		"DURATION":                              58,
		"RANGE":                                 59,
		"RATIO":                                 60,
		"RATIO_RANGE":                           61,
		"REFERENCE":                             62,
		"RELATED_ARTIFACT":                      63,
		"SAMPLED_DATA":                          64,
		"SIGNATURE":                             65,
		"TRIGGER_DEFINITION":                    66,
		"USAGE_CONTEXT":                         67,
		"VIRTUAL_SERVICE_DETAIL":                68,
		"XHTML":                                 69,
		"RESOURCE":                              70,
		"BINARY":                                71,
		"BUNDLE":                                72,
		"DOMAIN_RESOURCE":                       73,
		"ACCOUNT":                               74,
		"ACTIVITY_DEFINITION":                   75,
		"ACTOR_DEFINITION":                      76,
		"ADMINISTRABLE_PRODUCT_DEFINITION":      77,
		"ADVERSE_EVENT":                         78,
		"ALLERGY_INTOLERANCE":                   79,
		"APPOINTMENT":                           80,
		"APPOINTMENT_RESPONSE":                  81,
		"ARTIFACT_ASSESSMENT":                   82,
		"AUDIT_EVENT":                           83,
		"BASIC":                                 84,
		"BIOLOGICALLY_DERIVED_PRODUCT":          85,
		"BIOLOGICALLY_DERIVED_PRODUCT_DISPENSE": 86,
		"BODY_STRUCTURE":                        87,
		"CANONICAL_RESOURCE":                    88,
		"CAPABILITY_STATEMENT":                  89,
		"CARE_PLAN":                             90,
		"CARE_TEAM":                             91,
		"CHARGE_ITEM":                           92,
		"CHARGE_ITEM_DEFINITION":                93,
		"CITATION":                              94,
		"CLAIM":                                 95,
		"CLAIM_RESPONSE":                        96,
		"CLINICAL_IMPRESSION":                   97,
		"CLINICAL_USE_DEFINITION":               98,
		"CODE_SYSTEM":                           99,
		"COMMUNICATION":                         100,
		"COMMUNICATION_REQUEST":                 101,
		"COMPARTMENT_DEFINITION":                102,
		"COMPOSITION":                           103,
		"CONCEPT_MAP":                           104,
		"CONDITION":                             105,
		"CONDITION_DEFINITION":                  106,
		"CONSENT":                               107,
		"CONTRACT":                              108,
		"COVERAGE":                              109,
		"COVERAGE_ELIGIBILITY_REQUEST":          110,
		"COVERAGE_ELIGIBILITY_RESPONSE":         111,
		"DETECTED_ISSUE":                        112,
		"DEVICE":                                113,
		"DEVICE_ASSOCIATION":                    114,
		"DEVICE_DEFINITION":                     115,
		"DEVICE_DISPENSE":                       116,
		"DEVICE_METRIC":                         117,
		"DEVICE_REQUEST":                        118,
		"DEVICE_USAGE":                          119,
		"DIAGNOSTIC_REPORT":                     120,
		"DOCUMENT_REFERENCE":                    121,
		"ENCOUNTER":                             122,
		"ENCOUNTER_HISTORY":                     123,
		"ENDPOINT":                              124,
		"ENROLLMENT_REQUEST":                    125,
		"ENROLLMENT_RESPONSE":                   126,
		"EPISODE_OF_CARE":                       127,
		"EVENT_DEFINITION":                      128,
		"EVIDENCE":                              129,
		"EVIDENCE_REPORT":                       130,
		"EVIDENCE_VARIABLE":                     131,
		"EXAMPLE_SCENARIO":                      132,
		"EXPLANATION_OF_BENEFIT":                133,
		"FAMILY_MEMBER_HISTORY":                 134,
		"FLAG":                                  135,
		"FORMULARY_ITEM":                        136,
		"GENOMIC_STUDY":                         137,
		"GOAL":                                  138,
		"GRAPH_DEFINITION":                      139,
		"GROUP":                                 140,
		"GUIDANCE_RESPONSE":                     141,
		"HEALTHCARE_SERVICE":                    142,
		"IMAGING_SELECTION":                     143,
		"IMAGING_STUDY":                         144,
		"IMMUNIZATION":                          145,
		"IMMUNIZATION_EVALUATION":               146,
		"IMMUNIZATION_RECOMMENDATION":           147,
		"IMPLEMENTATION_GUIDE":                  148,
		"INGREDIENT":                            149,
		"INSURANCE_PLAN":                        150,
		"INVENTORY_ITEM":                        151,
		"INVENTORY_REPORT":                      152,
		"INVOICE":                               153,
		"LIBRARY":                               154,
		"LINKAGE":                               155,
		"LIST":                                  156,
		"LOCATION":                              157,
		"MANUFACTURED_ITEM_DEFINITION":          158,
		"MEASURE":                               159,
		"MEASURE_REPORT":                        160,
		"MEDICATION":                            161,
		"MEDICATION_ADMINISTRATION":             162,
		"MEDICATION_DISPENSE":                   163,
		"MEDICATION_KNOWLEDGE":                  164,
		"MEDICATION_REQUEST":                    165,
		"MEDICATION_STATEMENT":                  166,
		"MEDICINAL_PRODUCT_DEFINITION":          167,
		"MESSAGE_DEFINITION":                    168,
		"MESSAGE_HEADER":                        169,
		"METADATA_RESOURCE":                     170,
		"MOLECULAR_SEQUENCE":                    171,
		"NAMING_SYSTEM":                         172,
		"NUTRITION_INTAKE":                      173,
		"NUTRITION_ORDER":                       174,
		"NUTRITION_PRODUCT":                     175,
		"OBSERVATION":                           176,
		"OBSERVATION_DEFINITION":                177,
		"OPERATION_DEFINITION":                  178,
		"OPERATION_OUTCOME":                     179,
		"ORGANIZATION":                          180,
		"ORGANIZATION_AFFILIATION":              181,
		"PACKAGED_PRODUCT_DEFINITION":           182,
		"PATIENT":                               183,
		"PAYMENT_NOTICE":                        184,
		"PAYMENT_RECONCILIATION":                185,
		"PERMISSION":                            186,
		"PERSON":                                187,
		"PLAN_DEFINITION":                       188,
		"PRACTITIONER":                          189,
		"PRACTITIONER_ROLE":                     190,
		"PROCEDURE":                             191,
		"PROVENANCE":                            192,
		"QUESTIONNAIRE":                         193,
		"QUESTIONNAIRE_RESPONSE":                194,
		"REGULATED_AUTHORIZATION":               195,
		"RELATED_PERSON":                        196,
		"REQUEST_ORCHESTRATION":                 197,
		"REQUIREMENTS":                          198,
		"RESEARCH_STUDY":                        199,
		"RESEARCH_SUBJECT":                      200,
		"RISK_ASSESSMENT":                       201,
		"SCHEDULE":                              202,
		"SEARCH_PARAMETER":                      203,
		"SERVICE_REQUEST":                       204,
		"SLOT":                                  205,
		"SPECIMEN":                              206,
		"SPECIMEN_DEFINITION":                   207,
		"STRUCTURE_DEFINITION":                  208,
		"STRUCTURE_MAP":                         209,
		"SUBSCRIPTION":                          210,
		"SUBSCRIPTION_STATUS":                   211,
		"SUBSCRIPTION_TOPIC":                    212,
		"SUBSTANCE":                             213,
		"SUBSTANCE_DEFINITION":                  214,
		"SUBSTANCE_NUCLEIC_ACID":                215,
		"SUBSTANCE_POLYMER":                     216,
		"SUBSTANCE_PROTEIN":                     217,
		"SUBSTANCE_REFERENCE_INFORMATION":       218,
		"SUBSTANCE_SOURCE_MATERIAL":             219,
		"SUPPLY_DELIVERY":                       220,
		"SUPPLY_REQUEST":                        221,
		"TASK":                                  222,
		"TERMINOLOGY_CAPABILITIES":              223,
		"TEST_PLAN":                             224,
		"TEST_REPORT":                           225,
		"TEST_SCRIPT":                           226,
		"TRANSPORT":                             227,
		"VALUE_SET":                             228,
		"VERIFICATION_RESULT":                   229,
		"VISION_PRESCRIPTION":                   230,
		"PARAMETERS":                            231,
	}
)

func (x FHIRTypesCode_Value) Enum() *FHIRTypesCode_Value {
	p := new(FHIRTypesCode_Value)
	*p = x
	return p
}

func (x FHIRTypesCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FHIRTypesCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[103].Descriptor()
}

func (FHIRTypesCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[103]
}

func (x FHIRTypesCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FHIRTypesCode_Value.Descriptor instead.
func (FHIRTypesCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{103, 0}
}

type FHIRVersionCode_Value int32

const (
	FHIRVersionCode_INVALID_UNINITIALIZED FHIRVersionCode_Value = 0
	FHIRVersionCode_V_0_01                FHIRVersionCode_Value = 1
	FHIRVersionCode_V_0_05                FHIRVersionCode_Value = 2
	FHIRVersionCode_V_0_06                FHIRVersionCode_Value = 3
	FHIRVersionCode_V_0_11                FHIRVersionCode_Value = 4
	FHIRVersionCode_V_0_0                 FHIRVersionCode_Value = 23
	FHIRVersionCode_V_0_0_80              FHIRVersionCode_Value = 5
	FHIRVersionCode_V_0_0_81              FHIRVersionCode_Value = 6
	FHIRVersionCode_V_0_0_82              FHIRVersionCode_Value = 7
	FHIRVersionCode_V_0_4                 FHIRVersionCode_Value = 24
	FHIRVersionCode_V_0_4_0               FHIRVersionCode_Value = 8
	FHIRVersionCode_V_0_5                 FHIRVersionCode_Value = 25
	FHIRVersionCode_V_0_5_0               FHIRVersionCode_Value = 9
	FHIRVersionCode_V_1_0                 FHIRVersionCode_Value = 26
	FHIRVersionCode_V_1_0_0               FHIRVersionCode_Value = 10
	FHIRVersionCode_V_1_0_1               FHIRVersionCode_Value = 11
	FHIRVersionCode_V_1_0_2               FHIRVersionCode_Value = 12
	FHIRVersionCode_V_1_1                 FHIRVersionCode_Value = 27
	FHIRVersionCode_V_1_1_0               FHIRVersionCode_Value = 13
	FHIRVersionCode_V_1_4                 FHIRVersionCode_Value = 28
	FHIRVersionCode_V_1_4_0               FHIRVersionCode_Value = 14
	FHIRVersionCode_V_1_6                 FHIRVersionCode_Value = 29
	FHIRVersionCode_V_1_6_0               FHIRVersionCode_Value = 15
	FHIRVersionCode_V_1_8                 FHIRVersionCode_Value = 30
	FHIRVersionCode_V_1_8_0               FHIRVersionCode_Value = 16
	FHIRVersionCode_V_3_0                 FHIRVersionCode_Value = 31
	FHIRVersionCode_V_3_0_0               FHIRVersionCode_Value = 17
	FHIRVersionCode_V_3_0_1               FHIRVersionCode_Value = 18
	FHIRVersionCode_V_3_0_2               FHIRVersionCode_Value = 32
	FHIRVersionCode_V_3_3                 FHIRVersionCode_Value = 33
	FHIRVersionCode_V_3_3_0               FHIRVersionCode_Value = 19
	FHIRVersionCode_V_3_5                 FHIRVersionCode_Value = 34
	FHIRVersionCode_V_3_5_0               FHIRVersionCode_Value = 20
	FHIRVersionCode_V_4_0                 FHIRVersionCode_Value = 35
	FHIRVersionCode_V_4_0_0               FHIRVersionCode_Value = 21
	FHIRVersionCode_V_4_0_1               FHIRVersionCode_Value = 22
	FHIRVersionCode_V_4_1                 FHIRVersionCode_Value = 36
	FHIRVersionCode_V_4_1_0               FHIRVersionCode_Value = 37
	FHIRVersionCode_V_4_2                 FHIRVersionCode_Value = 38
	FHIRVersionCode_V_4_2_0               FHIRVersionCode_Value = 39
	FHIRVersionCode_V_4_3                 FHIRVersionCode_Value = 40
	FHIRVersionCode_V_4_3_0               FHIRVersionCode_Value = 41
	FHIRVersionCode_V_4_3_0_CIBUILD       FHIRVersionCode_Value = 42
	FHIRVersionCode_V_4_3_0_SNAPSHOT1     FHIRVersionCode_Value = 43
	FHIRVersionCode_V_4_4                 FHIRVersionCode_Value = 44
	FHIRVersionCode_V_4_4_0               FHIRVersionCode_Value = 45
	FHIRVersionCode_V_4_5                 FHIRVersionCode_Value = 46
	FHIRVersionCode_V_4_5_0               FHIRVersionCode_Value = 47
	FHIRVersionCode_V_4_6                 FHIRVersionCode_Value = 48
	FHIRVersionCode_V_4_6_0               FHIRVersionCode_Value = 49
	FHIRVersionCode_V_5_0                 FHIRVersionCode_Value = 50
	FHIRVersionCode_V_5_0_0               FHIRVersionCode_Value = 51
	FHIRVersionCode_V_5_0_0_CIBUILD       FHIRVersionCode_Value = 52
	FHIRVersionCode_V_5_0_0_SNAPSHOT1     FHIRVersionCode_Value = 53
	FHIRVersionCode_V_5_0_0_SNAPSHOT2     FHIRVersionCode_Value = 54
	FHIRVersionCode_V_5_0_0_BALLOT        FHIRVersionCode_Value = 55
	FHIRVersionCode_V_5_0_0_SNAPSHOT3     FHIRVersionCode_Value = 56
	FHIRVersionCode_V_5_0_0_DRAFT_FINAL   FHIRVersionCode_Value = 57
)

// Enum value maps for FHIRVersionCode_Value.
var (
	FHIRVersionCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "V_0_01",
		2:  "V_0_05",
		3:  "V_0_06",
		4:  "V_0_11",
		23: "V_0_0",
		5:  "V_0_0_80",
		6:  "V_0_0_81",
		7:  "V_0_0_82",
		24: "V_0_4",
		8:  "V_0_4_0",
		25: "V_0_5",
		9:  "V_0_5_0",
		26: "V_1_0",
		10: "V_1_0_0",
		11: "V_1_0_1",
		12: "V_1_0_2",
		27: "V_1_1",
		13: "V_1_1_0",
		28: "V_1_4",
		14: "V_1_4_0",
		29: "V_1_6",
		15: "V_1_6_0",
		30: "V_1_8",
		16: "V_1_8_0",
		31: "V_3_0",
		17: "V_3_0_0",
		18: "V_3_0_1",
		32: "V_3_0_2",
		33: "V_3_3",
		19: "V_3_3_0",
		34: "V_3_5",
		20: "V_3_5_0",
		35: "V_4_0",
		21: "V_4_0_0",
		22: "V_4_0_1",
		36: "V_4_1",
		37: "V_4_1_0",
		38: "V_4_2",
		39: "V_4_2_0",
		40: "V_4_3",
		41: "V_4_3_0",
		42: "V_4_3_0_CIBUILD",
		43: "V_4_3_0_SNAPSHOT1",
		44: "V_4_4",
		45: "V_4_4_0",
		46: "V_4_5",
		47: "V_4_5_0",
		48: "V_4_6",
		49: "V_4_6_0",
		50: "V_5_0",
		51: "V_5_0_0",
		52: "V_5_0_0_CIBUILD",
		53: "V_5_0_0_SNAPSHOT1",
		54: "V_5_0_0_SNAPSHOT2",
		55: "V_5_0_0_BALLOT",
		56: "V_5_0_0_SNAPSHOT3",
		57: "V_5_0_0_DRAFT_FINAL",
	}
	FHIRVersionCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"V_0_01":                1,
		"V_0_05":                2,
		"V_0_06":                3,
		"V_0_11":                4,
		"V_0_0":                 23,
		"V_0_0_80":              5,
		"V_0_0_81":              6,
		"V_0_0_82":              7,
		"V_0_4":                 24,
		"V_0_4_0":               8,
		"V_0_5":                 25,
		"V_0_5_0":               9,
		"V_1_0":                 26,
		"V_1_0_0":               10,
		"V_1_0_1":               11,
		"V_1_0_2":               12,
		"V_1_1":                 27,
		"V_1_1_0":               13,
		"V_1_4":                 28,
		"V_1_4_0":               14,
		"V_1_6":                 29,
		"V_1_6_0":               15,
		"V_1_8":                 30,
		"V_1_8_0":               16,
		"V_3_0":                 31,
		"V_3_0_0":               17,
		"V_3_0_1":               18,
		"V_3_0_2":               32,
		"V_3_3":                 33,
		"V_3_3_0":               19,
		"V_3_5":                 34,
		"V_3_5_0":               20,
		"V_4_0":                 35,
		"V_4_0_0":               21,
		"V_4_0_1":               22,
		"V_4_1":                 36,
		"V_4_1_0":               37,
		"V_4_2":                 38,
		"V_4_2_0":               39,
		"V_4_3":                 40,
		"V_4_3_0":               41,
		"V_4_3_0_CIBUILD":       42,
		"V_4_3_0_SNAPSHOT1":     43,
		"V_4_4":                 44,
		"V_4_4_0":               45,
		"V_4_5":                 46,
		"V_4_5_0":               47,
		"V_4_6":                 48,
		"V_4_6_0":               49,
		"V_5_0":                 50,
		"V_5_0_0":               51,
		"V_5_0_0_CIBUILD":       52,
		"V_5_0_0_SNAPSHOT1":     53,
		"V_5_0_0_SNAPSHOT2":     54,
		"V_5_0_0_BALLOT":        55,
		"V_5_0_0_SNAPSHOT3":     56,
		"V_5_0_0_DRAFT_FINAL":   57,
	}
)

func (x FHIRVersionCode_Value) Enum() *FHIRVersionCode_Value {
	p := new(FHIRVersionCode_Value)
	*p = x
	return p
}

func (x FHIRVersionCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FHIRVersionCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[104].Descriptor()
}

func (FHIRVersionCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[104]
}

func (x FHIRVersionCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FHIRVersionCode_Value.Descriptor instead.
func (FHIRVersionCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{104, 0}
}

type FamilyHistoryStatusCode_Value int32

const (
	FamilyHistoryStatusCode_INVALID_UNINITIALIZED FamilyHistoryStatusCode_Value = 0
	FamilyHistoryStatusCode_PARTIAL               FamilyHistoryStatusCode_Value = 1
	FamilyHistoryStatusCode_COMPLETED             FamilyHistoryStatusCode_Value = 2
	FamilyHistoryStatusCode_ENTERED_IN_ERROR      FamilyHistoryStatusCode_Value = 3
	FamilyHistoryStatusCode_HEALTH_UNKNOWN        FamilyHistoryStatusCode_Value = 4
)

// Enum value maps for FamilyHistoryStatusCode_Value.
var (
	FamilyHistoryStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PARTIAL",
		2: "COMPLETED",
		3: "ENTERED_IN_ERROR",
		4: "HEALTH_UNKNOWN",
	}
	FamilyHistoryStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PARTIAL":               1,
		"COMPLETED":             2,
		"ENTERED_IN_ERROR":      3,
		"HEALTH_UNKNOWN":        4,
	}
)

func (x FamilyHistoryStatusCode_Value) Enum() *FamilyHistoryStatusCode_Value {
	p := new(FamilyHistoryStatusCode_Value)
	*p = x
	return p
}

func (x FamilyHistoryStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FamilyHistoryStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[105].Descriptor()
}

func (FamilyHistoryStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[105]
}

func (x FamilyHistoryStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FamilyHistoryStatusCode_Value.Descriptor instead.
func (FamilyHistoryStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{105, 0}
}

type FilterOperatorCode_Value int32

const (
	FilterOperatorCode_INVALID_UNINITIALIZED FilterOperatorCode_Value = 0
	FilterOperatorCode_EQUALS                FilterOperatorCode_Value = 1
	FilterOperatorCode_IS_A                  FilterOperatorCode_Value = 2
	FilterOperatorCode_DESCENDENT_OF         FilterOperatorCode_Value = 3
	FilterOperatorCode_IS_NOT_A              FilterOperatorCode_Value = 4
	FilterOperatorCode_REGEX                 FilterOperatorCode_Value = 5
	FilterOperatorCode_IN                    FilterOperatorCode_Value = 6
	FilterOperatorCode_NOT_IN                FilterOperatorCode_Value = 7
	FilterOperatorCode_GENERALIZES           FilterOperatorCode_Value = 8
	FilterOperatorCode_CHILD_OF              FilterOperatorCode_Value = 10
	FilterOperatorCode_DESCENDENT_LEAF       FilterOperatorCode_Value = 11
	FilterOperatorCode_EXISTS                FilterOperatorCode_Value = 9
)

// Enum value maps for FilterOperatorCode_Value.
var (
	FilterOperatorCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "EQUALS",
		2:  "IS_A",
		3:  "DESCENDENT_OF",
		4:  "IS_NOT_A",
		5:  "REGEX",
		6:  "IN",
		7:  "NOT_IN",
		8:  "GENERALIZES",
		10: "CHILD_OF",
		11: "DESCENDENT_LEAF",
		9:  "EXISTS",
	}
	FilterOperatorCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"EQUALS":                1,
		"IS_A":                  2,
		"DESCENDENT_OF":         3,
		"IS_NOT_A":              4,
		"REGEX":                 5,
		"IN":                    6,
		"NOT_IN":                7,
		"GENERALIZES":           8,
		"CHILD_OF":              10,
		"DESCENDENT_LEAF":       11,
		"EXISTS":                9,
	}
)

func (x FilterOperatorCode_Value) Enum() *FilterOperatorCode_Value {
	p := new(FilterOperatorCode_Value)
	*p = x
	return p
}

func (x FilterOperatorCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterOperatorCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[106].Descriptor()
}

func (FilterOperatorCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[106]
}

func (x FilterOperatorCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterOperatorCode_Value.Descriptor instead.
func (FilterOperatorCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{106, 0}
}

type FinancialResourceStatusCode_Value int32

const (
	FinancialResourceStatusCode_INVALID_UNINITIALIZED FinancialResourceStatusCode_Value = 0
	FinancialResourceStatusCode_ACTIVE                FinancialResourceStatusCode_Value = 1
	FinancialResourceStatusCode_CANCELLED             FinancialResourceStatusCode_Value = 2
	FinancialResourceStatusCode_DRAFT                 FinancialResourceStatusCode_Value = 3
	FinancialResourceStatusCode_ENTERED_IN_ERROR      FinancialResourceStatusCode_Value = 4
)

// Enum value maps for FinancialResourceStatusCode_Value.
var (
	FinancialResourceStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "CANCELLED",
		3: "DRAFT",
		4: "ENTERED_IN_ERROR",
	}
	FinancialResourceStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"CANCELLED":             2,
		"DRAFT":                 3,
		"ENTERED_IN_ERROR":      4,
	}
)

func (x FinancialResourceStatusCode_Value) Enum() *FinancialResourceStatusCode_Value {
	p := new(FinancialResourceStatusCode_Value)
	*p = x
	return p
}

func (x FinancialResourceStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FinancialResourceStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[107].Descriptor()
}

func (FinancialResourceStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[107]
}

func (x FinancialResourceStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FinancialResourceStatusCode_Value.Descriptor instead.
func (FinancialResourceStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{107, 0}
}

type FlagStatusCode_Value int32

const (
	FlagStatusCode_INVALID_UNINITIALIZED FlagStatusCode_Value = 0
	FlagStatusCode_ACTIVE                FlagStatusCode_Value = 1
	FlagStatusCode_INACTIVE              FlagStatusCode_Value = 2
	FlagStatusCode_ENTERED_IN_ERROR      FlagStatusCode_Value = 3
)

// Enum value maps for FlagStatusCode_Value.
var (
	FlagStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "INACTIVE",
		3: "ENTERED_IN_ERROR",
	}
	FlagStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"INACTIVE":              2,
		"ENTERED_IN_ERROR":      3,
	}
)

func (x FlagStatusCode_Value) Enum() *FlagStatusCode_Value {
	p := new(FlagStatusCode_Value)
	*p = x
	return p
}

func (x FlagStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlagStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[108].Descriptor()
}

func (FlagStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[108]
}

func (x FlagStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlagStatusCode_Value.Descriptor instead.
func (FlagStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{108, 0}
}

type FormularyItemStatusCode_Value int32

const (
	FormularyItemStatusCode_INVALID_UNINITIALIZED FormularyItemStatusCode_Value = 0
	FormularyItemStatusCode_ACTIVE                FormularyItemStatusCode_Value = 1
	FormularyItemStatusCode_ENTERED_IN_ERROR      FormularyItemStatusCode_Value = 2
	FormularyItemStatusCode_INACTIVE              FormularyItemStatusCode_Value = 3
)

// Enum value maps for FormularyItemStatusCode_Value.
var (
	FormularyItemStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "ENTERED_IN_ERROR",
		3: "INACTIVE",
	}
	FormularyItemStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"ENTERED_IN_ERROR":      2,
		"INACTIVE":              3,
	}
)

func (x FormularyItemStatusCode_Value) Enum() *FormularyItemStatusCode_Value {
	p := new(FormularyItemStatusCode_Value)
	*p = x
	return p
}

func (x FormularyItemStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FormularyItemStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[109].Descriptor()
}

func (FormularyItemStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[109]
}

func (x FormularyItemStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FormularyItemStatusCode_Value.Descriptor instead.
func (FormularyItemStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{109, 0}
}

type GenomicStudyStatusCode_Value int32

const (
	GenomicStudyStatusCode_INVALID_UNINITIALIZED GenomicStudyStatusCode_Value = 0
	GenomicStudyStatusCode_REGISTERED            GenomicStudyStatusCode_Value = 1
	GenomicStudyStatusCode_AVAILABLE             GenomicStudyStatusCode_Value = 2
	GenomicStudyStatusCode_CANCELLED             GenomicStudyStatusCode_Value = 3
	GenomicStudyStatusCode_ENTERED_IN_ERROR      GenomicStudyStatusCode_Value = 4
	GenomicStudyStatusCode_UNKNOWN               GenomicStudyStatusCode_Value = 5
)

// Enum value maps for GenomicStudyStatusCode_Value.
var (
	GenomicStudyStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "REGISTERED",
		2: "AVAILABLE",
		3: "CANCELLED",
		4: "ENTERED_IN_ERROR",
		5: "UNKNOWN",
	}
	GenomicStudyStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"REGISTERED":            1,
		"AVAILABLE":             2,
		"CANCELLED":             3,
		"ENTERED_IN_ERROR":      4,
		"UNKNOWN":               5,
	}
)

func (x GenomicStudyStatusCode_Value) Enum() *GenomicStudyStatusCode_Value {
	p := new(GenomicStudyStatusCode_Value)
	*p = x
	return p
}

func (x GenomicStudyStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GenomicStudyStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[110].Descriptor()
}

func (GenomicStudyStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[110]
}

func (x GenomicStudyStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GenomicStudyStatusCode_Value.Descriptor instead.
func (GenomicStudyStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{110, 0}
}

type GoalLifecycleStatusCode_Value int32

const (
	GoalLifecycleStatusCode_INVALID_UNINITIALIZED GoalLifecycleStatusCode_Value = 0
	GoalLifecycleStatusCode_PROPOSED              GoalLifecycleStatusCode_Value = 1
	GoalLifecycleStatusCode_PLANNED               GoalLifecycleStatusCode_Value = 2
	GoalLifecycleStatusCode_ACCEPTED              GoalLifecycleStatusCode_Value = 3
	GoalLifecycleStatusCode_ACTIVE                GoalLifecycleStatusCode_Value = 4
	GoalLifecycleStatusCode_ON_HOLD               GoalLifecycleStatusCode_Value = 5
	GoalLifecycleStatusCode_COMPLETED             GoalLifecycleStatusCode_Value = 6
	GoalLifecycleStatusCode_CANCELLED             GoalLifecycleStatusCode_Value = 7
	GoalLifecycleStatusCode_ENTERED_IN_ERROR      GoalLifecycleStatusCode_Value = 8
	GoalLifecycleStatusCode_REJECTED              GoalLifecycleStatusCode_Value = 9
)

// Enum value maps for GoalLifecycleStatusCode_Value.
var (
	GoalLifecycleStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PROPOSED",
		2: "PLANNED",
		3: "ACCEPTED",
		4: "ACTIVE",
		5: "ON_HOLD",
		6: "COMPLETED",
		7: "CANCELLED",
		8: "ENTERED_IN_ERROR",
		9: "REJECTED",
	}
	GoalLifecycleStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PROPOSED":              1,
		"PLANNED":               2,
		"ACCEPTED":              3,
		"ACTIVE":                4,
		"ON_HOLD":               5,
		"COMPLETED":             6,
		"CANCELLED":             7,
		"ENTERED_IN_ERROR":      8,
		"REJECTED":              9,
	}
)

func (x GoalLifecycleStatusCode_Value) Enum() *GoalLifecycleStatusCode_Value {
	p := new(GoalLifecycleStatusCode_Value)
	*p = x
	return p
}

func (x GoalLifecycleStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GoalLifecycleStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[111].Descriptor()
}

func (GoalLifecycleStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[111]
}

func (x GoalLifecycleStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GoalLifecycleStatusCode_Value.Descriptor instead.
func (GoalLifecycleStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{111, 0}
}

type GraphCompartmentRuleCode_Value int32

const (
	GraphCompartmentRuleCode_INVALID_UNINITIALIZED GraphCompartmentRuleCode_Value = 0
	GraphCompartmentRuleCode_IDENTICAL             GraphCompartmentRuleCode_Value = 1
	GraphCompartmentRuleCode_MATCHING              GraphCompartmentRuleCode_Value = 2
	GraphCompartmentRuleCode_DIFFERENT             GraphCompartmentRuleCode_Value = 3
	GraphCompartmentRuleCode_CUSTOM                GraphCompartmentRuleCode_Value = 4
)

// Enum value maps for GraphCompartmentRuleCode_Value.
var (
	GraphCompartmentRuleCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "IDENTICAL",
		2: "MATCHING",
		3: "DIFFERENT",
		4: "CUSTOM",
	}
	GraphCompartmentRuleCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"IDENTICAL":             1,
		"MATCHING":              2,
		"DIFFERENT":             3,
		"CUSTOM":                4,
	}
)

func (x GraphCompartmentRuleCode_Value) Enum() *GraphCompartmentRuleCode_Value {
	p := new(GraphCompartmentRuleCode_Value)
	*p = x
	return p
}

func (x GraphCompartmentRuleCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GraphCompartmentRuleCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[112].Descriptor()
}

func (GraphCompartmentRuleCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[112]
}

func (x GraphCompartmentRuleCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GraphCompartmentRuleCode_Value.Descriptor instead.
func (GraphCompartmentRuleCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{112, 0}
}

type GraphCompartmentUseCode_Value int32

const (
	GraphCompartmentUseCode_INVALID_UNINITIALIZED GraphCompartmentUseCode_Value = 0
	GraphCompartmentUseCode_WHERE                 GraphCompartmentUseCode_Value = 3
	GraphCompartmentUseCode_REQUIRES              GraphCompartmentUseCode_Value = 4
)

// Enum value maps for GraphCompartmentUseCode_Value.
var (
	GraphCompartmentUseCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		3: "WHERE",
		4: "REQUIRES",
	}
	GraphCompartmentUseCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"WHERE":                 3,
		"REQUIRES":              4,
	}
)

func (x GraphCompartmentUseCode_Value) Enum() *GraphCompartmentUseCode_Value {
	p := new(GraphCompartmentUseCode_Value)
	*p = x
	return p
}

func (x GraphCompartmentUseCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GraphCompartmentUseCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[113].Descriptor()
}

func (GraphCompartmentUseCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[113]
}

func (x GraphCompartmentUseCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GraphCompartmentUseCode_Value.Descriptor instead.
func (GraphCompartmentUseCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{113, 0}
}

type GroupMembershipBasisCode_Value int32

const (
	GroupMembershipBasisCode_INVALID_UNINITIALIZED GroupMembershipBasisCode_Value = 0
	GroupMembershipBasisCode_DEFINITIONAL          GroupMembershipBasisCode_Value = 1
	GroupMembershipBasisCode_ENUMERATED            GroupMembershipBasisCode_Value = 2
)

// Enum value maps for GroupMembershipBasisCode_Value.
var (
	GroupMembershipBasisCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DEFINITIONAL",
		2: "ENUMERATED",
	}
	GroupMembershipBasisCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DEFINITIONAL":          1,
		"ENUMERATED":            2,
	}
)

func (x GroupMembershipBasisCode_Value) Enum() *GroupMembershipBasisCode_Value {
	p := new(GroupMembershipBasisCode_Value)
	*p = x
	return p
}

func (x GroupMembershipBasisCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupMembershipBasisCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[114].Descriptor()
}

func (GroupMembershipBasisCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[114]
}

func (x GroupMembershipBasisCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupMembershipBasisCode_Value.Descriptor instead.
func (GroupMembershipBasisCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{114, 0}
}

type GroupTypeCode_Value int32

const (
	GroupTypeCode_INVALID_UNINITIALIZED GroupTypeCode_Value = 0
	GroupTypeCode_PERSON                GroupTypeCode_Value = 1
	GroupTypeCode_ANIMAL                GroupTypeCode_Value = 2
	GroupTypeCode_PRACTITIONER          GroupTypeCode_Value = 3
	GroupTypeCode_DEVICE                GroupTypeCode_Value = 4
	GroupTypeCode_CARETEAM              GroupTypeCode_Value = 7
	GroupTypeCode_HEALTHCARESERVICE     GroupTypeCode_Value = 8
	GroupTypeCode_LOCATION              GroupTypeCode_Value = 9
	GroupTypeCode_ORGANIZATION          GroupTypeCode_Value = 10
	GroupTypeCode_RELATEDPERSON         GroupTypeCode_Value = 11
	GroupTypeCode_SPECIMEN              GroupTypeCode_Value = 12
)

// Enum value maps for GroupTypeCode_Value.
var (
	GroupTypeCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "PERSON",
		2:  "ANIMAL",
		3:  "PRACTITIONER",
		4:  "DEVICE",
		7:  "CARETEAM",
		8:  "HEALTHCARESERVICE",
		9:  "LOCATION",
		10: "ORGANIZATION",
		11: "RELATEDPERSON",
		12: "SPECIMEN",
	}
	GroupTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PERSON":                1,
		"ANIMAL":                2,
		"PRACTITIONER":          3,
		"DEVICE":                4,
		"CARETEAM":              7,
		"HEALTHCARESERVICE":     8,
		"LOCATION":              9,
		"ORGANIZATION":          10,
		"RELATEDPERSON":         11,
		"SPECIMEN":              12,
	}
)

func (x GroupTypeCode_Value) Enum() *GroupTypeCode_Value {
	p := new(GroupTypeCode_Value)
	*p = x
	return p
}

func (x GroupTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[115].Descriptor()
}

func (GroupTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[115]
}

func (x GroupTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupTypeCode_Value.Descriptor instead.
func (GroupTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{115, 0}
}

type GuidanceResponseStatusCode_Value int32

const (
	GuidanceResponseStatusCode_INVALID_UNINITIALIZED GuidanceResponseStatusCode_Value = 0
	GuidanceResponseStatusCode_SUCCESS               GuidanceResponseStatusCode_Value = 1
	GuidanceResponseStatusCode_DATA_REQUESTED        GuidanceResponseStatusCode_Value = 2
	GuidanceResponseStatusCode_DATA_REQUIRED         GuidanceResponseStatusCode_Value = 3
	GuidanceResponseStatusCode_IN_PROGRESS           GuidanceResponseStatusCode_Value = 4
	GuidanceResponseStatusCode_FAILURE               GuidanceResponseStatusCode_Value = 5
	GuidanceResponseStatusCode_ENTERED_IN_ERROR      GuidanceResponseStatusCode_Value = 6
)

// Enum value maps for GuidanceResponseStatusCode_Value.
var (
	GuidanceResponseStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "SUCCESS",
		2: "DATA_REQUESTED",
		3: "DATA_REQUIRED",
		4: "IN_PROGRESS",
		5: "FAILURE",
		6: "ENTERED_IN_ERROR",
	}
	GuidanceResponseStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"SUCCESS":               1,
		"DATA_REQUESTED":        2,
		"DATA_REQUIRED":         3,
		"IN_PROGRESS":           4,
		"FAILURE":               5,
		"ENTERED_IN_ERROR":      6,
	}
)

func (x GuidanceResponseStatusCode_Value) Enum() *GuidanceResponseStatusCode_Value {
	p := new(GuidanceResponseStatusCode_Value)
	*p = x
	return p
}

func (x GuidanceResponseStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GuidanceResponseStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[116].Descriptor()
}

func (GuidanceResponseStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[116]
}

func (x GuidanceResponseStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GuidanceResponseStatusCode_Value.Descriptor instead.
func (GuidanceResponseStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{116, 0}
}

type GuidePageGenerationCode_Value int32

const (
	GuidePageGenerationCode_INVALID_UNINITIALIZED GuidePageGenerationCode_Value = 0
	GuidePageGenerationCode_HTML                  GuidePageGenerationCode_Value = 1
	GuidePageGenerationCode_MARKDOWN              GuidePageGenerationCode_Value = 2
	GuidePageGenerationCode_XML                   GuidePageGenerationCode_Value = 3
	GuidePageGenerationCode_GENERATED             GuidePageGenerationCode_Value = 4
)

// Enum value maps for GuidePageGenerationCode_Value.
var (
	GuidePageGenerationCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "HTML",
		2: "MARKDOWN",
		3: "XML",
		4: "GENERATED",
	}
	GuidePageGenerationCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"HTML":                  1,
		"MARKDOWN":              2,
		"XML":                   3,
		"GENERATED":             4,
	}
)

func (x GuidePageGenerationCode_Value) Enum() *GuidePageGenerationCode_Value {
	p := new(GuidePageGenerationCode_Value)
	*p = x
	return p
}

func (x GuidePageGenerationCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GuidePageGenerationCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[117].Descriptor()
}

func (GuidePageGenerationCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[117]
}

func (x GuidePageGenerationCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GuidePageGenerationCode_Value.Descriptor instead.
func (GuidePageGenerationCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{117, 0}
}

type HTTPVerbCode_Value int32

const (
	HTTPVerbCode_INVALID_UNINITIALIZED HTTPVerbCode_Value = 0
	HTTPVerbCode_GET                   HTTPVerbCode_Value = 1
	HTTPVerbCode_HEAD                  HTTPVerbCode_Value = 2
	HTTPVerbCode_POST                  HTTPVerbCode_Value = 3
	HTTPVerbCode_PUT                   HTTPVerbCode_Value = 4
	HTTPVerbCode_DELETE                HTTPVerbCode_Value = 5
	HTTPVerbCode_PATCH                 HTTPVerbCode_Value = 6
)

// Enum value maps for HTTPVerbCode_Value.
var (
	HTTPVerbCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "GET",
		2: "HEAD",
		3: "POST",
		4: "PUT",
		5: "DELETE",
		6: "PATCH",
	}
	HTTPVerbCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"GET":                   1,
		"HEAD":                  2,
		"POST":                  3,
		"PUT":                   4,
		"DELETE":                5,
		"PATCH":                 6,
	}
)

func (x HTTPVerbCode_Value) Enum() *HTTPVerbCode_Value {
	p := new(HTTPVerbCode_Value)
	*p = x
	return p
}

func (x HTTPVerbCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HTTPVerbCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[118].Descriptor()
}

func (HTTPVerbCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[118]
}

func (x HTTPVerbCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HTTPVerbCode_Value.Descriptor instead.
func (HTTPVerbCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{118, 0}
}

type IdentifierUseCode_Value int32

const (
	IdentifierUseCode_INVALID_UNINITIALIZED IdentifierUseCode_Value = 0
	IdentifierUseCode_USUAL                 IdentifierUseCode_Value = 1
	IdentifierUseCode_OFFICIAL              IdentifierUseCode_Value = 2
	IdentifierUseCode_TEMP                  IdentifierUseCode_Value = 3
	IdentifierUseCode_SECONDARY             IdentifierUseCode_Value = 4
	IdentifierUseCode_OLD                   IdentifierUseCode_Value = 5
)

// Enum value maps for IdentifierUseCode_Value.
var (
	IdentifierUseCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "USUAL",
		2: "OFFICIAL",
		3: "TEMP",
		4: "SECONDARY",
		5: "OLD",
	}
	IdentifierUseCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"USUAL":                 1,
		"OFFICIAL":              2,
		"TEMP":                  3,
		"SECONDARY":             4,
		"OLD":                   5,
	}
)

func (x IdentifierUseCode_Value) Enum() *IdentifierUseCode_Value {
	p := new(IdentifierUseCode_Value)
	*p = x
	return p
}

func (x IdentifierUseCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IdentifierUseCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[119].Descriptor()
}

func (IdentifierUseCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[119]
}

func (x IdentifierUseCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IdentifierUseCode_Value.Descriptor instead.
func (IdentifierUseCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{119, 0}
}

type IdentityAssuranceLevelCode_Value int32

const (
	IdentityAssuranceLevelCode_INVALID_UNINITIALIZED IdentityAssuranceLevelCode_Value = 0
	IdentityAssuranceLevelCode_LEVEL1                IdentityAssuranceLevelCode_Value = 1
	IdentityAssuranceLevelCode_LEVEL2                IdentityAssuranceLevelCode_Value = 2
	IdentityAssuranceLevelCode_LEVEL3                IdentityAssuranceLevelCode_Value = 3
	IdentityAssuranceLevelCode_LEVEL4                IdentityAssuranceLevelCode_Value = 4
)

// Enum value maps for IdentityAssuranceLevelCode_Value.
var (
	IdentityAssuranceLevelCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "LEVEL1",
		2: "LEVEL2",
		3: "LEVEL3",
		4: "LEVEL4",
	}
	IdentityAssuranceLevelCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"LEVEL1":                1,
		"LEVEL2":                2,
		"LEVEL3":                3,
		"LEVEL4":                4,
	}
)

func (x IdentityAssuranceLevelCode_Value) Enum() *IdentityAssuranceLevelCode_Value {
	p := new(IdentityAssuranceLevelCode_Value)
	*p = x
	return p
}

func (x IdentityAssuranceLevelCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IdentityAssuranceLevelCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[120].Descriptor()
}

func (IdentityAssuranceLevelCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[120]
}

func (x IdentityAssuranceLevelCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IdentityAssuranceLevelCode_Value.Descriptor instead.
func (IdentityAssuranceLevelCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{120, 0}
}

type ImagingSelection2DGraphicTypeCode_Value int32

const (
	ImagingSelection2DGraphicTypeCode_INVALID_UNINITIALIZED ImagingSelection2DGraphicTypeCode_Value = 0
	ImagingSelection2DGraphicTypeCode_POINT                 ImagingSelection2DGraphicTypeCode_Value = 1
	ImagingSelection2DGraphicTypeCode_POLYLINE              ImagingSelection2DGraphicTypeCode_Value = 2
	ImagingSelection2DGraphicTypeCode_INTERPOLATED          ImagingSelection2DGraphicTypeCode_Value = 3
	ImagingSelection2DGraphicTypeCode_CIRCLE                ImagingSelection2DGraphicTypeCode_Value = 4
	ImagingSelection2DGraphicTypeCode_ELLIPSE               ImagingSelection2DGraphicTypeCode_Value = 5
)

// Enum value maps for ImagingSelection2DGraphicTypeCode_Value.
var (
	ImagingSelection2DGraphicTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "POINT",
		2: "POLYLINE",
		3: "INTERPOLATED",
		4: "CIRCLE",
		5: "ELLIPSE",
	}
	ImagingSelection2DGraphicTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"POINT":                 1,
		"POLYLINE":              2,
		"INTERPOLATED":          3,
		"CIRCLE":                4,
		"ELLIPSE":               5,
	}
)

func (x ImagingSelection2DGraphicTypeCode_Value) Enum() *ImagingSelection2DGraphicTypeCode_Value {
	p := new(ImagingSelection2DGraphicTypeCode_Value)
	*p = x
	return p
}

func (x ImagingSelection2DGraphicTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImagingSelection2DGraphicTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[121].Descriptor()
}

func (ImagingSelection2DGraphicTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[121]
}

func (x ImagingSelection2DGraphicTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImagingSelection2DGraphicTypeCode_Value.Descriptor instead.
func (ImagingSelection2DGraphicTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{121, 0}
}

type ImagingSelection3DGraphicTypeCode_Value int32

const (
	ImagingSelection3DGraphicTypeCode_INVALID_UNINITIALIZED ImagingSelection3DGraphicTypeCode_Value = 0
	ImagingSelection3DGraphicTypeCode_POINT                 ImagingSelection3DGraphicTypeCode_Value = 1
	ImagingSelection3DGraphicTypeCode_MULTIPOINT            ImagingSelection3DGraphicTypeCode_Value = 2
	ImagingSelection3DGraphicTypeCode_POLYLINE              ImagingSelection3DGraphicTypeCode_Value = 3
	ImagingSelection3DGraphicTypeCode_POLYGON               ImagingSelection3DGraphicTypeCode_Value = 4
	ImagingSelection3DGraphicTypeCode_ELLIPSE               ImagingSelection3DGraphicTypeCode_Value = 5
	ImagingSelection3DGraphicTypeCode_ELLIPSOID             ImagingSelection3DGraphicTypeCode_Value = 6
)

// Enum value maps for ImagingSelection3DGraphicTypeCode_Value.
var (
	ImagingSelection3DGraphicTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "POINT",
		2: "MULTIPOINT",
		3: "POLYLINE",
		4: "POLYGON",
		5: "ELLIPSE",
		6: "ELLIPSOID",
	}
	ImagingSelection3DGraphicTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"POINT":                 1,
		"MULTIPOINT":            2,
		"POLYLINE":              3,
		"POLYGON":               4,
		"ELLIPSE":               5,
		"ELLIPSOID":             6,
	}
)

func (x ImagingSelection3DGraphicTypeCode_Value) Enum() *ImagingSelection3DGraphicTypeCode_Value {
	p := new(ImagingSelection3DGraphicTypeCode_Value)
	*p = x
	return p
}

func (x ImagingSelection3DGraphicTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImagingSelection3DGraphicTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[122].Descriptor()
}

func (ImagingSelection3DGraphicTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[122]
}

func (x ImagingSelection3DGraphicTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImagingSelection3DGraphicTypeCode_Value.Descriptor instead.
func (ImagingSelection3DGraphicTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{122, 0}
}

type ImagingSelectionStatusCode_Value int32

const (
	ImagingSelectionStatusCode_INVALID_UNINITIALIZED ImagingSelectionStatusCode_Value = 0
	ImagingSelectionStatusCode_AVAILABLE             ImagingSelectionStatusCode_Value = 1
	ImagingSelectionStatusCode_ENTERED_IN_ERROR      ImagingSelectionStatusCode_Value = 2
	ImagingSelectionStatusCode_UNKNOWN               ImagingSelectionStatusCode_Value = 3
)

// Enum value maps for ImagingSelectionStatusCode_Value.
var (
	ImagingSelectionStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "AVAILABLE",
		2: "ENTERED_IN_ERROR",
		3: "UNKNOWN",
	}
	ImagingSelectionStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"AVAILABLE":             1,
		"ENTERED_IN_ERROR":      2,
		"UNKNOWN":               3,
	}
)

func (x ImagingSelectionStatusCode_Value) Enum() *ImagingSelectionStatusCode_Value {
	p := new(ImagingSelectionStatusCode_Value)
	*p = x
	return p
}

func (x ImagingSelectionStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImagingSelectionStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[123].Descriptor()
}

func (ImagingSelectionStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[123]
}

func (x ImagingSelectionStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImagingSelectionStatusCode_Value.Descriptor instead.
func (ImagingSelectionStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{123, 0}
}

type ImagingStudyStatusCode_Value int32

const (
	ImagingStudyStatusCode_INVALID_UNINITIALIZED ImagingStudyStatusCode_Value = 0
	ImagingStudyStatusCode_REGISTERED            ImagingStudyStatusCode_Value = 1
	ImagingStudyStatusCode_AVAILABLE             ImagingStudyStatusCode_Value = 2
	ImagingStudyStatusCode_CANCELLED             ImagingStudyStatusCode_Value = 3
	ImagingStudyStatusCode_ENTERED_IN_ERROR      ImagingStudyStatusCode_Value = 4
	ImagingStudyStatusCode_UNKNOWN               ImagingStudyStatusCode_Value = 5
)

// Enum value maps for ImagingStudyStatusCode_Value.
var (
	ImagingStudyStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "REGISTERED",
		2: "AVAILABLE",
		3: "CANCELLED",
		4: "ENTERED_IN_ERROR",
		5: "UNKNOWN",
	}
	ImagingStudyStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"REGISTERED":            1,
		"AVAILABLE":             2,
		"CANCELLED":             3,
		"ENTERED_IN_ERROR":      4,
		"UNKNOWN":               5,
	}
)

func (x ImagingStudyStatusCode_Value) Enum() *ImagingStudyStatusCode_Value {
	p := new(ImagingStudyStatusCode_Value)
	*p = x
	return p
}

func (x ImagingStudyStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImagingStudyStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[124].Descriptor()
}

func (ImagingStudyStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[124]
}

func (x ImagingStudyStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImagingStudyStatusCode_Value.Descriptor instead.
func (ImagingStudyStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{124, 0}
}

type IngredientManufacturerRoleCode_Value int32

const (
	IngredientManufacturerRoleCode_INVALID_UNINITIALIZED IngredientManufacturerRoleCode_Value = 0
	IngredientManufacturerRoleCode_ALLOWED               IngredientManufacturerRoleCode_Value = 1
	IngredientManufacturerRoleCode_POSSIBLE              IngredientManufacturerRoleCode_Value = 2
	IngredientManufacturerRoleCode_ACTUAL                IngredientManufacturerRoleCode_Value = 3
)

// Enum value maps for IngredientManufacturerRoleCode_Value.
var (
	IngredientManufacturerRoleCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ALLOWED",
		2: "POSSIBLE",
		3: "ACTUAL",
	}
	IngredientManufacturerRoleCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ALLOWED":               1,
		"POSSIBLE":              2,
		"ACTUAL":                3,
	}
)

func (x IngredientManufacturerRoleCode_Value) Enum() *IngredientManufacturerRoleCode_Value {
	p := new(IngredientManufacturerRoleCode_Value)
	*p = x
	return p
}

func (x IngredientManufacturerRoleCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IngredientManufacturerRoleCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[125].Descriptor()
}

func (IngredientManufacturerRoleCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[125]
}

func (x IngredientManufacturerRoleCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IngredientManufacturerRoleCode_Value.Descriptor instead.
func (IngredientManufacturerRoleCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{125, 0}
}

type InventoryCountTypeCode_Value int32

const (
	InventoryCountTypeCode_INVALID_UNINITIALIZED InventoryCountTypeCode_Value = 0
	InventoryCountTypeCode_SNAPSHOT              InventoryCountTypeCode_Value = 1
	InventoryCountTypeCode_DIFFERENCE            InventoryCountTypeCode_Value = 2
)

// Enum value maps for InventoryCountTypeCode_Value.
var (
	InventoryCountTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "SNAPSHOT",
		2: "DIFFERENCE",
	}
	InventoryCountTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"SNAPSHOT":              1,
		"DIFFERENCE":            2,
	}
)

func (x InventoryCountTypeCode_Value) Enum() *InventoryCountTypeCode_Value {
	p := new(InventoryCountTypeCode_Value)
	*p = x
	return p
}

func (x InventoryCountTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InventoryCountTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[126].Descriptor()
}

func (InventoryCountTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[126]
}

func (x InventoryCountTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InventoryCountTypeCode_Value.Descriptor instead.
func (InventoryCountTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{126, 0}
}

type InventoryItemStatusCode_Value int32

const (
	InventoryItemStatusCode_INVALID_UNINITIALIZED InventoryItemStatusCode_Value = 0
	InventoryItemStatusCode_ACTIVE                InventoryItemStatusCode_Value = 1
	InventoryItemStatusCode_INACTIVE              InventoryItemStatusCode_Value = 2
	InventoryItemStatusCode_ENTERED_IN_ERROR      InventoryItemStatusCode_Value = 3
	InventoryItemStatusCode_UNKNOWN               InventoryItemStatusCode_Value = 4
)

// Enum value maps for InventoryItemStatusCode_Value.
var (
	InventoryItemStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "INACTIVE",
		3: "ENTERED_IN_ERROR",
		4: "UNKNOWN",
	}
	InventoryItemStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"INACTIVE":              2,
		"ENTERED_IN_ERROR":      3,
		"UNKNOWN":               4,
	}
)

func (x InventoryItemStatusCode_Value) Enum() *InventoryItemStatusCode_Value {
	p := new(InventoryItemStatusCode_Value)
	*p = x
	return p
}

func (x InventoryItemStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InventoryItemStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[127].Descriptor()
}

func (InventoryItemStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[127]
}

func (x InventoryItemStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InventoryItemStatusCode_Value.Descriptor instead.
func (InventoryItemStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{127, 0}
}

type InventoryReportStatusCode_Value int32

const (
	InventoryReportStatusCode_INVALID_UNINITIALIZED InventoryReportStatusCode_Value = 0
	InventoryReportStatusCode_DRAFT                 InventoryReportStatusCode_Value = 1
	InventoryReportStatusCode_REQUESTED             InventoryReportStatusCode_Value = 2
	InventoryReportStatusCode_ACTIVE                InventoryReportStatusCode_Value = 3
	InventoryReportStatusCode_ENTERED_IN_ERROR      InventoryReportStatusCode_Value = 4
)

// Enum value maps for InventoryReportStatusCode_Value.
var (
	InventoryReportStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DRAFT",
		2: "REQUESTED",
		3: "ACTIVE",
		4: "ENTERED_IN_ERROR",
	}
	InventoryReportStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DRAFT":                 1,
		"REQUESTED":             2,
		"ACTIVE":                3,
		"ENTERED_IN_ERROR":      4,
	}
)

func (x InventoryReportStatusCode_Value) Enum() *InventoryReportStatusCode_Value {
	p := new(InventoryReportStatusCode_Value)
	*p = x
	return p
}

func (x InventoryReportStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InventoryReportStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[128].Descriptor()
}

func (InventoryReportStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[128]
}

func (x InventoryReportStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InventoryReportStatusCode_Value.Descriptor instead.
func (InventoryReportStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{128, 0}
}

type InvoiceStatusCode_Value int32

const (
	InvoiceStatusCode_INVALID_UNINITIALIZED InvoiceStatusCode_Value = 0
	InvoiceStatusCode_DRAFT                 InvoiceStatusCode_Value = 1
	InvoiceStatusCode_ISSUED                InvoiceStatusCode_Value = 2
	InvoiceStatusCode_BALANCED              InvoiceStatusCode_Value = 3
	InvoiceStatusCode_CANCELLED             InvoiceStatusCode_Value = 4
	InvoiceStatusCode_ENTERED_IN_ERROR      InvoiceStatusCode_Value = 5
)

// Enum value maps for InvoiceStatusCode_Value.
var (
	InvoiceStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DRAFT",
		2: "ISSUED",
		3: "BALANCED",
		4: "CANCELLED",
		5: "ENTERED_IN_ERROR",
	}
	InvoiceStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DRAFT":                 1,
		"ISSUED":                2,
		"BALANCED":              3,
		"CANCELLED":             4,
		"ENTERED_IN_ERROR":      5,
	}
)

func (x InvoiceStatusCode_Value) Enum() *InvoiceStatusCode_Value {
	p := new(InvoiceStatusCode_Value)
	*p = x
	return p
}

func (x InvoiceStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InvoiceStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[129].Descriptor()
}

func (InvoiceStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[129]
}

func (x InvoiceStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InvoiceStatusCode_Value.Descriptor instead.
func (InvoiceStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{129, 0}
}

type IssueSeverityCode_Value int32

const (
	IssueSeverityCode_INVALID_UNINITIALIZED IssueSeverityCode_Value = 0
	IssueSeverityCode_FATAL                 IssueSeverityCode_Value = 1
	IssueSeverityCode_ERROR                 IssueSeverityCode_Value = 2
	IssueSeverityCode_WARNING               IssueSeverityCode_Value = 3
	IssueSeverityCode_INFORMATION           IssueSeverityCode_Value = 4
	IssueSeverityCode_SUCCESS               IssueSeverityCode_Value = 5
)

// Enum value maps for IssueSeverityCode_Value.
var (
	IssueSeverityCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "FATAL",
		2: "ERROR",
		3: "WARNING",
		4: "INFORMATION",
		5: "SUCCESS",
	}
	IssueSeverityCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"FATAL":                 1,
		"ERROR":                 2,
		"WARNING":               3,
		"INFORMATION":           4,
		"SUCCESS":               5,
	}
)

func (x IssueSeverityCode_Value) Enum() *IssueSeverityCode_Value {
	p := new(IssueSeverityCode_Value)
	*p = x
	return p
}

func (x IssueSeverityCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IssueSeverityCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[130].Descriptor()
}

func (IssueSeverityCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[130]
}

func (x IssueSeverityCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IssueSeverityCode_Value.Descriptor instead.
func (IssueSeverityCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{130, 0}
}

type IssueTypeCode_Value int32

const (
	IssueTypeCode_INVALID_UNINITIALIZED IssueTypeCode_Value = 0
	IssueTypeCode_INVALID               IssueTypeCode_Value = 1
	IssueTypeCode_STRUCTURE             IssueTypeCode_Value = 2
	IssueTypeCode_REQUIRED              IssueTypeCode_Value = 3
	IssueTypeCode_VALUE                 IssueTypeCode_Value = 4
	IssueTypeCode_INVARIANT             IssueTypeCode_Value = 5
	IssueTypeCode_SECURITY              IssueTypeCode_Value = 6
	IssueTypeCode_LOGIN                 IssueTypeCode_Value = 7
	IssueTypeCode_UNKNOWN               IssueTypeCode_Value = 8
	IssueTypeCode_EXPIRED               IssueTypeCode_Value = 9
	IssueTypeCode_FORBIDDEN             IssueTypeCode_Value = 10
	IssueTypeCode_SUPPRESSED            IssueTypeCode_Value = 11
	IssueTypeCode_PROCESSING            IssueTypeCode_Value = 12
	IssueTypeCode_NOT_SUPPORTED         IssueTypeCode_Value = 13
	IssueTypeCode_DUPLICATE             IssueTypeCode_Value = 14
	IssueTypeCode_MULTIPLE_MATCHES      IssueTypeCode_Value = 15
	IssueTypeCode_NOT_FOUND             IssueTypeCode_Value = 16
	IssueTypeCode_DELETED               IssueTypeCode_Value = 17
	IssueTypeCode_TOO_LONG              IssueTypeCode_Value = 18
	IssueTypeCode_CODE_INVALID          IssueTypeCode_Value = 19
	IssueTypeCode_EXTENSION             IssueTypeCode_Value = 20
	IssueTypeCode_TOO_COSTLY            IssueTypeCode_Value = 21
	IssueTypeCode_BUSINESS_RULE         IssueTypeCode_Value = 22
	IssueTypeCode_CONFLICT              IssueTypeCode_Value = 23
	IssueTypeCode_LIMITED_FILTER        IssueTypeCode_Value = 32
	IssueTypeCode_TRANSIENT             IssueTypeCode_Value = 24
	IssueTypeCode_LOCK_ERROR            IssueTypeCode_Value = 25
	IssueTypeCode_NO_STORE              IssueTypeCode_Value = 26
	IssueTypeCode_EXCEPTION             IssueTypeCode_Value = 27
	IssueTypeCode_TIMEOUT               IssueTypeCode_Value = 28
	IssueTypeCode_INCOMPLETE            IssueTypeCode_Value = 29
	IssueTypeCode_THROTTLED             IssueTypeCode_Value = 30
	IssueTypeCode_INFORMATIONAL         IssueTypeCode_Value = 31
	IssueTypeCode_SUCCESS               IssueTypeCode_Value = 33
)

// Enum value maps for IssueTypeCode_Value.
var (
	IssueTypeCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "INVALID",
		2:  "STRUCTURE",
		3:  "REQUIRED",
		4:  "VALUE",
		5:  "INVARIANT",
		6:  "SECURITY",
		7:  "LOGIN",
		8:  "UNKNOWN",
		9:  "EXPIRED",
		10: "FORBIDDEN",
		11: "SUPPRESSED",
		12: "PROCESSING",
		13: "NOT_SUPPORTED",
		14: "DUPLICATE",
		15: "MULTIPLE_MATCHES",
		16: "NOT_FOUND",
		17: "DELETED",
		18: "TOO_LONG",
		19: "CODE_INVALID",
		20: "EXTENSION",
		21: "TOO_COSTLY",
		22: "BUSINESS_RULE",
		23: "CONFLICT",
		32: "LIMITED_FILTER",
		24: "TRANSIENT",
		25: "LOCK_ERROR",
		26: "NO_STORE",
		27: "EXCEPTION",
		28: "TIMEOUT",
		29: "INCOMPLETE",
		30: "THROTTLED",
		31: "INFORMATIONAL",
		33: "SUCCESS",
	}
	IssueTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"INVALID":               1,
		"STRUCTURE":             2,
		"REQUIRED":              3,
		"VALUE":                 4,
		"INVARIANT":             5,
		"SECURITY":              6,
		"LOGIN":                 7,
		"UNKNOWN":               8,
		"EXPIRED":               9,
		"FORBIDDEN":             10,
		"SUPPRESSED":            11,
		"PROCESSING":            12,
		"NOT_SUPPORTED":         13,
		"DUPLICATE":             14,
		"MULTIPLE_MATCHES":      15,
		"NOT_FOUND":             16,
		"DELETED":               17,
		"TOO_LONG":              18,
		"CODE_INVALID":          19,
		"EXTENSION":             20,
		"TOO_COSTLY":            21,
		"BUSINESS_RULE":         22,
		"CONFLICT":              23,
		"LIMITED_FILTER":        32,
		"TRANSIENT":             24,
		"LOCK_ERROR":            25,
		"NO_STORE":              26,
		"EXCEPTION":             27,
		"TIMEOUT":               28,
		"INCOMPLETE":            29,
		"THROTTLED":             30,
		"INFORMATIONAL":         31,
		"SUCCESS":               33,
	}
)

func (x IssueTypeCode_Value) Enum() *IssueTypeCode_Value {
	p := new(IssueTypeCode_Value)
	*p = x
	return p
}

func (x IssueTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IssueTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[131].Descriptor()
}

func (IssueTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[131]
}

func (x IssueTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IssueTypeCode_Value.Descriptor instead.
func (IssueTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{131, 0}
}

type KindCode_Value int32

const (
	KindCode_INVALID_UNINITIALIZED KindCode_Value = 0
	KindCode_INSURANCE             KindCode_Value = 1
	KindCode_SELF_PAY              KindCode_Value = 2
	KindCode_OTHER                 KindCode_Value = 3
)

// Enum value maps for KindCode_Value.
var (
	KindCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "INSURANCE",
		2: "SELF_PAY",
		3: "OTHER",
	}
	KindCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"INSURANCE":             1,
		"SELF_PAY":              2,
		"OTHER":                 3,
	}
)

func (x KindCode_Value) Enum() *KindCode_Value {
	p := new(KindCode_Value)
	*p = x
	return p
}

func (x KindCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KindCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[132].Descriptor()
}

func (KindCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[132]
}

func (x KindCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KindCode_Value.Descriptor instead.
func (KindCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{132, 0}
}

type KnowledgeRepresentationLevelCode_Value int32

const (
	KnowledgeRepresentationLevelCode_INVALID_UNINITIALIZED KnowledgeRepresentationLevelCode_Value = 0
	KnowledgeRepresentationLevelCode_NARRATIVE             KnowledgeRepresentationLevelCode_Value = 1
	KnowledgeRepresentationLevelCode_SEMI_STRUCTURED       KnowledgeRepresentationLevelCode_Value = 2
	KnowledgeRepresentationLevelCode_STRUCTURED            KnowledgeRepresentationLevelCode_Value = 3
	KnowledgeRepresentationLevelCode_EXECUTABLE            KnowledgeRepresentationLevelCode_Value = 4
)

// Enum value maps for KnowledgeRepresentationLevelCode_Value.
var (
	KnowledgeRepresentationLevelCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "NARRATIVE",
		2: "SEMI_STRUCTURED",
		3: "STRUCTURED",
		4: "EXECUTABLE",
	}
	KnowledgeRepresentationLevelCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NARRATIVE":             1,
		"SEMI_STRUCTURED":       2,
		"STRUCTURED":            3,
		"EXECUTABLE":            4,
	}
)

func (x KnowledgeRepresentationLevelCode_Value) Enum() *KnowledgeRepresentationLevelCode_Value {
	p := new(KnowledgeRepresentationLevelCode_Value)
	*p = x
	return p
}

func (x KnowledgeRepresentationLevelCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KnowledgeRepresentationLevelCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[133].Descriptor()
}

func (KnowledgeRepresentationLevelCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[133]
}

func (x KnowledgeRepresentationLevelCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KnowledgeRepresentationLevelCode_Value.Descriptor instead.
func (KnowledgeRepresentationLevelCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{133, 0}
}

type LinkRelationTypesCode_Value int32

const (
	LinkRelationTypesCode_INVALID_UNINITIALIZED     LinkRelationTypesCode_Value = 0
	LinkRelationTypesCode_ABOUT                     LinkRelationTypesCode_Value = 1
	LinkRelationTypesCode_ACL                       LinkRelationTypesCode_Value = 2
	LinkRelationTypesCode_ALTERNATE                 LinkRelationTypesCode_Value = 3
	LinkRelationTypesCode_AMPHTML                   LinkRelationTypesCode_Value = 4
	LinkRelationTypesCode_APPENDIX                  LinkRelationTypesCode_Value = 5
	LinkRelationTypesCode_APPLE_TOUCH_ICON          LinkRelationTypesCode_Value = 6
	LinkRelationTypesCode_APPLE_TOUCH_STARTUP_IMAGE LinkRelationTypesCode_Value = 7
	LinkRelationTypesCode_ARCHIVES                  LinkRelationTypesCode_Value = 8
	LinkRelationTypesCode_AUTHOR                    LinkRelationTypesCode_Value = 9
	LinkRelationTypesCode_BLOCKED_BY                LinkRelationTypesCode_Value = 10
	LinkRelationTypesCode_BOOKMARK                  LinkRelationTypesCode_Value = 11
	LinkRelationTypesCode_CANONICAL                 LinkRelationTypesCode_Value = 12
	LinkRelationTypesCode_CHAPTER                   LinkRelationTypesCode_Value = 13
	LinkRelationTypesCode_CITE_AS                   LinkRelationTypesCode_Value = 14
	LinkRelationTypesCode_COLLECTION                LinkRelationTypesCode_Value = 15
	LinkRelationTypesCode_CONTENTS                  LinkRelationTypesCode_Value = 16
	LinkRelationTypesCode_CONVERTED_FROM            LinkRelationTypesCode_Value = 17
	LinkRelationTypesCode_COPYRIGHT                 LinkRelationTypesCode_Value = 18
	LinkRelationTypesCode_CREATE_FORM               LinkRelationTypesCode_Value = 19
	LinkRelationTypesCode_CURRENT                   LinkRelationTypesCode_Value = 20
	LinkRelationTypesCode_DESCRIBEDBY               LinkRelationTypesCode_Value = 21
	LinkRelationTypesCode_DESCRIBES                 LinkRelationTypesCode_Value = 22
	LinkRelationTypesCode_DISCLOSURE                LinkRelationTypesCode_Value = 23
	LinkRelationTypesCode_DNS_PREFETCH              LinkRelationTypesCode_Value = 24
	LinkRelationTypesCode_DUPLICATE                 LinkRelationTypesCode_Value = 25
	LinkRelationTypesCode_EDIT                      LinkRelationTypesCode_Value = 26
	LinkRelationTypesCode_EDIT_FORM                 LinkRelationTypesCode_Value = 27
	LinkRelationTypesCode_EDIT_MEDIA                LinkRelationTypesCode_Value = 28
	LinkRelationTypesCode_ENCLOSURE                 LinkRelationTypesCode_Value = 29
	LinkRelationTypesCode_EXTERNAL                  LinkRelationTypesCode_Value = 30
	LinkRelationTypesCode_FIRST                     LinkRelationTypesCode_Value = 31
	LinkRelationTypesCode_GLOSSARY                  LinkRelationTypesCode_Value = 32
	LinkRelationTypesCode_HELP                      LinkRelationTypesCode_Value = 33
	LinkRelationTypesCode_HOSTS                     LinkRelationTypesCode_Value = 34
	LinkRelationTypesCode_HUB                       LinkRelationTypesCode_Value = 35
	LinkRelationTypesCode_ICON                      LinkRelationTypesCode_Value = 36
	LinkRelationTypesCode_INDEX                     LinkRelationTypesCode_Value = 37
	LinkRelationTypesCode_INTERVAL_AFTER            LinkRelationTypesCode_Value = 38
	LinkRelationTypesCode_INTERVAL_BEFORE           LinkRelationTypesCode_Value = 39
	LinkRelationTypesCode_INTERVAL_CONTAINS         LinkRelationTypesCode_Value = 40
	LinkRelationTypesCode_INTERVAL_DISJOINT         LinkRelationTypesCode_Value = 41
	LinkRelationTypesCode_INTERVAL_DURING           LinkRelationTypesCode_Value = 42
	LinkRelationTypesCode_INTERVAL_EQUALS           LinkRelationTypesCode_Value = 43
	LinkRelationTypesCode_INTERVAL_FINISHED_BY      LinkRelationTypesCode_Value = 44
	LinkRelationTypesCode_INTERVAL_FINISHES         LinkRelationTypesCode_Value = 45
	LinkRelationTypesCode_INTERVAL_IN               LinkRelationTypesCode_Value = 46
	LinkRelationTypesCode_INTERVAL_MEETS            LinkRelationTypesCode_Value = 47
	LinkRelationTypesCode_INTERVAL_MET_BY           LinkRelationTypesCode_Value = 48
	LinkRelationTypesCode_INTERVAL_OVERLAPPED_BY    LinkRelationTypesCode_Value = 49
	LinkRelationTypesCode_INTERVAL_OVERLAPS         LinkRelationTypesCode_Value = 50
	LinkRelationTypesCode_INTERVAL_STARTED_BY       LinkRelationTypesCode_Value = 51
	LinkRelationTypesCode_INTERVAL_STARTS           LinkRelationTypesCode_Value = 52
	LinkRelationTypesCode_ITEM                      LinkRelationTypesCode_Value = 53
	LinkRelationTypesCode_LAST                      LinkRelationTypesCode_Value = 54
	LinkRelationTypesCode_LATEST_VERSION            LinkRelationTypesCode_Value = 55
	LinkRelationTypesCode_LICENSE                   LinkRelationTypesCode_Value = 56
	LinkRelationTypesCode_LINKSET                   LinkRelationTypesCode_Value = 57
	LinkRelationTypesCode_LRDD                      LinkRelationTypesCode_Value = 58
	LinkRelationTypesCode_MANIFEST                  LinkRelationTypesCode_Value = 59
	LinkRelationTypesCode_MASK_ICON                 LinkRelationTypesCode_Value = 60
	LinkRelationTypesCode_MEDIA_FEED                LinkRelationTypesCode_Value = 61
	LinkRelationTypesCode_MEMENTO                   LinkRelationTypesCode_Value = 62
	LinkRelationTypesCode_MICROPUB                  LinkRelationTypesCode_Value = 63
	LinkRelationTypesCode_MODULEPRELOAD             LinkRelationTypesCode_Value = 64
	LinkRelationTypesCode_MONITOR                   LinkRelationTypesCode_Value = 65
	LinkRelationTypesCode_MONITOR_GROUP             LinkRelationTypesCode_Value = 66
	LinkRelationTypesCode_NEXT                      LinkRelationTypesCode_Value = 67
	LinkRelationTypesCode_NEXT_ARCHIVE              LinkRelationTypesCode_Value = 68
	LinkRelationTypesCode_NOFOLLOW                  LinkRelationTypesCode_Value = 69
	LinkRelationTypesCode_NOOPENER                  LinkRelationTypesCode_Value = 70
	LinkRelationTypesCode_NOREFERRER                LinkRelationTypesCode_Value = 71
	LinkRelationTypesCode_OPENER                    LinkRelationTypesCode_Value = 72
	LinkRelationTypesCode_OPENID2_LOCAL_ID          LinkRelationTypesCode_Value = 73
	LinkRelationTypesCode_OPENID2_PROVIDER          LinkRelationTypesCode_Value = 74
	LinkRelationTypesCode_ORIGINAL                  LinkRelationTypesCode_Value = 75
	LinkRelationTypesCode_P3_PV1                    LinkRelationTypesCode_Value = 76
	LinkRelationTypesCode_PAYMENT                   LinkRelationTypesCode_Value = 77
	LinkRelationTypesCode_PINGBACK                  LinkRelationTypesCode_Value = 78
	LinkRelationTypesCode_PRECONNECT                LinkRelationTypesCode_Value = 79
	LinkRelationTypesCode_PREDECESSOR_VERSION       LinkRelationTypesCode_Value = 80
	LinkRelationTypesCode_PREFETCH                  LinkRelationTypesCode_Value = 81
	LinkRelationTypesCode_PRELOAD                   LinkRelationTypesCode_Value = 82
	LinkRelationTypesCode_PRERENDER                 LinkRelationTypesCode_Value = 83
	LinkRelationTypesCode_PREV                      LinkRelationTypesCode_Value = 84
	LinkRelationTypesCode_PREVIEW                   LinkRelationTypesCode_Value = 85
	LinkRelationTypesCode_PREVIOUS                  LinkRelationTypesCode_Value = 86
	LinkRelationTypesCode_PREV_ARCHIVE              LinkRelationTypesCode_Value = 87
	LinkRelationTypesCode_PRIVACY_POLICY            LinkRelationTypesCode_Value = 88
	LinkRelationTypesCode_PROFILE                   LinkRelationTypesCode_Value = 89
	LinkRelationTypesCode_PUBLICATION               LinkRelationTypesCode_Value = 90
	LinkRelationTypesCode_RELATED                   LinkRelationTypesCode_Value = 91
	LinkRelationTypesCode_RESTCONF                  LinkRelationTypesCode_Value = 92
	LinkRelationTypesCode_REPLIES                   LinkRelationTypesCode_Value = 93
	LinkRelationTypesCode_RULEINPUT                 LinkRelationTypesCode_Value = 94
	LinkRelationTypesCode_SEARCH                    LinkRelationTypesCode_Value = 95
	LinkRelationTypesCode_SECTION                   LinkRelationTypesCode_Value = 96
	LinkRelationTypesCode_SELF                      LinkRelationTypesCode_Value = 97
	LinkRelationTypesCode_SERVICE                   LinkRelationTypesCode_Value = 98
	LinkRelationTypesCode_SERVICE_DESC              LinkRelationTypesCode_Value = 99
	LinkRelationTypesCode_SERVICE_DOC               LinkRelationTypesCode_Value = 100
	LinkRelationTypesCode_SERVICE_META              LinkRelationTypesCode_Value = 101
	LinkRelationTypesCode_SPONSORED                 LinkRelationTypesCode_Value = 102
	LinkRelationTypesCode_START                     LinkRelationTypesCode_Value = 103
	LinkRelationTypesCode_STATUS                    LinkRelationTypesCode_Value = 104
	LinkRelationTypesCode_STYLESHEET                LinkRelationTypesCode_Value = 105
	LinkRelationTypesCode_SUBSECTION                LinkRelationTypesCode_Value = 106
	LinkRelationTypesCode_SUCCESSOR_VERSION         LinkRelationTypesCode_Value = 107
	LinkRelationTypesCode_SUNSET                    LinkRelationTypesCode_Value = 108
	LinkRelationTypesCode_TAG                       LinkRelationTypesCode_Value = 109
	LinkRelationTypesCode_TERMS_OF_SERVICE          LinkRelationTypesCode_Value = 110
	LinkRelationTypesCode_TIMEGATE                  LinkRelationTypesCode_Value = 111
	LinkRelationTypesCode_TIMEMAP                   LinkRelationTypesCode_Value = 112
	LinkRelationTypesCode_TYPE                      LinkRelationTypesCode_Value = 113
	LinkRelationTypesCode_UGC                       LinkRelationTypesCode_Value = 114
	LinkRelationTypesCode_UP                        LinkRelationTypesCode_Value = 115
	LinkRelationTypesCode_VERSION_HISTORY           LinkRelationTypesCode_Value = 116
	LinkRelationTypesCode_VIA                       LinkRelationTypesCode_Value = 117
	LinkRelationTypesCode_WEBMENTION                LinkRelationTypesCode_Value = 118
	LinkRelationTypesCode_WORKING_COPY              LinkRelationTypesCode_Value = 119
	LinkRelationTypesCode_WORKING_COPY_OF           LinkRelationTypesCode_Value = 120
)

// Enum value maps for LinkRelationTypesCode_Value.
var (
	LinkRelationTypesCode_Value_name = map[int32]string{
		0:   "INVALID_UNINITIALIZED",
		1:   "ABOUT",
		2:   "ACL",
		3:   "ALTERNATE",
		4:   "AMPHTML",
		5:   "APPENDIX",
		6:   "APPLE_TOUCH_ICON",
		7:   "APPLE_TOUCH_STARTUP_IMAGE",
		8:   "ARCHIVES",
		9:   "AUTHOR",
		10:  "BLOCKED_BY",
		11:  "BOOKMARK",
		12:  "CANONICAL",
		13:  "CHAPTER",
		14:  "CITE_AS",
		15:  "COLLECTION",
		16:  "CONTENTS",
		17:  "CONVERTED_FROM",
		18:  "COPYRIGHT",
		19:  "CREATE_FORM",
		20:  "CURRENT",
		21:  "DESCRIBEDBY",
		22:  "DESCRIBES",
		23:  "DISCLOSURE",
		24:  "DNS_PREFETCH",
		25:  "DUPLICATE",
		26:  "EDIT",
		27:  "EDIT_FORM",
		28:  "EDIT_MEDIA",
		29:  "ENCLOSURE",
		30:  "EXTERNAL",
		31:  "FIRST",
		32:  "GLOSSARY",
		33:  "HELP",
		34:  "HOSTS",
		35:  "HUB",
		36:  "ICON",
		37:  "INDEX",
		38:  "INTERVAL_AFTER",
		39:  "INTERVAL_BEFORE",
		40:  "INTERVAL_CONTAINS",
		41:  "INTERVAL_DISJOINT",
		42:  "INTERVAL_DURING",
		43:  "INTERVAL_EQUALS",
		44:  "INTERVAL_FINISHED_BY",
		45:  "INTERVAL_FINISHES",
		46:  "INTERVAL_IN",
		47:  "INTERVAL_MEETS",
		48:  "INTERVAL_MET_BY",
		49:  "INTERVAL_OVERLAPPED_BY",
		50:  "INTERVAL_OVERLAPS",
		51:  "INTERVAL_STARTED_BY",
		52:  "INTERVAL_STARTS",
		53:  "ITEM",
		54:  "LAST",
		55:  "LATEST_VERSION",
		56:  "LICENSE",
		57:  "LINKSET",
		58:  "LRDD",
		59:  "MANIFEST",
		60:  "MASK_ICON",
		61:  "MEDIA_FEED",
		62:  "MEMENTO",
		63:  "MICROPUB",
		64:  "MODULEPRELOAD",
		65:  "MONITOR",
		66:  "MONITOR_GROUP",
		67:  "NEXT",
		68:  "NEXT_ARCHIVE",
		69:  "NOFOLLOW",
		70:  "NOOPENER",
		71:  "NOREFERRER",
		72:  "OPENER",
		73:  "OPENID2_LOCAL_ID",
		74:  "OPENID2_PROVIDER",
		75:  "ORIGINAL",
		76:  "P3_PV1",
		77:  "PAYMENT",
		78:  "PINGBACK",
		79:  "PRECONNECT",
		80:  "PREDECESSOR_VERSION",
		81:  "PREFETCH",
		82:  "PRELOAD",
		83:  "PRERENDER",
		84:  "PREV",
		85:  "PREVIEW",
		86:  "PREVIOUS",
		87:  "PREV_ARCHIVE",
		88:  "PRIVACY_POLICY",
		89:  "PROFILE",
		90:  "PUBLICATION",
		91:  "RELATED",
		92:  "RESTCONF",
		93:  "REPLIES",
		94:  "RULEINPUT",
		95:  "SEARCH",
		96:  "SECTION",
		97:  "SELF",
		98:  "SERVICE",
		99:  "SERVICE_DESC",
		100: "SERVICE_DOC",
		101: "SERVICE_META",
		102: "SPONSORED",
		103: "START",
		104: "STATUS",
		105: "STYLESHEET",
		106: "SUBSECTION",
		107: "SUCCESSOR_VERSION",
		108: "SUNSET",
		109: "TAG",
		110: "TERMS_OF_SERVICE",
		111: "TIMEGATE",
		112: "TIMEMAP",
		113: "TYPE",
		114: "UGC",
		115: "UP",
		116: "VERSION_HISTORY",
		117: "VIA",
		118: "WEBMENTION",
		119: "WORKING_COPY",
		120: "WORKING_COPY_OF",
	}
	LinkRelationTypesCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":     0,
		"ABOUT":                     1,
		"ACL":                       2,
		"ALTERNATE":                 3,
		"AMPHTML":                   4,
		"APPENDIX":                  5,
		"APPLE_TOUCH_ICON":          6,
		"APPLE_TOUCH_STARTUP_IMAGE": 7,
		"ARCHIVES":                  8,
		"AUTHOR":                    9,
		"BLOCKED_BY":                10,
		"BOOKMARK":                  11,
		"CANONICAL":                 12,
		"CHAPTER":                   13,
		"CITE_AS":                   14,
		"COLLECTION":                15,
		"CONTENTS":                  16,
		"CONVERTED_FROM":            17,
		"COPYRIGHT":                 18,
		"CREATE_FORM":               19,
		"CURRENT":                   20,
		"DESCRIBEDBY":               21,
		"DESCRIBES":                 22,
		"DISCLOSURE":                23,
		"DNS_PREFETCH":              24,
		"DUPLICATE":                 25,
		"EDIT":                      26,
		"EDIT_FORM":                 27,
		"EDIT_MEDIA":                28,
		"ENCLOSURE":                 29,
		"EXTERNAL":                  30,
		"FIRST":                     31,
		"GLOSSARY":                  32,
		"HELP":                      33,
		"HOSTS":                     34,
		"HUB":                       35,
		"ICON":                      36,
		"INDEX":                     37,
		"INTERVAL_AFTER":            38,
		"INTERVAL_BEFORE":           39,
		"INTERVAL_CONTAINS":         40,
		"INTERVAL_DISJOINT":         41,
		"INTERVAL_DURING":           42,
		"INTERVAL_EQUALS":           43,
		"INTERVAL_FINISHED_BY":      44,
		"INTERVAL_FINISHES":         45,
		"INTERVAL_IN":               46,
		"INTERVAL_MEETS":            47,
		"INTERVAL_MET_BY":           48,
		"INTERVAL_OVERLAPPED_BY":    49,
		"INTERVAL_OVERLAPS":         50,
		"INTERVAL_STARTED_BY":       51,
		"INTERVAL_STARTS":           52,
		"ITEM":                      53,
		"LAST":                      54,
		"LATEST_VERSION":            55,
		"LICENSE":                   56,
		"LINKSET":                   57,
		"LRDD":                      58,
		"MANIFEST":                  59,
		"MASK_ICON":                 60,
		"MEDIA_FEED":                61,
		"MEMENTO":                   62,
		"MICROPUB":                  63,
		"MODULEPRELOAD":             64,
		"MONITOR":                   65,
		"MONITOR_GROUP":             66,
		"NEXT":                      67,
		"NEXT_ARCHIVE":              68,
		"NOFOLLOW":                  69,
		"NOOPENER":                  70,
		"NOREFERRER":                71,
		"OPENER":                    72,
		"OPENID2_LOCAL_ID":          73,
		"OPENID2_PROVIDER":          74,
		"ORIGINAL":                  75,
		"P3_PV1":                    76,
		"PAYMENT":                   77,
		"PINGBACK":                  78,
		"PRECONNECT":                79,
		"PREDECESSOR_VERSION":       80,
		"PREFETCH":                  81,
		"PRELOAD":                   82,
		"PRERENDER":                 83,
		"PREV":                      84,
		"PREVIEW":                   85,
		"PREVIOUS":                  86,
		"PREV_ARCHIVE":              87,
		"PRIVACY_POLICY":            88,
		"PROFILE":                   89,
		"PUBLICATION":               90,
		"RELATED":                   91,
		"RESTCONF":                  92,
		"REPLIES":                   93,
		"RULEINPUT":                 94,
		"SEARCH":                    95,
		"SECTION":                   96,
		"SELF":                      97,
		"SERVICE":                   98,
		"SERVICE_DESC":              99,
		"SERVICE_DOC":               100,
		"SERVICE_META":              101,
		"SPONSORED":                 102,
		"START":                     103,
		"STATUS":                    104,
		"STYLESHEET":                105,
		"SUBSECTION":                106,
		"SUCCESSOR_VERSION":         107,
		"SUNSET":                    108,
		"TAG":                       109,
		"TERMS_OF_SERVICE":          110,
		"TIMEGATE":                  111,
		"TIMEMAP":                   112,
		"TYPE":                      113,
		"UGC":                       114,
		"UP":                        115,
		"VERSION_HISTORY":           116,
		"VIA":                       117,
		"WEBMENTION":                118,
		"WORKING_COPY":              119,
		"WORKING_COPY_OF":           120,
	}
)

func (x LinkRelationTypesCode_Value) Enum() *LinkRelationTypesCode_Value {
	p := new(LinkRelationTypesCode_Value)
	*p = x
	return p
}

func (x LinkRelationTypesCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkRelationTypesCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[134].Descriptor()
}

func (LinkRelationTypesCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[134]
}

func (x LinkRelationTypesCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkRelationTypesCode_Value.Descriptor instead.
func (LinkRelationTypesCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{134, 0}
}

type LinkTypeCode_Value int32

const (
	LinkTypeCode_INVALID_UNINITIALIZED LinkTypeCode_Value = 0
	LinkTypeCode_REPLACED_BY           LinkTypeCode_Value = 1
	LinkTypeCode_REPLACES              LinkTypeCode_Value = 2
	LinkTypeCode_REFER                 LinkTypeCode_Value = 3
	LinkTypeCode_SEEALSO               LinkTypeCode_Value = 4
)

// Enum value maps for LinkTypeCode_Value.
var (
	LinkTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "REPLACED_BY",
		2: "REPLACES",
		3: "REFER",
		4: "SEEALSO",
	}
	LinkTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"REPLACED_BY":           1,
		"REPLACES":              2,
		"REFER":                 3,
		"SEEALSO":               4,
	}
)

func (x LinkTypeCode_Value) Enum() *LinkTypeCode_Value {
	p := new(LinkTypeCode_Value)
	*p = x
	return p
}

func (x LinkTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[135].Descriptor()
}

func (LinkTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[135]
}

func (x LinkTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkTypeCode_Value.Descriptor instead.
func (LinkTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{135, 0}
}

type LinkageTypeCode_Value int32

const (
	LinkageTypeCode_INVALID_UNINITIALIZED LinkageTypeCode_Value = 0
	LinkageTypeCode_SOURCE                LinkageTypeCode_Value = 1
	LinkageTypeCode_ALTERNATE             LinkageTypeCode_Value = 2
	LinkageTypeCode_HISTORICAL            LinkageTypeCode_Value = 3
)

// Enum value maps for LinkageTypeCode_Value.
var (
	LinkageTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "SOURCE",
		2: "ALTERNATE",
		3: "HISTORICAL",
	}
	LinkageTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"SOURCE":                1,
		"ALTERNATE":             2,
		"HISTORICAL":            3,
	}
)

func (x LinkageTypeCode_Value) Enum() *LinkageTypeCode_Value {
	p := new(LinkageTypeCode_Value)
	*p = x
	return p
}

func (x LinkageTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkageTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[136].Descriptor()
}

func (LinkageTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[136]
}

func (x LinkageTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkageTypeCode_Value.Descriptor instead.
func (LinkageTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{136, 0}
}

type ListModeCode_Value int32

const (
	ListModeCode_INVALID_UNINITIALIZED ListModeCode_Value = 0
	ListModeCode_WORKING               ListModeCode_Value = 1
	ListModeCode_SNAPSHOT              ListModeCode_Value = 2
	ListModeCode_CHANGES               ListModeCode_Value = 3
)

// Enum value maps for ListModeCode_Value.
var (
	ListModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "WORKING",
		2: "SNAPSHOT",
		3: "CHANGES",
	}
	ListModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"WORKING":               1,
		"SNAPSHOT":              2,
		"CHANGES":               3,
	}
)

func (x ListModeCode_Value) Enum() *ListModeCode_Value {
	p := new(ListModeCode_Value)
	*p = x
	return p
}

func (x ListModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[137].Descriptor()
}

func (ListModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[137]
}

func (x ListModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListModeCode_Value.Descriptor instead.
func (ListModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{137, 0}
}

type ListStatusCode_Value int32

const (
	ListStatusCode_INVALID_UNINITIALIZED ListStatusCode_Value = 0
	ListStatusCode_CURRENT               ListStatusCode_Value = 1
	ListStatusCode_RETIRED               ListStatusCode_Value = 2
	ListStatusCode_ENTERED_IN_ERROR      ListStatusCode_Value = 3
)

// Enum value maps for ListStatusCode_Value.
var (
	ListStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CURRENT",
		2: "RETIRED",
		3: "ENTERED_IN_ERROR",
	}
	ListStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CURRENT":               1,
		"RETIRED":               2,
		"ENTERED_IN_ERROR":      3,
	}
)

func (x ListStatusCode_Value) Enum() *ListStatusCode_Value {
	p := new(ListStatusCode_Value)
	*p = x
	return p
}

func (x ListStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[138].Descriptor()
}

func (ListStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[138]
}

func (x ListStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListStatusCode_Value.Descriptor instead.
func (ListStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{138, 0}
}

type LocationModeCode_Value int32

const (
	LocationModeCode_INVALID_UNINITIALIZED LocationModeCode_Value = 0
	LocationModeCode_INSTANCE              LocationModeCode_Value = 1
	LocationModeCode_KIND                  LocationModeCode_Value = 2
)

// Enum value maps for LocationModeCode_Value.
var (
	LocationModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "INSTANCE",
		2: "KIND",
	}
	LocationModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"INSTANCE":              1,
		"KIND":                  2,
	}
)

func (x LocationModeCode_Value) Enum() *LocationModeCode_Value {
	p := new(LocationModeCode_Value)
	*p = x
	return p
}

func (x LocationModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LocationModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[139].Descriptor()
}

func (LocationModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[139]
}

func (x LocationModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LocationModeCode_Value.Descriptor instead.
func (LocationModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{139, 0}
}

type LocationStatusCode_Value int32

const (
	LocationStatusCode_INVALID_UNINITIALIZED LocationStatusCode_Value = 0
	LocationStatusCode_ACTIVE                LocationStatusCode_Value = 1
	LocationStatusCode_SUSPENDED             LocationStatusCode_Value = 2
	LocationStatusCode_INACTIVE              LocationStatusCode_Value = 3
)

// Enum value maps for LocationStatusCode_Value.
var (
	LocationStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "SUSPENDED",
		3: "INACTIVE",
	}
	LocationStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"SUSPENDED":             2,
		"INACTIVE":              3,
	}
)

func (x LocationStatusCode_Value) Enum() *LocationStatusCode_Value {
	p := new(LocationStatusCode_Value)
	*p = x
	return p
}

func (x LocationStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LocationStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[140].Descriptor()
}

func (LocationStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[140]
}

func (x LocationStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LocationStatusCode_Value.Descriptor instead.
func (LocationStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{140, 0}
}

type MeasureReportStatusCode_Value int32

const (
	MeasureReportStatusCode_INVALID_UNINITIALIZED MeasureReportStatusCode_Value = 0
	MeasureReportStatusCode_COMPLETE              MeasureReportStatusCode_Value = 1
	MeasureReportStatusCode_PENDING               MeasureReportStatusCode_Value = 2
	MeasureReportStatusCode_ERROR                 MeasureReportStatusCode_Value = 3
)

// Enum value maps for MeasureReportStatusCode_Value.
var (
	MeasureReportStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "COMPLETE",
		2: "PENDING",
		3: "ERROR",
	}
	MeasureReportStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"COMPLETE":              1,
		"PENDING":               2,
		"ERROR":                 3,
	}
)

func (x MeasureReportStatusCode_Value) Enum() *MeasureReportStatusCode_Value {
	p := new(MeasureReportStatusCode_Value)
	*p = x
	return p
}

func (x MeasureReportStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MeasureReportStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[141].Descriptor()
}

func (MeasureReportStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[141]
}

func (x MeasureReportStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MeasureReportStatusCode_Value.Descriptor instead.
func (MeasureReportStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{141, 0}
}

type MeasureReportTypeCode_Value int32

const (
	MeasureReportTypeCode_INVALID_UNINITIALIZED MeasureReportTypeCode_Value = 0
	MeasureReportTypeCode_INDIVIDUAL            MeasureReportTypeCode_Value = 1
	MeasureReportTypeCode_SUBJECT_LIST          MeasureReportTypeCode_Value = 2
	MeasureReportTypeCode_SUMMARY               MeasureReportTypeCode_Value = 3
	MeasureReportTypeCode_DATA_EXCHANGE         MeasureReportTypeCode_Value = 5
)

// Enum value maps for MeasureReportTypeCode_Value.
var (
	MeasureReportTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "INDIVIDUAL",
		2: "SUBJECT_LIST",
		3: "SUMMARY",
		5: "DATA_EXCHANGE",
	}
	MeasureReportTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"INDIVIDUAL":            1,
		"SUBJECT_LIST":          2,
		"SUMMARY":               3,
		"DATA_EXCHANGE":         5,
	}
)

func (x MeasureReportTypeCode_Value) Enum() *MeasureReportTypeCode_Value {
	p := new(MeasureReportTypeCode_Value)
	*p = x
	return p
}

func (x MeasureReportTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MeasureReportTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[142].Descriptor()
}

func (MeasureReportTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[142]
}

func (x MeasureReportTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MeasureReportTypeCode_Value.Descriptor instead.
func (MeasureReportTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{142, 0}
}

type MedicationAdministrationStatusCode_Value int32

const (
	MedicationAdministrationStatusCode_INVALID_UNINITIALIZED MedicationAdministrationStatusCode_Value = 0
	MedicationAdministrationStatusCode_IN_PROGRESS           MedicationAdministrationStatusCode_Value = 1
	MedicationAdministrationStatusCode_NOT_DONE              MedicationAdministrationStatusCode_Value = 2
	MedicationAdministrationStatusCode_ON_HOLD               MedicationAdministrationStatusCode_Value = 3
	MedicationAdministrationStatusCode_COMPLETED             MedicationAdministrationStatusCode_Value = 4
	MedicationAdministrationStatusCode_ENTERED_IN_ERROR      MedicationAdministrationStatusCode_Value = 5
	MedicationAdministrationStatusCode_STOPPED               MedicationAdministrationStatusCode_Value = 6
	MedicationAdministrationStatusCode_UNKNOWN               MedicationAdministrationStatusCode_Value = 7
)

// Enum value maps for MedicationAdministrationStatusCode_Value.
var (
	MedicationAdministrationStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "IN_PROGRESS",
		2: "NOT_DONE",
		3: "ON_HOLD",
		4: "COMPLETED",
		5: "ENTERED_IN_ERROR",
		6: "STOPPED",
		7: "UNKNOWN",
	}
	MedicationAdministrationStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"IN_PROGRESS":           1,
		"NOT_DONE":              2,
		"ON_HOLD":               3,
		"COMPLETED":             4,
		"ENTERED_IN_ERROR":      5,
		"STOPPED":               6,
		"UNKNOWN":               7,
	}
)

func (x MedicationAdministrationStatusCode_Value) Enum() *MedicationAdministrationStatusCode_Value {
	p := new(MedicationAdministrationStatusCode_Value)
	*p = x
	return p
}

func (x MedicationAdministrationStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MedicationAdministrationStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[143].Descriptor()
}

func (MedicationAdministrationStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[143]
}

func (x MedicationAdministrationStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MedicationAdministrationStatusCode_Value.Descriptor instead.
func (MedicationAdministrationStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{143, 0}
}

type MedicationDispenseStatusCode_Value int32

const (
	MedicationDispenseStatusCode_INVALID_UNINITIALIZED MedicationDispenseStatusCode_Value = 0
	MedicationDispenseStatusCode_PREPARATION           MedicationDispenseStatusCode_Value = 1
	MedicationDispenseStatusCode_IN_PROGRESS           MedicationDispenseStatusCode_Value = 2
	MedicationDispenseStatusCode_CANCELLED             MedicationDispenseStatusCode_Value = 3
	MedicationDispenseStatusCode_ON_HOLD               MedicationDispenseStatusCode_Value = 4
	MedicationDispenseStatusCode_COMPLETED             MedicationDispenseStatusCode_Value = 5
	MedicationDispenseStatusCode_ENTERED_IN_ERROR      MedicationDispenseStatusCode_Value = 6
	MedicationDispenseStatusCode_STOPPED               MedicationDispenseStatusCode_Value = 7
	MedicationDispenseStatusCode_DECLINED              MedicationDispenseStatusCode_Value = 8
	MedicationDispenseStatusCode_UNKNOWN               MedicationDispenseStatusCode_Value = 9
)

// Enum value maps for MedicationDispenseStatusCode_Value.
var (
	MedicationDispenseStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PREPARATION",
		2: "IN_PROGRESS",
		3: "CANCELLED",
		4: "ON_HOLD",
		5: "COMPLETED",
		6: "ENTERED_IN_ERROR",
		7: "STOPPED",
		8: "DECLINED",
		9: "UNKNOWN",
	}
	MedicationDispenseStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PREPARATION":           1,
		"IN_PROGRESS":           2,
		"CANCELLED":             3,
		"ON_HOLD":               4,
		"COMPLETED":             5,
		"ENTERED_IN_ERROR":      6,
		"STOPPED":               7,
		"DECLINED":              8,
		"UNKNOWN":               9,
	}
)

func (x MedicationDispenseStatusCode_Value) Enum() *MedicationDispenseStatusCode_Value {
	p := new(MedicationDispenseStatusCode_Value)
	*p = x
	return p
}

func (x MedicationDispenseStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MedicationDispenseStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[144].Descriptor()
}

func (MedicationDispenseStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[144]
}

func (x MedicationDispenseStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MedicationDispenseStatusCode_Value.Descriptor instead.
func (MedicationDispenseStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{144, 0}
}

type MedicationKnowledgeStatusCode_Value int32

const (
	MedicationKnowledgeStatusCode_INVALID_UNINITIALIZED MedicationKnowledgeStatusCode_Value = 0
	MedicationKnowledgeStatusCode_ACTIVE                MedicationKnowledgeStatusCode_Value = 1
	MedicationKnowledgeStatusCode_ENTERED_IN_ERROR      MedicationKnowledgeStatusCode_Value = 3
	MedicationKnowledgeStatusCode_INACTIVE              MedicationKnowledgeStatusCode_Value = 2
)

// Enum value maps for MedicationKnowledgeStatusCode_Value.
var (
	MedicationKnowledgeStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		3: "ENTERED_IN_ERROR",
		2: "INACTIVE",
	}
	MedicationKnowledgeStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"ENTERED_IN_ERROR":      3,
		"INACTIVE":              2,
	}
)

func (x MedicationKnowledgeStatusCode_Value) Enum() *MedicationKnowledgeStatusCode_Value {
	p := new(MedicationKnowledgeStatusCode_Value)
	*p = x
	return p
}

func (x MedicationKnowledgeStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MedicationKnowledgeStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[145].Descriptor()
}

func (MedicationKnowledgeStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[145]
}

func (x MedicationKnowledgeStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MedicationKnowledgeStatusCode_Value.Descriptor instead.
func (MedicationKnowledgeStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{145, 0}
}

type MedicationRequestIntentCode_Value int32

const (
	MedicationRequestIntentCode_INVALID_UNINITIALIZED MedicationRequestIntentCode_Value = 0
	MedicationRequestIntentCode_PROPOSAL              MedicationRequestIntentCode_Value = 1
	MedicationRequestIntentCode_PLAN                  MedicationRequestIntentCode_Value = 2
	MedicationRequestIntentCode_ORDER                 MedicationRequestIntentCode_Value = 3
	MedicationRequestIntentCode_ORIGINAL_ORDER        MedicationRequestIntentCode_Value = 4
	MedicationRequestIntentCode_REFLEX_ORDER          MedicationRequestIntentCode_Value = 5
	MedicationRequestIntentCode_FILLER_ORDER          MedicationRequestIntentCode_Value = 6
	MedicationRequestIntentCode_INSTANCE_ORDER        MedicationRequestIntentCode_Value = 7
	MedicationRequestIntentCode_OPTION                MedicationRequestIntentCode_Value = 8
)

// Enum value maps for MedicationRequestIntentCode_Value.
var (
	MedicationRequestIntentCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PROPOSAL",
		2: "PLAN",
		3: "ORDER",
		4: "ORIGINAL_ORDER",
		5: "REFLEX_ORDER",
		6: "FILLER_ORDER",
		7: "INSTANCE_ORDER",
		8: "OPTION",
	}
	MedicationRequestIntentCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PROPOSAL":              1,
		"PLAN":                  2,
		"ORDER":                 3,
		"ORIGINAL_ORDER":        4,
		"REFLEX_ORDER":          5,
		"FILLER_ORDER":          6,
		"INSTANCE_ORDER":        7,
		"OPTION":                8,
	}
)

func (x MedicationRequestIntentCode_Value) Enum() *MedicationRequestIntentCode_Value {
	p := new(MedicationRequestIntentCode_Value)
	*p = x
	return p
}

func (x MedicationRequestIntentCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MedicationRequestIntentCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[146].Descriptor()
}

func (MedicationRequestIntentCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[146]
}

func (x MedicationRequestIntentCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MedicationRequestIntentCode_Value.Descriptor instead.
func (MedicationRequestIntentCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{146, 0}
}

type MedicationRequestStatusCode_Value int32

const (
	MedicationRequestStatusCode_INVALID_UNINITIALIZED MedicationRequestStatusCode_Value = 0
	MedicationRequestStatusCode_ACTIVE                MedicationRequestStatusCode_Value = 1
	MedicationRequestStatusCode_ON_HOLD               MedicationRequestStatusCode_Value = 2
	MedicationRequestStatusCode_ENDED                 MedicationRequestStatusCode_Value = 9
	MedicationRequestStatusCode_STOPPED               MedicationRequestStatusCode_Value = 6
	MedicationRequestStatusCode_COMPLETED             MedicationRequestStatusCode_Value = 4
	MedicationRequestStatusCode_CANCELLED             MedicationRequestStatusCode_Value = 3
	MedicationRequestStatusCode_ENTERED_IN_ERROR      MedicationRequestStatusCode_Value = 5
	MedicationRequestStatusCode_DRAFT                 MedicationRequestStatusCode_Value = 7
	MedicationRequestStatusCode_UNKNOWN               MedicationRequestStatusCode_Value = 8
)

// Enum value maps for MedicationRequestStatusCode_Value.
var (
	MedicationRequestStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "ON_HOLD",
		9: "ENDED",
		6: "STOPPED",
		4: "COMPLETED",
		3: "CANCELLED",
		5: "ENTERED_IN_ERROR",
		7: "DRAFT",
		8: "UNKNOWN",
	}
	MedicationRequestStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"ON_HOLD":               2,
		"ENDED":                 9,
		"STOPPED":               6,
		"COMPLETED":             4,
		"CANCELLED":             3,
		"ENTERED_IN_ERROR":      5,
		"DRAFT":                 7,
		"UNKNOWN":               8,
	}
)

func (x MedicationRequestStatusCode_Value) Enum() *MedicationRequestStatusCode_Value {
	p := new(MedicationRequestStatusCode_Value)
	*p = x
	return p
}

func (x MedicationRequestStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MedicationRequestStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[147].Descriptor()
}

func (MedicationRequestStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[147]
}

func (x MedicationRequestStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MedicationRequestStatusCode_Value.Descriptor instead.
func (MedicationRequestStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{147, 0}
}

type MedicationStatementStatusCodes_Value int32

const (
	MedicationStatementStatusCodes_INVALID_UNINITIALIZED MedicationStatementStatusCodes_Value = 0
	MedicationStatementStatusCodes_RECORDED              MedicationStatementStatusCodes_Value = 9
	MedicationStatementStatusCodes_ENTERED_IN_ERROR      MedicationStatementStatusCodes_Value = 3
	MedicationStatementStatusCodes_DRAFT                 MedicationStatementStatusCodes_Value = 10
)

// Enum value maps for MedicationStatementStatusCodes_Value.
var (
	MedicationStatementStatusCodes_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		9:  "RECORDED",
		3:  "ENTERED_IN_ERROR",
		10: "DRAFT",
	}
	MedicationStatementStatusCodes_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"RECORDED":              9,
		"ENTERED_IN_ERROR":      3,
		"DRAFT":                 10,
	}
)

func (x MedicationStatementStatusCodes_Value) Enum() *MedicationStatementStatusCodes_Value {
	p := new(MedicationStatementStatusCodes_Value)
	*p = x
	return p
}

func (x MedicationStatementStatusCodes_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MedicationStatementStatusCodes_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[148].Descriptor()
}

func (MedicationStatementStatusCodes_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[148]
}

func (x MedicationStatementStatusCodes_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MedicationStatementStatusCodes_Value.Descriptor instead.
func (MedicationStatementStatusCodes_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{148, 0}
}

type MedicationStatusCode_Value int32

const (
	MedicationStatusCode_INVALID_UNINITIALIZED MedicationStatusCode_Value = 0
	MedicationStatusCode_ACTIVE                MedicationStatusCode_Value = 1
	MedicationStatusCode_INACTIVE              MedicationStatusCode_Value = 2
	MedicationStatusCode_ENTERED_IN_ERROR      MedicationStatusCode_Value = 3
)

// Enum value maps for MedicationStatusCode_Value.
var (
	MedicationStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "INACTIVE",
		3: "ENTERED_IN_ERROR",
	}
	MedicationStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"INACTIVE":              2,
		"ENTERED_IN_ERROR":      3,
	}
)

func (x MedicationStatusCode_Value) Enum() *MedicationStatusCode_Value {
	p := new(MedicationStatusCode_Value)
	*p = x
	return p
}

func (x MedicationStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MedicationStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[149].Descriptor()
}

func (MedicationStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[149]
}

func (x MedicationStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MedicationStatusCode_Value.Descriptor instead.
func (MedicationStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{149, 0}
}

type MessageSignificanceCategoryCode_Value int32

const (
	MessageSignificanceCategoryCode_INVALID_UNINITIALIZED MessageSignificanceCategoryCode_Value = 0
	MessageSignificanceCategoryCode_CONSEQUENCE           MessageSignificanceCategoryCode_Value = 1
	MessageSignificanceCategoryCode_CURRENCY              MessageSignificanceCategoryCode_Value = 2
	MessageSignificanceCategoryCode_NOTIFICATION          MessageSignificanceCategoryCode_Value = 3
)

// Enum value maps for MessageSignificanceCategoryCode_Value.
var (
	MessageSignificanceCategoryCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CONSEQUENCE",
		2: "CURRENCY",
		3: "NOTIFICATION",
	}
	MessageSignificanceCategoryCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CONSEQUENCE":           1,
		"CURRENCY":              2,
		"NOTIFICATION":          3,
	}
)

func (x MessageSignificanceCategoryCode_Value) Enum() *MessageSignificanceCategoryCode_Value {
	p := new(MessageSignificanceCategoryCode_Value)
	*p = x
	return p
}

func (x MessageSignificanceCategoryCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageSignificanceCategoryCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[150].Descriptor()
}

func (MessageSignificanceCategoryCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[150]
}

func (x MessageSignificanceCategoryCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageSignificanceCategoryCode_Value.Descriptor instead.
func (MessageSignificanceCategoryCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{150, 0}
}

type MessageheaderResponseRequestCode_Value int32

const (
	MessageheaderResponseRequestCode_INVALID_UNINITIALIZED MessageheaderResponseRequestCode_Value = 0
	MessageheaderResponseRequestCode_ALWAYS                MessageheaderResponseRequestCode_Value = 1
	MessageheaderResponseRequestCode_ON_ERROR              MessageheaderResponseRequestCode_Value = 2
	MessageheaderResponseRequestCode_NEVER                 MessageheaderResponseRequestCode_Value = 3
	MessageheaderResponseRequestCode_ON_SUCCESS            MessageheaderResponseRequestCode_Value = 4
)

// Enum value maps for MessageheaderResponseRequestCode_Value.
var (
	MessageheaderResponseRequestCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ALWAYS",
		2: "ON_ERROR",
		3: "NEVER",
		4: "ON_SUCCESS",
	}
	MessageheaderResponseRequestCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ALWAYS":                1,
		"ON_ERROR":              2,
		"NEVER":                 3,
		"ON_SUCCESS":            4,
	}
)

func (x MessageheaderResponseRequestCode_Value) Enum() *MessageheaderResponseRequestCode_Value {
	p := new(MessageheaderResponseRequestCode_Value)
	*p = x
	return p
}

func (x MessageheaderResponseRequestCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageheaderResponseRequestCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[151].Descriptor()
}

func (MessageheaderResponseRequestCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[151]
}

func (x MessageheaderResponseRequestCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageheaderResponseRequestCode_Value.Descriptor instead.
func (MessageheaderResponseRequestCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{151, 0}
}

type NameUseCode_Value int32

const (
	NameUseCode_INVALID_UNINITIALIZED NameUseCode_Value = 0
	NameUseCode_USUAL                 NameUseCode_Value = 1
	NameUseCode_OFFICIAL              NameUseCode_Value = 2
	NameUseCode_TEMP                  NameUseCode_Value = 3
	NameUseCode_NICKNAME              NameUseCode_Value = 4
	NameUseCode_ANONYMOUS             NameUseCode_Value = 5
	NameUseCode_OLD                   NameUseCode_Value = 6
	NameUseCode_MAIDEN                NameUseCode_Value = 7
)

// Enum value maps for NameUseCode_Value.
var (
	NameUseCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "USUAL",
		2: "OFFICIAL",
		3: "TEMP",
		4: "NICKNAME",
		5: "ANONYMOUS",
		6: "OLD",
		7: "MAIDEN",
	}
	NameUseCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"USUAL":                 1,
		"OFFICIAL":              2,
		"TEMP":                  3,
		"NICKNAME":              4,
		"ANONYMOUS":             5,
		"OLD":                   6,
		"MAIDEN":                7,
	}
)

func (x NameUseCode_Value) Enum() *NameUseCode_Value {
	p := new(NameUseCode_Value)
	*p = x
	return p
}

func (x NameUseCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NameUseCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[152].Descriptor()
}

func (NameUseCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[152]
}

func (x NameUseCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NameUseCode_Value.Descriptor instead.
func (NameUseCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{152, 0}
}

type NamingSystemIdentifierTypeCode_Value int32

const (
	NamingSystemIdentifierTypeCode_INVALID_UNINITIALIZED NamingSystemIdentifierTypeCode_Value = 0
	NamingSystemIdentifierTypeCode_OID                   NamingSystemIdentifierTypeCode_Value = 1
	NamingSystemIdentifierTypeCode_UUID                  NamingSystemIdentifierTypeCode_Value = 2
	NamingSystemIdentifierTypeCode_URI                   NamingSystemIdentifierTypeCode_Value = 3
	NamingSystemIdentifierTypeCode_IRI_STEM              NamingSystemIdentifierTypeCode_Value = 5
	NamingSystemIdentifierTypeCode_V2CSMNEMONIC          NamingSystemIdentifierTypeCode_Value = 6
	NamingSystemIdentifierTypeCode_OTHER                 NamingSystemIdentifierTypeCode_Value = 4
)

// Enum value maps for NamingSystemIdentifierTypeCode_Value.
var (
	NamingSystemIdentifierTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "OID",
		2: "UUID",
		3: "URI",
		5: "IRI_STEM",
		6: "V2CSMNEMONIC",
		4: "OTHER",
	}
	NamingSystemIdentifierTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"OID":                   1,
		"UUID":                  2,
		"URI":                   3,
		"IRI_STEM":              5,
		"V2CSMNEMONIC":          6,
		"OTHER":                 4,
	}
)

func (x NamingSystemIdentifierTypeCode_Value) Enum() *NamingSystemIdentifierTypeCode_Value {
	p := new(NamingSystemIdentifierTypeCode_Value)
	*p = x
	return p
}

func (x NamingSystemIdentifierTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NamingSystemIdentifierTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[153].Descriptor()
}

func (NamingSystemIdentifierTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[153]
}

func (x NamingSystemIdentifierTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NamingSystemIdentifierTypeCode_Value.Descriptor instead.
func (NamingSystemIdentifierTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{153, 0}
}

type NamingSystemTypeCode_Value int32

const (
	NamingSystemTypeCode_INVALID_UNINITIALIZED NamingSystemTypeCode_Value = 0
	NamingSystemTypeCode_CODESYSTEM            NamingSystemTypeCode_Value = 1
	NamingSystemTypeCode_IDENTIFIER            NamingSystemTypeCode_Value = 2
	NamingSystemTypeCode_ROOT                  NamingSystemTypeCode_Value = 3
)

// Enum value maps for NamingSystemTypeCode_Value.
var (
	NamingSystemTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CODESYSTEM",
		2: "IDENTIFIER",
		3: "ROOT",
	}
	NamingSystemTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CODESYSTEM":            1,
		"IDENTIFIER":            2,
		"ROOT":                  3,
	}
)

func (x NamingSystemTypeCode_Value) Enum() *NamingSystemTypeCode_Value {
	p := new(NamingSystemTypeCode_Value)
	*p = x
	return p
}

func (x NamingSystemTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NamingSystemTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[154].Descriptor()
}

func (NamingSystemTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[154]
}

func (x NamingSystemTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NamingSystemTypeCode_Value.Descriptor instead.
func (NamingSystemTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{154, 0}
}

type NarrativeStatusCode_Value int32

const (
	NarrativeStatusCode_INVALID_UNINITIALIZED NarrativeStatusCode_Value = 0
	NarrativeStatusCode_GENERATED             NarrativeStatusCode_Value = 1
	NarrativeStatusCode_EXTENSIONS            NarrativeStatusCode_Value = 2
	NarrativeStatusCode_ADDITIONAL            NarrativeStatusCode_Value = 3
	NarrativeStatusCode_EMPTY                 NarrativeStatusCode_Value = 4
)

// Enum value maps for NarrativeStatusCode_Value.
var (
	NarrativeStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "GENERATED",
		2: "EXTENSIONS",
		3: "ADDITIONAL",
		4: "EMPTY",
	}
	NarrativeStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"GENERATED":             1,
		"EXTENSIONS":            2,
		"ADDITIONAL":            3,
		"EMPTY":                 4,
	}
)

func (x NarrativeStatusCode_Value) Enum() *NarrativeStatusCode_Value {
	p := new(NarrativeStatusCode_Value)
	*p = x
	return p
}

func (x NarrativeStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NarrativeStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[155].Descriptor()
}

func (NarrativeStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[155]
}

func (x NarrativeStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NarrativeStatusCode_Value.Descriptor instead.
func (NarrativeStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{155, 0}
}

type NoteTypeCode_Value int32

const (
	NoteTypeCode_INVALID_UNINITIALIZED NoteTypeCode_Value = 0
	NoteTypeCode_DISPLAY               NoteTypeCode_Value = 1
	NoteTypeCode_PRINT                 NoteTypeCode_Value = 2
	NoteTypeCode_PRINTOPER             NoteTypeCode_Value = 3
)

// Enum value maps for NoteTypeCode_Value.
var (
	NoteTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DISPLAY",
		2: "PRINT",
		3: "PRINTOPER",
	}
	NoteTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DISPLAY":               1,
		"PRINT":                 2,
		"PRINTOPER":             3,
	}
)

func (x NoteTypeCode_Value) Enum() *NoteTypeCode_Value {
	p := new(NoteTypeCode_Value)
	*p = x
	return p
}

func (x NoteTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NoteTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[156].Descriptor()
}

func (NoteTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[156]
}

func (x NoteTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NoteTypeCode_Value.Descriptor instead.
func (NoteTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{156, 0}
}

type NutritionProductStatusCode_Value int32

const (
	NutritionProductStatusCode_INVALID_UNINITIALIZED NutritionProductStatusCode_Value = 0
	NutritionProductStatusCode_ACTIVE                NutritionProductStatusCode_Value = 1
	NutritionProductStatusCode_INACTIVE              NutritionProductStatusCode_Value = 2
	NutritionProductStatusCode_ENTERED_IN_ERROR      NutritionProductStatusCode_Value = 3
)

// Enum value maps for NutritionProductStatusCode_Value.
var (
	NutritionProductStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "INACTIVE",
		3: "ENTERED_IN_ERROR",
	}
	NutritionProductStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"INACTIVE":              2,
		"ENTERED_IN_ERROR":      3,
	}
)

func (x NutritionProductStatusCode_Value) Enum() *NutritionProductStatusCode_Value {
	p := new(NutritionProductStatusCode_Value)
	*p = x
	return p
}

func (x NutritionProductStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NutritionProductStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[157].Descriptor()
}

func (NutritionProductStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[157]
}

func (x NutritionProductStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NutritionProductStatusCode_Value.Descriptor instead.
func (NutritionProductStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{157, 0}
}

type ObservationDataTypeCode_Value int32

const (
	ObservationDataTypeCode_INVALID_UNINITIALIZED ObservationDataTypeCode_Value = 0
	ObservationDataTypeCode_QUANTITY              ObservationDataTypeCode_Value = 1
	ObservationDataTypeCode_CODEABLE_CONCEPT      ObservationDataTypeCode_Value = 2
	ObservationDataTypeCode_STRING                ObservationDataTypeCode_Value = 3
	ObservationDataTypeCode_BOOLEAN               ObservationDataTypeCode_Value = 4
	ObservationDataTypeCode_INTEGER               ObservationDataTypeCode_Value = 5
	ObservationDataTypeCode_RANGE                 ObservationDataTypeCode_Value = 6
	ObservationDataTypeCode_RATIO                 ObservationDataTypeCode_Value = 7
	ObservationDataTypeCode_SAMPLED_DATA          ObservationDataTypeCode_Value = 8
	ObservationDataTypeCode_TIME                  ObservationDataTypeCode_Value = 9
	ObservationDataTypeCode_DATE_TIME             ObservationDataTypeCode_Value = 10
	ObservationDataTypeCode_PERIOD                ObservationDataTypeCode_Value = 11
)

// Enum value maps for ObservationDataTypeCode_Value.
var (
	ObservationDataTypeCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "QUANTITY",
		2:  "CODEABLE_CONCEPT",
		3:  "STRING",
		4:  "BOOLEAN",
		5:  "INTEGER",
		6:  "RANGE",
		7:  "RATIO",
		8:  "SAMPLED_DATA",
		9:  "TIME",
		10: "DATE_TIME",
		11: "PERIOD",
	}
	ObservationDataTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"QUANTITY":              1,
		"CODEABLE_CONCEPT":      2,
		"STRING":                3,
		"BOOLEAN":               4,
		"INTEGER":               5,
		"RANGE":                 6,
		"RATIO":                 7,
		"SAMPLED_DATA":          8,
		"TIME":                  9,
		"DATE_TIME":             10,
		"PERIOD":                11,
	}
)

func (x ObservationDataTypeCode_Value) Enum() *ObservationDataTypeCode_Value {
	p := new(ObservationDataTypeCode_Value)
	*p = x
	return p
}

func (x ObservationDataTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObservationDataTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[158].Descriptor()
}

func (ObservationDataTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[158]
}

func (x ObservationDataTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObservationDataTypeCode_Value.Descriptor instead.
func (ObservationDataTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{158, 0}
}

type ObservationRangeCategoryCode_Value int32

const (
	ObservationRangeCategoryCode_INVALID_UNINITIALIZED ObservationRangeCategoryCode_Value = 0
	ObservationRangeCategoryCode_REFERENCE             ObservationRangeCategoryCode_Value = 1
	ObservationRangeCategoryCode_CRITICAL              ObservationRangeCategoryCode_Value = 2
	ObservationRangeCategoryCode_ABSOLUTE              ObservationRangeCategoryCode_Value = 3
)

// Enum value maps for ObservationRangeCategoryCode_Value.
var (
	ObservationRangeCategoryCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "REFERENCE",
		2: "CRITICAL",
		3: "ABSOLUTE",
	}
	ObservationRangeCategoryCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"REFERENCE":             1,
		"CRITICAL":              2,
		"ABSOLUTE":              3,
	}
)

func (x ObservationRangeCategoryCode_Value) Enum() *ObservationRangeCategoryCode_Value {
	p := new(ObservationRangeCategoryCode_Value)
	*p = x
	return p
}

func (x ObservationRangeCategoryCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObservationRangeCategoryCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[159].Descriptor()
}

func (ObservationRangeCategoryCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[159]
}

func (x ObservationRangeCategoryCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObservationRangeCategoryCode_Value.Descriptor instead.
func (ObservationRangeCategoryCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{159, 0}
}

type ObservationStatusCode_Value int32

const (
	ObservationStatusCode_INVALID_UNINITIALIZED ObservationStatusCode_Value = 0
	ObservationStatusCode_REGISTERED            ObservationStatusCode_Value = 1
	ObservationStatusCode_PRELIMINARY           ObservationStatusCode_Value = 2
	ObservationStatusCode_FINAL                 ObservationStatusCode_Value = 3
	ObservationStatusCode_AMENDED               ObservationStatusCode_Value = 4
	ObservationStatusCode_CORRECTED             ObservationStatusCode_Value = 5
	ObservationStatusCode_CANCELLED             ObservationStatusCode_Value = 6
	ObservationStatusCode_ENTERED_IN_ERROR      ObservationStatusCode_Value = 7
	ObservationStatusCode_UNKNOWN               ObservationStatusCode_Value = 8
)

// Enum value maps for ObservationStatusCode_Value.
var (
	ObservationStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "REGISTERED",
		2: "PRELIMINARY",
		3: "FINAL",
		4: "AMENDED",
		5: "CORRECTED",
		6: "CANCELLED",
		7: "ENTERED_IN_ERROR",
		8: "UNKNOWN",
	}
	ObservationStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"REGISTERED":            1,
		"PRELIMINARY":           2,
		"FINAL":                 3,
		"AMENDED":               4,
		"CORRECTED":             5,
		"CANCELLED":             6,
		"ENTERED_IN_ERROR":      7,
		"UNKNOWN":               8,
	}
)

func (x ObservationStatusCode_Value) Enum() *ObservationStatusCode_Value {
	p := new(ObservationStatusCode_Value)
	*p = x
	return p
}

func (x ObservationStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObservationStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[160].Descriptor()
}

func (ObservationStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[160]
}

func (x ObservationStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObservationStatusCode_Value.Descriptor instead.
func (ObservationStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{160, 0}
}

type OperationKindCode_Value int32

const (
	OperationKindCode_INVALID_UNINITIALIZED OperationKindCode_Value = 0
	OperationKindCode_OPERATION             OperationKindCode_Value = 1
	OperationKindCode_QUERY                 OperationKindCode_Value = 2
)

// Enum value maps for OperationKindCode_Value.
var (
	OperationKindCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "OPERATION",
		2: "QUERY",
	}
	OperationKindCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"OPERATION":             1,
		"QUERY":                 2,
	}
)

func (x OperationKindCode_Value) Enum() *OperationKindCode_Value {
	p := new(OperationKindCode_Value)
	*p = x
	return p
}

func (x OperationKindCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationKindCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[161].Descriptor()
}

func (OperationKindCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[161]
}

func (x OperationKindCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationKindCode_Value.Descriptor instead.
func (OperationKindCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{161, 0}
}

type OperationParameterScopeCode_Value int32

const (
	OperationParameterScopeCode_INVALID_UNINITIALIZED OperationParameterScopeCode_Value = 0
	OperationParameterScopeCode_INSTANCE              OperationParameterScopeCode_Value = 1
	OperationParameterScopeCode_TYPE                  OperationParameterScopeCode_Value = 2
	OperationParameterScopeCode_SYSTEM                OperationParameterScopeCode_Value = 3
)

// Enum value maps for OperationParameterScopeCode_Value.
var (
	OperationParameterScopeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "INSTANCE",
		2: "TYPE",
		3: "SYSTEM",
	}
	OperationParameterScopeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"INSTANCE":              1,
		"TYPE":                  2,
		"SYSTEM":                3,
	}
)

func (x OperationParameterScopeCode_Value) Enum() *OperationParameterScopeCode_Value {
	p := new(OperationParameterScopeCode_Value)
	*p = x
	return p
}

func (x OperationParameterScopeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationParameterScopeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[162].Descriptor()
}

func (OperationParameterScopeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[162]
}

func (x OperationParameterScopeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationParameterScopeCode_Value.Descriptor instead.
func (OperationParameterScopeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{162, 0}
}

type OperationParameterUseCode_Value int32

const (
	OperationParameterUseCode_INVALID_UNINITIALIZED OperationParameterUseCode_Value = 0
	OperationParameterUseCode_IN                    OperationParameterUseCode_Value = 1
	OperationParameterUseCode_OUT                   OperationParameterUseCode_Value = 2
)

// Enum value maps for OperationParameterUseCode_Value.
var (
	OperationParameterUseCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "IN",
		2: "OUT",
	}
	OperationParameterUseCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"IN":                    1,
		"OUT":                   2,
	}
)

func (x OperationParameterUseCode_Value) Enum() *OperationParameterUseCode_Value {
	p := new(OperationParameterUseCode_Value)
	*p = x
	return p
}

func (x OperationParameterUseCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationParameterUseCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[163].Descriptor()
}

func (OperationParameterUseCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[163]
}

func (x OperationParameterUseCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationParameterUseCode_Value.Descriptor instead.
func (OperationParameterUseCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{163, 0}
}

type OrientationTypeCode_Value int32

const (
	OrientationTypeCode_INVALID_UNINITIALIZED OrientationTypeCode_Value = 0
	OrientationTypeCode_SENSE                 OrientationTypeCode_Value = 1
	OrientationTypeCode_ANTISENSE             OrientationTypeCode_Value = 2
)

// Enum value maps for OrientationTypeCode_Value.
var (
	OrientationTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "SENSE",
		2: "ANTISENSE",
	}
	OrientationTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"SENSE":                 1,
		"ANTISENSE":             2,
	}
)

func (x OrientationTypeCode_Value) Enum() *OrientationTypeCode_Value {
	p := new(OrientationTypeCode_Value)
	*p = x
	return p
}

func (x OrientationTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrientationTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[164].Descriptor()
}

func (OrientationTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[164]
}

func (x OrientationTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrientationTypeCode_Value.Descriptor instead.
func (OrientationTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{164, 0}
}

type ParticipationStatusCode_Value int32

const (
	ParticipationStatusCode_INVALID_UNINITIALIZED ParticipationStatusCode_Value = 0
	ParticipationStatusCode_ACCEPTED              ParticipationStatusCode_Value = 1
	ParticipationStatusCode_DECLINED              ParticipationStatusCode_Value = 2
	ParticipationStatusCode_TENTATIVE             ParticipationStatusCode_Value = 3
	ParticipationStatusCode_NEEDS_ACTION          ParticipationStatusCode_Value = 4
)

// Enum value maps for ParticipationStatusCode_Value.
var (
	ParticipationStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACCEPTED",
		2: "DECLINED",
		3: "TENTATIVE",
		4: "NEEDS_ACTION",
	}
	ParticipationStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACCEPTED":              1,
		"DECLINED":              2,
		"TENTATIVE":             3,
		"NEEDS_ACTION":          4,
	}
)

func (x ParticipationStatusCode_Value) Enum() *ParticipationStatusCode_Value {
	p := new(ParticipationStatusCode_Value)
	*p = x
	return p
}

func (x ParticipationStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParticipationStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[165].Descriptor()
}

func (ParticipationStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[165]
}

func (x ParticipationStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParticipationStatusCode_Value.Descriptor instead.
func (ParticipationStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{165, 0}
}

type PaymentOutcomeCode_Value int32

const (
	PaymentOutcomeCode_INVALID_UNINITIALIZED PaymentOutcomeCode_Value = 0
	PaymentOutcomeCode_QUEUED                PaymentOutcomeCode_Value = 1
	PaymentOutcomeCode_COMPLETE              PaymentOutcomeCode_Value = 2
	PaymentOutcomeCode_ERROR                 PaymentOutcomeCode_Value = 3
	PaymentOutcomeCode_PARTIAL               PaymentOutcomeCode_Value = 4
)

// Enum value maps for PaymentOutcomeCode_Value.
var (
	PaymentOutcomeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "QUEUED",
		2: "COMPLETE",
		3: "ERROR",
		4: "PARTIAL",
	}
	PaymentOutcomeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"QUEUED":                1,
		"COMPLETE":              2,
		"ERROR":                 3,
		"PARTIAL":               4,
	}
)

func (x PaymentOutcomeCode_Value) Enum() *PaymentOutcomeCode_Value {
	p := new(PaymentOutcomeCode_Value)
	*p = x
	return p
}

func (x PaymentOutcomeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentOutcomeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[166].Descriptor()
}

func (PaymentOutcomeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[166]
}

func (x PaymentOutcomeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentOutcomeCode_Value.Descriptor instead.
func (PaymentOutcomeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{166, 0}
}

type PermissionRuleCombiningCode_Value int32

const (
	PermissionRuleCombiningCode_INVALID_UNINITIALIZED    PermissionRuleCombiningCode_Value = 0
	PermissionRuleCombiningCode_DENY_OVERRIDES           PermissionRuleCombiningCode_Value = 1
	PermissionRuleCombiningCode_PERMIT_OVERRIDES         PermissionRuleCombiningCode_Value = 2
	PermissionRuleCombiningCode_ORDERED_DENY_OVERRIDES   PermissionRuleCombiningCode_Value = 3
	PermissionRuleCombiningCode_ORDERED_PERMIT_OVERRIDES PermissionRuleCombiningCode_Value = 4
	PermissionRuleCombiningCode_DENY_UNLESS_PERMIT       PermissionRuleCombiningCode_Value = 5
	PermissionRuleCombiningCode_PERMIT_UNLESS_DENY       PermissionRuleCombiningCode_Value = 6
)

// Enum value maps for PermissionRuleCombiningCode_Value.
var (
	PermissionRuleCombiningCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DENY_OVERRIDES",
		2: "PERMIT_OVERRIDES",
		3: "ORDERED_DENY_OVERRIDES",
		4: "ORDERED_PERMIT_OVERRIDES",
		5: "DENY_UNLESS_PERMIT",
		6: "PERMIT_UNLESS_DENY",
	}
	PermissionRuleCombiningCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":    0,
		"DENY_OVERRIDES":           1,
		"PERMIT_OVERRIDES":         2,
		"ORDERED_DENY_OVERRIDES":   3,
		"ORDERED_PERMIT_OVERRIDES": 4,
		"DENY_UNLESS_PERMIT":       5,
		"PERMIT_UNLESS_DENY":       6,
	}
)

func (x PermissionRuleCombiningCode_Value) Enum() *PermissionRuleCombiningCode_Value {
	p := new(PermissionRuleCombiningCode_Value)
	*p = x
	return p
}

func (x PermissionRuleCombiningCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PermissionRuleCombiningCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[167].Descriptor()
}

func (PermissionRuleCombiningCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[167]
}

func (x PermissionRuleCombiningCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PermissionRuleCombiningCode_Value.Descriptor instead.
func (PermissionRuleCombiningCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{167, 0}
}

type PermissionStatusCode_Value int32

const (
	PermissionStatusCode_INVALID_UNINITIALIZED PermissionStatusCode_Value = 0
	PermissionStatusCode_ACTIVE                PermissionStatusCode_Value = 1
	PermissionStatusCode_ENTERED_IN_ERROR      PermissionStatusCode_Value = 2
	PermissionStatusCode_DRAFT                 PermissionStatusCode_Value = 3
	PermissionStatusCode_REJECTED              PermissionStatusCode_Value = 4
)

// Enum value maps for PermissionStatusCode_Value.
var (
	PermissionStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "ENTERED_IN_ERROR",
		3: "DRAFT",
		4: "REJECTED",
	}
	PermissionStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"ENTERED_IN_ERROR":      2,
		"DRAFT":                 3,
		"REJECTED":              4,
	}
)

func (x PermissionStatusCode_Value) Enum() *PermissionStatusCode_Value {
	p := new(PermissionStatusCode_Value)
	*p = x
	return p
}

func (x PermissionStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PermissionStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[168].Descriptor()
}

func (PermissionStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[168]
}

func (x PermissionStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PermissionStatusCode_Value.Descriptor instead.
func (PermissionStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{168, 0}
}

type PriceComponentTypeCode_Value int32

const (
	PriceComponentTypeCode_INVALID_UNINITIALIZED PriceComponentTypeCode_Value = 0
	PriceComponentTypeCode_BASE                  PriceComponentTypeCode_Value = 1
	PriceComponentTypeCode_SURCHARGE             PriceComponentTypeCode_Value = 2
	PriceComponentTypeCode_DEDUCTION             PriceComponentTypeCode_Value = 3
	PriceComponentTypeCode_DISCOUNT              PriceComponentTypeCode_Value = 4
	PriceComponentTypeCode_TAX                   PriceComponentTypeCode_Value = 5
	PriceComponentTypeCode_INFORMATIONAL         PriceComponentTypeCode_Value = 6
)

// Enum value maps for PriceComponentTypeCode_Value.
var (
	PriceComponentTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "BASE",
		2: "SURCHARGE",
		3: "DEDUCTION",
		4: "DISCOUNT",
		5: "TAX",
		6: "INFORMATIONAL",
	}
	PriceComponentTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"BASE":                  1,
		"SURCHARGE":             2,
		"DEDUCTION":             3,
		"DISCOUNT":              4,
		"TAX":                   5,
		"INFORMATIONAL":         6,
	}
)

func (x PriceComponentTypeCode_Value) Enum() *PriceComponentTypeCode_Value {
	p := new(PriceComponentTypeCode_Value)
	*p = x
	return p
}

func (x PriceComponentTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PriceComponentTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[169].Descriptor()
}

func (PriceComponentTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[169]
}

func (x PriceComponentTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PriceComponentTypeCode_Value.Descriptor instead.
func (PriceComponentTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{169, 0}
}

type ProductStatusCode_Value int32

const (
	ProductStatusCode_INVALID_UNINITIALIZED ProductStatusCode_Value = 0
	ProductStatusCode_ACTIVE                ProductStatusCode_Value = 3
	ProductStatusCode_ENTERED_IN_ERROR      ProductStatusCode_Value = 4
)

// Enum value maps for ProductStatusCode_Value.
var (
	ProductStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		3: "ACTIVE",
		4: "ENTERED_IN_ERROR",
	}
	ProductStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                3,
		"ENTERED_IN_ERROR":      4,
	}
)

func (x ProductStatusCode_Value) Enum() *ProductStatusCode_Value {
	p := new(ProductStatusCode_Value)
	*p = x
	return p
}

func (x ProductStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[170].Descriptor()
}

func (ProductStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[170]
}

func (x ProductStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProductStatusCode_Value.Descriptor instead.
func (ProductStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{170, 0}
}

type PropertyRepresentationCode_Value int32

const (
	PropertyRepresentationCode_INVALID_UNINITIALIZED PropertyRepresentationCode_Value = 0
	PropertyRepresentationCode_XML_ATTR              PropertyRepresentationCode_Value = 1
	PropertyRepresentationCode_XML_TEXT              PropertyRepresentationCode_Value = 2
	PropertyRepresentationCode_TYPE_ATTR             PropertyRepresentationCode_Value = 3
	PropertyRepresentationCode_CDA_TEXT              PropertyRepresentationCode_Value = 4
	PropertyRepresentationCode_XHTML                 PropertyRepresentationCode_Value = 5
)

// Enum value maps for PropertyRepresentationCode_Value.
var (
	PropertyRepresentationCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "XML_ATTR",
		2: "XML_TEXT",
		3: "TYPE_ATTR",
		4: "CDA_TEXT",
		5: "XHTML",
	}
	PropertyRepresentationCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"XML_ATTR":              1,
		"XML_TEXT":              2,
		"TYPE_ATTR":             3,
		"CDA_TEXT":              4,
		"XHTML":                 5,
	}
)

func (x PropertyRepresentationCode_Value) Enum() *PropertyRepresentationCode_Value {
	p := new(PropertyRepresentationCode_Value)
	*p = x
	return p
}

func (x PropertyRepresentationCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PropertyRepresentationCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[171].Descriptor()
}

func (PropertyRepresentationCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[171]
}

func (x PropertyRepresentationCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PropertyRepresentationCode_Value.Descriptor instead.
func (PropertyRepresentationCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{171, 0}
}

type PropertyTypeCode_Value int32

const (
	PropertyTypeCode_INVALID_UNINITIALIZED PropertyTypeCode_Value = 0
	PropertyTypeCode_CODE                  PropertyTypeCode_Value = 1
	PropertyTypeCode_CODING                PropertyTypeCode_Value = 2
	PropertyTypeCode_STRING                PropertyTypeCode_Value = 3
	PropertyTypeCode_INTEGER               PropertyTypeCode_Value = 4
	PropertyTypeCode_BOOLEAN               PropertyTypeCode_Value = 5
	PropertyTypeCode_DATE_TIME             PropertyTypeCode_Value = 6
	PropertyTypeCode_DECIMAL               PropertyTypeCode_Value = 7
)

// Enum value maps for PropertyTypeCode_Value.
var (
	PropertyTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CODE",
		2: "CODING",
		3: "STRING",
		4: "INTEGER",
		5: "BOOLEAN",
		6: "DATE_TIME",
		7: "DECIMAL",
	}
	PropertyTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CODE":                  1,
		"CODING":                2,
		"STRING":                3,
		"INTEGER":               4,
		"BOOLEAN":               5,
		"DATE_TIME":             6,
		"DECIMAL":               7,
	}
)

func (x PropertyTypeCode_Value) Enum() *PropertyTypeCode_Value {
	p := new(PropertyTypeCode_Value)
	*p = x
	return p
}

func (x PropertyTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PropertyTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[172].Descriptor()
}

func (PropertyTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[172]
}

func (x PropertyTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PropertyTypeCode_Value.Descriptor instead.
func (PropertyTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{172, 0}
}

type ProvenanceEntityRoleCode_Value int32

const (
	ProvenanceEntityRoleCode_INVALID_UNINITIALIZED ProvenanceEntityRoleCode_Value = 0
	ProvenanceEntityRoleCode_REVISION              ProvenanceEntityRoleCode_Value = 2
	ProvenanceEntityRoleCode_QUOTATION             ProvenanceEntityRoleCode_Value = 3
	ProvenanceEntityRoleCode_SOURCE                ProvenanceEntityRoleCode_Value = 4
	ProvenanceEntityRoleCode_INSTANTIATES          ProvenanceEntityRoleCode_Value = 6
	ProvenanceEntityRoleCode_REMOVAL               ProvenanceEntityRoleCode_Value = 5
)

// Enum value maps for ProvenanceEntityRoleCode_Value.
var (
	ProvenanceEntityRoleCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		2: "REVISION",
		3: "QUOTATION",
		4: "SOURCE",
		6: "INSTANTIATES",
		5: "REMOVAL",
	}
	ProvenanceEntityRoleCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"REVISION":              2,
		"QUOTATION":             3,
		"SOURCE":                4,
		"INSTANTIATES":          6,
		"REMOVAL":               5,
	}
)

func (x ProvenanceEntityRoleCode_Value) Enum() *ProvenanceEntityRoleCode_Value {
	p := new(ProvenanceEntityRoleCode_Value)
	*p = x
	return p
}

func (x ProvenanceEntityRoleCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProvenanceEntityRoleCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[173].Descriptor()
}

func (ProvenanceEntityRoleCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[173]
}

func (x ProvenanceEntityRoleCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProvenanceEntityRoleCode_Value.Descriptor instead.
func (ProvenanceEntityRoleCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{173, 0}
}

type PublicationStatusCode_Value int32

const (
	PublicationStatusCode_INVALID_UNINITIALIZED PublicationStatusCode_Value = 0
	PublicationStatusCode_DRAFT                 PublicationStatusCode_Value = 1
	PublicationStatusCode_ACTIVE                PublicationStatusCode_Value = 2
	PublicationStatusCode_RETIRED               PublicationStatusCode_Value = 3
	PublicationStatusCode_UNKNOWN               PublicationStatusCode_Value = 4
)

// Enum value maps for PublicationStatusCode_Value.
var (
	PublicationStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DRAFT",
		2: "ACTIVE",
		3: "RETIRED",
		4: "UNKNOWN",
	}
	PublicationStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DRAFT":                 1,
		"ACTIVE":                2,
		"RETIRED":               3,
		"UNKNOWN":               4,
	}
)

func (x PublicationStatusCode_Value) Enum() *PublicationStatusCode_Value {
	p := new(PublicationStatusCode_Value)
	*p = x
	return p
}

func (x PublicationStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PublicationStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[174].Descriptor()
}

func (PublicationStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[174]
}

func (x PublicationStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PublicationStatusCode_Value.Descriptor instead.
func (PublicationStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{174, 0}
}

type QuantityComparatorCode_Value int32

const (
	QuantityComparatorCode_INVALID_UNINITIALIZED    QuantityComparatorCode_Value = 0
	QuantityComparatorCode_LESS_THAN                QuantityComparatorCode_Value = 1
	QuantityComparatorCode_LESS_THAN_OR_EQUAL_TO    QuantityComparatorCode_Value = 2
	QuantityComparatorCode_GREATER_THAN_OR_EQUAL_TO QuantityComparatorCode_Value = 3
	QuantityComparatorCode_GREATER_THAN             QuantityComparatorCode_Value = 4
	QuantityComparatorCode_AD                       QuantityComparatorCode_Value = 5
)

// Enum value maps for QuantityComparatorCode_Value.
var (
	QuantityComparatorCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "LESS_THAN",
		2: "LESS_THAN_OR_EQUAL_TO",
		3: "GREATER_THAN_OR_EQUAL_TO",
		4: "GREATER_THAN",
		5: "AD",
	}
	QuantityComparatorCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":    0,
		"LESS_THAN":                1,
		"LESS_THAN_OR_EQUAL_TO":    2,
		"GREATER_THAN_OR_EQUAL_TO": 3,
		"GREATER_THAN":             4,
		"AD":                       5,
	}
)

func (x QuantityComparatorCode_Value) Enum() *QuantityComparatorCode_Value {
	p := new(QuantityComparatorCode_Value)
	*p = x
	return p
}

func (x QuantityComparatorCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuantityComparatorCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[175].Descriptor()
}

func (QuantityComparatorCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[175]
}

func (x QuantityComparatorCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuantityComparatorCode_Value.Descriptor instead.
func (QuantityComparatorCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{175, 0}
}

type QuestionnaireAnswerConstraintCode_Value int32

const (
	QuestionnaireAnswerConstraintCode_INVALID_UNINITIALIZED QuestionnaireAnswerConstraintCode_Value = 0
	QuestionnaireAnswerConstraintCode_OPTIONS_ONLY          QuestionnaireAnswerConstraintCode_Value = 1
	QuestionnaireAnswerConstraintCode_OPTIONS_OR_TYPE       QuestionnaireAnswerConstraintCode_Value = 2
	QuestionnaireAnswerConstraintCode_OPTIONS_OR_STRING     QuestionnaireAnswerConstraintCode_Value = 3
)

// Enum value maps for QuestionnaireAnswerConstraintCode_Value.
var (
	QuestionnaireAnswerConstraintCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "OPTIONS_ONLY",
		2: "OPTIONS_OR_TYPE",
		3: "OPTIONS_OR_STRING",
	}
	QuestionnaireAnswerConstraintCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"OPTIONS_ONLY":          1,
		"OPTIONS_OR_TYPE":       2,
		"OPTIONS_OR_STRING":     3,
	}
)

func (x QuestionnaireAnswerConstraintCode_Value) Enum() *QuestionnaireAnswerConstraintCode_Value {
	p := new(QuestionnaireAnswerConstraintCode_Value)
	*p = x
	return p
}

func (x QuestionnaireAnswerConstraintCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuestionnaireAnswerConstraintCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[176].Descriptor()
}

func (QuestionnaireAnswerConstraintCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[176]
}

func (x QuestionnaireAnswerConstraintCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuestionnaireAnswerConstraintCode_Value.Descriptor instead.
func (QuestionnaireAnswerConstraintCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{176, 0}
}

type QuestionnaireItemDisabledDisplayCode_Value int32

const (
	QuestionnaireItemDisabledDisplayCode_INVALID_UNINITIALIZED QuestionnaireItemDisabledDisplayCode_Value = 0
	QuestionnaireItemDisabledDisplayCode_HIDDEN                QuestionnaireItemDisabledDisplayCode_Value = 1
	QuestionnaireItemDisabledDisplayCode_PROTECTED             QuestionnaireItemDisabledDisplayCode_Value = 2
)

// Enum value maps for QuestionnaireItemDisabledDisplayCode_Value.
var (
	QuestionnaireItemDisabledDisplayCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "HIDDEN",
		2: "PROTECTED",
	}
	QuestionnaireItemDisabledDisplayCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"HIDDEN":                1,
		"PROTECTED":             2,
	}
)

func (x QuestionnaireItemDisabledDisplayCode_Value) Enum() *QuestionnaireItemDisabledDisplayCode_Value {
	p := new(QuestionnaireItemDisabledDisplayCode_Value)
	*p = x
	return p
}

func (x QuestionnaireItemDisabledDisplayCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuestionnaireItemDisabledDisplayCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[177].Descriptor()
}

func (QuestionnaireItemDisabledDisplayCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[177]
}

func (x QuestionnaireItemDisabledDisplayCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuestionnaireItemDisabledDisplayCode_Value.Descriptor instead.
func (QuestionnaireItemDisabledDisplayCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{177, 0}
}

type QuestionnaireItemOperatorCode_Value int32

const (
	QuestionnaireItemOperatorCode_INVALID_UNINITIALIZED    QuestionnaireItemOperatorCode_Value = 0
	QuestionnaireItemOperatorCode_EXISTS                   QuestionnaireItemOperatorCode_Value = 1
	QuestionnaireItemOperatorCode_EQUALS                   QuestionnaireItemOperatorCode_Value = 2
	QuestionnaireItemOperatorCode_NOT_EQUAL_TO             QuestionnaireItemOperatorCode_Value = 3
	QuestionnaireItemOperatorCode_GREATER_THAN             QuestionnaireItemOperatorCode_Value = 4
	QuestionnaireItemOperatorCode_LESS_THAN                QuestionnaireItemOperatorCode_Value = 5
	QuestionnaireItemOperatorCode_GREATER_THAN_OR_EQUAL_TO QuestionnaireItemOperatorCode_Value = 6
	QuestionnaireItemOperatorCode_LESS_THAN_OR_EQUAL_TO    QuestionnaireItemOperatorCode_Value = 7
)

// Enum value maps for QuestionnaireItemOperatorCode_Value.
var (
	QuestionnaireItemOperatorCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "EXISTS",
		2: "EQUALS",
		3: "NOT_EQUAL_TO",
		4: "GREATER_THAN",
		5: "LESS_THAN",
		6: "GREATER_THAN_OR_EQUAL_TO",
		7: "LESS_THAN_OR_EQUAL_TO",
	}
	QuestionnaireItemOperatorCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":    0,
		"EXISTS":                   1,
		"EQUALS":                   2,
		"NOT_EQUAL_TO":             3,
		"GREATER_THAN":             4,
		"LESS_THAN":                5,
		"GREATER_THAN_OR_EQUAL_TO": 6,
		"LESS_THAN_OR_EQUAL_TO":    7,
	}
)

func (x QuestionnaireItemOperatorCode_Value) Enum() *QuestionnaireItemOperatorCode_Value {
	p := new(QuestionnaireItemOperatorCode_Value)
	*p = x
	return p
}

func (x QuestionnaireItemOperatorCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuestionnaireItemOperatorCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[178].Descriptor()
}

func (QuestionnaireItemOperatorCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[178]
}

func (x QuestionnaireItemOperatorCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuestionnaireItemOperatorCode_Value.Descriptor instead.
func (QuestionnaireItemOperatorCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{178, 0}
}

type QuestionnaireItemTypeCode_Value int32

const (
	QuestionnaireItemTypeCode_INVALID_UNINITIALIZED QuestionnaireItemTypeCode_Value = 0
	QuestionnaireItemTypeCode_GROUP                 QuestionnaireItemTypeCode_Value = 1
	QuestionnaireItemTypeCode_DISPLAY               QuestionnaireItemTypeCode_Value = 2
	QuestionnaireItemTypeCode_QUESTION              QuestionnaireItemTypeCode_Value = 3
	QuestionnaireItemTypeCode_BOOLEAN               QuestionnaireItemTypeCode_Value = 4
	QuestionnaireItemTypeCode_DECIMAL               QuestionnaireItemTypeCode_Value = 5
	QuestionnaireItemTypeCode_INTEGER               QuestionnaireItemTypeCode_Value = 6
	QuestionnaireItemTypeCode_DATE                  QuestionnaireItemTypeCode_Value = 7
	QuestionnaireItemTypeCode_DATE_TIME             QuestionnaireItemTypeCode_Value = 8
	QuestionnaireItemTypeCode_TIME                  QuestionnaireItemTypeCode_Value = 9
	QuestionnaireItemTypeCode_STRING                QuestionnaireItemTypeCode_Value = 10
	QuestionnaireItemTypeCode_TEXT                  QuestionnaireItemTypeCode_Value = 11
	QuestionnaireItemTypeCode_URL                   QuestionnaireItemTypeCode_Value = 12
	QuestionnaireItemTypeCode_CODING                QuestionnaireItemTypeCode_Value = 18
	QuestionnaireItemTypeCode_ATTACHMENT            QuestionnaireItemTypeCode_Value = 15
	QuestionnaireItemTypeCode_REFERENCE             QuestionnaireItemTypeCode_Value = 16
	QuestionnaireItemTypeCode_QUANTITY              QuestionnaireItemTypeCode_Value = 17
)

// Enum value maps for QuestionnaireItemTypeCode_Value.
var (
	QuestionnaireItemTypeCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "GROUP",
		2:  "DISPLAY",
		3:  "QUESTION",
		4:  "BOOLEAN",
		5:  "DECIMAL",
		6:  "INTEGER",
		7:  "DATE",
		8:  "DATE_TIME",
		9:  "TIME",
		10: "STRING",
		11: "TEXT",
		12: "URL",
		18: "CODING",
		15: "ATTACHMENT",
		16: "REFERENCE",
		17: "QUANTITY",
	}
	QuestionnaireItemTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"GROUP":                 1,
		"DISPLAY":               2,
		"QUESTION":              3,
		"BOOLEAN":               4,
		"DECIMAL":               5,
		"INTEGER":               6,
		"DATE":                  7,
		"DATE_TIME":             8,
		"TIME":                  9,
		"STRING":                10,
		"TEXT":                  11,
		"URL":                   12,
		"CODING":                18,
		"ATTACHMENT":            15,
		"REFERENCE":             16,
		"QUANTITY":              17,
	}
)

func (x QuestionnaireItemTypeCode_Value) Enum() *QuestionnaireItemTypeCode_Value {
	p := new(QuestionnaireItemTypeCode_Value)
	*p = x
	return p
}

func (x QuestionnaireItemTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuestionnaireItemTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[179].Descriptor()
}

func (QuestionnaireItemTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[179]
}

func (x QuestionnaireItemTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuestionnaireItemTypeCode_Value.Descriptor instead.
func (QuestionnaireItemTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{179, 0}
}

type QuestionnaireResponseStatusCode_Value int32

const (
	QuestionnaireResponseStatusCode_INVALID_UNINITIALIZED QuestionnaireResponseStatusCode_Value = 0
	QuestionnaireResponseStatusCode_IN_PROGRESS           QuestionnaireResponseStatusCode_Value = 1
	QuestionnaireResponseStatusCode_COMPLETED             QuestionnaireResponseStatusCode_Value = 2
	QuestionnaireResponseStatusCode_AMENDED               QuestionnaireResponseStatusCode_Value = 3
	QuestionnaireResponseStatusCode_ENTERED_IN_ERROR      QuestionnaireResponseStatusCode_Value = 4
	QuestionnaireResponseStatusCode_STOPPED               QuestionnaireResponseStatusCode_Value = 5
)

// Enum value maps for QuestionnaireResponseStatusCode_Value.
var (
	QuestionnaireResponseStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "IN_PROGRESS",
		2: "COMPLETED",
		3: "AMENDED",
		4: "ENTERED_IN_ERROR",
		5: "STOPPED",
	}
	QuestionnaireResponseStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"IN_PROGRESS":           1,
		"COMPLETED":             2,
		"AMENDED":               3,
		"ENTERED_IN_ERROR":      4,
		"STOPPED":               5,
	}
)

func (x QuestionnaireResponseStatusCode_Value) Enum() *QuestionnaireResponseStatusCode_Value {
	p := new(QuestionnaireResponseStatusCode_Value)
	*p = x
	return p
}

func (x QuestionnaireResponseStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuestionnaireResponseStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[180].Descriptor()
}

func (QuestionnaireResponseStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[180]
}

func (x QuestionnaireResponseStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuestionnaireResponseStatusCode_Value.Descriptor instead.
func (QuestionnaireResponseStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{180, 0}
}

type ReferenceHandlingPolicyCode_Value int32

const (
	ReferenceHandlingPolicyCode_INVALID_UNINITIALIZED ReferenceHandlingPolicyCode_Value = 0
	ReferenceHandlingPolicyCode_LITERAL               ReferenceHandlingPolicyCode_Value = 1
	ReferenceHandlingPolicyCode_LOGICAL               ReferenceHandlingPolicyCode_Value = 2
	ReferenceHandlingPolicyCode_RESOLVES              ReferenceHandlingPolicyCode_Value = 3
	ReferenceHandlingPolicyCode_ENFORCED              ReferenceHandlingPolicyCode_Value = 4
	ReferenceHandlingPolicyCode_LOCAL                 ReferenceHandlingPolicyCode_Value = 5
)

// Enum value maps for ReferenceHandlingPolicyCode_Value.
var (
	ReferenceHandlingPolicyCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "LITERAL",
		2: "LOGICAL",
		3: "RESOLVES",
		4: "ENFORCED",
		5: "LOCAL",
	}
	ReferenceHandlingPolicyCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"LITERAL":               1,
		"LOGICAL":               2,
		"RESOLVES":              3,
		"ENFORCED":              4,
		"LOCAL":                 5,
	}
)

func (x ReferenceHandlingPolicyCode_Value) Enum() *ReferenceHandlingPolicyCode_Value {
	p := new(ReferenceHandlingPolicyCode_Value)
	*p = x
	return p
}

func (x ReferenceHandlingPolicyCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReferenceHandlingPolicyCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[181].Descriptor()
}

func (ReferenceHandlingPolicyCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[181]
}

func (x ReferenceHandlingPolicyCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReferenceHandlingPolicyCode_Value.Descriptor instead.
func (ReferenceHandlingPolicyCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{181, 0}
}

type ReferenceVersionRulesCode_Value int32

const (
	ReferenceVersionRulesCode_INVALID_UNINITIALIZED ReferenceVersionRulesCode_Value = 0
	ReferenceVersionRulesCode_EITHER                ReferenceVersionRulesCode_Value = 1
	ReferenceVersionRulesCode_INDEPENDENT           ReferenceVersionRulesCode_Value = 2
	ReferenceVersionRulesCode_SPECIFIC              ReferenceVersionRulesCode_Value = 3
)

// Enum value maps for ReferenceVersionRulesCode_Value.
var (
	ReferenceVersionRulesCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "EITHER",
		2: "INDEPENDENT",
		3: "SPECIFIC",
	}
	ReferenceVersionRulesCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"EITHER":                1,
		"INDEPENDENT":           2,
		"SPECIFIC":              3,
	}
)

func (x ReferenceVersionRulesCode_Value) Enum() *ReferenceVersionRulesCode_Value {
	p := new(ReferenceVersionRulesCode_Value)
	*p = x
	return p
}

func (x ReferenceVersionRulesCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReferenceVersionRulesCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[182].Descriptor()
}

func (ReferenceVersionRulesCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[182]
}

func (x ReferenceVersionRulesCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReferenceVersionRulesCode_Value.Descriptor instead.
func (ReferenceVersionRulesCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{182, 0}
}

type RelatedArtifactTypeCode_Value int32

const (
	RelatedArtifactTypeCode_INVALID_UNINITIALIZED RelatedArtifactTypeCode_Value = 0
	RelatedArtifactTypeCode_DOCUMENTATION         RelatedArtifactTypeCode_Value = 1
	RelatedArtifactTypeCode_JUSTIFICATION         RelatedArtifactTypeCode_Value = 2
	RelatedArtifactTypeCode_CITATION              RelatedArtifactTypeCode_Value = 3
	RelatedArtifactTypeCode_PREDECESSOR           RelatedArtifactTypeCode_Value = 4
	RelatedArtifactTypeCode_SUCCESSOR             RelatedArtifactTypeCode_Value = 5
	RelatedArtifactTypeCode_DERIVED_FROM          RelatedArtifactTypeCode_Value = 6
	RelatedArtifactTypeCode_DEPENDS_ON            RelatedArtifactTypeCode_Value = 7
	RelatedArtifactTypeCode_COMPOSED_OF           RelatedArtifactTypeCode_Value = 8
	RelatedArtifactTypeCode_PART_OF               RelatedArtifactTypeCode_Value = 9
	RelatedArtifactTypeCode_AMENDS                RelatedArtifactTypeCode_Value = 10
	RelatedArtifactTypeCode_AMENDED_WITH          RelatedArtifactTypeCode_Value = 11
	RelatedArtifactTypeCode_APPENDS               RelatedArtifactTypeCode_Value = 12
	RelatedArtifactTypeCode_APPENDED_WITH         RelatedArtifactTypeCode_Value = 13
	RelatedArtifactTypeCode_CITES                 RelatedArtifactTypeCode_Value = 14
	RelatedArtifactTypeCode_CITED_BY              RelatedArtifactTypeCode_Value = 15
	RelatedArtifactTypeCode_COMMENTS_ON           RelatedArtifactTypeCode_Value = 16
	RelatedArtifactTypeCode_COMMENT_IN            RelatedArtifactTypeCode_Value = 17
	RelatedArtifactTypeCode_CONTAINS              RelatedArtifactTypeCode_Value = 18
	RelatedArtifactTypeCode_CONTAINED_IN          RelatedArtifactTypeCode_Value = 19
	RelatedArtifactTypeCode_CORRECTS              RelatedArtifactTypeCode_Value = 20
	RelatedArtifactTypeCode_CORRECTION_IN         RelatedArtifactTypeCode_Value = 21
	RelatedArtifactTypeCode_REPLACES              RelatedArtifactTypeCode_Value = 22
	RelatedArtifactTypeCode_REPLACED_WITH         RelatedArtifactTypeCode_Value = 23
	RelatedArtifactTypeCode_RETRACTS              RelatedArtifactTypeCode_Value = 24
	RelatedArtifactTypeCode_RETRACTED_BY          RelatedArtifactTypeCode_Value = 25
	RelatedArtifactTypeCode_SIGNS                 RelatedArtifactTypeCode_Value = 26
	RelatedArtifactTypeCode_SIMILAR_TO            RelatedArtifactTypeCode_Value = 27
	RelatedArtifactTypeCode_SUPPORTS              RelatedArtifactTypeCode_Value = 28
	RelatedArtifactTypeCode_SUPPORTED_WITH        RelatedArtifactTypeCode_Value = 29
	RelatedArtifactTypeCode_TRANSFORMS            RelatedArtifactTypeCode_Value = 30
	RelatedArtifactTypeCode_TRANSFORMED_INTO      RelatedArtifactTypeCode_Value = 31
	RelatedArtifactTypeCode_TRANSFORMED_WITH      RelatedArtifactTypeCode_Value = 32
	RelatedArtifactTypeCode_DOCUMENTS             RelatedArtifactTypeCode_Value = 33
	RelatedArtifactTypeCode_SPECIFICATION_OF      RelatedArtifactTypeCode_Value = 34
	RelatedArtifactTypeCode_CREATED_WITH          RelatedArtifactTypeCode_Value = 35
	RelatedArtifactTypeCode_CITE_AS               RelatedArtifactTypeCode_Value = 36
)

// Enum value maps for RelatedArtifactTypeCode_Value.
var (
	RelatedArtifactTypeCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "DOCUMENTATION",
		2:  "JUSTIFICATION",
		3:  "CITATION",
		4:  "PREDECESSOR",
		5:  "SUCCESSOR",
		6:  "DERIVED_FROM",
		7:  "DEPENDS_ON",
		8:  "COMPOSED_OF",
		9:  "PART_OF",
		10: "AMENDS",
		11: "AMENDED_WITH",
		12: "APPENDS",
		13: "APPENDED_WITH",
		14: "CITES",
		15: "CITED_BY",
		16: "COMMENTS_ON",
		17: "COMMENT_IN",
		18: "CONTAINS",
		19: "CONTAINED_IN",
		20: "CORRECTS",
		21: "CORRECTION_IN",
		22: "REPLACES",
		23: "REPLACED_WITH",
		24: "RETRACTS",
		25: "RETRACTED_BY",
		26: "SIGNS",
		27: "SIMILAR_TO",
		28: "SUPPORTS",
		29: "SUPPORTED_WITH",
		30: "TRANSFORMS",
		31: "TRANSFORMED_INTO",
		32: "TRANSFORMED_WITH",
		33: "DOCUMENTS",
		34: "SPECIFICATION_OF",
		35: "CREATED_WITH",
		36: "CITE_AS",
	}
	RelatedArtifactTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DOCUMENTATION":         1,
		"JUSTIFICATION":         2,
		"CITATION":              3,
		"PREDECESSOR":           4,
		"SUCCESSOR":             5,
		"DERIVED_FROM":          6,
		"DEPENDS_ON":            7,
		"COMPOSED_OF":           8,
		"PART_OF":               9,
		"AMENDS":                10,
		"AMENDED_WITH":          11,
		"APPENDS":               12,
		"APPENDED_WITH":         13,
		"CITES":                 14,
		"CITED_BY":              15,
		"COMMENTS_ON":           16,
		"COMMENT_IN":            17,
		"CONTAINS":              18,
		"CONTAINED_IN":          19,
		"CORRECTS":              20,
		"CORRECTION_IN":         21,
		"REPLACES":              22,
		"REPLACED_WITH":         23,
		"RETRACTS":              24,
		"RETRACTED_BY":          25,
		"SIGNS":                 26,
		"SIMILAR_TO":            27,
		"SUPPORTS":              28,
		"SUPPORTED_WITH":        29,
		"TRANSFORMS":            30,
		"TRANSFORMED_INTO":      31,
		"TRANSFORMED_WITH":      32,
		"DOCUMENTS":             33,
		"SPECIFICATION_OF":      34,
		"CREATED_WITH":          35,
		"CITE_AS":               36,
	}
)

func (x RelatedArtifactTypeCode_Value) Enum() *RelatedArtifactTypeCode_Value {
	p := new(RelatedArtifactTypeCode_Value)
	*p = x
	return p
}

func (x RelatedArtifactTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RelatedArtifactTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[183].Descriptor()
}

func (RelatedArtifactTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[183]
}

func (x RelatedArtifactTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RelatedArtifactTypeCode_Value.Descriptor instead.
func (RelatedArtifactTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{183, 0}
}

type RelatedArtifactTypeExpandedCode_Value int32

const (
	RelatedArtifactTypeExpandedCode_INVALID_UNINITIALIZED RelatedArtifactTypeExpandedCode_Value = 0
	RelatedArtifactTypeExpandedCode_REPRINT               RelatedArtifactTypeExpandedCode_Value = 1
	RelatedArtifactTypeExpandedCode_REPRINT_OF            RelatedArtifactTypeExpandedCode_Value = 2
)

// Enum value maps for RelatedArtifactTypeExpandedCode_Value.
var (
	RelatedArtifactTypeExpandedCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "REPRINT",
		2: "REPRINT_OF",
	}
	RelatedArtifactTypeExpandedCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"REPRINT":               1,
		"REPRINT_OF":            2,
	}
)

func (x RelatedArtifactTypeExpandedCode_Value) Enum() *RelatedArtifactTypeExpandedCode_Value {
	p := new(RelatedArtifactTypeExpandedCode_Value)
	*p = x
	return p
}

func (x RelatedArtifactTypeExpandedCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RelatedArtifactTypeExpandedCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[184].Descriptor()
}

func (RelatedArtifactTypeExpandedCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[184]
}

func (x RelatedArtifactTypeExpandedCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RelatedArtifactTypeExpandedCode_Value.Descriptor instead.
func (RelatedArtifactTypeExpandedCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{184, 0}
}

type ReportRelationshipTypeCode_Value int32

const (
	ReportRelationshipTypeCode_INVALID_UNINITIALIZED ReportRelationshipTypeCode_Value = 0
	ReportRelationshipTypeCode_REPLACES              ReportRelationshipTypeCode_Value = 1
	ReportRelationshipTypeCode_AMENDS                ReportRelationshipTypeCode_Value = 2
	ReportRelationshipTypeCode_APPENDS               ReportRelationshipTypeCode_Value = 3
	ReportRelationshipTypeCode_TRANSFORMS            ReportRelationshipTypeCode_Value = 4
	ReportRelationshipTypeCode_REPLACED_WITH         ReportRelationshipTypeCode_Value = 5
	ReportRelationshipTypeCode_AMENDED_WITH          ReportRelationshipTypeCode_Value = 6
	ReportRelationshipTypeCode_APPENDED_WITH         ReportRelationshipTypeCode_Value = 7
	ReportRelationshipTypeCode_TRANSFORMED_WITH      ReportRelationshipTypeCode_Value = 8
)

// Enum value maps for ReportRelationshipTypeCode_Value.
var (
	ReportRelationshipTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "REPLACES",
		2: "AMENDS",
		3: "APPENDS",
		4: "TRANSFORMS",
		5: "REPLACED_WITH",
		6: "AMENDED_WITH",
		7: "APPENDED_WITH",
		8: "TRANSFORMED_WITH",
	}
	ReportRelationshipTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"REPLACES":              1,
		"AMENDS":                2,
		"APPENDS":               3,
		"TRANSFORMS":            4,
		"REPLACED_WITH":         5,
		"AMENDED_WITH":          6,
		"APPENDED_WITH":         7,
		"TRANSFORMED_WITH":      8,
	}
)

func (x ReportRelationshipTypeCode_Value) Enum() *ReportRelationshipTypeCode_Value {
	p := new(ReportRelationshipTypeCode_Value)
	*p = x
	return p
}

func (x ReportRelationshipTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportRelationshipTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[185].Descriptor()
}

func (ReportRelationshipTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[185]
}

func (x ReportRelationshipTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReportRelationshipTypeCode_Value.Descriptor instead.
func (ReportRelationshipTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{185, 0}
}

type RequestIntentCode_Value int32

const (
	RequestIntentCode_INVALID_UNINITIALIZED RequestIntentCode_Value = 0
	RequestIntentCode_PROPOSAL              RequestIntentCode_Value = 1
	RequestIntentCode_PLAN                  RequestIntentCode_Value = 2
	RequestIntentCode_DIRECTIVE             RequestIntentCode_Value = 3
	RequestIntentCode_ORDER                 RequestIntentCode_Value = 4
	RequestIntentCode_ORIGINAL_ORDER        RequestIntentCode_Value = 5
	RequestIntentCode_REFLEX_ORDER          RequestIntentCode_Value = 6
	RequestIntentCode_FILLER_ORDER          RequestIntentCode_Value = 7
	RequestIntentCode_INSTANCE_ORDER        RequestIntentCode_Value = 8
	RequestIntentCode_OPTION                RequestIntentCode_Value = 9
)

// Enum value maps for RequestIntentCode_Value.
var (
	RequestIntentCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PROPOSAL",
		2: "PLAN",
		3: "DIRECTIVE",
		4: "ORDER",
		5: "ORIGINAL_ORDER",
		6: "REFLEX_ORDER",
		7: "FILLER_ORDER",
		8: "INSTANCE_ORDER",
		9: "OPTION",
	}
	RequestIntentCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PROPOSAL":              1,
		"PLAN":                  2,
		"DIRECTIVE":             3,
		"ORDER":                 4,
		"ORIGINAL_ORDER":        5,
		"REFLEX_ORDER":          6,
		"FILLER_ORDER":          7,
		"INSTANCE_ORDER":        8,
		"OPTION":                9,
	}
)

func (x RequestIntentCode_Value) Enum() *RequestIntentCode_Value {
	p := new(RequestIntentCode_Value)
	*p = x
	return p
}

func (x RequestIntentCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestIntentCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[186].Descriptor()
}

func (RequestIntentCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[186]
}

func (x RequestIntentCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestIntentCode_Value.Descriptor instead.
func (RequestIntentCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{186, 0}
}

type RequestPriorityCode_Value int32

const (
	RequestPriorityCode_INVALID_UNINITIALIZED RequestPriorityCode_Value = 0
	RequestPriorityCode_ROUTINE               RequestPriorityCode_Value = 1
	RequestPriorityCode_URGENT                RequestPriorityCode_Value = 2
	RequestPriorityCode_ASAP                  RequestPriorityCode_Value = 3
	RequestPriorityCode_STAT                  RequestPriorityCode_Value = 4
)

// Enum value maps for RequestPriorityCode_Value.
var (
	RequestPriorityCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ROUTINE",
		2: "URGENT",
		3: "ASAP",
		4: "STAT",
	}
	RequestPriorityCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ROUTINE":               1,
		"URGENT":                2,
		"ASAP":                  3,
		"STAT":                  4,
	}
)

func (x RequestPriorityCode_Value) Enum() *RequestPriorityCode_Value {
	p := new(RequestPriorityCode_Value)
	*p = x
	return p
}

func (x RequestPriorityCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestPriorityCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[187].Descriptor()
}

func (RequestPriorityCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[187]
}

func (x RequestPriorityCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestPriorityCode_Value.Descriptor instead.
func (RequestPriorityCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{187, 0}
}

type RequestStatusCode_Value int32

const (
	RequestStatusCode_INVALID_UNINITIALIZED RequestStatusCode_Value = 0
	RequestStatusCode_DRAFT                 RequestStatusCode_Value = 1
	RequestStatusCode_ACTIVE                RequestStatusCode_Value = 2
	RequestStatusCode_ON_HOLD               RequestStatusCode_Value = 3
	RequestStatusCode_REVOKED               RequestStatusCode_Value = 4
	RequestStatusCode_COMPLETED             RequestStatusCode_Value = 5
	RequestStatusCode_ENTERED_IN_ERROR      RequestStatusCode_Value = 6
	RequestStatusCode_UNKNOWN               RequestStatusCode_Value = 7
)

// Enum value maps for RequestStatusCode_Value.
var (
	RequestStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DRAFT",
		2: "ACTIVE",
		3: "ON_HOLD",
		4: "REVOKED",
		5: "COMPLETED",
		6: "ENTERED_IN_ERROR",
		7: "UNKNOWN",
	}
	RequestStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DRAFT":                 1,
		"ACTIVE":                2,
		"ON_HOLD":               3,
		"REVOKED":               4,
		"COMPLETED":             5,
		"ENTERED_IN_ERROR":      6,
		"UNKNOWN":               7,
	}
)

func (x RequestStatusCode_Value) Enum() *RequestStatusCode_Value {
	p := new(RequestStatusCode_Value)
	*p = x
	return p
}

func (x RequestStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[188].Descriptor()
}

func (RequestStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[188]
}

func (x RequestStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestStatusCode_Value.Descriptor instead.
func (RequestStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{188, 0}
}

type ResourceVersionPolicyCode_Value int32

const (
	ResourceVersionPolicyCode_INVALID_UNINITIALIZED ResourceVersionPolicyCode_Value = 0
	ResourceVersionPolicyCode_NO_VERSION            ResourceVersionPolicyCode_Value = 1
	ResourceVersionPolicyCode_VERSIONED             ResourceVersionPolicyCode_Value = 2
	ResourceVersionPolicyCode_VERSIONED_UPDATE      ResourceVersionPolicyCode_Value = 3
)

// Enum value maps for ResourceVersionPolicyCode_Value.
var (
	ResourceVersionPolicyCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "NO_VERSION",
		2: "VERSIONED",
		3: "VERSIONED_UPDATE",
	}
	ResourceVersionPolicyCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NO_VERSION":            1,
		"VERSIONED":             2,
		"VERSIONED_UPDATE":      3,
	}
)

func (x ResourceVersionPolicyCode_Value) Enum() *ResourceVersionPolicyCode_Value {
	p := new(ResourceVersionPolicyCode_Value)
	*p = x
	return p
}

func (x ResourceVersionPolicyCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceVersionPolicyCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[189].Descriptor()
}

func (ResourceVersionPolicyCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[189]
}

func (x ResourceVersionPolicyCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceVersionPolicyCode_Value.Descriptor instead.
func (ResourceVersionPolicyCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{189, 0}
}

type ResponseTypeCode_Value int32

const (
	ResponseTypeCode_INVALID_UNINITIALIZED ResponseTypeCode_Value = 0
	ResponseTypeCode_OK                    ResponseTypeCode_Value = 1
	ResponseTypeCode_TRANSIENT_ERROR       ResponseTypeCode_Value = 2
	ResponseTypeCode_FATAL_ERROR           ResponseTypeCode_Value = 3
)

// Enum value maps for ResponseTypeCode_Value.
var (
	ResponseTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "OK",
		2: "TRANSIENT_ERROR",
		3: "FATAL_ERROR",
	}
	ResponseTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"OK":                    1,
		"TRANSIENT_ERROR":       2,
		"FATAL_ERROR":           3,
	}
)

func (x ResponseTypeCode_Value) Enum() *ResponseTypeCode_Value {
	p := new(ResponseTypeCode_Value)
	*p = x
	return p
}

func (x ResponseTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[190].Descriptor()
}

func (ResponseTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[190]
}

func (x ResponseTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseTypeCode_Value.Descriptor instead.
func (ResponseTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{190, 0}
}

type RestfulCapabilityModeCode_Value int32

const (
	RestfulCapabilityModeCode_INVALID_UNINITIALIZED RestfulCapabilityModeCode_Value = 0
	RestfulCapabilityModeCode_CLIENT                RestfulCapabilityModeCode_Value = 1
	RestfulCapabilityModeCode_SERVER                RestfulCapabilityModeCode_Value = 2
)

// Enum value maps for RestfulCapabilityModeCode_Value.
var (
	RestfulCapabilityModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CLIENT",
		2: "SERVER",
	}
	RestfulCapabilityModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CLIENT":                1,
		"SERVER":                2,
	}
)

func (x RestfulCapabilityModeCode_Value) Enum() *RestfulCapabilityModeCode_Value {
	p := new(RestfulCapabilityModeCode_Value)
	*p = x
	return p
}

func (x RestfulCapabilityModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RestfulCapabilityModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[191].Descriptor()
}

func (RestfulCapabilityModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[191]
}

func (x RestfulCapabilityModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RestfulCapabilityModeCode_Value.Descriptor instead.
func (RestfulCapabilityModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{191, 0}
}

type SPDXLicenseCode_Value int32

const (
	SPDXLicenseCode_INVALID_UNINITIALIZED                SPDXLicenseCode_Value = 0
	SPDXLicenseCode_NOT_OPEN_SOURCE                      SPDXLicenseCode_Value = 1
	SPDXLicenseCode_BSD_ZERO_CLAUSE_LICENSE              SPDXLicenseCode_Value = 2
	SPDXLicenseCode_AAL                                  SPDXLicenseCode_Value = 3
	SPDXLicenseCode_ABSTYLES                             SPDXLicenseCode_Value = 4
	SPDXLicenseCode_ADOBE_2006                           SPDXLicenseCode_Value = 5
	SPDXLicenseCode_ADOBE_GLYPH                          SPDXLicenseCode_Value = 6
	SPDXLicenseCode_ADSL                                 SPDXLicenseCode_Value = 7
	SPDXLicenseCode_AFL_1_1                              SPDXLicenseCode_Value = 8
	SPDXLicenseCode_AFL_1_2                              SPDXLicenseCode_Value = 9
	SPDXLicenseCode_AFL_2_0                              SPDXLicenseCode_Value = 10
	SPDXLicenseCode_AFL_2_1                              SPDXLicenseCode_Value = 11
	SPDXLicenseCode_AFL_3_0                              SPDXLicenseCode_Value = 12
	SPDXLicenseCode_AFMPARSE                             SPDXLicenseCode_Value = 13
	SPDXLicenseCode_AGPL_1_0_ONLY                        SPDXLicenseCode_Value = 14
	SPDXLicenseCode_AGPL_1_0_OR_LATER                    SPDXLicenseCode_Value = 15
	SPDXLicenseCode_AGPL_3_0_ONLY                        SPDXLicenseCode_Value = 16
	SPDXLicenseCode_AGPL_3_0_OR_LATER                    SPDXLicenseCode_Value = 17
	SPDXLicenseCode_ALADDIN                              SPDXLicenseCode_Value = 18
	SPDXLicenseCode_AMDPLPA                              SPDXLicenseCode_Value = 19
	SPDXLicenseCode_AML                                  SPDXLicenseCode_Value = 20
	SPDXLicenseCode_AMPAS                                SPDXLicenseCode_Value = 21
	SPDXLicenseCode_ANTLR_PD                             SPDXLicenseCode_Value = 22
	SPDXLicenseCode_APACHE_1_0                           SPDXLicenseCode_Value = 23
	SPDXLicenseCode_APACHE_1_1                           SPDXLicenseCode_Value = 24
	SPDXLicenseCode_APACHE_2_0                           SPDXLicenseCode_Value = 25
	SPDXLicenseCode_APAFML                               SPDXLicenseCode_Value = 26
	SPDXLicenseCode_APL_1_0                              SPDXLicenseCode_Value = 27
	SPDXLicenseCode_APSL_1_0                             SPDXLicenseCode_Value = 28
	SPDXLicenseCode_APSL_1_1                             SPDXLicenseCode_Value = 29
	SPDXLicenseCode_APSL_1_2                             SPDXLicenseCode_Value = 30
	SPDXLicenseCode_APSL_2_0                             SPDXLicenseCode_Value = 31
	SPDXLicenseCode_ARTISTIC_1_0_CL8                     SPDXLicenseCode_Value = 32
	SPDXLicenseCode_ARTISTIC_1_0_PERL                    SPDXLicenseCode_Value = 33
	SPDXLicenseCode_ARTISTIC_1_0                         SPDXLicenseCode_Value = 34
	SPDXLicenseCode_ARTISTIC_2_0                         SPDXLicenseCode_Value = 35
	SPDXLicenseCode_BAHYPH                               SPDXLicenseCode_Value = 36
	SPDXLicenseCode_BARR                                 SPDXLicenseCode_Value = 37
	SPDXLicenseCode_BEERWARE                             SPDXLicenseCode_Value = 38
	SPDXLicenseCode_BIT_TORRENT_1_0                      SPDXLicenseCode_Value = 39
	SPDXLicenseCode_BIT_TORRENT_1_1                      SPDXLicenseCode_Value = 40
	SPDXLicenseCode_BORCEUX                              SPDXLicenseCode_Value = 41
	SPDXLicenseCode_BSD_1_CLAUSE                         SPDXLicenseCode_Value = 42
	SPDXLicenseCode_BSD_2_CLAUSE_FREE_BSD                SPDXLicenseCode_Value = 43
	SPDXLicenseCode_BSD_2_CLAUSE_NET_BSD                 SPDXLicenseCode_Value = 44
	SPDXLicenseCode_BSD_2_CLAUSE_PATENT                  SPDXLicenseCode_Value = 45
	SPDXLicenseCode_BSD_2_CLAUSE                         SPDXLicenseCode_Value = 46
	SPDXLicenseCode_BSD_3_CLAUSE_ATTRIBUTION             SPDXLicenseCode_Value = 47
	SPDXLicenseCode_BSD_3_CLAUSE_CLEAR                   SPDXLicenseCode_Value = 48
	SPDXLicenseCode_BSD_3_CLAUSE_LBNL                    SPDXLicenseCode_Value = 49
	SPDXLicenseCode_BSD_3_CLAUSE_NO_NUCLEAR_LICENSE_2014 SPDXLicenseCode_Value = 50
	SPDXLicenseCode_BSD_3_CLAUSE_NO_NUCLEAR_LICENSE      SPDXLicenseCode_Value = 51
	SPDXLicenseCode_BSD_3_CLAUSE_NO_NUCLEAR_WARRANTY     SPDXLicenseCode_Value = 52
	SPDXLicenseCode_BSD_3_CLAUSE                         SPDXLicenseCode_Value = 53
	SPDXLicenseCode_BSD_4_CLAUSE_UC                      SPDXLicenseCode_Value = 54
	SPDXLicenseCode_BSD_4_CLAUSE                         SPDXLicenseCode_Value = 55
	SPDXLicenseCode_BSD_PROTECTION                       SPDXLicenseCode_Value = 56
	SPDXLicenseCode_BSD_SOURCE_CODE                      SPDXLicenseCode_Value = 57
	SPDXLicenseCode_BSL_1_0                              SPDXLicenseCode_Value = 58
	SPDXLicenseCode_BZIP2_1_0_5                          SPDXLicenseCode_Value = 59
	SPDXLicenseCode_BZIP2_1_0_6                          SPDXLicenseCode_Value = 60
	SPDXLicenseCode_CALDERA                              SPDXLicenseCode_Value = 61
	SPDXLicenseCode_CATOSL_1_1                           SPDXLicenseCode_Value = 62
	SPDXLicenseCode_CC_BY_1_0                            SPDXLicenseCode_Value = 63
	SPDXLicenseCode_CC_BY_2_0                            SPDXLicenseCode_Value = 64
	SPDXLicenseCode_CC_BY_2_5                            SPDXLicenseCode_Value = 65
	SPDXLicenseCode_CC_BY_3_0                            SPDXLicenseCode_Value = 66
	SPDXLicenseCode_CC_BY_4_0                            SPDXLicenseCode_Value = 67
	SPDXLicenseCode_CC_BY_NC_1_0                         SPDXLicenseCode_Value = 68
	SPDXLicenseCode_CC_BY_NC_2_0                         SPDXLicenseCode_Value = 69
	SPDXLicenseCode_CC_BY_NC_2_5                         SPDXLicenseCode_Value = 70
	SPDXLicenseCode_CC_BY_NC_3_0                         SPDXLicenseCode_Value = 71
	SPDXLicenseCode_CC_BY_NC_4_0                         SPDXLicenseCode_Value = 72
	SPDXLicenseCode_CC_BY_NC_ND_1_0                      SPDXLicenseCode_Value = 73
	SPDXLicenseCode_CC_BY_NC_ND_2_0                      SPDXLicenseCode_Value = 74
	SPDXLicenseCode_CC_BY_NC_ND_2_5                      SPDXLicenseCode_Value = 75
	SPDXLicenseCode_CC_BY_NC_ND_3_0                      SPDXLicenseCode_Value = 76
	SPDXLicenseCode_CC_BY_NC_ND_4_0                      SPDXLicenseCode_Value = 77
	SPDXLicenseCode_CC_BY_NC_SA_1_0                      SPDXLicenseCode_Value = 78
	SPDXLicenseCode_CC_BY_NC_SA_2_0                      SPDXLicenseCode_Value = 79
	SPDXLicenseCode_CC_BY_NC_SA_2_5                      SPDXLicenseCode_Value = 80
	SPDXLicenseCode_CC_BY_NC_SA_3_0                      SPDXLicenseCode_Value = 81
	SPDXLicenseCode_CC_BY_NC_SA_4_0                      SPDXLicenseCode_Value = 82
	SPDXLicenseCode_CC_BY_ND_1_0                         SPDXLicenseCode_Value = 83
	SPDXLicenseCode_CC_BY_ND_2_0                         SPDXLicenseCode_Value = 84
	SPDXLicenseCode_CC_BY_ND_2_5                         SPDXLicenseCode_Value = 85
	SPDXLicenseCode_CC_BY_ND_3_0                         SPDXLicenseCode_Value = 86
	SPDXLicenseCode_CC_BY_ND_4_0                         SPDXLicenseCode_Value = 87
	SPDXLicenseCode_CC_BY_SA_1_0                         SPDXLicenseCode_Value = 88
	SPDXLicenseCode_CC_BY_SA_2_0                         SPDXLicenseCode_Value = 89
	SPDXLicenseCode_CC_BY_SA_2_5                         SPDXLicenseCode_Value = 90
	SPDXLicenseCode_CC_BY_SA_3_0                         SPDXLicenseCode_Value = 91
	SPDXLicenseCode_CC_BY_SA_4_0                         SPDXLicenseCode_Value = 92
	SPDXLicenseCode_CC0_1_0                              SPDXLicenseCode_Value = 93
	SPDXLicenseCode_CDDL_1_0                             SPDXLicenseCode_Value = 94
	SPDXLicenseCode_CDDL_1_1                             SPDXLicenseCode_Value = 95
	SPDXLicenseCode_CDLA_PERMISSIVE_1_0                  SPDXLicenseCode_Value = 96
	SPDXLicenseCode_CDLA_SHARING_1_0                     SPDXLicenseCode_Value = 97
	SPDXLicenseCode_CECILL_1_0                           SPDXLicenseCode_Value = 98
	SPDXLicenseCode_CECILL_1_1                           SPDXLicenseCode_Value = 99
	SPDXLicenseCode_CECILL_2_0                           SPDXLicenseCode_Value = 100
	SPDXLicenseCode_CECILL_2_1                           SPDXLicenseCode_Value = 101
	SPDXLicenseCode_CECILL_B                             SPDXLicenseCode_Value = 102
	SPDXLicenseCode_CECILL_C                             SPDXLicenseCode_Value = 103
	SPDXLicenseCode_CL_ARTISTIC                          SPDXLicenseCode_Value = 104
	SPDXLicenseCode_CNRI_JYTHON                          SPDXLicenseCode_Value = 105
	SPDXLicenseCode_CNRI_PYTHON_GPL_COMPATIBLE           SPDXLicenseCode_Value = 106
	SPDXLicenseCode_CNRI_PYTHON                          SPDXLicenseCode_Value = 107
	SPDXLicenseCode_CONDOR_1_1                           SPDXLicenseCode_Value = 108
	SPDXLicenseCode_CPAL_1_0                             SPDXLicenseCode_Value = 109
	SPDXLicenseCode_CPL_1_0                              SPDXLicenseCode_Value = 110
	SPDXLicenseCode_CPOL_1_02                            SPDXLicenseCode_Value = 111
	SPDXLicenseCode_CROSSWORD                            SPDXLicenseCode_Value = 112
	SPDXLicenseCode_CRYSTAL_STACKER                      SPDXLicenseCode_Value = 113
	SPDXLicenseCode_CUA_OPL_1_0                          SPDXLicenseCode_Value = 114
	SPDXLicenseCode_CUBE                                 SPDXLicenseCode_Value = 115
	SPDXLicenseCode_CURL                                 SPDXLicenseCode_Value = 116
	SPDXLicenseCode_D_FSL_1_0                            SPDXLicenseCode_Value = 117
	SPDXLicenseCode_DIFFMARK                             SPDXLicenseCode_Value = 118
	SPDXLicenseCode_DOC                                  SPDXLicenseCode_Value = 119
	SPDXLicenseCode_DOTSEQN                              SPDXLicenseCode_Value = 120
	SPDXLicenseCode_DSDP                                 SPDXLicenseCode_Value = 121
	SPDXLicenseCode_DVIPDFM                              SPDXLicenseCode_Value = 122
	SPDXLicenseCode_ECL_1_0                              SPDXLicenseCode_Value = 123
	SPDXLicenseCode_ECL_2_0                              SPDXLicenseCode_Value = 124
	SPDXLicenseCode_EFL_1_0                              SPDXLicenseCode_Value = 125
	SPDXLicenseCode_EFL_2_0                              SPDXLicenseCode_Value = 126
	SPDXLicenseCode_E_GENIX                              SPDXLicenseCode_Value = 127
	SPDXLicenseCode_ENTESSA                              SPDXLicenseCode_Value = 128
	SPDXLicenseCode_EPL_1_0                              SPDXLicenseCode_Value = 129
	SPDXLicenseCode_EPL_2_0                              SPDXLicenseCode_Value = 130
	SPDXLicenseCode_ERL_PL_1_1                           SPDXLicenseCode_Value = 131
	SPDXLicenseCode_EU_DATAGRID                          SPDXLicenseCode_Value = 132
	SPDXLicenseCode_EUPL_1_0                             SPDXLicenseCode_Value = 133
	SPDXLicenseCode_EUPL_1_1                             SPDXLicenseCode_Value = 134
	SPDXLicenseCode_EUPL_1_2                             SPDXLicenseCode_Value = 135
	SPDXLicenseCode_EUROSYM                              SPDXLicenseCode_Value = 136
	SPDXLicenseCode_FAIR                                 SPDXLicenseCode_Value = 137
	SPDXLicenseCode_FRAMEWORX_1_0                        SPDXLicenseCode_Value = 138
	SPDXLicenseCode_FREE_IMAGE                           SPDXLicenseCode_Value = 139
	SPDXLicenseCode_FSFAP                                SPDXLicenseCode_Value = 140
	SPDXLicenseCode_FSFUL                                SPDXLicenseCode_Value = 141
	SPDXLicenseCode_FSFULLR                              SPDXLicenseCode_Value = 142
	SPDXLicenseCode_FTL                                  SPDXLicenseCode_Value = 143
	SPDXLicenseCode_GFDL_1_1_ONLY                        SPDXLicenseCode_Value = 144
	SPDXLicenseCode_GFDL_1_1_OR_LATER                    SPDXLicenseCode_Value = 145
	SPDXLicenseCode_GFDL_1_2_ONLY                        SPDXLicenseCode_Value = 146
	SPDXLicenseCode_GFDL_1_2_OR_LATER                    SPDXLicenseCode_Value = 147
	SPDXLicenseCode_GFDL_1_3_ONLY                        SPDXLicenseCode_Value = 148
	SPDXLicenseCode_GFDL_1_3_OR_LATER                    SPDXLicenseCode_Value = 149
	SPDXLicenseCode_GIFTWARE                             SPDXLicenseCode_Value = 150
	SPDXLicenseCode_GL2PS                                SPDXLicenseCode_Value = 151
	SPDXLicenseCode_GLIDE                                SPDXLicenseCode_Value = 152
	SPDXLicenseCode_GLULXE                               SPDXLicenseCode_Value = 153
	SPDXLicenseCode_GNUPLOT                              SPDXLicenseCode_Value = 154
	SPDXLicenseCode_GPL_1_0_ONLY                         SPDXLicenseCode_Value = 155
	SPDXLicenseCode_GPL_1_0_OR_LATER                     SPDXLicenseCode_Value = 156
	SPDXLicenseCode_GPL_2_0_ONLY                         SPDXLicenseCode_Value = 157
	SPDXLicenseCode_GPL_2_0_OR_LATER                     SPDXLicenseCode_Value = 158
	SPDXLicenseCode_GPL_3_0_ONLY                         SPDXLicenseCode_Value = 159
	SPDXLicenseCode_GPL_3_0_OR_LATER                     SPDXLicenseCode_Value = 160
	SPDXLicenseCode_G_SOAP_1_3B                          SPDXLicenseCode_Value = 161
	SPDXLicenseCode_HASKELL_REPORT                       SPDXLicenseCode_Value = 162
	SPDXLicenseCode_HPND                                 SPDXLicenseCode_Value = 163
	SPDXLicenseCode_IBM_PIBS                             SPDXLicenseCode_Value = 164
	SPDXLicenseCode_ICU                                  SPDXLicenseCode_Value = 165
	SPDXLicenseCode_IJG                                  SPDXLicenseCode_Value = 166
	SPDXLicenseCode_IMAGE_MAGICK                         SPDXLicenseCode_Value = 167
	SPDXLicenseCode_I_MATIX                              SPDXLicenseCode_Value = 168
	SPDXLicenseCode_IMLIB2                               SPDXLicenseCode_Value = 169
	SPDXLicenseCode_INFO_ZIP                             SPDXLicenseCode_Value = 170
	SPDXLicenseCode_INTEL_ACPI                           SPDXLicenseCode_Value = 171
	SPDXLicenseCode_INTEL                                SPDXLicenseCode_Value = 172
	SPDXLicenseCode_INTERBASE_1_0                        SPDXLicenseCode_Value = 173
	SPDXLicenseCode_IPA                                  SPDXLicenseCode_Value = 174
	SPDXLicenseCode_IPL_1_0                              SPDXLicenseCode_Value = 175
	SPDXLicenseCode_ISC                                  SPDXLicenseCode_Value = 176
	SPDXLicenseCode_JAS_PER_2_0                          SPDXLicenseCode_Value = 177
	SPDXLicenseCode_JSON                                 SPDXLicenseCode_Value = 178
	SPDXLicenseCode_LAL_1_2                              SPDXLicenseCode_Value = 179
	SPDXLicenseCode_LAL_1_3                              SPDXLicenseCode_Value = 180
	SPDXLicenseCode_LATEX2E                              SPDXLicenseCode_Value = 181
	SPDXLicenseCode_LEPTONICA                            SPDXLicenseCode_Value = 182
	SPDXLicenseCode_LGPL_2_0_ONLY                        SPDXLicenseCode_Value = 183
	SPDXLicenseCode_LGPL_2_0_OR_LATER                    SPDXLicenseCode_Value = 184
	SPDXLicenseCode_LGPL_2_1_ONLY                        SPDXLicenseCode_Value = 185
	SPDXLicenseCode_LGPL_2_1_OR_LATER                    SPDXLicenseCode_Value = 186
	SPDXLicenseCode_LGPL_3_0_ONLY                        SPDXLicenseCode_Value = 187
	SPDXLicenseCode_LGPL_3_0_OR_LATER                    SPDXLicenseCode_Value = 188
	SPDXLicenseCode_LGPLLR                               SPDXLicenseCode_Value = 189
	SPDXLicenseCode_LIBPNG                               SPDXLicenseCode_Value = 190
	SPDXLicenseCode_LIBTIFF                              SPDXLicenseCode_Value = 191
	SPDXLicenseCode_LI_LI_Q_P_1_1                        SPDXLicenseCode_Value = 192
	SPDXLicenseCode_LI_LI_Q_R_1_1                        SPDXLicenseCode_Value = 193
	SPDXLicenseCode_LI_LI_Q_RPLUS_1_1                    SPDXLicenseCode_Value = 194
	SPDXLicenseCode_LINUX_OPEN_IB                        SPDXLicenseCode_Value = 195
	SPDXLicenseCode_LPL_1_0                              SPDXLicenseCode_Value = 196
	SPDXLicenseCode_LPL_1_02                             SPDXLicenseCode_Value = 197
	SPDXLicenseCode_LPPL_1_0                             SPDXLicenseCode_Value = 198
	SPDXLicenseCode_LPPL_1_1                             SPDXLicenseCode_Value = 199
	SPDXLicenseCode_LPPL_1_2                             SPDXLicenseCode_Value = 200
	SPDXLicenseCode_LPPL_1_3A                            SPDXLicenseCode_Value = 201
	SPDXLicenseCode_LPPL_1_3C                            SPDXLicenseCode_Value = 202
	SPDXLicenseCode_MAKE_INDEX                           SPDXLicenseCode_Value = 203
	SPDXLicenseCode_MIR_OS                               SPDXLicenseCode_Value = 204
	SPDXLicenseCode_MIT_0                                SPDXLicenseCode_Value = 205
	SPDXLicenseCode_MIT_ADVERTISING                      SPDXLicenseCode_Value = 206
	SPDXLicenseCode_MIT_CMU                              SPDXLicenseCode_Value = 207
	SPDXLicenseCode_MIT_ENNA                             SPDXLicenseCode_Value = 208
	SPDXLicenseCode_MIT_FEH                              SPDXLicenseCode_Value = 209
	SPDXLicenseCode_MIT                                  SPDXLicenseCode_Value = 210
	SPDXLicenseCode_MITNFA                               SPDXLicenseCode_Value = 211
	SPDXLicenseCode_MOTOSOTO                             SPDXLicenseCode_Value = 212
	SPDXLicenseCode_MPICH2                               SPDXLicenseCode_Value = 213
	SPDXLicenseCode_MPL_1_0                              SPDXLicenseCode_Value = 214
	SPDXLicenseCode_MPL_1_1                              SPDXLicenseCode_Value = 215
	SPDXLicenseCode_MPL_2_0_NO_COPYLEFT_EXCEPTION        SPDXLicenseCode_Value = 216
	SPDXLicenseCode_MPL_2_0                              SPDXLicenseCode_Value = 217
	SPDXLicenseCode_MS_PL                                SPDXLicenseCode_Value = 218
	SPDXLicenseCode_MS_RL                                SPDXLicenseCode_Value = 219
	SPDXLicenseCode_MTLL                                 SPDXLicenseCode_Value = 220
	SPDXLicenseCode_MULTICS                              SPDXLicenseCode_Value = 221
	SPDXLicenseCode_MUP                                  SPDXLicenseCode_Value = 222
	SPDXLicenseCode_NASA_1_3                             SPDXLicenseCode_Value = 223
	SPDXLicenseCode_NAUMEN                               SPDXLicenseCode_Value = 224
	SPDXLicenseCode_NBPL_1_0                             SPDXLicenseCode_Value = 225
	SPDXLicenseCode_NCSA                                 SPDXLicenseCode_Value = 226
	SPDXLicenseCode_NET_SNMP                             SPDXLicenseCode_Value = 227
	SPDXLicenseCode_NET_CDF                              SPDXLicenseCode_Value = 228
	SPDXLicenseCode_NEWSLETR                             SPDXLicenseCode_Value = 229
	SPDXLicenseCode_NGPL                                 SPDXLicenseCode_Value = 230
	SPDXLicenseCode_NLOD_1_0                             SPDXLicenseCode_Value = 231
	SPDXLicenseCode_NLPL                                 SPDXLicenseCode_Value = 232
	SPDXLicenseCode_NOKIA                                SPDXLicenseCode_Value = 233
	SPDXLicenseCode_NOSL                                 SPDXLicenseCode_Value = 234
	SPDXLicenseCode_NOWEB                                SPDXLicenseCode_Value = 235
	SPDXLicenseCode_NPL_1_0                              SPDXLicenseCode_Value = 236
	SPDXLicenseCode_NPL_1_1                              SPDXLicenseCode_Value = 237
	SPDXLicenseCode_NPOSL_3_0                            SPDXLicenseCode_Value = 238
	SPDXLicenseCode_NRL                                  SPDXLicenseCode_Value = 239
	SPDXLicenseCode_NTP                                  SPDXLicenseCode_Value = 240
	SPDXLicenseCode_OCCT_PL                              SPDXLicenseCode_Value = 241
	SPDXLicenseCode_OCLC_2_0                             SPDXLicenseCode_Value = 242
	SPDXLicenseCode_O_DB_L_1_0                           SPDXLicenseCode_Value = 243
	SPDXLicenseCode_OFL_1_0                              SPDXLicenseCode_Value = 244
	SPDXLicenseCode_OFL_1_1                              SPDXLicenseCode_Value = 245
	SPDXLicenseCode_OGTSL                                SPDXLicenseCode_Value = 246
	SPDXLicenseCode_OLDAP_1_1                            SPDXLicenseCode_Value = 247
	SPDXLicenseCode_OLDAP_1_2                            SPDXLicenseCode_Value = 248
	SPDXLicenseCode_OLDAP_1_3                            SPDXLicenseCode_Value = 249
	SPDXLicenseCode_OLDAP_1_4                            SPDXLicenseCode_Value = 250
	SPDXLicenseCode_OLDAP_2_0_1                          SPDXLicenseCode_Value = 251
	SPDXLicenseCode_OLDAP_2_0                            SPDXLicenseCode_Value = 252
	SPDXLicenseCode_OLDAP_2_1                            SPDXLicenseCode_Value = 253
	SPDXLicenseCode_OLDAP_2_2_1                          SPDXLicenseCode_Value = 254
	SPDXLicenseCode_OLDAP_2_2_2                          SPDXLicenseCode_Value = 255
	SPDXLicenseCode_OLDAP_2_2                            SPDXLicenseCode_Value = 256
	SPDXLicenseCode_OLDAP_2_3                            SPDXLicenseCode_Value = 257
	SPDXLicenseCode_OLDAP_2_4                            SPDXLicenseCode_Value = 258
	SPDXLicenseCode_OLDAP_2_5                            SPDXLicenseCode_Value = 259
	SPDXLicenseCode_OLDAP_2_6                            SPDXLicenseCode_Value = 260
	SPDXLicenseCode_OLDAP_2_7                            SPDXLicenseCode_Value = 261
	SPDXLicenseCode_OLDAP_2_8                            SPDXLicenseCode_Value = 262
	SPDXLicenseCode_OML                                  SPDXLicenseCode_Value = 263
	SPDXLicenseCode_OPEN_SSL                             SPDXLicenseCode_Value = 264
	SPDXLicenseCode_OPL_1_0                              SPDXLicenseCode_Value = 265
	SPDXLicenseCode_OSET_PL_2_1                          SPDXLicenseCode_Value = 266
	SPDXLicenseCode_OSL_1_0                              SPDXLicenseCode_Value = 267
	SPDXLicenseCode_OSL_1_1                              SPDXLicenseCode_Value = 268
	SPDXLicenseCode_OSL_2_0                              SPDXLicenseCode_Value = 269
	SPDXLicenseCode_OSL_2_1                              SPDXLicenseCode_Value = 270
	SPDXLicenseCode_OSL_3_0                              SPDXLicenseCode_Value = 271
	SPDXLicenseCode_PDDL_1_0                             SPDXLicenseCode_Value = 272
	SPDXLicenseCode_PHP_3_0                              SPDXLicenseCode_Value = 273
	SPDXLicenseCode_PHP_3_01                             SPDXLicenseCode_Value = 274
	SPDXLicenseCode_PLEXUS                               SPDXLicenseCode_Value = 275
	SPDXLicenseCode_POSTGRE_SQL                          SPDXLicenseCode_Value = 276
	SPDXLicenseCode_PSFRAG                               SPDXLicenseCode_Value = 277
	SPDXLicenseCode_PSUTILS                              SPDXLicenseCode_Value = 278
	SPDXLicenseCode_PYTHON_2_0                           SPDXLicenseCode_Value = 279
	SPDXLicenseCode_QHULL                                SPDXLicenseCode_Value = 280
	SPDXLicenseCode_QPL_1_0                              SPDXLicenseCode_Value = 281
	SPDXLicenseCode_RDISC                                SPDXLicenseCode_Value = 282
	SPDXLicenseCode_R_HE_COS_1_1                         SPDXLicenseCode_Value = 283
	SPDXLicenseCode_RPL_1_1                              SPDXLicenseCode_Value = 284
	SPDXLicenseCode_RPL_1_5                              SPDXLicenseCode_Value = 285
	SPDXLicenseCode_RPSL_1_0                             SPDXLicenseCode_Value = 286
	SPDXLicenseCode_RSA_MD                               SPDXLicenseCode_Value = 287
	SPDXLicenseCode_RSCPL                                SPDXLicenseCode_Value = 288
	SPDXLicenseCode_RUBY                                 SPDXLicenseCode_Value = 289
	SPDXLicenseCode_SAX_PD                               SPDXLicenseCode_Value = 290
	SPDXLicenseCode_SAXPATH                              SPDXLicenseCode_Value = 291
	SPDXLicenseCode_SCEA                                 SPDXLicenseCode_Value = 292
	SPDXLicenseCode_SENDMAIL                             SPDXLicenseCode_Value = 293
	SPDXLicenseCode_SGI_B_1_0                            SPDXLicenseCode_Value = 294
	SPDXLicenseCode_SGI_B_1_1                            SPDXLicenseCode_Value = 295
	SPDXLicenseCode_SGI_B_2_0                            SPDXLicenseCode_Value = 296
	SPDXLicenseCode_SIM_PL_2_0                           SPDXLicenseCode_Value = 297
	SPDXLicenseCode_SISSL_1_2                            SPDXLicenseCode_Value = 298
	SPDXLicenseCode_SISSL                                SPDXLicenseCode_Value = 299
	SPDXLicenseCode_SLEEPYCAT                            SPDXLicenseCode_Value = 300
	SPDXLicenseCode_SMLNJ                                SPDXLicenseCode_Value = 301
	SPDXLicenseCode_SMPPL                                SPDXLicenseCode_Value = 302
	SPDXLicenseCode_SNIA                                 SPDXLicenseCode_Value = 303
	SPDXLicenseCode_SPENCER_86                           SPDXLicenseCode_Value = 304
	SPDXLicenseCode_SPENCER_94                           SPDXLicenseCode_Value = 305
	SPDXLicenseCode_SPENCER_99                           SPDXLicenseCode_Value = 306
	SPDXLicenseCode_SPL_1_0                              SPDXLicenseCode_Value = 307
	SPDXLicenseCode_SUGAR_CRM_1_1_3                      SPDXLicenseCode_Value = 308
	SPDXLicenseCode_SWL                                  SPDXLicenseCode_Value = 309
	SPDXLicenseCode_TCL                                  SPDXLicenseCode_Value = 310
	SPDXLicenseCode_TCP_WRAPPERS                         SPDXLicenseCode_Value = 311
	SPDXLicenseCode_T_MATE                               SPDXLicenseCode_Value = 312
	SPDXLicenseCode_TORQUE_1_1                           SPDXLicenseCode_Value = 313
	SPDXLicenseCode_TOSL                                 SPDXLicenseCode_Value = 314
	SPDXLicenseCode_UNICODE_DFS_2015                     SPDXLicenseCode_Value = 315
	SPDXLicenseCode_UNICODE_DFS_2016                     SPDXLicenseCode_Value = 316
	SPDXLicenseCode_UNICODE_TOU                          SPDXLicenseCode_Value = 317
	SPDXLicenseCode_UNLICENSE                            SPDXLicenseCode_Value = 318
	SPDXLicenseCode_UPL_1_0                              SPDXLicenseCode_Value = 319
	SPDXLicenseCode_VIM                                  SPDXLicenseCode_Value = 320
	SPDXLicenseCode_VOSTROM                              SPDXLicenseCode_Value = 321
	SPDXLicenseCode_VSL_1_0                              SPDXLicenseCode_Value = 322
	SPDXLicenseCode_W3C_19980720                         SPDXLicenseCode_Value = 323
	SPDXLicenseCode_W3C_20150513                         SPDXLicenseCode_Value = 324
	SPDXLicenseCode_W3C                                  SPDXLicenseCode_Value = 325
	SPDXLicenseCode_WATCOM_1_0                           SPDXLicenseCode_Value = 326
	SPDXLicenseCode_WSUIPA                               SPDXLicenseCode_Value = 327
	SPDXLicenseCode_WTFPL                                SPDXLicenseCode_Value = 328
	SPDXLicenseCode_X11                                  SPDXLicenseCode_Value = 329
	SPDXLicenseCode_XEROX                                SPDXLicenseCode_Value = 330
	SPDXLicenseCode_X_FREE86_1_1                         SPDXLicenseCode_Value = 331
	SPDXLicenseCode_XINETD                               SPDXLicenseCode_Value = 332
	SPDXLicenseCode_XNET                                 SPDXLicenseCode_Value = 333
	SPDXLicenseCode_XPP                                  SPDXLicenseCode_Value = 334
	SPDXLicenseCode_X_SKAT                               SPDXLicenseCode_Value = 335
	SPDXLicenseCode_YPL_1_0                              SPDXLicenseCode_Value = 336
	SPDXLicenseCode_YPL_1_1                              SPDXLicenseCode_Value = 337
	SPDXLicenseCode_ZED                                  SPDXLicenseCode_Value = 338
	SPDXLicenseCode_ZEND_2_0                             SPDXLicenseCode_Value = 339
	SPDXLicenseCode_ZIMBRA_1_3                           SPDXLicenseCode_Value = 340
	SPDXLicenseCode_ZIMBRA_1_4                           SPDXLicenseCode_Value = 341
	SPDXLicenseCode_ZLIB_ACKNOWLEDGEMENT                 SPDXLicenseCode_Value = 342
	SPDXLicenseCode_ZLIB                                 SPDXLicenseCode_Value = 343
	SPDXLicenseCode_ZPL_1_1                              SPDXLicenseCode_Value = 344
	SPDXLicenseCode_ZPL_2_0                              SPDXLicenseCode_Value = 345
	SPDXLicenseCode_ZPL_2_1                              SPDXLicenseCode_Value = 346
)

// Enum value maps for SPDXLicenseCode_Value.
var (
	SPDXLicenseCode_Value_name = map[int32]string{
		0:   "INVALID_UNINITIALIZED",
		1:   "NOT_OPEN_SOURCE",
		2:   "BSD_ZERO_CLAUSE_LICENSE",
		3:   "AAL",
		4:   "ABSTYLES",
		5:   "ADOBE_2006",
		6:   "ADOBE_GLYPH",
		7:   "ADSL",
		8:   "AFL_1_1",
		9:   "AFL_1_2",
		10:  "AFL_2_0",
		11:  "AFL_2_1",
		12:  "AFL_3_0",
		13:  "AFMPARSE",
		14:  "AGPL_1_0_ONLY",
		15:  "AGPL_1_0_OR_LATER",
		16:  "AGPL_3_0_ONLY",
		17:  "AGPL_3_0_OR_LATER",
		18:  "ALADDIN",
		19:  "AMDPLPA",
		20:  "AML",
		21:  "AMPAS",
		22:  "ANTLR_PD",
		23:  "APACHE_1_0",
		24:  "APACHE_1_1",
		25:  "APACHE_2_0",
		26:  "APAFML",
		27:  "APL_1_0",
		28:  "APSL_1_0",
		29:  "APSL_1_1",
		30:  "APSL_1_2",
		31:  "APSL_2_0",
		32:  "ARTISTIC_1_0_CL8",
		33:  "ARTISTIC_1_0_PERL",
		34:  "ARTISTIC_1_0",
		35:  "ARTISTIC_2_0",
		36:  "BAHYPH",
		37:  "BARR",
		38:  "BEERWARE",
		39:  "BIT_TORRENT_1_0",
		40:  "BIT_TORRENT_1_1",
		41:  "BORCEUX",
		42:  "BSD_1_CLAUSE",
		43:  "BSD_2_CLAUSE_FREE_BSD",
		44:  "BSD_2_CLAUSE_NET_BSD",
		45:  "BSD_2_CLAUSE_PATENT",
		46:  "BSD_2_CLAUSE",
		47:  "BSD_3_CLAUSE_ATTRIBUTION",
		48:  "BSD_3_CLAUSE_CLEAR",
		49:  "BSD_3_CLAUSE_LBNL",
		50:  "BSD_3_CLAUSE_NO_NUCLEAR_LICENSE_2014",
		51:  "BSD_3_CLAUSE_NO_NUCLEAR_LICENSE",
		52:  "BSD_3_CLAUSE_NO_NUCLEAR_WARRANTY",
		53:  "BSD_3_CLAUSE",
		54:  "BSD_4_CLAUSE_UC",
		55:  "BSD_4_CLAUSE",
		56:  "BSD_PROTECTION",
		57:  "BSD_SOURCE_CODE",
		58:  "BSL_1_0",
		59:  "BZIP2_1_0_5",
		60:  "BZIP2_1_0_6",
		61:  "CALDERA",
		62:  "CATOSL_1_1",
		63:  "CC_BY_1_0",
		64:  "CC_BY_2_0",
		65:  "CC_BY_2_5",
		66:  "CC_BY_3_0",
		67:  "CC_BY_4_0",
		68:  "CC_BY_NC_1_0",
		69:  "CC_BY_NC_2_0",
		70:  "CC_BY_NC_2_5",
		71:  "CC_BY_NC_3_0",
		72:  "CC_BY_NC_4_0",
		73:  "CC_BY_NC_ND_1_0",
		74:  "CC_BY_NC_ND_2_0",
		75:  "CC_BY_NC_ND_2_5",
		76:  "CC_BY_NC_ND_3_0",
		77:  "CC_BY_NC_ND_4_0",
		78:  "CC_BY_NC_SA_1_0",
		79:  "CC_BY_NC_SA_2_0",
		80:  "CC_BY_NC_SA_2_5",
		81:  "CC_BY_NC_SA_3_0",
		82:  "CC_BY_NC_SA_4_0",
		83:  "CC_BY_ND_1_0",
		84:  "CC_BY_ND_2_0",
		85:  "CC_BY_ND_2_5",
		86:  "CC_BY_ND_3_0",
		87:  "CC_BY_ND_4_0",
		88:  "CC_BY_SA_1_0",
		89:  "CC_BY_SA_2_0",
		90:  "CC_BY_SA_2_5",
		91:  "CC_BY_SA_3_0",
		92:  "CC_BY_SA_4_0",
		93:  "CC0_1_0",
		94:  "CDDL_1_0",
		95:  "CDDL_1_1",
		96:  "CDLA_PERMISSIVE_1_0",
		97:  "CDLA_SHARING_1_0",
		98:  "CECILL_1_0",
		99:  "CECILL_1_1",
		100: "CECILL_2_0",
		101: "CECILL_2_1",
		102: "CECILL_B",
		103: "CECILL_C",
		104: "CL_ARTISTIC",
		105: "CNRI_JYTHON",
		106: "CNRI_PYTHON_GPL_COMPATIBLE",
		107: "CNRI_PYTHON",
		108: "CONDOR_1_1",
		109: "CPAL_1_0",
		110: "CPL_1_0",
		111: "CPOL_1_02",
		112: "CROSSWORD",
		113: "CRYSTAL_STACKER",
		114: "CUA_OPL_1_0",
		115: "CUBE",
		116: "CURL",
		117: "D_FSL_1_0",
		118: "DIFFMARK",
		119: "DOC",
		120: "DOTSEQN",
		121: "DSDP",
		122: "DVIPDFM",
		123: "ECL_1_0",
		124: "ECL_2_0",
		125: "EFL_1_0",
		126: "EFL_2_0",
		127: "E_GENIX",
		128: "ENTESSA",
		129: "EPL_1_0",
		130: "EPL_2_0",
		131: "ERL_PL_1_1",
		132: "EU_DATAGRID",
		133: "EUPL_1_0",
		134: "EUPL_1_1",
		135: "EUPL_1_2",
		136: "EUROSYM",
		137: "FAIR",
		138: "FRAMEWORX_1_0",
		139: "FREE_IMAGE",
		140: "FSFAP",
		141: "FSFUL",
		142: "FSFULLR",
		143: "FTL",
		144: "GFDL_1_1_ONLY",
		145: "GFDL_1_1_OR_LATER",
		146: "GFDL_1_2_ONLY",
		147: "GFDL_1_2_OR_LATER",
		148: "GFDL_1_3_ONLY",
		149: "GFDL_1_3_OR_LATER",
		150: "GIFTWARE",
		151: "GL2PS",
		152: "GLIDE",
		153: "GLULXE",
		154: "GNUPLOT",
		155: "GPL_1_0_ONLY",
		156: "GPL_1_0_OR_LATER",
		157: "GPL_2_0_ONLY",
		158: "GPL_2_0_OR_LATER",
		159: "GPL_3_0_ONLY",
		160: "GPL_3_0_OR_LATER",
		161: "G_SOAP_1_3B",
		162: "HASKELL_REPORT",
		163: "HPND",
		164: "IBM_PIBS",
		165: "ICU",
		166: "IJG",
		167: "IMAGE_MAGICK",
		168: "I_MATIX",
		169: "IMLIB2",
		170: "INFO_ZIP",
		171: "INTEL_ACPI",
		172: "INTEL",
		173: "INTERBASE_1_0",
		174: "IPA",
		175: "IPL_1_0",
		176: "ISC",
		177: "JAS_PER_2_0",
		178: "JSON",
		179: "LAL_1_2",
		180: "LAL_1_3",
		181: "LATEX2E",
		182: "LEPTONICA",
		183: "LGPL_2_0_ONLY",
		184: "LGPL_2_0_OR_LATER",
		185: "LGPL_2_1_ONLY",
		186: "LGPL_2_1_OR_LATER",
		187: "LGPL_3_0_ONLY",
		188: "LGPL_3_0_OR_LATER",
		189: "LGPLLR",
		190: "LIBPNG",
		191: "LIBTIFF",
		192: "LI_LI_Q_P_1_1",
		193: "LI_LI_Q_R_1_1",
		194: "LI_LI_Q_RPLUS_1_1",
		195: "LINUX_OPEN_IB",
		196: "LPL_1_0",
		197: "LPL_1_02",
		198: "LPPL_1_0",
		199: "LPPL_1_1",
		200: "LPPL_1_2",
		201: "LPPL_1_3A",
		202: "LPPL_1_3C",
		203: "MAKE_INDEX",
		204: "MIR_OS",
		205: "MIT_0",
		206: "MIT_ADVERTISING",
		207: "MIT_CMU",
		208: "MIT_ENNA",
		209: "MIT_FEH",
		210: "MIT",
		211: "MITNFA",
		212: "MOTOSOTO",
		213: "MPICH2",
		214: "MPL_1_0",
		215: "MPL_1_1",
		216: "MPL_2_0_NO_COPYLEFT_EXCEPTION",
		217: "MPL_2_0",
		218: "MS_PL",
		219: "MS_RL",
		220: "MTLL",
		221: "MULTICS",
		222: "MUP",
		223: "NASA_1_3",
		224: "NAUMEN",
		225: "NBPL_1_0",
		226: "NCSA",
		227: "NET_SNMP",
		228: "NET_CDF",
		229: "NEWSLETR",
		230: "NGPL",
		231: "NLOD_1_0",
		232: "NLPL",
		233: "NOKIA",
		234: "NOSL",
		235: "NOWEB",
		236: "NPL_1_0",
		237: "NPL_1_1",
		238: "NPOSL_3_0",
		239: "NRL",
		240: "NTP",
		241: "OCCT_PL",
		242: "OCLC_2_0",
		243: "O_DB_L_1_0",
		244: "OFL_1_0",
		245: "OFL_1_1",
		246: "OGTSL",
		247: "OLDAP_1_1",
		248: "OLDAP_1_2",
		249: "OLDAP_1_3",
		250: "OLDAP_1_4",
		251: "OLDAP_2_0_1",
		252: "OLDAP_2_0",
		253: "OLDAP_2_1",
		254: "OLDAP_2_2_1",
		255: "OLDAP_2_2_2",
		256: "OLDAP_2_2",
		257: "OLDAP_2_3",
		258: "OLDAP_2_4",
		259: "OLDAP_2_5",
		260: "OLDAP_2_6",
		261: "OLDAP_2_7",
		262: "OLDAP_2_8",
		263: "OML",
		264: "OPEN_SSL",
		265: "OPL_1_0",
		266: "OSET_PL_2_1",
		267: "OSL_1_0",
		268: "OSL_1_1",
		269: "OSL_2_0",
		270: "OSL_2_1",
		271: "OSL_3_0",
		272: "PDDL_1_0",
		273: "PHP_3_0",
		274: "PHP_3_01",
		275: "PLEXUS",
		276: "POSTGRE_SQL",
		277: "PSFRAG",
		278: "PSUTILS",
		279: "PYTHON_2_0",
		280: "QHULL",
		281: "QPL_1_0",
		282: "RDISC",
		283: "R_HE_COS_1_1",
		284: "RPL_1_1",
		285: "RPL_1_5",
		286: "RPSL_1_0",
		287: "RSA_MD",
		288: "RSCPL",
		289: "RUBY",
		290: "SAX_PD",
		291: "SAXPATH",
		292: "SCEA",
		293: "SENDMAIL",
		294: "SGI_B_1_0",
		295: "SGI_B_1_1",
		296: "SGI_B_2_0",
		297: "SIM_PL_2_0",
		298: "SISSL_1_2",
		299: "SISSL",
		300: "SLEEPYCAT",
		301: "SMLNJ",
		302: "SMPPL",
		303: "SNIA",
		304: "SPENCER_86",
		305: "SPENCER_94",
		306: "SPENCER_99",
		307: "SPL_1_0",
		308: "SUGAR_CRM_1_1_3",
		309: "SWL",
		310: "TCL",
		311: "TCP_WRAPPERS",
		312: "T_MATE",
		313: "TORQUE_1_1",
		314: "TOSL",
		315: "UNICODE_DFS_2015",
		316: "UNICODE_DFS_2016",
		317: "UNICODE_TOU",
		318: "UNLICENSE",
		319: "UPL_1_0",
		320: "VIM",
		321: "VOSTROM",
		322: "VSL_1_0",
		323: "W3C_19980720",
		324: "W3C_20150513",
		325: "W3C",
		326: "WATCOM_1_0",
		327: "WSUIPA",
		328: "WTFPL",
		329: "X11",
		330: "XEROX",
		331: "X_FREE86_1_1",
		332: "XINETD",
		333: "XNET",
		334: "XPP",
		335: "X_SKAT",
		336: "YPL_1_0",
		337: "YPL_1_1",
		338: "ZED",
		339: "ZEND_2_0",
		340: "ZIMBRA_1_3",
		341: "ZIMBRA_1_4",
		342: "ZLIB_ACKNOWLEDGEMENT",
		343: "ZLIB",
		344: "ZPL_1_1",
		345: "ZPL_2_0",
		346: "ZPL_2_1",
	}
	SPDXLicenseCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":                0,
		"NOT_OPEN_SOURCE":                      1,
		"BSD_ZERO_CLAUSE_LICENSE":              2,
		"AAL":                                  3,
		"ABSTYLES":                             4,
		"ADOBE_2006":                           5,
		"ADOBE_GLYPH":                          6,
		"ADSL":                                 7,
		"AFL_1_1":                              8,
		"AFL_1_2":                              9,
		"AFL_2_0":                              10,
		"AFL_2_1":                              11,
		"AFL_3_0":                              12,
		"AFMPARSE":                             13,
		"AGPL_1_0_ONLY":                        14,
		"AGPL_1_0_OR_LATER":                    15,
		"AGPL_3_0_ONLY":                        16,
		"AGPL_3_0_OR_LATER":                    17,
		"ALADDIN":                              18,
		"AMDPLPA":                              19,
		"AML":                                  20,
		"AMPAS":                                21,
		"ANTLR_PD":                             22,
		"APACHE_1_0":                           23,
		"APACHE_1_1":                           24,
		"APACHE_2_0":                           25,
		"APAFML":                               26,
		"APL_1_0":                              27,
		"APSL_1_0":                             28,
		"APSL_1_1":                             29,
		"APSL_1_2":                             30,
		"APSL_2_0":                             31,
		"ARTISTIC_1_0_CL8":                     32,
		"ARTISTIC_1_0_PERL":                    33,
		"ARTISTIC_1_0":                         34,
		"ARTISTIC_2_0":                         35,
		"BAHYPH":                               36,
		"BARR":                                 37,
		"BEERWARE":                             38,
		"BIT_TORRENT_1_0":                      39,
		"BIT_TORRENT_1_1":                      40,
		"BORCEUX":                              41,
		"BSD_1_CLAUSE":                         42,
		"BSD_2_CLAUSE_FREE_BSD":                43,
		"BSD_2_CLAUSE_NET_BSD":                 44,
		"BSD_2_CLAUSE_PATENT":                  45,
		"BSD_2_CLAUSE":                         46,
		"BSD_3_CLAUSE_ATTRIBUTION":             47,
		"BSD_3_CLAUSE_CLEAR":                   48,
		"BSD_3_CLAUSE_LBNL":                    49,
		"BSD_3_CLAUSE_NO_NUCLEAR_LICENSE_2014": 50,
		"BSD_3_CLAUSE_NO_NUCLEAR_LICENSE":      51,
		"BSD_3_CLAUSE_NO_NUCLEAR_WARRANTY":     52,
		"BSD_3_CLAUSE":                         53,
		"BSD_4_CLAUSE_UC":                      54,
		"BSD_4_CLAUSE":                         55,
		"BSD_PROTECTION":                       56,
		"BSD_SOURCE_CODE":                      57,
		"BSL_1_0":                              58,
		"BZIP2_1_0_5":                          59,
		"BZIP2_1_0_6":                          60,
		"CALDERA":                              61,
		"CATOSL_1_1":                           62,
		"CC_BY_1_0":                            63,
		"CC_BY_2_0":                            64,
		"CC_BY_2_5":                            65,
		"CC_BY_3_0":                            66,
		"CC_BY_4_0":                            67,
		"CC_BY_NC_1_0":                         68,
		"CC_BY_NC_2_0":                         69,
		"CC_BY_NC_2_5":                         70,
		"CC_BY_NC_3_0":                         71,
		"CC_BY_NC_4_0":                         72,
		"CC_BY_NC_ND_1_0":                      73,
		"CC_BY_NC_ND_2_0":                      74,
		"CC_BY_NC_ND_2_5":                      75,
		"CC_BY_NC_ND_3_0":                      76,
		"CC_BY_NC_ND_4_0":                      77,
		"CC_BY_NC_SA_1_0":                      78,
		"CC_BY_NC_SA_2_0":                      79,
		"CC_BY_NC_SA_2_5":                      80,
		"CC_BY_NC_SA_3_0":                      81,
		"CC_BY_NC_SA_4_0":                      82,
		"CC_BY_ND_1_0":                         83,
		"CC_BY_ND_2_0":                         84,
		"CC_BY_ND_2_5":                         85,
		"CC_BY_ND_3_0":                         86,
		"CC_BY_ND_4_0":                         87,
		"CC_BY_SA_1_0":                         88,
		"CC_BY_SA_2_0":                         89,
		"CC_BY_SA_2_5":                         90,
		"CC_BY_SA_3_0":                         91,
		"CC_BY_SA_4_0":                         92,
		"CC0_1_0":                              93,
		"CDDL_1_0":                             94,
		"CDDL_1_1":                             95,
		"CDLA_PERMISSIVE_1_0":                  96,
		"CDLA_SHARING_1_0":                     97,
		"CECILL_1_0":                           98,
		"CECILL_1_1":                           99,
		"CECILL_2_0":                           100,
		"CECILL_2_1":                           101,
		"CECILL_B":                             102,
		"CECILL_C":                             103,
		"CL_ARTISTIC":                          104,
		"CNRI_JYTHON":                          105,
		"CNRI_PYTHON_GPL_COMPATIBLE":           106,
		"CNRI_PYTHON":                          107,
		"CONDOR_1_1":                           108,
		"CPAL_1_0":                             109,
		"CPL_1_0":                              110,
		"CPOL_1_02":                            111,
		"CROSSWORD":                            112,
		"CRYSTAL_STACKER":                      113,
		"CUA_OPL_1_0":                          114,
		"CUBE":                                 115,
		"CURL":                                 116,
		"D_FSL_1_0":                            117,
		"DIFFMARK":                             118,
		"DOC":                                  119,
		"DOTSEQN":                              120,
		"DSDP":                                 121,
		"DVIPDFM":                              122,
		"ECL_1_0":                              123,
		"ECL_2_0":                              124,
		"EFL_1_0":                              125,
		"EFL_2_0":                              126,
		"E_GENIX":                              127,
		"ENTESSA":                              128,
		"EPL_1_0":                              129,
		"EPL_2_0":                              130,
		"ERL_PL_1_1":                           131,
		"EU_DATAGRID":                          132,
		"EUPL_1_0":                             133,
		"EUPL_1_1":                             134,
		"EUPL_1_2":                             135,
		"EUROSYM":                              136,
		"FAIR":                                 137,
		"FRAMEWORX_1_0":                        138,
		"FREE_IMAGE":                           139,
		"FSFAP":                                140,
		"FSFUL":                                141,
		"FSFULLR":                              142,
		"FTL":                                  143,
		"GFDL_1_1_ONLY":                        144,
		"GFDL_1_1_OR_LATER":                    145,
		"GFDL_1_2_ONLY":                        146,
		"GFDL_1_2_OR_LATER":                    147,
		"GFDL_1_3_ONLY":                        148,
		"GFDL_1_3_OR_LATER":                    149,
		"GIFTWARE":                             150,
		"GL2PS":                                151,
		"GLIDE":                                152,
		"GLULXE":                               153,
		"GNUPLOT":                              154,
		"GPL_1_0_ONLY":                         155,
		"GPL_1_0_OR_LATER":                     156,
		"GPL_2_0_ONLY":                         157,
		"GPL_2_0_OR_LATER":                     158,
		"GPL_3_0_ONLY":                         159,
		"GPL_3_0_OR_LATER":                     160,
		"G_SOAP_1_3B":                          161,
		"HASKELL_REPORT":                       162,
		"HPND":                                 163,
		"IBM_PIBS":                             164,
		"ICU":                                  165,
		"IJG":                                  166,
		"IMAGE_MAGICK":                         167,
		"I_MATIX":                              168,
		"IMLIB2":                               169,
		"INFO_ZIP":                             170,
		"INTEL_ACPI":                           171,
		"INTEL":                                172,
		"INTERBASE_1_0":                        173,
		"IPA":                                  174,
		"IPL_1_0":                              175,
		"ISC":                                  176,
		"JAS_PER_2_0":                          177,
		"JSON":                                 178,
		"LAL_1_2":                              179,
		"LAL_1_3":                              180,
		"LATEX2E":                              181,
		"LEPTONICA":                            182,
		"LGPL_2_0_ONLY":                        183,
		"LGPL_2_0_OR_LATER":                    184,
		"LGPL_2_1_ONLY":                        185,
		"LGPL_2_1_OR_LATER":                    186,
		"LGPL_3_0_ONLY":                        187,
		"LGPL_3_0_OR_LATER":                    188,
		"LGPLLR":                               189,
		"LIBPNG":                               190,
		"LIBTIFF":                              191,
		"LI_LI_Q_P_1_1":                        192,
		"LI_LI_Q_R_1_1":                        193,
		"LI_LI_Q_RPLUS_1_1":                    194,
		"LINUX_OPEN_IB":                        195,
		"LPL_1_0":                              196,
		"LPL_1_02":                             197,
		"LPPL_1_0":                             198,
		"LPPL_1_1":                             199,
		"LPPL_1_2":                             200,
		"LPPL_1_3A":                            201,
		"LPPL_1_3C":                            202,
		"MAKE_INDEX":                           203,
		"MIR_OS":                               204,
		"MIT_0":                                205,
		"MIT_ADVERTISING":                      206,
		"MIT_CMU":                              207,
		"MIT_ENNA":                             208,
		"MIT_FEH":                              209,
		"MIT":                                  210,
		"MITNFA":                               211,
		"MOTOSOTO":                             212,
		"MPICH2":                               213,
		"MPL_1_0":                              214,
		"MPL_1_1":                              215,
		"MPL_2_0_NO_COPYLEFT_EXCEPTION":        216,
		"MPL_2_0":                              217,
		"MS_PL":                                218,
		"MS_RL":                                219,
		"MTLL":                                 220,
		"MULTICS":                              221,
		"MUP":                                  222,
		"NASA_1_3":                             223,
		"NAUMEN":                               224,
		"NBPL_1_0":                             225,
		"NCSA":                                 226,
		"NET_SNMP":                             227,
		"NET_CDF":                              228,
		"NEWSLETR":                             229,
		"NGPL":                                 230,
		"NLOD_1_0":                             231,
		"NLPL":                                 232,
		"NOKIA":                                233,
		"NOSL":                                 234,
		"NOWEB":                                235,
		"NPL_1_0":                              236,
		"NPL_1_1":                              237,
		"NPOSL_3_0":                            238,
		"NRL":                                  239,
		"NTP":                                  240,
		"OCCT_PL":                              241,
		"OCLC_2_0":                             242,
		"O_DB_L_1_0":                           243,
		"OFL_1_0":                              244,
		"OFL_1_1":                              245,
		"OGTSL":                                246,
		"OLDAP_1_1":                            247,
		"OLDAP_1_2":                            248,
		"OLDAP_1_3":                            249,
		"OLDAP_1_4":                            250,
		"OLDAP_2_0_1":                          251,
		"OLDAP_2_0":                            252,
		"OLDAP_2_1":                            253,
		"OLDAP_2_2_1":                          254,
		"OLDAP_2_2_2":                          255,
		"OLDAP_2_2":                            256,
		"OLDAP_2_3":                            257,
		"OLDAP_2_4":                            258,
		"OLDAP_2_5":                            259,
		"OLDAP_2_6":                            260,
		"OLDAP_2_7":                            261,
		"OLDAP_2_8":                            262,
		"OML":                                  263,
		"OPEN_SSL":                             264,
		"OPL_1_0":                              265,
		"OSET_PL_2_1":                          266,
		"OSL_1_0":                              267,
		"OSL_1_1":                              268,
		"OSL_2_0":                              269,
		"OSL_2_1":                              270,
		"OSL_3_0":                              271,
		"PDDL_1_0":                             272,
		"PHP_3_0":                              273,
		"PHP_3_01":                             274,
		"PLEXUS":                               275,
		"POSTGRE_SQL":                          276,
		"PSFRAG":                               277,
		"PSUTILS":                              278,
		"PYTHON_2_0":                           279,
		"QHULL":                                280,
		"QPL_1_0":                              281,
		"RDISC":                                282,
		"R_HE_COS_1_1":                         283,
		"RPL_1_1":                              284,
		"RPL_1_5":                              285,
		"RPSL_1_0":                             286,
		"RSA_MD":                               287,
		"RSCPL":                                288,
		"RUBY":                                 289,
		"SAX_PD":                               290,
		"SAXPATH":                              291,
		"SCEA":                                 292,
		"SENDMAIL":                             293,
		"SGI_B_1_0":                            294,
		"SGI_B_1_1":                            295,
		"SGI_B_2_0":                            296,
		"SIM_PL_2_0":                           297,
		"SISSL_1_2":                            298,
		"SISSL":                                299,
		"SLEEPYCAT":                            300,
		"SMLNJ":                                301,
		"SMPPL":                                302,
		"SNIA":                                 303,
		"SPENCER_86":                           304,
		"SPENCER_94":                           305,
		"SPENCER_99":                           306,
		"SPL_1_0":                              307,
		"SUGAR_CRM_1_1_3":                      308,
		"SWL":                                  309,
		"TCL":                                  310,
		"TCP_WRAPPERS":                         311,
		"T_MATE":                               312,
		"TORQUE_1_1":                           313,
		"TOSL":                                 314,
		"UNICODE_DFS_2015":                     315,
		"UNICODE_DFS_2016":                     316,
		"UNICODE_TOU":                          317,
		"UNLICENSE":                            318,
		"UPL_1_0":                              319,
		"VIM":                                  320,
		"VOSTROM":                              321,
		"VSL_1_0":                              322,
		"W3C_19980720":                         323,
		"W3C_20150513":                         324,
		"W3C":                                  325,
		"WATCOM_1_0":                           326,
		"WSUIPA":                               327,
		"WTFPL":                                328,
		"X11":                                  329,
		"XEROX":                                330,
		"X_FREE86_1_1":                         331,
		"XINETD":                               332,
		"XNET":                                 333,
		"XPP":                                  334,
		"X_SKAT":                               335,
		"YPL_1_0":                              336,
		"YPL_1_1":                              337,
		"ZED":                                  338,
		"ZEND_2_0":                             339,
		"ZIMBRA_1_3":                           340,
		"ZIMBRA_1_4":                           341,
		"ZLIB_ACKNOWLEDGEMENT":                 342,
		"ZLIB":                                 343,
		"ZPL_1_1":                              344,
		"ZPL_2_0":                              345,
		"ZPL_2_1":                              346,
	}
)

func (x SPDXLicenseCode_Value) Enum() *SPDXLicenseCode_Value {
	p := new(SPDXLicenseCode_Value)
	*p = x
	return p
}

func (x SPDXLicenseCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SPDXLicenseCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[192].Descriptor()
}

func (SPDXLicenseCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[192]
}

func (x SPDXLicenseCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SPDXLicenseCode_Value.Descriptor instead.
func (SPDXLicenseCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{192, 0}
}

type SearchComparatorCode_Value int32

const (
	SearchComparatorCode_INVALID_UNINITIALIZED SearchComparatorCode_Value = 0
	SearchComparatorCode_EQ                    SearchComparatorCode_Value = 1
	SearchComparatorCode_NE                    SearchComparatorCode_Value = 2
	SearchComparatorCode_GT                    SearchComparatorCode_Value = 3
	SearchComparatorCode_LT                    SearchComparatorCode_Value = 4
	SearchComparatorCode_GE                    SearchComparatorCode_Value = 5
	SearchComparatorCode_LE                    SearchComparatorCode_Value = 6
	SearchComparatorCode_SA                    SearchComparatorCode_Value = 7
	SearchComparatorCode_EB                    SearchComparatorCode_Value = 8
	SearchComparatorCode_AP                    SearchComparatorCode_Value = 9
)

// Enum value maps for SearchComparatorCode_Value.
var (
	SearchComparatorCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "EQ",
		2: "NE",
		3: "GT",
		4: "LT",
		5: "GE",
		6: "LE",
		7: "SA",
		8: "EB",
		9: "AP",
	}
	SearchComparatorCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"EQ":                    1,
		"NE":                    2,
		"GT":                    3,
		"LT":                    4,
		"GE":                    5,
		"LE":                    6,
		"SA":                    7,
		"EB":                    8,
		"AP":                    9,
	}
)

func (x SearchComparatorCode_Value) Enum() *SearchComparatorCode_Value {
	p := new(SearchComparatorCode_Value)
	*p = x
	return p
}

func (x SearchComparatorCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchComparatorCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[193].Descriptor()
}

func (SearchComparatorCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[193]
}

func (x SearchComparatorCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchComparatorCode_Value.Descriptor instead.
func (SearchComparatorCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{193, 0}
}

type SearchEntryModeCode_Value int32

const (
	SearchEntryModeCode_INVALID_UNINITIALIZED SearchEntryModeCode_Value = 0
	SearchEntryModeCode_MATCH                 SearchEntryModeCode_Value = 1
	SearchEntryModeCode_INCLUDE               SearchEntryModeCode_Value = 2
	SearchEntryModeCode_OUTCOME               SearchEntryModeCode_Value = 3
)

// Enum value maps for SearchEntryModeCode_Value.
var (
	SearchEntryModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "MATCH",
		2: "INCLUDE",
		3: "OUTCOME",
	}
	SearchEntryModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"MATCH":                 1,
		"INCLUDE":               2,
		"OUTCOME":               3,
	}
)

func (x SearchEntryModeCode_Value) Enum() *SearchEntryModeCode_Value {
	p := new(SearchEntryModeCode_Value)
	*p = x
	return p
}

func (x SearchEntryModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchEntryModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[194].Descriptor()
}

func (SearchEntryModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[194]
}

func (x SearchEntryModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchEntryModeCode_Value.Descriptor instead.
func (SearchEntryModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{194, 0}
}

type SearchModifierCode_Value int32

const (
	SearchModifierCode_INVALID_UNINITIALIZED SearchModifierCode_Value = 0
	SearchModifierCode_MISSING               SearchModifierCode_Value = 1
	SearchModifierCode_EXACT                 SearchModifierCode_Value = 2
	SearchModifierCode_CONTAINS              SearchModifierCode_Value = 3
	SearchModifierCode_NOT                   SearchModifierCode_Value = 4
	SearchModifierCode_TEXT                  SearchModifierCode_Value = 5
	SearchModifierCode_IN                    SearchModifierCode_Value = 6
	SearchModifierCode_NOT_IN                SearchModifierCode_Value = 7
	SearchModifierCode_BELOW                 SearchModifierCode_Value = 8
	SearchModifierCode_ABOVE                 SearchModifierCode_Value = 9
	SearchModifierCode_TYPE                  SearchModifierCode_Value = 10
	SearchModifierCode_IDENTIFIER            SearchModifierCode_Value = 11
	SearchModifierCode_OF_TYPE               SearchModifierCode_Value = 13
	SearchModifierCode_CODE_TEXT             SearchModifierCode_Value = 14
	SearchModifierCode_TEXT_ADVANCED         SearchModifierCode_Value = 15
	SearchModifierCode_ITERATE               SearchModifierCode_Value = 16
)

// Enum value maps for SearchModifierCode_Value.
var (
	SearchModifierCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "MISSING",
		2:  "EXACT",
		3:  "CONTAINS",
		4:  "NOT",
		5:  "TEXT",
		6:  "IN",
		7:  "NOT_IN",
		8:  "BELOW",
		9:  "ABOVE",
		10: "TYPE",
		11: "IDENTIFIER",
		13: "OF_TYPE",
		14: "CODE_TEXT",
		15: "TEXT_ADVANCED",
		16: "ITERATE",
	}
	SearchModifierCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"MISSING":               1,
		"EXACT":                 2,
		"CONTAINS":              3,
		"NOT":                   4,
		"TEXT":                  5,
		"IN":                    6,
		"NOT_IN":                7,
		"BELOW":                 8,
		"ABOVE":                 9,
		"TYPE":                  10,
		"IDENTIFIER":            11,
		"OF_TYPE":               13,
		"CODE_TEXT":             14,
		"TEXT_ADVANCED":         15,
		"ITERATE":               16,
	}
)

func (x SearchModifierCode_Value) Enum() *SearchModifierCode_Value {
	p := new(SearchModifierCode_Value)
	*p = x
	return p
}

func (x SearchModifierCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchModifierCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[195].Descriptor()
}

func (SearchModifierCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[195]
}

func (x SearchModifierCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchModifierCode_Value.Descriptor instead.
func (SearchModifierCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{195, 0}
}

type SearchParamTypeCode_Value int32

const (
	SearchParamTypeCode_INVALID_UNINITIALIZED SearchParamTypeCode_Value = 0
	SearchParamTypeCode_NUMBER                SearchParamTypeCode_Value = 1
	SearchParamTypeCode_DATE                  SearchParamTypeCode_Value = 2
	SearchParamTypeCode_STRING                SearchParamTypeCode_Value = 3
	SearchParamTypeCode_TOKEN                 SearchParamTypeCode_Value = 4
	SearchParamTypeCode_REFERENCE             SearchParamTypeCode_Value = 5
	SearchParamTypeCode_COMPOSITE             SearchParamTypeCode_Value = 6
	SearchParamTypeCode_QUANTITY              SearchParamTypeCode_Value = 7
	SearchParamTypeCode_URI                   SearchParamTypeCode_Value = 8
	SearchParamTypeCode_SPECIAL               SearchParamTypeCode_Value = 9
)

// Enum value maps for SearchParamTypeCode_Value.
var (
	SearchParamTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "NUMBER",
		2: "DATE",
		3: "STRING",
		4: "TOKEN",
		5: "REFERENCE",
		6: "COMPOSITE",
		7: "QUANTITY",
		8: "URI",
		9: "SPECIAL",
	}
	SearchParamTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NUMBER":                1,
		"DATE":                  2,
		"STRING":                3,
		"TOKEN":                 4,
		"REFERENCE":             5,
		"COMPOSITE":             6,
		"QUANTITY":              7,
		"URI":                   8,
		"SPECIAL":               9,
	}
)

func (x SearchParamTypeCode_Value) Enum() *SearchParamTypeCode_Value {
	p := new(SearchParamTypeCode_Value)
	*p = x
	return p
}

func (x SearchParamTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchParamTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[196].Descriptor()
}

func (SearchParamTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[196]
}

func (x SearchParamTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchParamTypeCode_Value.Descriptor instead.
func (SearchParamTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{196, 0}
}

type SearchProcessingModeTypeCode_Value int32

const (
	SearchProcessingModeTypeCode_INVALID_UNINITIALIZED SearchProcessingModeTypeCode_Value = 0
	SearchProcessingModeTypeCode_NORMAL                SearchProcessingModeTypeCode_Value = 1
	SearchProcessingModeTypeCode_PHONETIC              SearchProcessingModeTypeCode_Value = 2
	SearchProcessingModeTypeCode_OTHER                 SearchProcessingModeTypeCode_Value = 3
)

// Enum value maps for SearchProcessingModeTypeCode_Value.
var (
	SearchProcessingModeTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "NORMAL",
		2: "PHONETIC",
		3: "OTHER",
	}
	SearchProcessingModeTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NORMAL":                1,
		"PHONETIC":              2,
		"OTHER":                 3,
	}
)

func (x SearchProcessingModeTypeCode_Value) Enum() *SearchProcessingModeTypeCode_Value {
	p := new(SearchProcessingModeTypeCode_Value)
	*p = x
	return p
}

func (x SearchProcessingModeTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchProcessingModeTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[197].Descriptor()
}

func (SearchProcessingModeTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[197]
}

func (x SearchProcessingModeTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchProcessingModeTypeCode_Value.Descriptor instead.
func (SearchProcessingModeTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{197, 0}
}

type SequenceTypeCode_Value int32

const (
	SequenceTypeCode_INVALID_UNINITIALIZED SequenceTypeCode_Value = 0
	SequenceTypeCode_AA                    SequenceTypeCode_Value = 1
	SequenceTypeCode_DNA                   SequenceTypeCode_Value = 2
	SequenceTypeCode_RNA                   SequenceTypeCode_Value = 3
)

// Enum value maps for SequenceTypeCode_Value.
var (
	SequenceTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "AA",
		2: "DNA",
		3: "RNA",
	}
	SequenceTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"AA":                    1,
		"DNA":                   2,
		"RNA":                   3,
	}
)

func (x SequenceTypeCode_Value) Enum() *SequenceTypeCode_Value {
	p := new(SequenceTypeCode_Value)
	*p = x
	return p
}

func (x SequenceTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SequenceTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[198].Descriptor()
}

func (SequenceTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[198]
}

func (x SequenceTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SequenceTypeCode_Value.Descriptor instead.
func (SequenceTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{198, 0}
}

type SlicingRulesCode_Value int32

const (
	SlicingRulesCode_INVALID_UNINITIALIZED SlicingRulesCode_Value = 0
	SlicingRulesCode_CLOSED                SlicingRulesCode_Value = 1
	SlicingRulesCode_OPEN                  SlicingRulesCode_Value = 2
	SlicingRulesCode_OPEN_AT_END           SlicingRulesCode_Value = 3
)

// Enum value maps for SlicingRulesCode_Value.
var (
	SlicingRulesCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CLOSED",
		2: "OPEN",
		3: "OPEN_AT_END",
	}
	SlicingRulesCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CLOSED":                1,
		"OPEN":                  2,
		"OPEN_AT_END":           3,
	}
)

func (x SlicingRulesCode_Value) Enum() *SlicingRulesCode_Value {
	p := new(SlicingRulesCode_Value)
	*p = x
	return p
}

func (x SlicingRulesCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SlicingRulesCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[199].Descriptor()
}

func (SlicingRulesCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[199]
}

func (x SlicingRulesCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SlicingRulesCode_Value.Descriptor instead.
func (SlicingRulesCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{199, 0}
}

type SlotStatusCode_Value int32

const (
	SlotStatusCode_INVALID_UNINITIALIZED SlotStatusCode_Value = 0
	SlotStatusCode_BUSY                  SlotStatusCode_Value = 1
	SlotStatusCode_FREE                  SlotStatusCode_Value = 2
	SlotStatusCode_BUSY_UNAVAILABLE      SlotStatusCode_Value = 3
	SlotStatusCode_BUSY_TENTATIVE        SlotStatusCode_Value = 4
	SlotStatusCode_ENTERED_IN_ERROR      SlotStatusCode_Value = 5
)

// Enum value maps for SlotStatusCode_Value.
var (
	SlotStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "BUSY",
		2: "FREE",
		3: "BUSY_UNAVAILABLE",
		4: "BUSY_TENTATIVE",
		5: "ENTERED_IN_ERROR",
	}
	SlotStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"BUSY":                  1,
		"FREE":                  2,
		"BUSY_UNAVAILABLE":      3,
		"BUSY_TENTATIVE":        4,
		"ENTERED_IN_ERROR":      5,
	}
)

func (x SlotStatusCode_Value) Enum() *SlotStatusCode_Value {
	p := new(SlotStatusCode_Value)
	*p = x
	return p
}

func (x SlotStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SlotStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[200].Descriptor()
}

func (SlotStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[200]
}

func (x SlotStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SlotStatusCode_Value.Descriptor instead.
func (SlotStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{200, 0}
}

type SortDirectionCode_Value int32

const (
	SortDirectionCode_INVALID_UNINITIALIZED SortDirectionCode_Value = 0
	SortDirectionCode_ASCENDING             SortDirectionCode_Value = 1
	SortDirectionCode_DESCENDING            SortDirectionCode_Value = 2
)

// Enum value maps for SortDirectionCode_Value.
var (
	SortDirectionCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ASCENDING",
		2: "DESCENDING",
	}
	SortDirectionCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ASCENDING":             1,
		"DESCENDING":            2,
	}
)

func (x SortDirectionCode_Value) Enum() *SortDirectionCode_Value {
	p := new(SortDirectionCode_Value)
	*p = x
	return p
}

func (x SortDirectionCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortDirectionCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[201].Descriptor()
}

func (SortDirectionCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[201]
}

func (x SortDirectionCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortDirectionCode_Value.Descriptor instead.
func (SortDirectionCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{201, 0}
}

type SpecimenCombinedCode_Value int32

const (
	SpecimenCombinedCode_INVALID_UNINITIALIZED SpecimenCombinedCode_Value = 0
	SpecimenCombinedCode_GROUPED               SpecimenCombinedCode_Value = 1
	SpecimenCombinedCode_POOLED                SpecimenCombinedCode_Value = 2
)

// Enum value maps for SpecimenCombinedCode_Value.
var (
	SpecimenCombinedCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "GROUPED",
		2: "POOLED",
	}
	SpecimenCombinedCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"GROUPED":               1,
		"POOLED":                2,
	}
)

func (x SpecimenCombinedCode_Value) Enum() *SpecimenCombinedCode_Value {
	p := new(SpecimenCombinedCode_Value)
	*p = x
	return p
}

func (x SpecimenCombinedCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpecimenCombinedCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[202].Descriptor()
}

func (SpecimenCombinedCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[202]
}

func (x SpecimenCombinedCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpecimenCombinedCode_Value.Descriptor instead.
func (SpecimenCombinedCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{202, 0}
}

type SpecimenContainedPreferenceCode_Value int32

const (
	SpecimenContainedPreferenceCode_INVALID_UNINITIALIZED SpecimenContainedPreferenceCode_Value = 0
	SpecimenContainedPreferenceCode_PREFERRED             SpecimenContainedPreferenceCode_Value = 1
	SpecimenContainedPreferenceCode_ALTERNATE             SpecimenContainedPreferenceCode_Value = 2
)

// Enum value maps for SpecimenContainedPreferenceCode_Value.
var (
	SpecimenContainedPreferenceCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PREFERRED",
		2: "ALTERNATE",
	}
	SpecimenContainedPreferenceCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PREFERRED":             1,
		"ALTERNATE":             2,
	}
)

func (x SpecimenContainedPreferenceCode_Value) Enum() *SpecimenContainedPreferenceCode_Value {
	p := new(SpecimenContainedPreferenceCode_Value)
	*p = x
	return p
}

func (x SpecimenContainedPreferenceCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpecimenContainedPreferenceCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[203].Descriptor()
}

func (SpecimenContainedPreferenceCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[203]
}

func (x SpecimenContainedPreferenceCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpecimenContainedPreferenceCode_Value.Descriptor instead.
func (SpecimenContainedPreferenceCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{203, 0}
}

type SpecimenStatusCode_Value int32

const (
	SpecimenStatusCode_INVALID_UNINITIALIZED SpecimenStatusCode_Value = 0
	SpecimenStatusCode_AVAILABLE             SpecimenStatusCode_Value = 1
	SpecimenStatusCode_UNAVAILABLE           SpecimenStatusCode_Value = 2
	SpecimenStatusCode_UNSATISFACTORY        SpecimenStatusCode_Value = 3
	SpecimenStatusCode_ENTERED_IN_ERROR      SpecimenStatusCode_Value = 4
)

// Enum value maps for SpecimenStatusCode_Value.
var (
	SpecimenStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "AVAILABLE",
		2: "UNAVAILABLE",
		3: "UNSATISFACTORY",
		4: "ENTERED_IN_ERROR",
	}
	SpecimenStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"AVAILABLE":             1,
		"UNAVAILABLE":           2,
		"UNSATISFACTORY":        3,
		"ENTERED_IN_ERROR":      4,
	}
)

func (x SpecimenStatusCode_Value) Enum() *SpecimenStatusCode_Value {
	p := new(SpecimenStatusCode_Value)
	*p = x
	return p
}

func (x SpecimenStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpecimenStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[204].Descriptor()
}

func (SpecimenStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[204]
}

func (x SpecimenStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpecimenStatusCode_Value.Descriptor instead.
func (SpecimenStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{204, 0}
}

type StatusCode_Value int32

const (
	StatusCode_INVALID_UNINITIALIZED StatusCode_Value = 0
	StatusCode_ATTESTED              StatusCode_Value = 1
	StatusCode_VALIDATED             StatusCode_Value = 2
	StatusCode_IN_PROCESS            StatusCode_Value = 3
	StatusCode_REQ_REVALID           StatusCode_Value = 4
	StatusCode_VAL_FAIL              StatusCode_Value = 5
	StatusCode_REVAL_FAIL            StatusCode_Value = 6
	StatusCode_ENTERED_IN_ERROR      StatusCode_Value = 7
)

// Enum value maps for StatusCode_Value.
var (
	StatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ATTESTED",
		2: "VALIDATED",
		3: "IN_PROCESS",
		4: "REQ_REVALID",
		5: "VAL_FAIL",
		6: "REVAL_FAIL",
		7: "ENTERED_IN_ERROR",
	}
	StatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ATTESTED":              1,
		"VALIDATED":             2,
		"IN_PROCESS":            3,
		"REQ_REVALID":           4,
		"VAL_FAIL":              5,
		"REVAL_FAIL":            6,
		"ENTERED_IN_ERROR":      7,
	}
)

func (x StatusCode_Value) Enum() *StatusCode_Value {
	p := new(StatusCode_Value)
	*p = x
	return p
}

func (x StatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[205].Descriptor()
}

func (StatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[205]
}

func (x StatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusCode_Value.Descriptor instead.
func (StatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{205, 0}
}

type StrandTypeCode_Value int32

const (
	StrandTypeCode_INVALID_UNINITIALIZED StrandTypeCode_Value = 0
	StrandTypeCode_WATSON                StrandTypeCode_Value = 1
	StrandTypeCode_CRICK                 StrandTypeCode_Value = 2
)

// Enum value maps for StrandTypeCode_Value.
var (
	StrandTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "WATSON",
		2: "CRICK",
	}
	StrandTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"WATSON":                1,
		"CRICK":                 2,
	}
)

func (x StrandTypeCode_Value) Enum() *StrandTypeCode_Value {
	p := new(StrandTypeCode_Value)
	*p = x
	return p
}

func (x StrandTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StrandTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[206].Descriptor()
}

func (StrandTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[206]
}

func (x StrandTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StrandTypeCode_Value.Descriptor instead.
func (StrandTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{206, 0}
}

type StructureDefinitionKindCode_Value int32

const (
	StructureDefinitionKindCode_INVALID_UNINITIALIZED StructureDefinitionKindCode_Value = 0
	StructureDefinitionKindCode_PRIMITIVE_TYPE        StructureDefinitionKindCode_Value = 1
	StructureDefinitionKindCode_COMPLEX_TYPE          StructureDefinitionKindCode_Value = 2
	StructureDefinitionKindCode_RESOURCE              StructureDefinitionKindCode_Value = 3
	StructureDefinitionKindCode_LOGICAL               StructureDefinitionKindCode_Value = 4
)

// Enum value maps for StructureDefinitionKindCode_Value.
var (
	StructureDefinitionKindCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PRIMITIVE_TYPE",
		2: "COMPLEX_TYPE",
		3: "RESOURCE",
		4: "LOGICAL",
	}
	StructureDefinitionKindCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PRIMITIVE_TYPE":        1,
		"COMPLEX_TYPE":          2,
		"RESOURCE":              3,
		"LOGICAL":               4,
	}
)

func (x StructureDefinitionKindCode_Value) Enum() *StructureDefinitionKindCode_Value {
	p := new(StructureDefinitionKindCode_Value)
	*p = x
	return p
}

func (x StructureDefinitionKindCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StructureDefinitionKindCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[207].Descriptor()
}

func (StructureDefinitionKindCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[207]
}

func (x StructureDefinitionKindCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StructureDefinitionKindCode_Value.Descriptor instead.
func (StructureDefinitionKindCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{207, 0}
}

type StructureMapGroupTypeModeCode_Value int32

const (
	StructureMapGroupTypeModeCode_INVALID_UNINITIALIZED StructureMapGroupTypeModeCode_Value = 0
	StructureMapGroupTypeModeCode_TYPES                 StructureMapGroupTypeModeCode_Value = 2
	StructureMapGroupTypeModeCode_TYPE_AND_TYPES        StructureMapGroupTypeModeCode_Value = 3
)

// Enum value maps for StructureMapGroupTypeModeCode_Value.
var (
	StructureMapGroupTypeModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		2: "TYPES",
		3: "TYPE_AND_TYPES",
	}
	StructureMapGroupTypeModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"TYPES":                 2,
		"TYPE_AND_TYPES":        3,
	}
)

func (x StructureMapGroupTypeModeCode_Value) Enum() *StructureMapGroupTypeModeCode_Value {
	p := new(StructureMapGroupTypeModeCode_Value)
	*p = x
	return p
}

func (x StructureMapGroupTypeModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StructureMapGroupTypeModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[208].Descriptor()
}

func (StructureMapGroupTypeModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[208]
}

func (x StructureMapGroupTypeModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StructureMapGroupTypeModeCode_Value.Descriptor instead.
func (StructureMapGroupTypeModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{208, 0}
}

type StructureMapInputModeCode_Value int32

const (
	StructureMapInputModeCode_INVALID_UNINITIALIZED StructureMapInputModeCode_Value = 0
	StructureMapInputModeCode_SOURCE                StructureMapInputModeCode_Value = 1
	StructureMapInputModeCode_TARGET                StructureMapInputModeCode_Value = 2
)

// Enum value maps for StructureMapInputModeCode_Value.
var (
	StructureMapInputModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "SOURCE",
		2: "TARGET",
	}
	StructureMapInputModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"SOURCE":                1,
		"TARGET":                2,
	}
)

func (x StructureMapInputModeCode_Value) Enum() *StructureMapInputModeCode_Value {
	p := new(StructureMapInputModeCode_Value)
	*p = x
	return p
}

func (x StructureMapInputModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StructureMapInputModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[209].Descriptor()
}

func (StructureMapInputModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[209]
}

func (x StructureMapInputModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StructureMapInputModeCode_Value.Descriptor instead.
func (StructureMapInputModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{209, 0}
}

type StructureMapModelModeCode_Value int32

const (
	StructureMapModelModeCode_INVALID_UNINITIALIZED StructureMapModelModeCode_Value = 0
	StructureMapModelModeCode_SOURCE                StructureMapModelModeCode_Value = 1
	StructureMapModelModeCode_QUERIED               StructureMapModelModeCode_Value = 2
	StructureMapModelModeCode_TARGET                StructureMapModelModeCode_Value = 3
	StructureMapModelModeCode_PRODUCED              StructureMapModelModeCode_Value = 4
)

// Enum value maps for StructureMapModelModeCode_Value.
var (
	StructureMapModelModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "SOURCE",
		2: "QUERIED",
		3: "TARGET",
		4: "PRODUCED",
	}
	StructureMapModelModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"SOURCE":                1,
		"QUERIED":               2,
		"TARGET":                3,
		"PRODUCED":              4,
	}
)

func (x StructureMapModelModeCode_Value) Enum() *StructureMapModelModeCode_Value {
	p := new(StructureMapModelModeCode_Value)
	*p = x
	return p
}

func (x StructureMapModelModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StructureMapModelModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[210].Descriptor()
}

func (StructureMapModelModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[210]
}

func (x StructureMapModelModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StructureMapModelModeCode_Value.Descriptor instead.
func (StructureMapModelModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{210, 0}
}

type StructureMapSourceListModeCode_Value int32

const (
	StructureMapSourceListModeCode_INVALID_UNINITIALIZED StructureMapSourceListModeCode_Value = 0
	StructureMapSourceListModeCode_FIRST                 StructureMapSourceListModeCode_Value = 1
	StructureMapSourceListModeCode_NOT_FIRST             StructureMapSourceListModeCode_Value = 2
	StructureMapSourceListModeCode_LAST                  StructureMapSourceListModeCode_Value = 3
	StructureMapSourceListModeCode_NOT_LAST              StructureMapSourceListModeCode_Value = 4
	StructureMapSourceListModeCode_ONLY_ONE              StructureMapSourceListModeCode_Value = 5
)

// Enum value maps for StructureMapSourceListModeCode_Value.
var (
	StructureMapSourceListModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "FIRST",
		2: "NOT_FIRST",
		3: "LAST",
		4: "NOT_LAST",
		5: "ONLY_ONE",
	}
	StructureMapSourceListModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"FIRST":                 1,
		"NOT_FIRST":             2,
		"LAST":                  3,
		"NOT_LAST":              4,
		"ONLY_ONE":              5,
	}
)

func (x StructureMapSourceListModeCode_Value) Enum() *StructureMapSourceListModeCode_Value {
	p := new(StructureMapSourceListModeCode_Value)
	*p = x
	return p
}

func (x StructureMapSourceListModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StructureMapSourceListModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[211].Descriptor()
}

func (StructureMapSourceListModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[211]
}

func (x StructureMapSourceListModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StructureMapSourceListModeCode_Value.Descriptor instead.
func (StructureMapSourceListModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{211, 0}
}

type StructureMapTargetListModeCode_Value int32

const (
	StructureMapTargetListModeCode_INVALID_UNINITIALIZED StructureMapTargetListModeCode_Value = 0
	StructureMapTargetListModeCode_FIRST                 StructureMapTargetListModeCode_Value = 1
	StructureMapTargetListModeCode_SHARE                 StructureMapTargetListModeCode_Value = 2
	StructureMapTargetListModeCode_LAST                  StructureMapTargetListModeCode_Value = 3
	StructureMapTargetListModeCode_SINGLE                StructureMapTargetListModeCode_Value = 5
)

// Enum value maps for StructureMapTargetListModeCode_Value.
var (
	StructureMapTargetListModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "FIRST",
		2: "SHARE",
		3: "LAST",
		5: "SINGLE",
	}
	StructureMapTargetListModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"FIRST":                 1,
		"SHARE":                 2,
		"LAST":                  3,
		"SINGLE":                5,
	}
)

func (x StructureMapTargetListModeCode_Value) Enum() *StructureMapTargetListModeCode_Value {
	p := new(StructureMapTargetListModeCode_Value)
	*p = x
	return p
}

func (x StructureMapTargetListModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StructureMapTargetListModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[212].Descriptor()
}

func (StructureMapTargetListModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[212]
}

func (x StructureMapTargetListModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StructureMapTargetListModeCode_Value.Descriptor instead.
func (StructureMapTargetListModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{212, 0}
}

type StructureMapTransformCode_Value int32

const (
	StructureMapTransformCode_INVALID_UNINITIALIZED StructureMapTransformCode_Value = 0
	StructureMapTransformCode_CREATE                StructureMapTransformCode_Value = 1
	StructureMapTransformCode_COPY                  StructureMapTransformCode_Value = 2
	StructureMapTransformCode_TRUNCATE              StructureMapTransformCode_Value = 3
	StructureMapTransformCode_ESCAPE                StructureMapTransformCode_Value = 4
	StructureMapTransformCode_CAST                  StructureMapTransformCode_Value = 5
	StructureMapTransformCode_APPEND                StructureMapTransformCode_Value = 6
	StructureMapTransformCode_TRANSLATE             StructureMapTransformCode_Value = 7
	StructureMapTransformCode_REFERENCE             StructureMapTransformCode_Value = 8
	StructureMapTransformCode_DATE_OP               StructureMapTransformCode_Value = 9
	StructureMapTransformCode_UUID                  StructureMapTransformCode_Value = 10
	StructureMapTransformCode_POINTER               StructureMapTransformCode_Value = 11
	StructureMapTransformCode_EVALUATE              StructureMapTransformCode_Value = 12
	StructureMapTransformCode_CC                    StructureMapTransformCode_Value = 13
	StructureMapTransformCode_C                     StructureMapTransformCode_Value = 14
	StructureMapTransformCode_QTY                   StructureMapTransformCode_Value = 15
	StructureMapTransformCode_ID                    StructureMapTransformCode_Value = 16
	StructureMapTransformCode_CP                    StructureMapTransformCode_Value = 17
)

// Enum value maps for StructureMapTransformCode_Value.
var (
	StructureMapTransformCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "CREATE",
		2:  "COPY",
		3:  "TRUNCATE",
		4:  "ESCAPE",
		5:  "CAST",
		6:  "APPEND",
		7:  "TRANSLATE",
		8:  "REFERENCE",
		9:  "DATE_OP",
		10: "UUID",
		11: "POINTER",
		12: "EVALUATE",
		13: "CC",
		14: "C",
		15: "QTY",
		16: "ID",
		17: "CP",
	}
	StructureMapTransformCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CREATE":                1,
		"COPY":                  2,
		"TRUNCATE":              3,
		"ESCAPE":                4,
		"CAST":                  5,
		"APPEND":                6,
		"TRANSLATE":             7,
		"REFERENCE":             8,
		"DATE_OP":               9,
		"UUID":                  10,
		"POINTER":               11,
		"EVALUATE":              12,
		"CC":                    13,
		"C":                     14,
		"QTY":                   15,
		"ID":                    16,
		"CP":                    17,
	}
)

func (x StructureMapTransformCode_Value) Enum() *StructureMapTransformCode_Value {
	p := new(StructureMapTransformCode_Value)
	*p = x
	return p
}

func (x StructureMapTransformCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StructureMapTransformCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[213].Descriptor()
}

func (StructureMapTransformCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[213]
}

func (x StructureMapTransformCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StructureMapTransformCode_Value.Descriptor instead.
func (StructureMapTransformCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{213, 0}
}

type SubmitDataUpdateTypeCode_Value int32

const (
	SubmitDataUpdateTypeCode_INVALID_UNINITIALIZED SubmitDataUpdateTypeCode_Value = 0
	SubmitDataUpdateTypeCode_INCREMENTAL           SubmitDataUpdateTypeCode_Value = 1
	SubmitDataUpdateTypeCode_SNAPSHOT              SubmitDataUpdateTypeCode_Value = 2
)

// Enum value maps for SubmitDataUpdateTypeCode_Value.
var (
	SubmitDataUpdateTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "INCREMENTAL",
		2: "SNAPSHOT",
	}
	SubmitDataUpdateTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"INCREMENTAL":           1,
		"SNAPSHOT":              2,
	}
)

func (x SubmitDataUpdateTypeCode_Value) Enum() *SubmitDataUpdateTypeCode_Value {
	p := new(SubmitDataUpdateTypeCode_Value)
	*p = x
	return p
}

func (x SubmitDataUpdateTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubmitDataUpdateTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[214].Descriptor()
}

func (SubmitDataUpdateTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[214]
}

func (x SubmitDataUpdateTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubmitDataUpdateTypeCode_Value.Descriptor instead.
func (SubmitDataUpdateTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{214, 0}
}

type SubscriptionNotificationTypeCode_Value int32

const (
	SubscriptionNotificationTypeCode_INVALID_UNINITIALIZED SubscriptionNotificationTypeCode_Value = 0
	SubscriptionNotificationTypeCode_HANDSHAKE             SubscriptionNotificationTypeCode_Value = 1
	SubscriptionNotificationTypeCode_HEARTBEAT             SubscriptionNotificationTypeCode_Value = 2
	SubscriptionNotificationTypeCode_EVENT_NOTIFICATION    SubscriptionNotificationTypeCode_Value = 3
	SubscriptionNotificationTypeCode_QUERY_STATUS          SubscriptionNotificationTypeCode_Value = 4
	SubscriptionNotificationTypeCode_QUERY_EVENT           SubscriptionNotificationTypeCode_Value = 5
)

// Enum value maps for SubscriptionNotificationTypeCode_Value.
var (
	SubscriptionNotificationTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "HANDSHAKE",
		2: "HEARTBEAT",
		3: "EVENT_NOTIFICATION",
		4: "QUERY_STATUS",
		5: "QUERY_EVENT",
	}
	SubscriptionNotificationTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"HANDSHAKE":             1,
		"HEARTBEAT":             2,
		"EVENT_NOTIFICATION":    3,
		"QUERY_STATUS":          4,
		"QUERY_EVENT":           5,
	}
)

func (x SubscriptionNotificationTypeCode_Value) Enum() *SubscriptionNotificationTypeCode_Value {
	p := new(SubscriptionNotificationTypeCode_Value)
	*p = x
	return p
}

func (x SubscriptionNotificationTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscriptionNotificationTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[215].Descriptor()
}

func (SubscriptionNotificationTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[215]
}

func (x SubscriptionNotificationTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubscriptionNotificationTypeCode_Value.Descriptor instead.
func (SubscriptionNotificationTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{215, 0}
}

type SubscriptionPayloadContentCode_Value int32

const (
	SubscriptionPayloadContentCode_INVALID_UNINITIALIZED SubscriptionPayloadContentCode_Value = 0
	SubscriptionPayloadContentCode_EMPTY                 SubscriptionPayloadContentCode_Value = 1
	SubscriptionPayloadContentCode_ID_ONLY               SubscriptionPayloadContentCode_Value = 2
	SubscriptionPayloadContentCode_FULL_RESOURCE         SubscriptionPayloadContentCode_Value = 3
)

// Enum value maps for SubscriptionPayloadContentCode_Value.
var (
	SubscriptionPayloadContentCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "EMPTY",
		2: "ID_ONLY",
		3: "FULL_RESOURCE",
	}
	SubscriptionPayloadContentCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"EMPTY":                 1,
		"ID_ONLY":               2,
		"FULL_RESOURCE":         3,
	}
)

func (x SubscriptionPayloadContentCode_Value) Enum() *SubscriptionPayloadContentCode_Value {
	p := new(SubscriptionPayloadContentCode_Value)
	*p = x
	return p
}

func (x SubscriptionPayloadContentCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscriptionPayloadContentCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[216].Descriptor()
}

func (SubscriptionPayloadContentCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[216]
}

func (x SubscriptionPayloadContentCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubscriptionPayloadContentCode_Value.Descriptor instead.
func (SubscriptionPayloadContentCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{216, 0}
}

type SubscriptionStatusCode_Value int32

const (
	SubscriptionStatusCode_INVALID_UNINITIALIZED SubscriptionStatusCode_Value = 0
	SubscriptionStatusCode_REQUESTED             SubscriptionStatusCode_Value = 1
	SubscriptionStatusCode_ACTIVE                SubscriptionStatusCode_Value = 2
	SubscriptionStatusCode_ERROR                 SubscriptionStatusCode_Value = 3
	SubscriptionStatusCode_OFF                   SubscriptionStatusCode_Value = 4
	SubscriptionStatusCode_ENTERED_IN_ERROR      SubscriptionStatusCode_Value = 5
)

// Enum value maps for SubscriptionStatusCode_Value.
var (
	SubscriptionStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "REQUESTED",
		2: "ACTIVE",
		3: "ERROR",
		4: "OFF",
		5: "ENTERED_IN_ERROR",
	}
	SubscriptionStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"REQUESTED":             1,
		"ACTIVE":                2,
		"ERROR":                 3,
		"OFF":                   4,
		"ENTERED_IN_ERROR":      5,
	}
)

func (x SubscriptionStatusCode_Value) Enum() *SubscriptionStatusCode_Value {
	p := new(SubscriptionStatusCode_Value)
	*p = x
	return p
}

func (x SubscriptionStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscriptionStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[217].Descriptor()
}

func (SubscriptionStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[217]
}

func (x SubscriptionStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubscriptionStatusCode_Value.Descriptor instead.
func (SubscriptionStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{217, 0}
}

type SupplyDeliveryStatusCode_Value int32

const (
	SupplyDeliveryStatusCode_INVALID_UNINITIALIZED SupplyDeliveryStatusCode_Value = 0
	SupplyDeliveryStatusCode_IN_PROGRESS           SupplyDeliveryStatusCode_Value = 1
	SupplyDeliveryStatusCode_COMPLETED             SupplyDeliveryStatusCode_Value = 2
	SupplyDeliveryStatusCode_ABANDONED             SupplyDeliveryStatusCode_Value = 3
	SupplyDeliveryStatusCode_ENTERED_IN_ERROR      SupplyDeliveryStatusCode_Value = 4
)

// Enum value maps for SupplyDeliveryStatusCode_Value.
var (
	SupplyDeliveryStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "IN_PROGRESS",
		2: "COMPLETED",
		3: "ABANDONED",
		4: "ENTERED_IN_ERROR",
	}
	SupplyDeliveryStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"IN_PROGRESS":           1,
		"COMPLETED":             2,
		"ABANDONED":             3,
		"ENTERED_IN_ERROR":      4,
	}
)

func (x SupplyDeliveryStatusCode_Value) Enum() *SupplyDeliveryStatusCode_Value {
	p := new(SupplyDeliveryStatusCode_Value)
	*p = x
	return p
}

func (x SupplyDeliveryStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SupplyDeliveryStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[218].Descriptor()
}

func (SupplyDeliveryStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[218]
}

func (x SupplyDeliveryStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SupplyDeliveryStatusCode_Value.Descriptor instead.
func (SupplyDeliveryStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{218, 0}
}

type SupplyDeliverySupplyItemTypeCode_Value int32

const (
	SupplyDeliverySupplyItemTypeCode_INVALID_UNINITIALIZED      SupplyDeliverySupplyItemTypeCode_Value = 0
	SupplyDeliverySupplyItemTypeCode_MEDICATION                 SupplyDeliverySupplyItemTypeCode_Value = 1
	SupplyDeliverySupplyItemTypeCode_DEVICE                     SupplyDeliverySupplyItemTypeCode_Value = 2
	SupplyDeliverySupplyItemTypeCode_BIOLOGICALLYDERIVEDPRODUCT SupplyDeliverySupplyItemTypeCode_Value = 3
)

// Enum value maps for SupplyDeliverySupplyItemTypeCode_Value.
var (
	SupplyDeliverySupplyItemTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "MEDICATION",
		2: "DEVICE",
		3: "BIOLOGICALLYDERIVEDPRODUCT",
	}
	SupplyDeliverySupplyItemTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":      0,
		"MEDICATION":                 1,
		"DEVICE":                     2,
		"BIOLOGICALLYDERIVEDPRODUCT": 3,
	}
)

func (x SupplyDeliverySupplyItemTypeCode_Value) Enum() *SupplyDeliverySupplyItemTypeCode_Value {
	p := new(SupplyDeliverySupplyItemTypeCode_Value)
	*p = x
	return p
}

func (x SupplyDeliverySupplyItemTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SupplyDeliverySupplyItemTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[219].Descriptor()
}

func (SupplyDeliverySupplyItemTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[219]
}

func (x SupplyDeliverySupplyItemTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SupplyDeliverySupplyItemTypeCode_Value.Descriptor instead.
func (SupplyDeliverySupplyItemTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{219, 0}
}

type SupplyRequestStatusCode_Value int32

const (
	SupplyRequestStatusCode_INVALID_UNINITIALIZED SupplyRequestStatusCode_Value = 0
	SupplyRequestStatusCode_DRAFT                 SupplyRequestStatusCode_Value = 1
	SupplyRequestStatusCode_ACTIVE                SupplyRequestStatusCode_Value = 2
	SupplyRequestStatusCode_SUSPENDED             SupplyRequestStatusCode_Value = 3
	SupplyRequestStatusCode_CANCELLED             SupplyRequestStatusCode_Value = 4
	SupplyRequestStatusCode_COMPLETED             SupplyRequestStatusCode_Value = 5
	SupplyRequestStatusCode_ENTERED_IN_ERROR      SupplyRequestStatusCode_Value = 6
	SupplyRequestStatusCode_UNKNOWN               SupplyRequestStatusCode_Value = 7
)

// Enum value maps for SupplyRequestStatusCode_Value.
var (
	SupplyRequestStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DRAFT",
		2: "ACTIVE",
		3: "SUSPENDED",
		4: "CANCELLED",
		5: "COMPLETED",
		6: "ENTERED_IN_ERROR",
		7: "UNKNOWN",
	}
	SupplyRequestStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DRAFT":                 1,
		"ACTIVE":                2,
		"SUSPENDED":             3,
		"CANCELLED":             4,
		"COMPLETED":             5,
		"ENTERED_IN_ERROR":      6,
		"UNKNOWN":               7,
	}
)

func (x SupplyRequestStatusCode_Value) Enum() *SupplyRequestStatusCode_Value {
	p := new(SupplyRequestStatusCode_Value)
	*p = x
	return p
}

func (x SupplyRequestStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SupplyRequestStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[220].Descriptor()
}

func (SupplyRequestStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[220]
}

func (x SupplyRequestStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SupplyRequestStatusCode_Value.Descriptor instead.
func (SupplyRequestStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{220, 0}
}

type TaskIntentCode_Value int32

const (
	TaskIntentCode_INVALID_UNINITIALIZED TaskIntentCode_Value = 0
	TaskIntentCode_UNKNOWN               TaskIntentCode_Value = 1
)

// Enum value maps for TaskIntentCode_Value.
var (
	TaskIntentCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "UNKNOWN",
	}
	TaskIntentCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"UNKNOWN":               1,
	}
)

func (x TaskIntentCode_Value) Enum() *TaskIntentCode_Value {
	p := new(TaskIntentCode_Value)
	*p = x
	return p
}

func (x TaskIntentCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskIntentCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[221].Descriptor()
}

func (TaskIntentCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[221]
}

func (x TaskIntentCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskIntentCode_Value.Descriptor instead.
func (TaskIntentCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{221, 0}
}

type TaskStatusCode_Value int32

const (
	TaskStatusCode_INVALID_UNINITIALIZED TaskStatusCode_Value = 0
	TaskStatusCode_DRAFT                 TaskStatusCode_Value = 1
	TaskStatusCode_REQUESTED             TaskStatusCode_Value = 2
	TaskStatusCode_RECEIVED              TaskStatusCode_Value = 3
	TaskStatusCode_ACCEPTED              TaskStatusCode_Value = 4
	TaskStatusCode_REJECTED              TaskStatusCode_Value = 5
	TaskStatusCode_READY                 TaskStatusCode_Value = 6
	TaskStatusCode_CANCELLED             TaskStatusCode_Value = 7
	TaskStatusCode_IN_PROGRESS           TaskStatusCode_Value = 8
	TaskStatusCode_ON_HOLD               TaskStatusCode_Value = 9
	TaskStatusCode_FAILED                TaskStatusCode_Value = 10
	TaskStatusCode_COMPLETED             TaskStatusCode_Value = 11
	TaskStatusCode_ENTERED_IN_ERROR      TaskStatusCode_Value = 12
)

// Enum value maps for TaskStatusCode_Value.
var (
	TaskStatusCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "DRAFT",
		2:  "REQUESTED",
		3:  "RECEIVED",
		4:  "ACCEPTED",
		5:  "REJECTED",
		6:  "READY",
		7:  "CANCELLED",
		8:  "IN_PROGRESS",
		9:  "ON_HOLD",
		10: "FAILED",
		11: "COMPLETED",
		12: "ENTERED_IN_ERROR",
	}
	TaskStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DRAFT":                 1,
		"REQUESTED":             2,
		"RECEIVED":              3,
		"ACCEPTED":              4,
		"REJECTED":              5,
		"READY":                 6,
		"CANCELLED":             7,
		"IN_PROGRESS":           8,
		"ON_HOLD":               9,
		"FAILED":                10,
		"COMPLETED":             11,
		"ENTERED_IN_ERROR":      12,
	}
)

func (x TaskStatusCode_Value) Enum() *TaskStatusCode_Value {
	p := new(TaskStatusCode_Value)
	*p = x
	return p
}

func (x TaskStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[222].Descriptor()
}

func (TaskStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[222]
}

func (x TaskStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStatusCode_Value.Descriptor instead.
func (TaskStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{222, 0}
}

type TestReportActionResultCode_Value int32

const (
	TestReportActionResultCode_INVALID_UNINITIALIZED TestReportActionResultCode_Value = 0
	TestReportActionResultCode_PASS                  TestReportActionResultCode_Value = 1
	TestReportActionResultCode_SKIP                  TestReportActionResultCode_Value = 2
	TestReportActionResultCode_FAIL                  TestReportActionResultCode_Value = 3
	TestReportActionResultCode_WARNING               TestReportActionResultCode_Value = 4
	TestReportActionResultCode_ERROR                 TestReportActionResultCode_Value = 5
)

// Enum value maps for TestReportActionResultCode_Value.
var (
	TestReportActionResultCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PASS",
		2: "SKIP",
		3: "FAIL",
		4: "WARNING",
		5: "ERROR",
	}
	TestReportActionResultCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PASS":                  1,
		"SKIP":                  2,
		"FAIL":                  3,
		"WARNING":               4,
		"ERROR":                 5,
	}
)

func (x TestReportActionResultCode_Value) Enum() *TestReportActionResultCode_Value {
	p := new(TestReportActionResultCode_Value)
	*p = x
	return p
}

func (x TestReportActionResultCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestReportActionResultCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[223].Descriptor()
}

func (TestReportActionResultCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[223]
}

func (x TestReportActionResultCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestReportActionResultCode_Value.Descriptor instead.
func (TestReportActionResultCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{223, 0}
}

type TestReportParticipantTypeCode_Value int32

const (
	TestReportParticipantTypeCode_INVALID_UNINITIALIZED TestReportParticipantTypeCode_Value = 0
	TestReportParticipantTypeCode_TEST_ENGINE           TestReportParticipantTypeCode_Value = 1
	TestReportParticipantTypeCode_CLIENT                TestReportParticipantTypeCode_Value = 2
	TestReportParticipantTypeCode_SERVER                TestReportParticipantTypeCode_Value = 3
)

// Enum value maps for TestReportParticipantTypeCode_Value.
var (
	TestReportParticipantTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "TEST_ENGINE",
		2: "CLIENT",
		3: "SERVER",
	}
	TestReportParticipantTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"TEST_ENGINE":           1,
		"CLIENT":                2,
		"SERVER":                3,
	}
)

func (x TestReportParticipantTypeCode_Value) Enum() *TestReportParticipantTypeCode_Value {
	p := new(TestReportParticipantTypeCode_Value)
	*p = x
	return p
}

func (x TestReportParticipantTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestReportParticipantTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[224].Descriptor()
}

func (TestReportParticipantTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[224]
}

func (x TestReportParticipantTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestReportParticipantTypeCode_Value.Descriptor instead.
func (TestReportParticipantTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{224, 0}
}

type TestReportResultCode_Value int32

const (
	TestReportResultCode_INVALID_UNINITIALIZED TestReportResultCode_Value = 0
	TestReportResultCode_PASS                  TestReportResultCode_Value = 1
	TestReportResultCode_FAIL                  TestReportResultCode_Value = 2
	TestReportResultCode_PENDING               TestReportResultCode_Value = 3
)

// Enum value maps for TestReportResultCode_Value.
var (
	TestReportResultCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PASS",
		2: "FAIL",
		3: "PENDING",
	}
	TestReportResultCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PASS":                  1,
		"FAIL":                  2,
		"PENDING":               3,
	}
)

func (x TestReportResultCode_Value) Enum() *TestReportResultCode_Value {
	p := new(TestReportResultCode_Value)
	*p = x
	return p
}

func (x TestReportResultCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestReportResultCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[225].Descriptor()
}

func (TestReportResultCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[225]
}

func (x TestReportResultCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestReportResultCode_Value.Descriptor instead.
func (TestReportResultCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{225, 0}
}

type TestReportStatusCode_Value int32

const (
	TestReportStatusCode_INVALID_UNINITIALIZED TestReportStatusCode_Value = 0
	TestReportStatusCode_COMPLETED             TestReportStatusCode_Value = 1
	TestReportStatusCode_IN_PROGRESS           TestReportStatusCode_Value = 2
	TestReportStatusCode_WAITING               TestReportStatusCode_Value = 3
	TestReportStatusCode_STOPPED               TestReportStatusCode_Value = 4
	TestReportStatusCode_ENTERED_IN_ERROR      TestReportStatusCode_Value = 5
)

// Enum value maps for TestReportStatusCode_Value.
var (
	TestReportStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "COMPLETED",
		2: "IN_PROGRESS",
		3: "WAITING",
		4: "STOPPED",
		5: "ENTERED_IN_ERROR",
	}
	TestReportStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"COMPLETED":             1,
		"IN_PROGRESS":           2,
		"WAITING":               3,
		"STOPPED":               4,
		"ENTERED_IN_ERROR":      5,
	}
)

func (x TestReportStatusCode_Value) Enum() *TestReportStatusCode_Value {
	p := new(TestReportStatusCode_Value)
	*p = x
	return p
}

func (x TestReportStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestReportStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[226].Descriptor()
}

func (TestReportStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[226]
}

func (x TestReportStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestReportStatusCode_Value.Descriptor instead.
func (TestReportStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{226, 0}
}

type TestScriptRequestMethodCode_Value int32

const (
	TestScriptRequestMethodCode_INVALID_UNINITIALIZED TestScriptRequestMethodCode_Value = 0
	TestScriptRequestMethodCode_DELETE                TestScriptRequestMethodCode_Value = 1
	TestScriptRequestMethodCode_GET                   TestScriptRequestMethodCode_Value = 2
	TestScriptRequestMethodCode_OPTIONS               TestScriptRequestMethodCode_Value = 3
	TestScriptRequestMethodCode_PATCH                 TestScriptRequestMethodCode_Value = 4
	TestScriptRequestMethodCode_POST                  TestScriptRequestMethodCode_Value = 5
	TestScriptRequestMethodCode_PUT                   TestScriptRequestMethodCode_Value = 6
	TestScriptRequestMethodCode_HEAD                  TestScriptRequestMethodCode_Value = 7
)

// Enum value maps for TestScriptRequestMethodCode_Value.
var (
	TestScriptRequestMethodCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DELETE",
		2: "GET",
		3: "OPTIONS",
		4: "PATCH",
		5: "POST",
		6: "PUT",
		7: "HEAD",
	}
	TestScriptRequestMethodCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DELETE":                1,
		"GET":                   2,
		"OPTIONS":               3,
		"PATCH":                 4,
		"POST":                  5,
		"PUT":                   6,
		"HEAD":                  7,
	}
)

func (x TestScriptRequestMethodCode_Value) Enum() *TestScriptRequestMethodCode_Value {
	p := new(TestScriptRequestMethodCode_Value)
	*p = x
	return p
}

func (x TestScriptRequestMethodCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestScriptRequestMethodCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[227].Descriptor()
}

func (TestScriptRequestMethodCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[227]
}

func (x TestScriptRequestMethodCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestScriptRequestMethodCode_Value.Descriptor instead.
func (TestScriptRequestMethodCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{227, 0}
}

type TransportIntentCode_Value int32

const (
	TransportIntentCode_INVALID_UNINITIALIZED TransportIntentCode_Value = 0
	TransportIntentCode_UNKNOWN               TransportIntentCode_Value = 1
)

// Enum value maps for TransportIntentCode_Value.
var (
	TransportIntentCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "UNKNOWN",
	}
	TransportIntentCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"UNKNOWN":               1,
	}
)

func (x TransportIntentCode_Value) Enum() *TransportIntentCode_Value {
	p := new(TransportIntentCode_Value)
	*p = x
	return p
}

func (x TransportIntentCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransportIntentCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[228].Descriptor()
}

func (TransportIntentCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[228]
}

func (x TransportIntentCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransportIntentCode_Value.Descriptor instead.
func (TransportIntentCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{228, 0}
}

type TransportStatusCode_Value int32

const (
	TransportStatusCode_INVALID_UNINITIALIZED TransportStatusCode_Value = 0
	TransportStatusCode_IN_PROGRESS           TransportStatusCode_Value = 1
	TransportStatusCode_COMPLETED             TransportStatusCode_Value = 2
	TransportStatusCode_ABANDONED             TransportStatusCode_Value = 3
	TransportStatusCode_CANCELLED             TransportStatusCode_Value = 4
	TransportStatusCode_PLANNED               TransportStatusCode_Value = 5
	TransportStatusCode_ENTERED_IN_ERROR      TransportStatusCode_Value = 6
)

// Enum value maps for TransportStatusCode_Value.
var (
	TransportStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "IN_PROGRESS",
		2: "COMPLETED",
		3: "ABANDONED",
		4: "CANCELLED",
		5: "PLANNED",
		6: "ENTERED_IN_ERROR",
	}
	TransportStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"IN_PROGRESS":           1,
		"COMPLETED":             2,
		"ABANDONED":             3,
		"CANCELLED":             4,
		"PLANNED":               5,
		"ENTERED_IN_ERROR":      6,
	}
)

func (x TransportStatusCode_Value) Enum() *TransportStatusCode_Value {
	p := new(TransportStatusCode_Value)
	*p = x
	return p
}

func (x TransportStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransportStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[229].Descriptor()
}

func (TransportStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[229]
}

func (x TransportStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransportStatusCode_Value.Descriptor instead.
func (TransportStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{229, 0}
}

type TriggerTypeCode_Value int32

const (
	TriggerTypeCode_INVALID_UNINITIALIZED TriggerTypeCode_Value = 0
	TriggerTypeCode_NAMED_EVENT           TriggerTypeCode_Value = 1
	TriggerTypeCode_PERIODIC              TriggerTypeCode_Value = 2
	TriggerTypeCode_DATA_CHANGED          TriggerTypeCode_Value = 3
	TriggerTypeCode_DATA_ADDED            TriggerTypeCode_Value = 4
	TriggerTypeCode_DATA_MODIFIED         TriggerTypeCode_Value = 5
	TriggerTypeCode_DATA_REMOVED          TriggerTypeCode_Value = 6
	TriggerTypeCode_DATA_ACCESSED         TriggerTypeCode_Value = 7
	TriggerTypeCode_DATA_ACCESS_ENDED     TriggerTypeCode_Value = 8
)

// Enum value maps for TriggerTypeCode_Value.
var (
	TriggerTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "NAMED_EVENT",
		2: "PERIODIC",
		3: "DATA_CHANGED",
		4: "DATA_ADDED",
		5: "DATA_MODIFIED",
		6: "DATA_REMOVED",
		7: "DATA_ACCESSED",
		8: "DATA_ACCESS_ENDED",
	}
	TriggerTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NAMED_EVENT":           1,
		"PERIODIC":              2,
		"DATA_CHANGED":          3,
		"DATA_ADDED":            4,
		"DATA_MODIFIED":         5,
		"DATA_REMOVED":          6,
		"DATA_ACCESSED":         7,
		"DATA_ACCESS_ENDED":     8,
	}
)

func (x TriggerTypeCode_Value) Enum() *TriggerTypeCode_Value {
	p := new(TriggerTypeCode_Value)
	*p = x
	return p
}

func (x TriggerTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TriggerTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[230].Descriptor()
}

func (TriggerTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[230]
}

func (x TriggerTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TriggerTypeCode_Value.Descriptor instead.
func (TriggerTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{230, 0}
}

type TriggeredBytypeCode_Value int32

const (
	TriggeredBytypeCode_INVALID_UNINITIALIZED TriggeredBytypeCode_Value = 0
	TriggeredBytypeCode_REFLEX                TriggeredBytypeCode_Value = 1
	TriggeredBytypeCode_REPEAT                TriggeredBytypeCode_Value = 2
	TriggeredBytypeCode_RE_RUN                TriggeredBytypeCode_Value = 3
)

// Enum value maps for TriggeredBytypeCode_Value.
var (
	TriggeredBytypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "REFLEX",
		2: "REPEAT",
		3: "RE_RUN",
	}
	TriggeredBytypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"REFLEX":                1,
		"REPEAT":                2,
		"RE_RUN":                3,
	}
)

func (x TriggeredBytypeCode_Value) Enum() *TriggeredBytypeCode_Value {
	p := new(TriggeredBytypeCode_Value)
	*p = x
	return p
}

func (x TriggeredBytypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TriggeredBytypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[231].Descriptor()
}

func (TriggeredBytypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[231]
}

func (x TriggeredBytypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TriggeredBytypeCode_Value.Descriptor instead.
func (TriggeredBytypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{231, 0}
}

type TypeDerivationRuleCode_Value int32

const (
	TypeDerivationRuleCode_INVALID_UNINITIALIZED TypeDerivationRuleCode_Value = 0
	TypeDerivationRuleCode_SPECIALIZATION        TypeDerivationRuleCode_Value = 1
	TypeDerivationRuleCode_CONSTRAINT            TypeDerivationRuleCode_Value = 2
)

// Enum value maps for TypeDerivationRuleCode_Value.
var (
	TypeDerivationRuleCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "SPECIALIZATION",
		2: "CONSTRAINT",
	}
	TypeDerivationRuleCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"SPECIALIZATION":        1,
		"CONSTRAINT":            2,
	}
)

func (x TypeDerivationRuleCode_Value) Enum() *TypeDerivationRuleCode_Value {
	p := new(TypeDerivationRuleCode_Value)
	*p = x
	return p
}

func (x TypeDerivationRuleCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TypeDerivationRuleCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[232].Descriptor()
}

func (TypeDerivationRuleCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[232]
}

func (x TypeDerivationRuleCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TypeDerivationRuleCode_Value.Descriptor instead.
func (TypeDerivationRuleCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{232, 0}
}

type UDIEntryTypeCode_Value int32

const (
	UDIEntryTypeCode_INVALID_UNINITIALIZED   UDIEntryTypeCode_Value = 0
	UDIEntryTypeCode_BARCODE                 UDIEntryTypeCode_Value = 1
	UDIEntryTypeCode_RFID                    UDIEntryTypeCode_Value = 2
	UDIEntryTypeCode_MANUAL                  UDIEntryTypeCode_Value = 3
	UDIEntryTypeCode_CARD                    UDIEntryTypeCode_Value = 4
	UDIEntryTypeCode_SELF_REPORTED           UDIEntryTypeCode_Value = 5
	UDIEntryTypeCode_ELECTRONIC_TRANSMISSION UDIEntryTypeCode_Value = 7
	UDIEntryTypeCode_UNKNOWN                 UDIEntryTypeCode_Value = 6
)

// Enum value maps for UDIEntryTypeCode_Value.
var (
	UDIEntryTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "BARCODE",
		2: "RFID",
		3: "MANUAL",
		4: "CARD",
		5: "SELF_REPORTED",
		7: "ELECTRONIC_TRANSMISSION",
		6: "UNKNOWN",
	}
	UDIEntryTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":   0,
		"BARCODE":                 1,
		"RFID":                    2,
		"MANUAL":                  3,
		"CARD":                    4,
		"SELF_REPORTED":           5,
		"ELECTRONIC_TRANSMISSION": 7,
		"UNKNOWN":                 6,
	}
)

func (x UDIEntryTypeCode_Value) Enum() *UDIEntryTypeCode_Value {
	p := new(UDIEntryTypeCode_Value)
	*p = x
	return p
}

func (x UDIEntryTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UDIEntryTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[233].Descriptor()
}

func (UDIEntryTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[233]
}

func (x UDIEntryTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UDIEntryTypeCode_Value.Descriptor instead.
func (UDIEntryTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{233, 0}
}

type UseCode_Value int32

const (
	UseCode_INVALID_UNINITIALIZED UseCode_Value = 0
	UseCode_CLAIM                 UseCode_Value = 1
	UseCode_PREAUTHORIZATION      UseCode_Value = 2
	UseCode_PREDETERMINATION      UseCode_Value = 3
)

// Enum value maps for UseCode_Value.
var (
	UseCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CLAIM",
		2: "PREAUTHORIZATION",
		3: "PREDETERMINATION",
	}
	UseCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CLAIM":                 1,
		"PREAUTHORIZATION":      2,
		"PREDETERMINATION":      3,
	}
)

func (x UseCode_Value) Enum() *UseCode_Value {
	p := new(UseCode_Value)
	*p = x
	return p
}

func (x UseCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UseCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[234].Descriptor()
}

func (UseCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[234]
}

func (x UseCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UseCode_Value.Descriptor instead.
func (UseCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{234, 0}
}

type VisionBaseCode_Value int32

const (
	VisionBaseCode_INVALID_UNINITIALIZED VisionBaseCode_Value = 0
	VisionBaseCode_UP                    VisionBaseCode_Value = 1
	VisionBaseCode_DOWN                  VisionBaseCode_Value = 2
	VisionBaseCode_IN                    VisionBaseCode_Value = 3
	VisionBaseCode_OUT                   VisionBaseCode_Value = 4
)

// Enum value maps for VisionBaseCode_Value.
var (
	VisionBaseCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "UP",
		2: "DOWN",
		3: "IN",
		4: "OUT",
	}
	VisionBaseCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"UP":                    1,
		"DOWN":                  2,
		"IN":                    3,
		"OUT":                   4,
	}
)

func (x VisionBaseCode_Value) Enum() *VisionBaseCode_Value {
	p := new(VisionBaseCode_Value)
	*p = x
	return p
}

func (x VisionBaseCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VisionBaseCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[235].Descriptor()
}

func (VisionBaseCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[235]
}

func (x VisionBaseCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VisionBaseCode_Value.Descriptor instead.
func (VisionBaseCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{235, 0}
}

type VisionEyesCode_Value int32

const (
	VisionEyesCode_INVALID_UNINITIALIZED VisionEyesCode_Value = 0
	VisionEyesCode_RIGHT                 VisionEyesCode_Value = 1
	VisionEyesCode_LEFT                  VisionEyesCode_Value = 2
)

// Enum value maps for VisionEyesCode_Value.
var (
	VisionEyesCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "RIGHT",
		2: "LEFT",
	}
	VisionEyesCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"RIGHT":                 1,
		"LEFT":                  2,
	}
)

func (x VisionEyesCode_Value) Enum() *VisionEyesCode_Value {
	p := new(VisionEyesCode_Value)
	*p = x
	return p
}

func (x VisionEyesCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VisionEyesCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[236].Descriptor()
}

func (VisionEyesCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[236]
}

func (x VisionEyesCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VisionEyesCode_Value.Descriptor instead.
func (VisionEyesCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{236, 0}
}

type WeekOfMonthCode_Value int32

const (
	WeekOfMonthCode_INVALID_UNINITIALIZED WeekOfMonthCode_Value = 0
	WeekOfMonthCode_FIRST                 WeekOfMonthCode_Value = 1
	WeekOfMonthCode_SECOND                WeekOfMonthCode_Value = 2
	WeekOfMonthCode_THIRD                 WeekOfMonthCode_Value = 3
	WeekOfMonthCode_FOURTH                WeekOfMonthCode_Value = 4
	WeekOfMonthCode_LAST                  WeekOfMonthCode_Value = 5
)

// Enum value maps for WeekOfMonthCode_Value.
var (
	WeekOfMonthCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "FIRST",
		2: "SECOND",
		3: "THIRD",
		4: "FOURTH",
		5: "LAST",
	}
	WeekOfMonthCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"FIRST":                 1,
		"SECOND":                2,
		"THIRD":                 3,
		"FOURTH":                4,
		"LAST":                  5,
	}
)

func (x WeekOfMonthCode_Value) Enum() *WeekOfMonthCode_Value {
	p := new(WeekOfMonthCode_Value)
	*p = x
	return p
}

func (x WeekOfMonthCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WeekOfMonthCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[237].Descriptor()
}

func (WeekOfMonthCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes[237]
}

func (x WeekOfMonthCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WeekOfMonthCode_Value.Descriptor instead.
func (WeekOfMonthCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{237, 0}
}

// Indicates whether the account is available to be used.
// See http://hl7.org/fhir/account-status
type AccountStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AccountStatusCode) Reset() {
	*x = AccountStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountStatusCode) ProtoMessage() {}

func (x *AccountStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountStatusCode.ProtoReflect.Descriptor instead.
func (*AccountStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{0}
}

// Defines behavior for an action or a group for how many times that item may be
// repeated. See http://hl7.org/fhir/action-cardinality-behavior
type ActionCardinalityBehaviorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActionCardinalityBehaviorCode) Reset() {
	*x = ActionCardinalityBehaviorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionCardinalityBehaviorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionCardinalityBehaviorCode) ProtoMessage() {}

func (x *ActionCardinalityBehaviorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionCardinalityBehaviorCode.ProtoReflect.Descriptor instead.
func (*ActionCardinalityBehaviorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{1}
}

// Defines the kinds of conditions that can appear on actions.
// See http://hl7.org/fhir/action-condition-kind
type ActionConditionKindCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActionConditionKindCode) Reset() {
	*x = ActionConditionKindCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionConditionKindCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionConditionKindCode) ProtoMessage() {}

func (x *ActionConditionKindCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionConditionKindCode.ProtoReflect.Descriptor instead.
func (*ActionConditionKindCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{2}
}

// Defines organization behavior of a group.
// See http://hl7.org/fhir/action-grouping-behavior
type ActionGroupingBehaviorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActionGroupingBehaviorCode) Reset() {
	*x = ActionGroupingBehaviorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionGroupingBehaviorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionGroupingBehaviorCode) ProtoMessage() {}

func (x *ActionGroupingBehaviorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionGroupingBehaviorCode.ProtoReflect.Descriptor instead.
func (*ActionGroupingBehaviorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{3}
}

// The type of participant for the action.
// See http://hl7.org/fhir/action-participant-type
type ActionParticipantTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActionParticipantTypeCode) Reset() {
	*x = ActionParticipantTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionParticipantTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionParticipantTypeCode) ProtoMessage() {}

func (x *ActionParticipantTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionParticipantTypeCode.ProtoReflect.Descriptor instead.
func (*ActionParticipantTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{4}
}

// Defines selection frequency behavior for an action or group.
// See http://hl7.org/fhir/action-precheck-behavior
type ActionPrecheckBehaviorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActionPrecheckBehaviorCode) Reset() {
	*x = ActionPrecheckBehaviorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionPrecheckBehaviorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionPrecheckBehaviorCode) ProtoMessage() {}

func (x *ActionPrecheckBehaviorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionPrecheckBehaviorCode.ProtoReflect.Descriptor instead.
func (*ActionPrecheckBehaviorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{5}
}

// Defines the types of relationships between actions.
// See http://hl7.org/fhir/action-relationship-type
type ActionRelationshipTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActionRelationshipTypeCode) Reset() {
	*x = ActionRelationshipTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionRelationshipTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionRelationshipTypeCode) ProtoMessage() {}

func (x *ActionRelationshipTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionRelationshipTypeCode.ProtoReflect.Descriptor instead.
func (*ActionRelationshipTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{6}
}

// Defines expectations around whether an action or action group is required.
// See http://hl7.org/fhir/action-required-behavior
type ActionRequiredBehaviorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActionRequiredBehaviorCode) Reset() {
	*x = ActionRequiredBehaviorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionRequiredBehaviorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionRequiredBehaviorCode) ProtoMessage() {}

func (x *ActionRequiredBehaviorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionRequiredBehaviorCode.ProtoReflect.Descriptor instead.
func (*ActionRequiredBehaviorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{7}
}

// Defines selection behavior of a group.
// See http://hl7.org/fhir/action-selection-behavior
type ActionSelectionBehaviorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActionSelectionBehaviorCode) Reset() {
	*x = ActionSelectionBehaviorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionSelectionBehaviorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionSelectionBehaviorCode) ProtoMessage() {}

func (x *ActionSelectionBehaviorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionSelectionBehaviorCode.ProtoReflect.Descriptor instead.
func (*ActionSelectionBehaviorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{8}
}

// Additional Binding Purpose
// See http://hl7.org/fhir/CodeSystem/additional-binding-purpose
type AdditionalBindingPurposeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AdditionalBindingPurposeCode) Reset() {
	*x = AdditionalBindingPurposeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdditionalBindingPurposeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdditionalBindingPurposeCode) ProtoMessage() {}

func (x *AdditionalBindingPurposeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdditionalBindingPurposeCode.ProtoReflect.Descriptor instead.
func (*AdditionalBindingPurposeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{9}
}

// The type of an address (physical / postal).
// See http://hl7.org/fhir/address-type
type AddressTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddressTypeCode) Reset() {
	*x = AddressTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressTypeCode) ProtoMessage() {}

func (x *AddressTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressTypeCode.ProtoReflect.Descriptor instead.
func (*AddressTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{10}
}

// The use of an address.
// See http://hl7.org/fhir/address-use
type AddressUseCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddressUseCode) Reset() {
	*x = AddressUseCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressUseCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressUseCode) ProtoMessage() {}

func (x *AddressUseCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressUseCode.ProtoReflect.Descriptor instead.
func (*AddressUseCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{11}
}

// The gender of a person used for administrative purposes.
// See http://hl7.org/fhir/administrative-gender
type AdministrativeGenderCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AdministrativeGenderCode) Reset() {
	*x = AdministrativeGenderCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdministrativeGenderCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdministrativeGenderCode) ProtoMessage() {}

func (x *AdministrativeGenderCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdministrativeGenderCode.ProtoReflect.Descriptor instead.
func (*AdministrativeGenderCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{12}
}

// Overall nature of the adverse event, e.g. real or potential.
// See http://hl7.org/fhir/adverse-event-actuality
type AdverseEventActualityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AdverseEventActualityCode) Reset() {
	*x = AdverseEventActualityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdverseEventActualityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdverseEventActualityCode) ProtoMessage() {}

func (x *AdverseEventActualityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdverseEventActualityCode.ProtoReflect.Descriptor instead.
func (*AdverseEventActualityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{13}
}

// How resource references can be aggregated.
// See http://hl7.org/fhir/resource-aggregation-mode
type AggregationModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AggregationModeCode) Reset() {
	*x = AggregationModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregationModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregationModeCode) ProtoMessage() {}

func (x *AggregationModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregationModeCode.ProtoReflect.Descriptor instead.
func (*AggregationModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{14}
}

// Category of an identified substance associated with allergies or
// intolerances. See http://hl7.org/fhir/allergy-intolerance-category
type AllergyIntoleranceCategoryCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AllergyIntoleranceCategoryCode) Reset() {
	*x = AllergyIntoleranceCategoryCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntoleranceCategoryCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntoleranceCategoryCode) ProtoMessage() {}

func (x *AllergyIntoleranceCategoryCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntoleranceCategoryCode.ProtoReflect.Descriptor instead.
func (*AllergyIntoleranceCategoryCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{15}
}

// Estimate of the potential clinical harm, or seriousness, of a reaction to an
// identified substance. See http://hl7.org/fhir/allergy-intolerance-criticality
type AllergyIntoleranceCriticalityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AllergyIntoleranceCriticalityCode) Reset() {
	*x = AllergyIntoleranceCriticalityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntoleranceCriticalityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntoleranceCriticalityCode) ProtoMessage() {}

func (x *AllergyIntoleranceCriticalityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntoleranceCriticalityCode.ProtoReflect.Descriptor instead.
func (*AllergyIntoleranceCriticalityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{16}
}

// Clinical assessment of the severity of a reaction event as a whole,
// potentially considering multiple different manifestations. See
// http://hl7.org/fhir/reaction-event-severity
type AllergyIntoleranceSeverityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AllergyIntoleranceSeverityCode) Reset() {
	*x = AllergyIntoleranceSeverityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntoleranceSeverityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntoleranceSeverityCode) ProtoMessage() {}

func (x *AllergyIntoleranceSeverityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntoleranceSeverityCode.ProtoReflect.Descriptor instead.
func (*AllergyIntoleranceSeverityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{17}
}

// The free/busy status of an appointment.
// See http://hl7.org/fhir/appointmentstatus
type AppointmentStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AppointmentStatusCode) Reset() {
	*x = AppointmentStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppointmentStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppointmentStatusCode) ProtoMessage() {}

func (x *AppointmentStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppointmentStatusCode.ProtoReflect.Descriptor instead.
func (*AppointmentStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{18}
}

// Possible values for the disposition of a comment or change request, typically
// used for comments and change requests, to indicate the disposition of the
// responsible party towards the changes suggested by the comment or change
// request. See http://hl7.org/fhir/artifactassessment-disposition
type ArtifactAssessmentDispositionCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ArtifactAssessmentDispositionCode) Reset() {
	*x = ArtifactAssessmentDispositionCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactAssessmentDispositionCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactAssessmentDispositionCode) ProtoMessage() {}

func (x *ArtifactAssessmentDispositionCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactAssessmentDispositionCode.ProtoReflect.Descriptor instead.
func (*ArtifactAssessmentDispositionCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{19}
}

// The type of information contained in a component of an artifact assessment.
// See http://hl7.org/fhir/artifactassessment-information-type
type ArtifactAssessmentInformationTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ArtifactAssessmentInformationTypeCode) Reset() {
	*x = ArtifactAssessmentInformationTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactAssessmentInformationTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactAssessmentInformationTypeCode) ProtoMessage() {}

func (x *ArtifactAssessmentInformationTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactAssessmentInformationTypeCode.ProtoReflect.Descriptor instead.
func (*ArtifactAssessmentInformationTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{20}
}

// Possible values for the workflow status of the comment or assessment,
// typically used to coordinate workflow around the process of accepting and
// rejecting changes and comments on the artifact. See
// http://hl7.org/fhir/artifactassessment-workflow-status
type ArtifactAssessmentWorkflowStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ArtifactAssessmentWorkflowStatusCode) Reset() {
	*x = ArtifactAssessmentWorkflowStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactAssessmentWorkflowStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactAssessmentWorkflowStatusCode) ProtoMessage() {}

func (x *ArtifactAssessmentWorkflowStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactAssessmentWorkflowStatusCode.ProtoReflect.Descriptor instead.
func (*ArtifactAssessmentWorkflowStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{21}
}

// The type of direction to use for assertion.
// See http://hl7.org/fhir/assert-direction-codes
type AssertionDirectionTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AssertionDirectionTypeCode) Reset() {
	*x = AssertionDirectionTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssertionDirectionTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssertionDirectionTypeCode) ProtoMessage() {}

func (x *AssertionDirectionTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssertionDirectionTypeCode.ProtoReflect.Descriptor instead.
func (*AssertionDirectionTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{22}
}

// The type of manual completion to use for assertion.
// See http://hl7.org/fhir/assert-manual-completion-codes
type AssertionManualCompletionTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AssertionManualCompletionTypeCode) Reset() {
	*x = AssertionManualCompletionTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssertionManualCompletionTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssertionManualCompletionTypeCode) ProtoMessage() {}

func (x *AssertionManualCompletionTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssertionManualCompletionTypeCode.ProtoReflect.Descriptor instead.
func (*AssertionManualCompletionTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{23}
}

// The type of operator to use for assertion.
// See http://hl7.org/fhir/assert-operator-codes
type AssertionOperatorTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AssertionOperatorTypeCode) Reset() {
	*x = AssertionOperatorTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssertionOperatorTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssertionOperatorTypeCode) ProtoMessage() {}

func (x *AssertionOperatorTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssertionOperatorTypeCode.ProtoReflect.Descriptor instead.
func (*AssertionOperatorTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{24}
}

// The type of response code to use for assertion.
// See http://hl7.org/fhir/assert-response-code-types
type AssertionResponseTypesCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AssertionResponseTypesCode) Reset() {
	*x = AssertionResponseTypesCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssertionResponseTypesCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssertionResponseTypesCode) ProtoMessage() {}

func (x *AssertionResponseTypesCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssertionResponseTypesCode.ProtoReflect.Descriptor instead.
func (*AssertionResponseTypesCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{25}
}

// Indicator for type of action performed during the event that generated the
// event. See http://hl7.org/fhir/audit-event-action
type AuditEventActionCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AuditEventActionCode) Reset() {
	*x = AuditEventActionCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditEventActionCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditEventActionCode) ProtoMessage() {}

func (x *AuditEventActionCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditEventActionCode.ProtoReflect.Descriptor instead.
func (*AuditEventActionCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{26}
}

// The severity of the audit entry.
// See http://hl7.org/fhir/audit-event-severity
type AuditEventSeverityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AuditEventSeverityCode) Reset() {
	*x = AuditEventSeverityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditEventSeverityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditEventSeverityCode) ProtoMessage() {}

func (x *AuditEventSeverityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditEventSeverityCode.ProtoReflect.Descriptor instead.
func (*AuditEventSeverityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{27}
}

// Indication of the degree of conformance expectations associated with a
// binding. See http://hl7.org/fhir/binding-strength
type BindingStrengthCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BindingStrengthCode) Reset() {
	*x = BindingStrengthCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindingStrengthCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindingStrengthCode) ProtoMessage() {}

func (x *BindingStrengthCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindingStrengthCode.ProtoReflect.Descriptor instead.
func (*BindingStrengthCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{28}
}

// BiologicallyDerivedProductDispense Status Codes
// See http://hl7.org/fhir/biologicallyderivedproductdispense-status
type BiologicallyDerivedProductDispenseCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BiologicallyDerivedProductDispenseCode) Reset() {
	*x = BiologicallyDerivedProductDispenseCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BiologicallyDerivedProductDispenseCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BiologicallyDerivedProductDispenseCode) ProtoMessage() {}

func (x *BiologicallyDerivedProductDispenseCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BiologicallyDerivedProductDispenseCode.ProtoReflect.Descriptor instead.
func (*BiologicallyDerivedProductDispenseCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{29}
}

// Indicates the purpose of a bundle - how it is intended to be used.
// See http://hl7.org/fhir/bundle-type
type BundleTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BundleTypeCode) Reset() {
	*x = BundleTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BundleTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BundleTypeCode) ProtoMessage() {}

func (x *BundleTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BundleTypeCode.ProtoReflect.Descriptor instead.
func (*BundleTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{30}
}

// How a capability statement is intended to be used.
// See http://hl7.org/fhir/capability-statement-kind
type CapabilityStatementKindCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CapabilityStatementKindCode) Reset() {
	*x = CapabilityStatementKindCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapabilityStatementKindCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapabilityStatementKindCode) ProtoMessage() {}

func (x *CapabilityStatementKindCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapabilityStatementKindCode.ProtoReflect.Descriptor instead.
func (*CapabilityStatementKindCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{31}
}

// Indicates the status of the care team.
// See http://hl7.org/fhir/care-team-status
type CareTeamStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CareTeamStatusCode) Reset() {
	*x = CareTeamStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CareTeamStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CareTeamStatusCode) ProtoMessage() {}

func (x *CareTeamStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CareTeamStatusCode.ProtoReflect.Descriptor instead.
func (*CareTeamStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{32}
}

// Logical grouping of characteristics.
// See http://hl7.org/fhir/characteristic-combination
type CharacteristicCombinationCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CharacteristicCombinationCode) Reset() {
	*x = CharacteristicCombinationCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacteristicCombinationCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacteristicCombinationCode) ProtoMessage() {}

func (x *CharacteristicCombinationCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacteristicCombinationCode.ProtoReflect.Descriptor instead.
func (*CharacteristicCombinationCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{33}
}

// Codes identifying the lifecycle stage of a ChargeItem.
// See http://hl7.org/fhir/chargeitem-status
type ChargeItemStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChargeItemStatusCode) Reset() {
	*x = ChargeItemStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargeItemStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeItemStatusCode) ProtoMessage() {}

func (x *ChargeItemStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeItemStatusCode.ProtoReflect.Descriptor instead.
func (*ChargeItemStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{34}
}

// This value set includes Claim Processing Outcome codes.
// See http://hl7.org/fhir/claim-outcome
type ClaimProcessingOutcomeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClaimProcessingOutcomeCode) Reset() {
	*x = ClaimProcessingOutcomeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimProcessingOutcomeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimProcessingOutcomeCode) ProtoMessage() {}

func (x *ClaimProcessingOutcomeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimProcessingOutcomeCode.ProtoReflect.Descriptor instead.
func (*ClaimProcessingOutcomeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{35}
}

// Overall defining type of this clinical use definition.
// See http://hl7.org/fhir/clinical-use-definition-type
type ClinicalUseDefinitionTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClinicalUseDefinitionTypeCode) Reset() {
	*x = ClinicalUseDefinitionTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClinicalUseDefinitionTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClinicalUseDefinitionTypeCode) ProtoMessage() {}

func (x *ClinicalUseDefinitionTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClinicalUseDefinitionTypeCode.ProtoReflect.Descriptor instead.
func (*ClinicalUseDefinitionTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{36}
}

// The degree to which the server supports the code search parameter on
// ValueSet, if it is supported. See http://hl7.org/fhir/code-search-support
type CodeSearchSupportCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CodeSearchSupportCode) Reset() {
	*x = CodeSearchSupportCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeSearchSupportCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSearchSupportCode) ProtoMessage() {}

func (x *CodeSearchSupportCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSearchSupportCode.ProtoReflect.Descriptor instead.
func (*CodeSearchSupportCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{37}
}

// The extent of the content of the code system (the concepts and codes it
// defines) are represented in a code system resource. See
// http://hl7.org/fhir/codesystem-content-mode
type CodeSystemContentModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CodeSystemContentModeCode) Reset() {
	*x = CodeSystemContentModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeSystemContentModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSystemContentModeCode) ProtoMessage() {}

func (x *CodeSystemContentModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSystemContentModeCode.ProtoReflect.Descriptor instead.
func (*CodeSystemContentModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{38}
}

// The meaning of the hierarchy of concepts in a code system.
// See http://hl7.org/fhir/codesystem-hierarchy-meaning
type CodeSystemHierarchyMeaningCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CodeSystemHierarchyMeaningCode) Reset() {
	*x = CodeSystemHierarchyMeaningCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeSystemHierarchyMeaningCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSystemHierarchyMeaningCode) ProtoMessage() {}

func (x *CodeSystemHierarchyMeaningCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSystemHierarchyMeaningCode.ProtoReflect.Descriptor instead.
func (*CodeSystemHierarchyMeaningCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{39}
}

// This code system represents that named RGB colors found in the [CSS4
// specification](https://www.w3.org/TR/css-color-4/). The names are not case
// sensitive and different cases are encountered in common use (e.g. AliceBlue
// vs aliceblue. See http://hl7.org/fhir/color-names
type ColorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ColorCode) Reset() {
	*x = ColorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColorCode) ProtoMessage() {}

func (x *ColorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColorCode.ProtoReflect.Descriptor instead.
func (*ColorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{40}
}

// RGB values for color. Valid codes are #RRGGBB where RR, GG, and BB are two
// letter hex codes, values 00..ff. codes are case insensitive. This code system
// does not define the 16million+ valid RGB codes (terminology servers will need
// code to support the RGB grammar). See http://hl7.org/fhir/color-rgb
type ColorRGBCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ColorRGBCode) Reset() {
	*x = ColorRGBCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColorRGBCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColorRGBCode) ProtoMessage() {}

func (x *ColorRGBCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColorRGBCode.ProtoReflect.Descriptor instead.
func (*ColorRGBCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{41}
}

// Which type a compartment definition describes.
// See http://hl7.org/fhir/compartment-type
type CompartmentTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CompartmentTypeCode) Reset() {
	*x = CompartmentTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompartmentTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompartmentTypeCode) ProtoMessage() {}

func (x *CompartmentTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompartmentTypeCode.ProtoReflect.Descriptor instead.
func (*CompartmentTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{42}
}

// The workflow/clinical status of the composition.
// See http://hl7.org/fhir/composition-status
type CompositionStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CompositionStatusCode) Reset() {
	*x = CompositionStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompositionStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompositionStatusCode) ProtoMessage() {}

func (x *CompositionStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompositionStatusCode.ProtoReflect.Descriptor instead.
func (*CompositionStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{43}
}

// The type of a ConceptMap map attribute value.
// See http://hl7.org/fhir/conceptmap-attribute-type
type ConceptMapAttributeTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConceptMapAttributeTypeCode) Reset() {
	*x = ConceptMapAttributeTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConceptMapAttributeTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConceptMapAttributeTypeCode) ProtoMessage() {}

func (x *ConceptMapAttributeTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConceptMapAttributeTypeCode.ProtoReflect.Descriptor instead.
func (*ConceptMapAttributeTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{44}
}

// Defines which action to take if there is no match in the group.
// See http://hl7.org/fhir/conceptmap-unmapped-mode
type ConceptMapGroupUnmappedModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConceptMapGroupUnmappedModeCode) Reset() {
	*x = ConceptMapGroupUnmappedModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConceptMapGroupUnmappedModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConceptMapGroupUnmappedModeCode) ProtoMessage() {}

func (x *ConceptMapGroupUnmappedModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConceptMapGroupUnmappedModeCode.ProtoReflect.Descriptor instead.
func (*ConceptMapGroupUnmappedModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{45}
}

// The type of a ConceptMap mapping property value.
// See http://hl7.org/fhir/conceptmap-property-type
type ConceptMapPropertyTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConceptMapPropertyTypeCode) Reset() {
	*x = ConceptMapPropertyTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConceptMapPropertyTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConceptMapPropertyTypeCode) ProtoMessage() {}

func (x *ConceptMapPropertyTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConceptMapPropertyTypeCode.ProtoReflect.Descriptor instead.
func (*ConceptMapPropertyTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{46}
}

// The relationship between concepts.
// See http://hl7.org/fhir/concept-map-relationship
type ConceptMapRelationshipCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConceptMapRelationshipCode) Reset() {
	*x = ConceptMapRelationshipCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConceptMapRelationshipCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConceptMapRelationshipCode) ProtoMessage() {}

func (x *ConceptMapRelationshipCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConceptMapRelationshipCode.ProtoReflect.Descriptor instead.
func (*ConceptMapRelationshipCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{47}
}

// Kind of precondition for the condition.
// See http://hl7.org/fhir/condition-precondition-type
type ConditionPreconditionTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConditionPreconditionTypeCode) Reset() {
	*x = ConditionPreconditionTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionPreconditionTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionPreconditionTypeCode) ProtoMessage() {}

func (x *ConditionPreconditionTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionPreconditionTypeCode.ProtoReflect.Descriptor instead.
func (*ConditionPreconditionTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{48}
}

// The use of a questionnaire.
// See http://hl7.org/fhir/condition-questionnaire-purpose
type ConditionQuestionnairePurposeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConditionQuestionnairePurposeCode) Reset() {
	*x = ConditionQuestionnairePurposeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionQuestionnairePurposeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionQuestionnairePurposeCode) ProtoMessage() {}

func (x *ConditionQuestionnairePurposeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionQuestionnairePurposeCode.ProtoReflect.Descriptor instead.
func (*ConditionQuestionnairePurposeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{49}
}

// A code that indicates how the server supports conditional delete.
// See http://hl7.org/fhir/conditional-delete-status
type ConditionalDeleteStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConditionalDeleteStatusCode) Reset() {
	*x = ConditionalDeleteStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionalDeleteStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionalDeleteStatusCode) ProtoMessage() {}

func (x *ConditionalDeleteStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionalDeleteStatusCode.ProtoReflect.Descriptor instead.
func (*ConditionalDeleteStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{50}
}

// A code that indicates how the server supports conditional read.
// See http://hl7.org/fhir/conditional-read-status
type ConditionalReadStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConditionalReadStatusCode) Reset() {
	*x = ConditionalReadStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionalReadStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionalReadStatusCode) ProtoMessage() {}

func (x *ConditionalReadStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionalReadStatusCode.ProtoReflect.Descriptor instead.
func (*ConditionalReadStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{51}
}

// ConformanceExpectation
// See http://hl7.org/fhir/conformance-expectation
type ConformanceExpectationCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConformanceExpectationCode) Reset() {
	*x = ConformanceExpectationCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConformanceExpectationCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConformanceExpectationCode) ProtoMessage() {}

func (x *ConformanceExpectationCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConformanceExpectationCode.ProtoReflect.Descriptor instead.
func (*ConformanceExpectationCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{52}
}

// How a resource reference is interpreted when testing consent restrictions.
// See http://hl7.org/fhir/consent-data-meaning
type ConsentDataMeaningCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConsentDataMeaningCode) Reset() {
	*x = ConsentDataMeaningCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsentDataMeaningCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentDataMeaningCode) ProtoMessage() {}

func (x *ConsentDataMeaningCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentDataMeaningCode.ProtoReflect.Descriptor instead.
func (*ConsentDataMeaningCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{53}
}

// How a rule statement is applied, such as adding additional consent or
// removing consent. See http://hl7.org/fhir/consent-provision-type
type ConsentProvisionTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConsentProvisionTypeCode) Reset() {
	*x = ConsentProvisionTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsentProvisionTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentProvisionTypeCode) ProtoMessage() {}

func (x *ConsentProvisionTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentProvisionTypeCode.ProtoReflect.Descriptor instead.
func (*ConsentProvisionTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{54}
}

// Indicates the state of the consent.
// See http://hl7.org/fhir/consent-state-codes
type ConsentStateCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConsentStateCode) Reset() {
	*x = ConsentStateCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsentStateCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentStateCode) ProtoMessage() {}

func (x *ConsentStateCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentStateCode.ProtoReflect.Descriptor instead.
func (*ConsentStateCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{55}
}

// SHALL applications comply with this constraint?
// See http://hl7.org/fhir/constraint-severity
type ConstraintSeverityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConstraintSeverityCode) Reset() {
	*x = ConstraintSeverityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConstraintSeverityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstraintSeverityCode) ProtoMessage() {}

func (x *ConstraintSeverityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstraintSeverityCode.ProtoReflect.Descriptor instead.
func (*ConstraintSeverityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{56}
}

// Telecommunications form for contact point.
// See http://hl7.org/fhir/contact-point-system
type ContactPointSystemCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ContactPointSystemCode) Reset() {
	*x = ContactPointSystemCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactPointSystemCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactPointSystemCode) ProtoMessage() {}

func (x *ContactPointSystemCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactPointSystemCode.ProtoReflect.Descriptor instead.
func (*ContactPointSystemCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{57}
}

// Use of contact point.
// See http://hl7.org/fhir/contact-point-use
type ContactPointUseCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ContactPointUseCode) Reset() {
	*x = ContactPointUseCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactPointUseCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactPointUseCode) ProtoMessage() {}

func (x *ContactPointUseCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactPointUseCode.ProtoReflect.Descriptor instead.
func (*ContactPointUseCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{58}
}

// This CodeSystem contains FHIR-defined contract publication status types. Each
// definition includes usage notes explaining the precedence order in contract
// publication lifecycle - i.e., while only some stages are required, the order
// in which they may occur is deterministic. See
// http://hl7.org/fhir/contract-publicationstatus
type ContractPublicationStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ContractPublicationStatusCode) Reset() {
	*x = ContractPublicationStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractPublicationStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractPublicationStatusCode) ProtoMessage() {}

func (x *ContractPublicationStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractPublicationStatusCode.ProtoReflect.Descriptor instead.
func (*ContractPublicationStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{59}
}

// This CodeSystem contains FHIR-defined contract status types. Each definition
// includes usage notes explaining the precedence order in contract lifecycle -
// i.e., while only some stages are required, the order in which they may occur
// is deterministic; and a map to comparable FHIR and v.3 status codes. It
// follows guidance about use of status codes in FHIR in [the Status Codes
// Grid](sc.html). See http://hl7.org/fhir/contract-status
type ContractStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ContractStatusCode) Reset() {
	*x = ContractStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractStatusCode) ProtoMessage() {}

func (x *ContractStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractStatusCode.ProtoReflect.Descriptor instead.
func (*ContractStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{60}
}

// The type of contributor.
// See http://hl7.org/fhir/contributor-type
type ContributorTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ContributorTypeCode) Reset() {
	*x = ContributorTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContributorTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContributorTypeCode) ProtoMessage() {}

func (x *ContributorTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContributorTypeCode.ProtoReflect.Descriptor instead.
func (*ContributorTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{61}
}

// Behavior a server can exhibit when a criteria state does not exist (e.g.,
// state prior to a create or after a delete). See
// http://hl7.org/fhir/subscriptiontopic-cr-behavior
type CriteriaNotExistsBehaviorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CriteriaNotExistsBehaviorCode) Reset() {
	*x = CriteriaNotExistsBehaviorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CriteriaNotExistsBehaviorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CriteriaNotExistsBehaviorCode) ProtoMessage() {}

func (x *CriteriaNotExistsBehaviorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CriteriaNotExistsBehaviorCode.ProtoReflect.Descriptor instead.
func (*CriteriaNotExistsBehaviorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{62}
}

// The days of the week.
// See http://hl7.org/fhir/days-of-week
type DaysOfWeekCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DaysOfWeekCode) Reset() {
	*x = DaysOfWeekCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DaysOfWeekCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaysOfWeekCode) ProtoMessage() {}

func (x *DaysOfWeekCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaysOfWeekCode.ProtoReflect.Descriptor instead.
func (*DaysOfWeekCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{63}
}

// Indicates the potential degree of impact of the identified issue on the
// patient. See http://hl7.org/fhir/detectedissue-severity
type DetectedIssueSeverityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DetectedIssueSeverityCode) Reset() {
	*x = DetectedIssueSeverityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetectedIssueSeverityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetectedIssueSeverityCode) ProtoMessage() {}

func (x *DetectedIssueSeverityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetectedIssueSeverityCode.ProtoReflect.Descriptor instead.
func (*DetectedIssueSeverityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{64}
}

// Indicates the status of the detected issue. This code system contains only
// status codes that are not already defined and used from the ObservationStatus
// code system. See http://hl7.org/fhir/detectedissue-status
type DetectedIssueStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DetectedIssueStatusCode) Reset() {
	*x = DetectedIssueStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetectedIssueStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetectedIssueStatusCode) ProtoMessage() {}

func (x *DetectedIssueStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetectedIssueStatusCode.ProtoReflect.Descriptor instead.
func (*DetectedIssueStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{65}
}

// DeviceAssociation Status Codes
// See http://hl7.org/fhir/deviceassociation-status
type DeviceAssociationCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeviceAssociationCode) Reset() {
	*x = DeviceAssociationCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceAssociationCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceAssociationCode) ProtoMessage() {}

func (x *DeviceAssociationCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceAssociationCode.ProtoReflect.Descriptor instead.
func (*DeviceAssociationCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{66}
}

// DeviceAssociation Status Reason Codes
// See http://hl7.org/fhir/deviceassociation-status-reason
type DeviceAssociationStatusReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeviceAssociationStatusReason) Reset() {
	*x = DeviceAssociationStatusReason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceAssociationStatusReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceAssociationStatusReason) ProtoMessage() {}

func (x *DeviceAssociationStatusReason) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceAssociationStatusReason.ProtoReflect.Descriptor instead.
func (*DeviceAssociationStatusReason) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{67}
}

// The type of relation between devices.
// See http://hl7.org/fhir/device-correctiveactionscope
type DeviceCorrectiveActionScopeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeviceCorrectiveActionScopeCode) Reset() {
	*x = DeviceCorrectiveActionScopeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceCorrectiveActionScopeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceCorrectiveActionScopeCode) ProtoMessage() {}

func (x *DeviceCorrectiveActionScopeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceCorrectiveActionScopeCode.ProtoReflect.Descriptor instead.
func (*DeviceCorrectiveActionScopeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{68}
}

// DeviceDispense Status Codes
// See http://hl7.org/fhir/devicedispense-status
type DeviceDispenseStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeviceDispenseStatusCode) Reset() {
	*x = DeviceDispenseStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceDispenseStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceDispenseStatusCode) ProtoMessage() {}

func (x *DeviceDispenseStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceDispenseStatusCode.ProtoReflect.Descriptor instead.
func (*DeviceDispenseStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{69}
}

// Describes the state of a metric calibration.
// See http://hl7.org/fhir/metric-calibration-state
type DeviceMetricCalibrationStateCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeviceMetricCalibrationStateCode) Reset() {
	*x = DeviceMetricCalibrationStateCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceMetricCalibrationStateCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceMetricCalibrationStateCode) ProtoMessage() {}

func (x *DeviceMetricCalibrationStateCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceMetricCalibrationStateCode.ProtoReflect.Descriptor instead.
func (*DeviceMetricCalibrationStateCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{70}
}

// Describes the type of a metric calibration.
// See http://hl7.org/fhir/metric-calibration-type
type DeviceMetricCalibrationTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeviceMetricCalibrationTypeCode) Reset() {
	*x = DeviceMetricCalibrationTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceMetricCalibrationTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceMetricCalibrationTypeCode) ProtoMessage() {}

func (x *DeviceMetricCalibrationTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceMetricCalibrationTypeCode.ProtoReflect.Descriptor instead.
func (*DeviceMetricCalibrationTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{71}
}

// Describes the category of the metric.
// See http://hl7.org/fhir/metric-category
type DeviceMetricCategoryCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeviceMetricCategoryCode) Reset() {
	*x = DeviceMetricCategoryCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceMetricCategoryCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceMetricCategoryCode) ProtoMessage() {}

func (x *DeviceMetricCategoryCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceMetricCategoryCode.ProtoReflect.Descriptor instead.
func (*DeviceMetricCategoryCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{72}
}

// Describes the operational status of the DeviceMetric.
// See http://hl7.org/fhir/metric-operational-status
type DeviceMetricOperationalStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeviceMetricOperationalStatusCode) Reset() {
	*x = DeviceMetricOperationalStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceMetricOperationalStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceMetricOperationalStatusCode) ProtoMessage() {}

func (x *DeviceMetricOperationalStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceMetricOperationalStatusCode.ProtoReflect.Descriptor instead.
func (*DeviceMetricOperationalStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{73}
}

// The type of name the device is referred by.
// See http://hl7.org/fhir/device-nametype
type DeviceNameTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeviceNameTypeCode) Reset() {
	*x = DeviceNameTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceNameTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceNameTypeCode) ProtoMessage() {}

func (x *DeviceNameTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceNameTypeCode.ProtoReflect.Descriptor instead.
func (*DeviceNameTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{74}
}

// The production identifier(s) that are expected to appear in the UDI carrier.
// See http://hl7.org/fhir/device-productidentifierinudi
type DeviceProductionIdentifierInUDICode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeviceProductionIdentifierInUDICode) Reset() {
	*x = DeviceProductionIdentifierInUDICode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceProductionIdentifierInUDICode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceProductionIdentifierInUDICode) ProtoMessage() {}

func (x *DeviceProductionIdentifierInUDICode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceProductionIdentifierInUDICode.ProtoReflect.Descriptor instead.
func (*DeviceProductionIdentifierInUDICode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{75}
}

// The type of regulatory identifier.
// See http://hl7.org/fhir/devicedefinition-regulatory-identifier-type
type DeviceRegulatoryIdentifierTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeviceRegulatoryIdentifierTypeCode) Reset() {
	*x = DeviceRegulatoryIdentifierTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceRegulatoryIdentifierTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceRegulatoryIdentifierTypeCode) ProtoMessage() {}

func (x *DeviceRegulatoryIdentifierTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceRegulatoryIdentifierTypeCode.ProtoReflect.Descriptor instead.
func (*DeviceRegulatoryIdentifierTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{76}
}

// A coded concept indicating the current status of the Device Usage.
// See http://hl7.org/fhir/deviceusage-status
type DeviceUsageStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeviceUsageStatusCode) Reset() {
	*x = DeviceUsageStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceUsageStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceUsageStatusCode) ProtoMessage() {}

func (x *DeviceUsageStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceUsageStatusCode.ProtoReflect.Descriptor instead.
func (*DeviceUsageStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{77}
}

// The status of the diagnostic report.
// See http://hl7.org/fhir/diagnostic-report-status
type DiagnosticReportStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DiagnosticReportStatusCode) Reset() {
	*x = DiagnosticReportStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnosticReportStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosticReportStatusCode) ProtoMessage() {}

func (x *DiagnosticReportStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosticReportStatusCode.ProtoReflect.Descriptor instead.
func (*DiagnosticReportStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{78}
}

// How an element value is interpreted when discrimination is evaluated.
// See http://hl7.org/fhir/discriminator-type
type DiscriminatorTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DiscriminatorTypeCode) Reset() {
	*x = DiscriminatorTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscriminatorTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscriminatorTypeCode) ProtoMessage() {}

func (x *DiscriminatorTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscriminatorTypeCode.ProtoReflect.Descriptor instead.
func (*DiscriminatorTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{79}
}

// Whether the application produces or consumes documents.
// See http://hl7.org/fhir/document-mode
type DocumentModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DocumentModeCode) Reset() {
	*x = DocumentModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentModeCode) ProtoMessage() {}

func (x *DocumentModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentModeCode.ProtoReflect.Descriptor instead.
func (*DocumentModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{80}
}

// The status of the document reference.
// See http://hl7.org/fhir/document-reference-status
type DocumentReferenceStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DocumentReferenceStatusCode) Reset() {
	*x = DocumentReferenceStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentReferenceStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentReferenceStatusCode) ProtoMessage() {}

func (x *DocumentReferenceStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentReferenceStatusCode.ProtoReflect.Descriptor instead.
func (*DocumentReferenceStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{81}
}

// This value set includes Claim Processing Outcome codes.
// See http://hl7.org/fhir/eligibility-outcome
type EligibilityOutcomeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EligibilityOutcomeCode) Reset() {
	*x = EligibilityOutcomeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EligibilityOutcomeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EligibilityOutcomeCode) ProtoMessage() {}

func (x *EligibilityOutcomeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EligibilityOutcomeCode.ProtoReflect.Descriptor instead.
func (*EligibilityOutcomeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{82}
}

// A code specifying the types of information being requested.
// See http://hl7.org/fhir/eligibilityrequest-purpose
type EligibilityRequestPurposeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EligibilityRequestPurposeCode) Reset() {
	*x = EligibilityRequestPurposeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EligibilityRequestPurposeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EligibilityRequestPurposeCode) ProtoMessage() {}

func (x *EligibilityRequestPurposeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EligibilityRequestPurposeCode.ProtoReflect.Descriptor instead.
func (*EligibilityRequestPurposeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{83}
}

// A code specifying the types of information being requested.
// See http://hl7.org/fhir/eligibilityresponse-purpose
type EligibilityResponsePurposeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EligibilityResponsePurposeCode) Reset() {
	*x = EligibilityResponsePurposeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EligibilityResponsePurposeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EligibilityResponsePurposeCode) ProtoMessage() {}

func (x *EligibilityResponsePurposeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EligibilityResponsePurposeCode.ProtoReflect.Descriptor instead.
func (*EligibilityResponsePurposeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{84}
}

// Controls how multiple enableWhen values are interpreted -  whether all or any
// must be true. See http://hl7.org/fhir/questionnaire-enable-behavior
type EnableWhenBehaviorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EnableWhenBehaviorCode) Reset() {
	*x = EnableWhenBehaviorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableWhenBehaviorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableWhenBehaviorCode) ProtoMessage() {}

func (x *EnableWhenBehaviorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableWhenBehaviorCode.ProtoReflect.Descriptor instead.
func (*EnableWhenBehaviorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{85}
}

// The status of the location.
// See http://hl7.org/fhir/encounter-location-status
type EncounterLocationStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EncounterLocationStatusCode) Reset() {
	*x = EncounterLocationStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncounterLocationStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncounterLocationStatusCode) ProtoMessage() {}

func (x *EncounterLocationStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncounterLocationStatusCode.ProtoReflect.Descriptor instead.
func (*EncounterLocationStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{86}
}

// Current state of the encounter.
// See http://hl7.org/fhir/encounter-status
type EncounterStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EncounterStatusCode) Reset() {
	*x = EncounterStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncounterStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncounterStatusCode) ProtoMessage() {}

func (x *EncounterStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncounterStatusCode.ProtoReflect.Descriptor instead.
func (*EncounterStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{87}
}

// The status of the endpoint.
// See http://hl7.org/fhir/endpoint-status
type EndpointStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EndpointStatusCode) Reset() {
	*x = EndpointStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndpointStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointStatusCode) ProtoMessage() {}

func (x *EndpointStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointStatusCode.ProtoReflect.Descriptor instead.
func (*EndpointStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{88}
}

// This value set includes Claim Processing Outcome codes.
// See http://hl7.org/fhir/enrollment-outcome
type EnrollmentOutcomeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EnrollmentOutcomeCode) Reset() {
	*x = EnrollmentOutcomeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnrollmentOutcomeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnrollmentOutcomeCode) ProtoMessage() {}

func (x *EnrollmentOutcomeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnrollmentOutcomeCode.ProtoReflect.Descriptor instead.
func (*EnrollmentOutcomeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{89}
}

// The status of the episode of care.
// See http://hl7.org/fhir/episode-of-care-status
type EpisodeOfCareStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EpisodeOfCareStatusCode) Reset() {
	*x = EpisodeOfCareStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpisodeOfCareStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpisodeOfCareStatusCode) ProtoMessage() {}

func (x *EpisodeOfCareStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpisodeOfCareStatusCode.ProtoReflect.Descriptor instead.
func (*EpisodeOfCareStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{90}
}

// The mode of a message capability statement.
// See http://hl7.org/fhir/event-capability-mode
type EventCapabilityModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EventCapabilityModeCode) Reset() {
	*x = EventCapabilityModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventCapabilityModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventCapabilityModeCode) ProtoMessage() {}

func (x *EventCapabilityModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventCapabilityModeCode.ProtoReflect.Descriptor instead.
func (*EventCapabilityModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{91}
}

// Codes identifying the lifecycle stage of an event.
// See http://hl7.org/fhir/event-status
type EventStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EventStatusCode) Reset() {
	*x = EventStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventStatusCode) ProtoMessage() {}

func (x *EventStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventStatusCode.ProtoReflect.Descriptor instead.
func (*EventStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{92}
}

// Real-world event relating to the schedule.
// See http://hl7.org/fhir/event-timing
type EventTimingCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EventTimingCode) Reset() {
	*x = EventTimingCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTimingCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTimingCode) ProtoMessage() {}

func (x *EventTimingCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTimingCode.ProtoReflect.Descriptor instead.
func (*EventTimingCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{93}
}

// The handling of the variable in statistical analysis for exposures or
// outcomes (E.g. Dichotomous, Continuous, Descriptive). See
// http://hl7.org/fhir/variable-handling
type EvidenceVariableHandlingCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EvidenceVariableHandlingCode) Reset() {
	*x = EvidenceVariableHandlingCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvidenceVariableHandlingCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvidenceVariableHandlingCode) ProtoMessage() {}

func (x *EvidenceVariableHandlingCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvidenceVariableHandlingCode.ProtoReflect.Descriptor instead.
func (*EvidenceVariableHandlingCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{94}
}

// The type of actor - system or human.
// See http://hl7.org/fhir/examplescenario-actor-type
type ExampleScenarioActorTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExampleScenarioActorTypeCode) Reset() {
	*x = ExampleScenarioActorTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExampleScenarioActorTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExampleScenarioActorTypeCode) ProtoMessage() {}

func (x *ExampleScenarioActorTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExampleScenarioActorTypeCode.ProtoReflect.Descriptor instead.
func (*ExampleScenarioActorTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{95}
}

// A code specifying the state of the resource instance.
// See http://hl7.org/fhir/explanationofbenefit-status
type ExplanationOfBenefitStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExplanationOfBenefitStatusCode) Reset() {
	*x = ExplanationOfBenefitStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExplanationOfBenefitStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExplanationOfBenefitStatusCode) ProtoMessage() {}

func (x *ExplanationOfBenefitStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExplanationOfBenefitStatusCode.ProtoReflect.Descriptor instead.
func (*ExplanationOfBenefitStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{96}
}

// How an extension context is interpreted.
// See http://hl7.org/fhir/extension-context-type
type ExtensionContextTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExtensionContextTypeCode) Reset() {
	*x = ExtensionContextTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtensionContextTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtensionContextTypeCode) ProtoMessage() {}

func (x *ExtensionContextTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtensionContextTypeCode.ProtoReflect.Descriptor instead.
func (*ExtensionContextTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{97}
}

// The master set of status codes used throughout FHIR. All status codes are
// mapped to one of these codes. See http://hl7.org/fhir/resource-status
type FHIRCanonicalStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FHIRCanonicalStatusCode) Reset() {
	*x = FHIRCanonicalStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FHIRCanonicalStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FHIRCanonicalStatusCode) ProtoMessage() {}

func (x *FHIRCanonicalStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FHIRCanonicalStatusCode.ProtoReflect.Descriptor instead.
func (*FHIRCanonicalStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{98}
}

// The status of the Device record.
// See http://hl7.org/fhir/device-status
type FHIRDeviceStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FHIRDeviceStatusCode) Reset() {
	*x = FHIRDeviceStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FHIRDeviceStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FHIRDeviceStatusCode) ProtoMessage() {}

func (x *FHIRDeviceStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FHIRDeviceStatusCode.ProtoReflect.Descriptor instead.
func (*FHIRDeviceStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{99}
}

// An old resource name no longer used in this version of FHIR (deleted or
// renamed). See http://hl7.org/fhir/fhir-old-types
type FHIROldTypesCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FHIROldTypesCode) Reset() {
	*x = FHIROldTypesCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FHIROldTypesCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FHIROldTypesCode) ProtoMessage() {}

func (x *FHIROldTypesCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FHIROldTypesCode.ProtoReflect.Descriptor instead.
func (*FHIROldTypesCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{100}
}

// The set of interactions defined by the RESTful part of the FHIR
// specification. See http://hl7.org/fhir/restful-interaction
type FHIRRestfulInteractionsCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FHIRRestfulInteractionsCode) Reset() {
	*x = FHIRRestfulInteractionsCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FHIRRestfulInteractionsCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FHIRRestfulInteractionsCode) ProtoMessage() {}

func (x *FHIRRestfulInteractionsCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FHIRRestfulInteractionsCode.ProtoReflect.Descriptor instead.
func (*FHIRRestfulInteractionsCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{101}
}

// A code to indicate if the substance is actively used.
// See http://hl7.org/fhir/substance-status
type FHIRSubstanceStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FHIRSubstanceStatusCode) Reset() {
	*x = FHIRSubstanceStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FHIRSubstanceStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FHIRSubstanceStatusCode) ProtoMessage() {}

func (x *FHIRSubstanceStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FHIRSubstanceStatusCode.ProtoReflect.Descriptor instead.
func (*FHIRSubstanceStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{102}
}

// One of the types defined as part of this version of FHIR.
// See http://hl7.org/fhir/fhir-types
type FHIRTypesCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FHIRTypesCode) Reset() {
	*x = FHIRTypesCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FHIRTypesCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FHIRTypesCode) ProtoMessage() {}

func (x *FHIRTypesCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FHIRTypesCode.ProtoReflect.Descriptor instead.
func (*FHIRTypesCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{103}
}

// All published FHIR Versions.
// See http://hl7.org/fhir/FHIR-version
type FHIRVersionCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FHIRVersionCode) Reset() {
	*x = FHIRVersionCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FHIRVersionCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FHIRVersionCode) ProtoMessage() {}

func (x *FHIRVersionCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FHIRVersionCode.ProtoReflect.Descriptor instead.
func (*FHIRVersionCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{104}
}

// A code that identifies the status of the family history record.
// See http://hl7.org/fhir/history-status
type FamilyHistoryStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FamilyHistoryStatusCode) Reset() {
	*x = FamilyHistoryStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilyHistoryStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyHistoryStatusCode) ProtoMessage() {}

func (x *FamilyHistoryStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyHistoryStatusCode.ProtoReflect.Descriptor instead.
func (*FamilyHistoryStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{105}
}

// The kind of operation to perform as a part of a property based filter.
// See http://hl7.org/fhir/filter-operator
type FilterOperatorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FilterOperatorCode) Reset() {
	*x = FilterOperatorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterOperatorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterOperatorCode) ProtoMessage() {}

func (x *FilterOperatorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterOperatorCode.ProtoReflect.Descriptor instead.
func (*FilterOperatorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{106}
}

// This value set includes Status codes.
// See http://hl7.org/fhir/fm-status
type FinancialResourceStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FinancialResourceStatusCode) Reset() {
	*x = FinancialResourceStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinancialResourceStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinancialResourceStatusCode) ProtoMessage() {}

func (x *FinancialResourceStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinancialResourceStatusCode.ProtoReflect.Descriptor instead.
func (*FinancialResourceStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{107}
}

// Indicates whether this flag is active and needs to be displayed to a user, or
// whether it is no longer needed or was entered in error. See
// http://hl7.org/fhir/flag-status
type FlagStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FlagStatusCode) Reset() {
	*x = FlagStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagStatusCode) ProtoMessage() {}

func (x *FlagStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagStatusCode.ProtoReflect.Descriptor instead.
func (*FlagStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{108}
}

// FormularyItem Status Codes
// See http://hl7.org/fhir/CodeSystem/formularyitem-status
type FormularyItemStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FormularyItemStatusCode) Reset() {
	*x = FormularyItemStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormularyItemStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormularyItemStatusCode) ProtoMessage() {}

func (x *FormularyItemStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormularyItemStatusCode.ProtoReflect.Descriptor instead.
func (*FormularyItemStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{109}
}

// The status of the GenomicStudy.
// See http://hl7.org/fhir/genomicstudy-status
type GenomicStudyStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GenomicStudyStatusCode) Reset() {
	*x = GenomicStudyStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenomicStudyStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenomicStudyStatusCode) ProtoMessage() {}

func (x *GenomicStudyStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenomicStudyStatusCode.ProtoReflect.Descriptor instead.
func (*GenomicStudyStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{110}
}

// Codes that reflect the current state of a goal and whether the goal is still
// being targeted. See http://hl7.org/fhir/goal-status
type GoalLifecycleStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GoalLifecycleStatusCode) Reset() {
	*x = GoalLifecycleStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoalLifecycleStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoalLifecycleStatusCode) ProtoMessage() {}

func (x *GoalLifecycleStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoalLifecycleStatusCode.ProtoReflect.Descriptor instead.
func (*GoalLifecycleStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{111}
}

// How a compartment must be linked.
// See http://hl7.org/fhir/graph-compartment-rule
type GraphCompartmentRuleCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GraphCompartmentRuleCode) Reset() {
	*x = GraphCompartmentRuleCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphCompartmentRuleCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphCompartmentRuleCode) ProtoMessage() {}

func (x *GraphCompartmentRuleCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphCompartmentRuleCode.ProtoReflect.Descriptor instead.
func (*GraphCompartmentRuleCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{112}
}

// Defines how a compartment rule is used.
// See http://hl7.org/fhir/graph-compartment-use
type GraphCompartmentUseCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GraphCompartmentUseCode) Reset() {
	*x = GraphCompartmentUseCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphCompartmentUseCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphCompartmentUseCode) ProtoMessage() {}

func (x *GraphCompartmentUseCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphCompartmentUseCode.ProtoReflect.Descriptor instead.
func (*GraphCompartmentUseCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{113}
}

// Basis for membership in a group
// See http://hl7.org/fhir/group-membership-basis
type GroupMembershipBasisCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GroupMembershipBasisCode) Reset() {
	*x = GroupMembershipBasisCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupMembershipBasisCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupMembershipBasisCode) ProtoMessage() {}

func (x *GroupMembershipBasisCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupMembershipBasisCode.ProtoReflect.Descriptor instead.
func (*GroupMembershipBasisCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{114}
}

// Types of resources that are part of group.
// See http://hl7.org/fhir/group-type
type GroupTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GroupTypeCode) Reset() {
	*x = GroupTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupTypeCode) ProtoMessage() {}

func (x *GroupTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupTypeCode.ProtoReflect.Descriptor instead.
func (*GroupTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{115}
}

// The status of a guidance response.
// See http://hl7.org/fhir/guidance-response-status
type GuidanceResponseStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GuidanceResponseStatusCode) Reset() {
	*x = GuidanceResponseStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuidanceResponseStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuidanceResponseStatusCode) ProtoMessage() {}

func (x *GuidanceResponseStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuidanceResponseStatusCode.ProtoReflect.Descriptor instead.
func (*GuidanceResponseStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{116}
}

// A code that indicates how the page is generated.
// See http://hl7.org/fhir/guide-page-generation
type GuidePageGenerationCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GuidePageGenerationCode) Reset() {
	*x = GuidePageGenerationCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuidePageGenerationCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuidePageGenerationCode) ProtoMessage() {}

func (x *GuidePageGenerationCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuidePageGenerationCode.ProtoReflect.Descriptor instead.
func (*GuidePageGenerationCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{117}
}

// HTTP verbs (in the HTTP command line). See [HTTP
// rfc](https://tools.ietf.org/html/rfc7231) for details. See
// http://hl7.org/fhir/http-verb
type HTTPVerbCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HTTPVerbCode) Reset() {
	*x = HTTPVerbCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPVerbCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPVerbCode) ProtoMessage() {}

func (x *HTTPVerbCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPVerbCode.ProtoReflect.Descriptor instead.
func (*HTTPVerbCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{118}
}

// Identifies the purpose for this identifier, if known .
// See http://hl7.org/fhir/identifier-use
type IdentifierUseCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IdentifierUseCode) Reset() {
	*x = IdentifierUseCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentifierUseCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentifierUseCode) ProtoMessage() {}

func (x *IdentifierUseCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentifierUseCode.ProtoReflect.Descriptor instead.
func (*IdentifierUseCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{119}
}

// The level of confidence that this link represents the same actual person,
// based on NIST Authentication Levels. See
// http://hl7.org/fhir/identity-assuranceLevel
type IdentityAssuranceLevelCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IdentityAssuranceLevelCode) Reset() {
	*x = IdentityAssuranceLevelCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityAssuranceLevelCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityAssuranceLevelCode) ProtoMessage() {}

func (x *IdentityAssuranceLevelCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityAssuranceLevelCode.ProtoReflect.Descriptor instead.
func (*IdentityAssuranceLevelCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{120}
}

// The type of coordinates describing a 2D image region.
// See http://hl7.org/fhir/imagingselection-2dgraphictype
type ImagingSelection2DGraphicTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ImagingSelection2DGraphicTypeCode) Reset() {
	*x = ImagingSelection2DGraphicTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImagingSelection2DGraphicTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImagingSelection2DGraphicTypeCode) ProtoMessage() {}

func (x *ImagingSelection2DGraphicTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImagingSelection2DGraphicTypeCode.ProtoReflect.Descriptor instead.
func (*ImagingSelection2DGraphicTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{121}
}

// The type of coordinates describing an image region.
// See http://hl7.org/fhir/imagingselection-3dgraphictype
type ImagingSelection3DGraphicTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ImagingSelection3DGraphicTypeCode) Reset() {
	*x = ImagingSelection3DGraphicTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImagingSelection3DGraphicTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImagingSelection3DGraphicTypeCode) ProtoMessage() {}

func (x *ImagingSelection3DGraphicTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImagingSelection3DGraphicTypeCode.ProtoReflect.Descriptor instead.
func (*ImagingSelection3DGraphicTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{122}
}

// The status of the ImagingSelection.
// See http://hl7.org/fhir/imagingselection-status
type ImagingSelectionStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ImagingSelectionStatusCode) Reset() {
	*x = ImagingSelectionStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImagingSelectionStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImagingSelectionStatusCode) ProtoMessage() {}

func (x *ImagingSelectionStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImagingSelectionStatusCode.ProtoReflect.Descriptor instead.
func (*ImagingSelectionStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{123}
}

// The status of the ImagingStudy.
// See http://hl7.org/fhir/imagingstudy-status
type ImagingStudyStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ImagingStudyStatusCode) Reset() {
	*x = ImagingStudyStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImagingStudyStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImagingStudyStatusCode) ProtoMessage() {}

func (x *ImagingStudyStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImagingStudyStatusCode.ProtoReflect.Descriptor instead.
func (*ImagingStudyStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{124}
}

// The way in which this manufacturer is associated with the ingredient. For
// example whether it is a possible one (others allowed), or an exclusive
// authorized one for this ingredient. Note that this is not the manufacturing
// process role See http://hl7.org/fhir/ingredient-manufacturer-role
type IngredientManufacturerRoleCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IngredientManufacturerRoleCode) Reset() {
	*x = IngredientManufacturerRoleCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngredientManufacturerRoleCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngredientManufacturerRoleCode) ProtoMessage() {}

func (x *IngredientManufacturerRoleCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngredientManufacturerRoleCode.ProtoReflect.Descriptor instead.
func (*IngredientManufacturerRoleCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{125}
}

// The type of count.
// See http://hl7.org/fhir/inventoryreport-counttype
type InventoryCountTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InventoryCountTypeCode) Reset() {
	*x = InventoryCountTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InventoryCountTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryCountTypeCode) ProtoMessage() {}

func (x *InventoryCountTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryCountTypeCode.ProtoReflect.Descriptor instead.
func (*InventoryCountTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{126}
}

// InventoryItem Status Codes
// See http://hl7.org/fhir/inventoryitem-status
type InventoryItemStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InventoryItemStatusCode) Reset() {
	*x = InventoryItemStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InventoryItemStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryItemStatusCode) ProtoMessage() {}

func (x *InventoryItemStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryItemStatusCode.ProtoReflect.Descriptor instead.
func (*InventoryItemStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{127}
}

// The status of the InventoryReport.
// See http://hl7.org/fhir/inventoryreport-status
type InventoryReportStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InventoryReportStatusCode) Reset() {
	*x = InventoryReportStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InventoryReportStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryReportStatusCode) ProtoMessage() {}

func (x *InventoryReportStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryReportStatusCode.ProtoReflect.Descriptor instead.
func (*InventoryReportStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{128}
}

// Codes identifying the lifecycle stage of an Invoice.
// See http://hl7.org/fhir/invoice-status
type InvoiceStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InvoiceStatusCode) Reset() {
	*x = InvoiceStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvoiceStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceStatusCode) ProtoMessage() {}

func (x *InvoiceStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceStatusCode.ProtoReflect.Descriptor instead.
func (*InvoiceStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{129}
}

// How the issue affects the success of the action.
// See http://hl7.org/fhir/issue-severity
type IssueSeverityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IssueSeverityCode) Reset() {
	*x = IssueSeverityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueSeverityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueSeverityCode) ProtoMessage() {}

func (x *IssueSeverityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueSeverityCode.ProtoReflect.Descriptor instead.
func (*IssueSeverityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{130}
}

// A code that describes the type of issue.
// See http://hl7.org/fhir/issue-type
type IssueTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IssueTypeCode) Reset() {
	*x = IssueTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueTypeCode) ProtoMessage() {}

func (x *IssueTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueTypeCode.ProtoReflect.Descriptor instead.
func (*IssueTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{131}
}

// The nature of the Coverage details which convey who is paying potentially for
// health services. See http://hl7.org/fhir/coverage-kind
type KindCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *KindCode) Reset() {
	*x = KindCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KindCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KindCode) ProtoMessage() {}

func (x *KindCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KindCode.ProtoReflect.Descriptor instead.
func (*KindCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{132}
}

// A knowledge representation level, narrative, semi-structured, structured, and
// executable See http://hl7.org/fhir/CodeSystem/knowledge-representation-level
type KnowledgeRepresentationLevelCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *KnowledgeRepresentationLevelCode) Reset() {
	*x = KnowledgeRepresentationLevelCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KnowledgeRepresentationLevelCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeRepresentationLevelCode) ProtoMessage() {}

func (x *KnowledgeRepresentationLevelCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeRepresentationLevelCode.ProtoReflect.Descriptor instead.
func (*KnowledgeRepresentationLevelCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{133}
}

// Link Relation Types defined at
// https://www.iana.org/assignments/link-relations/link-relations.xhtml#link-relations-1
// See http://hl7.org/fhir/CodeSystem/iana-link-relations
type LinkRelationTypesCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LinkRelationTypesCode) Reset() {
	*x = LinkRelationTypesCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkRelationTypesCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkRelationTypesCode) ProtoMessage() {}

func (x *LinkRelationTypesCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkRelationTypesCode.ProtoReflect.Descriptor instead.
func (*LinkRelationTypesCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{134}
}

// The type of link between this Patient resource and other
// Patient/RelatedPerson resource(s). See http://hl7.org/fhir/link-type
type LinkTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LinkTypeCode) Reset() {
	*x = LinkTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkTypeCode) ProtoMessage() {}

func (x *LinkTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkTypeCode.ProtoReflect.Descriptor instead.
func (*LinkTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{135}
}

// Used to distinguish different roles a resource can play within a set of
// linked resources. See http://hl7.org/fhir/linkage-type
type LinkageTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LinkageTypeCode) Reset() {
	*x = LinkageTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkageTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkageTypeCode) ProtoMessage() {}

func (x *LinkageTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkageTypeCode.ProtoReflect.Descriptor instead.
func (*LinkageTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{136}
}

// The processing mode that applies to this list.
// See http://hl7.org/fhir/list-mode
type ListModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListModeCode) Reset() {
	*x = ListModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModeCode) ProtoMessage() {}

func (x *ListModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModeCode.ProtoReflect.Descriptor instead.
func (*ListModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{137}
}

// The current state of the list.
// See http://hl7.org/fhir/list-status
type ListStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListStatusCode) Reset() {
	*x = ListStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStatusCode) ProtoMessage() {}

func (x *ListStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStatusCode.ProtoReflect.Descriptor instead.
func (*ListStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{138}
}

// Indicates whether a resource instance represents a specific location or a
// class of locations. See http://hl7.org/fhir/location-mode
type LocationModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LocationModeCode) Reset() {
	*x = LocationModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationModeCode) ProtoMessage() {}

func (x *LocationModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationModeCode.ProtoReflect.Descriptor instead.
func (*LocationModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{139}
}

// Indicates whether the location is still in use.
// See http://hl7.org/fhir/location-status
type LocationStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LocationStatusCode) Reset() {
	*x = LocationStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationStatusCode) ProtoMessage() {}

func (x *LocationStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationStatusCode.ProtoReflect.Descriptor instead.
func (*LocationStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{140}
}

// The status of the measure report.
// See http://hl7.org/fhir/measure-report-status
type MeasureReportStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MeasureReportStatusCode) Reset() {
	*x = MeasureReportStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasureReportStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasureReportStatusCode) ProtoMessage() {}

func (x *MeasureReportStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasureReportStatusCode.ProtoReflect.Descriptor instead.
func (*MeasureReportStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{141}
}

// The type of the measure report.
// See http://hl7.org/fhir/measure-report-type
type MeasureReportTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MeasureReportTypeCode) Reset() {
	*x = MeasureReportTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasureReportTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasureReportTypeCode) ProtoMessage() {}

func (x *MeasureReportTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasureReportTypeCode.ProtoReflect.Descriptor instead.
func (*MeasureReportTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{142}
}

// MedicationAdministration Status Codes
// See http://hl7.org/fhir/CodeSystem/medication-admin-status
type MedicationAdministrationStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MedicationAdministrationStatusCode) Reset() {
	*x = MedicationAdministrationStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationAdministrationStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationAdministrationStatusCode) ProtoMessage() {}

func (x *MedicationAdministrationStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationAdministrationStatusCode.ProtoReflect.Descriptor instead.
func (*MedicationAdministrationStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{143}
}

// Medication Dispense Status Codes
// See http://hl7.org/fhir/CodeSystem/medicationdispense-status
type MedicationDispenseStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MedicationDispenseStatusCode) Reset() {
	*x = MedicationDispenseStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationDispenseStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationDispenseStatusCode) ProtoMessage() {}

func (x *MedicationDispenseStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationDispenseStatusCode.ProtoReflect.Descriptor instead.
func (*MedicationDispenseStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{144}
}

// MedicationKnowledge Status Codes
// See http://hl7.org/fhir/CodeSystem/medicationknowledge-status
type MedicationKnowledgeStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MedicationKnowledgeStatusCode) Reset() {
	*x = MedicationKnowledgeStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledgeStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledgeStatusCode) ProtoMessage() {}

func (x *MedicationKnowledgeStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledgeStatusCode.ProtoReflect.Descriptor instead.
func (*MedicationKnowledgeStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{145}
}

// MedicationRequest Intent Codes
// See http://hl7.org/fhir/CodeSystem/medicationrequest-intent
type MedicationRequestIntentCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MedicationRequestIntentCode) Reset() {
	*x = MedicationRequestIntentCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationRequestIntentCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationRequestIntentCode) ProtoMessage() {}

func (x *MedicationRequestIntentCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationRequestIntentCode.ProtoReflect.Descriptor instead.
func (*MedicationRequestIntentCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{146}
}

// MedicationRequest Status Codes
// See http://hl7.org/fhir/CodeSystem/medicationrequest-status
type MedicationRequestStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MedicationRequestStatusCode) Reset() {
	*x = MedicationRequestStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationRequestStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationRequestStatusCode) ProtoMessage() {}

func (x *MedicationRequestStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationRequestStatusCode.ProtoReflect.Descriptor instead.
func (*MedicationRequestStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{147}
}

// MedicationStatement Status Codes
// See http://hl7.org/fhir/CodeSystem/medication-statement-status
type MedicationStatementStatusCodes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MedicationStatementStatusCodes) Reset() {
	*x = MedicationStatementStatusCodes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationStatementStatusCodes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationStatementStatusCodes) ProtoMessage() {}

func (x *MedicationStatementStatusCodes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationStatementStatusCodes.ProtoReflect.Descriptor instead.
func (*MedicationStatementStatusCodes) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{148}
}

// Medication Status Codes
// See http://hl7.org/fhir/CodeSystem/medication-status
type MedicationStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MedicationStatusCode) Reset() {
	*x = MedicationStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationStatusCode) ProtoMessage() {}

func (x *MedicationStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationStatusCode.ProtoReflect.Descriptor instead.
func (*MedicationStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{149}
}

// The impact of the content of a message.
// See http://hl7.org/fhir/message-significance-category
type MessageSignificanceCategoryCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MessageSignificanceCategoryCode) Reset() {
	*x = MessageSignificanceCategoryCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageSignificanceCategoryCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageSignificanceCategoryCode) ProtoMessage() {}

func (x *MessageSignificanceCategoryCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageSignificanceCategoryCode.ProtoReflect.Descriptor instead.
func (*MessageSignificanceCategoryCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{150}
}

// HL7-defined table of codes which identify conditions under which
// acknowledgments are required to be returned in response to a message. See
// http://hl7.org/fhir/messageheader-response-request
type MessageheaderResponseRequestCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MessageheaderResponseRequestCode) Reset() {
	*x = MessageheaderResponseRequestCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageheaderResponseRequestCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageheaderResponseRequestCode) ProtoMessage() {}

func (x *MessageheaderResponseRequestCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageheaderResponseRequestCode.ProtoReflect.Descriptor instead.
func (*MessageheaderResponseRequestCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{151}
}

// The use of a human name.
// See http://hl7.org/fhir/name-use
type NameUseCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NameUseCode) Reset() {
	*x = NameUseCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameUseCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameUseCode) ProtoMessage() {}

func (x *NameUseCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameUseCode.ProtoReflect.Descriptor instead.
func (*NameUseCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{152}
}

// Identifies the style of unique identifier used to identify a namespace.
// See http://hl7.org/fhir/namingsystem-identifier-type
type NamingSystemIdentifierTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NamingSystemIdentifierTypeCode) Reset() {
	*x = NamingSystemIdentifierTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamingSystemIdentifierTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamingSystemIdentifierTypeCode) ProtoMessage() {}

func (x *NamingSystemIdentifierTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamingSystemIdentifierTypeCode.ProtoReflect.Descriptor instead.
func (*NamingSystemIdentifierTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{153}
}

// Identifies the purpose of the naming system.
// See http://hl7.org/fhir/namingsystem-type
type NamingSystemTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NamingSystemTypeCode) Reset() {
	*x = NamingSystemTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamingSystemTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamingSystemTypeCode) ProtoMessage() {}

func (x *NamingSystemTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamingSystemTypeCode.ProtoReflect.Descriptor instead.
func (*NamingSystemTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{154}
}

// The status of a resource narrative.
// See http://hl7.org/fhir/narrative-status
type NarrativeStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NarrativeStatusCode) Reset() {
	*x = NarrativeStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NarrativeStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NarrativeStatusCode) ProtoMessage() {}

func (x *NarrativeStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NarrativeStatusCode.ProtoReflect.Descriptor instead.
func (*NarrativeStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{155}
}

// The presentation types of notes.
// See http://hl7.org/fhir/note-type
type NoteTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NoteTypeCode) Reset() {
	*x = NoteTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteTypeCode) ProtoMessage() {}

func (x *NoteTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteTypeCode.ProtoReflect.Descriptor instead.
func (*NoteTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{156}
}

// Codes identifying the lifecycle stage of a product.
// See http://hl7.org/fhir/nutritionproduct-status
type NutritionProductStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NutritionProductStatusCode) Reset() {
	*x = NutritionProductStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NutritionProductStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NutritionProductStatusCode) ProtoMessage() {}

func (x *NutritionProductStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NutritionProductStatusCode.ProtoReflect.Descriptor instead.
func (*NutritionProductStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{157}
}

// Permitted data type for observation value.
// See http://hl7.org/fhir/permitted-data-type
type ObservationDataTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ObservationDataTypeCode) Reset() {
	*x = ObservationDataTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationDataTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationDataTypeCode) ProtoMessage() {}

func (x *ObservationDataTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationDataTypeCode.ProtoReflect.Descriptor instead.
func (*ObservationDataTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{158}
}

// Codes identifying the category of observation range.
// See http://hl7.org/fhir/observation-range-category
type ObservationRangeCategoryCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ObservationRangeCategoryCode) Reset() {
	*x = ObservationRangeCategoryCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationRangeCategoryCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationRangeCategoryCode) ProtoMessage() {}

func (x *ObservationRangeCategoryCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationRangeCategoryCode.ProtoReflect.Descriptor instead.
func (*ObservationRangeCategoryCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{159}
}

// Codes providing the status of an observation.
// See http://hl7.org/fhir/observation-status
type ObservationStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ObservationStatusCode) Reset() {
	*x = ObservationStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationStatusCode) ProtoMessage() {}

func (x *ObservationStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationStatusCode.ProtoReflect.Descriptor instead.
func (*ObservationStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{160}
}

// Whether an operation is a normal operation or a query.
// See http://hl7.org/fhir/operation-kind
type OperationKindCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OperationKindCode) Reset() {
	*x = OperationKindCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationKindCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationKindCode) ProtoMessage() {}

func (x *OperationKindCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationKindCode.ProtoReflect.Descriptor instead.
func (*OperationKindCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{161}
}

// Indicates that a parameter applies when the operation is being invoked at the
// specified level See http://hl7.org/fhir/operation-parameter-scope
type OperationParameterScopeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OperationParameterScopeCode) Reset() {
	*x = OperationParameterScopeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationParameterScopeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationParameterScopeCode) ProtoMessage() {}

func (x *OperationParameterScopeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationParameterScopeCode.ProtoReflect.Descriptor instead.
func (*OperationParameterScopeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{162}
}

// Whether an operation parameter is an input or an output parameter.
// See http://hl7.org/fhir/operation-parameter-use
type OperationParameterUseCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OperationParameterUseCode) Reset() {
	*x = OperationParameterUseCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationParameterUseCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationParameterUseCode) ProtoMessage() {}

func (x *OperationParameterUseCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationParameterUseCode.ProtoReflect.Descriptor instead.
func (*OperationParameterUseCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{163}
}

// Type for orientation.
// See http://hl7.org/fhir/orientation-type
type OrientationTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OrientationTypeCode) Reset() {
	*x = OrientationTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrientationTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrientationTypeCode) ProtoMessage() {}

func (x *OrientationTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrientationTypeCode.ProtoReflect.Descriptor instead.
func (*OrientationTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{164}
}

// The Participation status of an appointment.
// See http://hl7.org/fhir/participationstatus
type ParticipationStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ParticipationStatusCode) Reset() {
	*x = ParticipationStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipationStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipationStatusCode) ProtoMessage() {}

func (x *ParticipationStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipationStatusCode.ProtoReflect.Descriptor instead.
func (*ParticipationStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{165}
}

// This value set includes Claim Processing Outcome codes.
// See http://hl7.org/fhir/payment-outcome
type PaymentOutcomeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PaymentOutcomeCode) Reset() {
	*x = PaymentOutcomeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentOutcomeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentOutcomeCode) ProtoMessage() {}

func (x *PaymentOutcomeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentOutcomeCode.ProtoReflect.Descriptor instead.
func (*PaymentOutcomeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{166}
}

// Codes identifying the rule combining. See XACML Combining algorithms
// http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-cos01-en.html See
// http://hl7.org/fhir/permission-rule-combining
type PermissionRuleCombiningCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PermissionRuleCombiningCode) Reset() {
	*x = PermissionRuleCombiningCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionRuleCombiningCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionRuleCombiningCode) ProtoMessage() {}

func (x *PermissionRuleCombiningCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionRuleCombiningCode.ProtoReflect.Descriptor instead.
func (*PermissionRuleCombiningCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{167}
}

// Codes identifying the lifecycle stage of a product.
// See http://hl7.org/fhir/permission-status
type PermissionStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PermissionStatusCode) Reset() {
	*x = PermissionStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionStatusCode) ProtoMessage() {}

func (x *PermissionStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionStatusCode.ProtoReflect.Descriptor instead.
func (*PermissionStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{168}
}

// Codes indicating the kind of the price component.
// See http://hl7.org/fhir/price-component-type
type PriceComponentTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PriceComponentTypeCode) Reset() {
	*x = PriceComponentTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceComponentTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceComponentTypeCode) ProtoMessage() {}

func (x *PriceComponentTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceComponentTypeCode.ProtoReflect.Descriptor instead.
func (*PriceComponentTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{169}
}

// Codes identifying the lifecycle stage of a product.
// See http://hl7.org/fhir/product-status
type ProductStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProductStatusCode) Reset() {
	*x = ProductStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductStatusCode) ProtoMessage() {}

func (x *ProductStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductStatusCode.ProtoReflect.Descriptor instead.
func (*ProductStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{170}
}

// How a property is represented when serialized.
// See http://hl7.org/fhir/property-representation
type PropertyRepresentationCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PropertyRepresentationCode) Reset() {
	*x = PropertyRepresentationCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyRepresentationCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyRepresentationCode) ProtoMessage() {}

func (x *PropertyRepresentationCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyRepresentationCode.ProtoReflect.Descriptor instead.
func (*PropertyRepresentationCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{171}
}

// The type of a property value.
// See http://hl7.org/fhir/concept-property-type
type PropertyTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PropertyTypeCode) Reset() {
	*x = PropertyTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyTypeCode) ProtoMessage() {}

func (x *PropertyTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyTypeCode.ProtoReflect.Descriptor instead.
func (*PropertyTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{172}
}

// How an entity was used in an activity.
// See http://hl7.org/fhir/provenance-entity-role
type ProvenanceEntityRoleCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProvenanceEntityRoleCode) Reset() {
	*x = ProvenanceEntityRoleCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvenanceEntityRoleCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvenanceEntityRoleCode) ProtoMessage() {}

func (x *ProvenanceEntityRoleCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvenanceEntityRoleCode.ProtoReflect.Descriptor instead.
func (*ProvenanceEntityRoleCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{173}
}

// The lifecycle status of an artifact.
// See http://hl7.org/fhir/publication-status
type PublicationStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PublicationStatusCode) Reset() {
	*x = PublicationStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicationStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicationStatusCode) ProtoMessage() {}

func (x *PublicationStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicationStatusCode.ProtoReflect.Descriptor instead.
func (*PublicationStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{174}
}

// How the Quantity should be understood and represented.
// See http://hl7.org/fhir/quantity-comparator
type QuantityComparatorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QuantityComparatorCode) Reset() {
	*x = QuantityComparatorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuantityComparatorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuantityComparatorCode) ProtoMessage() {}

func (x *QuantityComparatorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuantityComparatorCode.ProtoReflect.Descriptor instead.
func (*QuantityComparatorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{175}
}

// Codes that describe the types of constraints possible on a question item that
// has a list of permitted answers See
// http://hl7.org/fhir/questionnaire-answer-constraint
type QuestionnaireAnswerConstraintCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QuestionnaireAnswerConstraintCode) Reset() {
	*x = QuestionnaireAnswerConstraintCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireAnswerConstraintCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireAnswerConstraintCode) ProtoMessage() {}

func (x *QuestionnaireAnswerConstraintCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireAnswerConstraintCode.ProtoReflect.Descriptor instead.
func (*QuestionnaireAnswerConstraintCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{176}
}

// QuestionnaireItemDisabledDisplay
// See http://hl7.org/fhir/questionnaire-disabled-display
type QuestionnaireItemDisabledDisplayCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QuestionnaireItemDisabledDisplayCode) Reset() {
	*x = QuestionnaireItemDisabledDisplayCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireItemDisabledDisplayCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireItemDisabledDisplayCode) ProtoMessage() {}

func (x *QuestionnaireItemDisabledDisplayCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireItemDisabledDisplayCode.ProtoReflect.Descriptor instead.
func (*QuestionnaireItemDisabledDisplayCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{177}
}

// The criteria by which a question is enabled.
// See http://hl7.org/fhir/questionnaire-enable-operator
type QuestionnaireItemOperatorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QuestionnaireItemOperatorCode) Reset() {
	*x = QuestionnaireItemOperatorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireItemOperatorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireItemOperatorCode) ProtoMessage() {}

func (x *QuestionnaireItemOperatorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireItemOperatorCode.ProtoReflect.Descriptor instead.
func (*QuestionnaireItemOperatorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{178}
}

// Distinguishes groups from questions and display text and indicates data type
// for questions. See http://hl7.org/fhir/item-type
type QuestionnaireItemTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QuestionnaireItemTypeCode) Reset() {
	*x = QuestionnaireItemTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireItemTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireItemTypeCode) ProtoMessage() {}

func (x *QuestionnaireItemTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireItemTypeCode.ProtoReflect.Descriptor instead.
func (*QuestionnaireItemTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{179}
}

// Lifecycle status of the questionnaire response.
// See http://hl7.org/fhir/questionnaire-answers-status
type QuestionnaireResponseStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QuestionnaireResponseStatusCode) Reset() {
	*x = QuestionnaireResponseStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireResponseStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireResponseStatusCode) ProtoMessage() {}

func (x *QuestionnaireResponseStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireResponseStatusCode.ProtoReflect.Descriptor instead.
func (*QuestionnaireResponseStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{180}
}

// A set of flags that defines how references are supported.
// See http://hl7.org/fhir/reference-handling-policy
type ReferenceHandlingPolicyCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReferenceHandlingPolicyCode) Reset() {
	*x = ReferenceHandlingPolicyCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceHandlingPolicyCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceHandlingPolicyCode) ProtoMessage() {}

func (x *ReferenceHandlingPolicyCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceHandlingPolicyCode.ProtoReflect.Descriptor instead.
func (*ReferenceHandlingPolicyCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{181}
}

// Whether a reference needs to be version specific or version independent, or
// whether either can be used. See http://hl7.org/fhir/reference-version-rules
type ReferenceVersionRulesCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReferenceVersionRulesCode) Reset() {
	*x = ReferenceVersionRulesCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceVersionRulesCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceVersionRulesCode) ProtoMessage() {}

func (x *ReferenceVersionRulesCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceVersionRulesCode.ProtoReflect.Descriptor instead.
func (*ReferenceVersionRulesCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{182}
}

// The type of relationship to the related artifact.
// See http://hl7.org/fhir/related-artifact-type
type RelatedArtifactTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RelatedArtifactTypeCode) Reset() {
	*x = RelatedArtifactTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelatedArtifactTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedArtifactTypeCode) ProtoMessage() {}

func (x *RelatedArtifactTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedArtifactTypeCode.ProtoReflect.Descriptor instead.
func (*RelatedArtifactTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{183}
}

// The type of relationship to the cited artifact.
// See http://hl7.org/fhir/related-artifact-type-expanded
type RelatedArtifactTypeExpandedCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RelatedArtifactTypeExpandedCode) Reset() {
	*x = RelatedArtifactTypeExpandedCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelatedArtifactTypeExpandedCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedArtifactTypeExpandedCode) ProtoMessage() {}

func (x *RelatedArtifactTypeExpandedCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedArtifactTypeExpandedCode.ProtoReflect.Descriptor instead.
func (*RelatedArtifactTypeExpandedCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{184}
}

// The type of relationship between reports.
// See http://hl7.org/fhir/report-relation-type
type ReportRelationshipTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportRelationshipTypeCode) Reset() {
	*x = ReportRelationshipTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportRelationshipTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportRelationshipTypeCode) ProtoMessage() {}

func (x *ReportRelationshipTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportRelationshipTypeCode.ProtoReflect.Descriptor instead.
func (*ReportRelationshipTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{185}
}

// Codes indicating the degree of authority/intentionality associated with a
// request. See http://hl7.org/fhir/request-intent
type RequestIntentCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RequestIntentCode) Reset() {
	*x = RequestIntentCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestIntentCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestIntentCode) ProtoMessage() {}

func (x *RequestIntentCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestIntentCode.ProtoReflect.Descriptor instead.
func (*RequestIntentCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{186}
}

// Identifies the level of importance to be assigned to actioning the request.
// See http://hl7.org/fhir/request-priority
type RequestPriorityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RequestPriorityCode) Reset() {
	*x = RequestPriorityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestPriorityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestPriorityCode) ProtoMessage() {}

func (x *RequestPriorityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestPriorityCode.ProtoReflect.Descriptor instead.
func (*RequestPriorityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{187}
}

// Codes identifying the lifecycle stage of a request.
// See http://hl7.org/fhir/request-status
type RequestStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RequestStatusCode) Reset() {
	*x = RequestStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestStatusCode) ProtoMessage() {}

func (x *RequestStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestStatusCode.ProtoReflect.Descriptor instead.
func (*RequestStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{188}
}

// How the system supports versioning for a resource.
// See http://hl7.org/fhir/versioning-policy
type ResourceVersionPolicyCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResourceVersionPolicyCode) Reset() {
	*x = ResourceVersionPolicyCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceVersionPolicyCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceVersionPolicyCode) ProtoMessage() {}

func (x *ResourceVersionPolicyCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceVersionPolicyCode.ProtoReflect.Descriptor instead.
func (*ResourceVersionPolicyCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{189}
}

// The kind of response to a message.
// See http://hl7.org/fhir/response-code
type ResponseTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResponseTypeCode) Reset() {
	*x = ResponseTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseTypeCode) ProtoMessage() {}

func (x *ResponseTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseTypeCode.ProtoReflect.Descriptor instead.
func (*ResponseTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{190}
}

// The mode of a RESTful capability statement.
// See http://hl7.org/fhir/restful-capability-mode
type RestfulCapabilityModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RestfulCapabilityModeCode) Reset() {
	*x = RestfulCapabilityModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestfulCapabilityModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestfulCapabilityModeCode) ProtoMessage() {}

func (x *RestfulCapabilityModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestfulCapabilityModeCode.ProtoReflect.Descriptor instead.
func (*RestfulCapabilityModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{191}
}

// The license that applies to an Implementation Guide (using an SPDX license
// Identifiers, or 'not-open-source'). The binding is required but new SPDX
// license Identifiers are allowed to be used (https://spdx.org/licenses/). See
// http://hl7.org/fhir/spdx-license
type SPDXLicenseCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SPDXLicenseCode) Reset() {
	*x = SPDXLicenseCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SPDXLicenseCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SPDXLicenseCode) ProtoMessage() {}

func (x *SPDXLicenseCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SPDXLicenseCode.ProtoReflect.Descriptor instead.
func (*SPDXLicenseCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{192}
}

// What Search Comparator Codes are supported in search.
// See http://hl7.org/fhir/search-comparator
type SearchComparatorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SearchComparatorCode) Reset() {
	*x = SearchComparatorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchComparatorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchComparatorCode) ProtoMessage() {}

func (x *SearchComparatorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchComparatorCode.ProtoReflect.Descriptor instead.
func (*SearchComparatorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{193}
}

// Why an entry is in the result set - whether it's included as a match or
// because of an _include requirement, or to convey information or warning
// information about the search process. See
// http://hl7.org/fhir/search-entry-mode
type SearchEntryModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SearchEntryModeCode) Reset() {
	*x = SearchEntryModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchEntryModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchEntryModeCode) ProtoMessage() {}

func (x *SearchEntryModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchEntryModeCode.ProtoReflect.Descriptor instead.
func (*SearchEntryModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{194}
}

// A supported modifier for a search parameter.
// See http://hl7.org/fhir/search-modifier-code
type SearchModifierCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SearchModifierCode) Reset() {
	*x = SearchModifierCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchModifierCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchModifierCode) ProtoMessage() {}

func (x *SearchModifierCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchModifierCode.ProtoReflect.Descriptor instead.
func (*SearchModifierCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{195}
}

// Data types allowed to be used for search parameters.
// See http://hl7.org/fhir/search-param-type
type SearchParamTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SearchParamTypeCode) Reset() {
	*x = SearchParamTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchParamTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchParamTypeCode) ProtoMessage() {}

func (x *SearchParamTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchParamTypeCode.ProtoReflect.Descriptor instead.
func (*SearchParamTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{196}
}

// How a search parameter relates to the set of elements returned by evaluating
// its expression query. See http://hl7.org/fhir/search-processingmode
type SearchProcessingModeTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SearchProcessingModeTypeCode) Reset() {
	*x = SearchProcessingModeTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchProcessingModeTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchProcessingModeTypeCode) ProtoMessage() {}

func (x *SearchProcessingModeTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchProcessingModeTypeCode.ProtoReflect.Descriptor instead.
func (*SearchProcessingModeTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{197}
}

// Type if a sequence -- DNA, RNA, or amino acid sequence.
// See http://hl7.org/fhir/sequence-type
type SequenceTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SequenceTypeCode) Reset() {
	*x = SequenceTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SequenceTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequenceTypeCode) ProtoMessage() {}

func (x *SequenceTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequenceTypeCode.ProtoReflect.Descriptor instead.
func (*SequenceTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{198}
}

// How slices are interpreted when evaluating an instance.
// See http://hl7.org/fhir/resource-slicing-rules
type SlicingRulesCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SlicingRulesCode) Reset() {
	*x = SlicingRulesCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlicingRulesCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlicingRulesCode) ProtoMessage() {}

func (x *SlicingRulesCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlicingRulesCode.ProtoReflect.Descriptor instead.
func (*SlicingRulesCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{199}
}

// The free/busy status of the slot.
// See http://hl7.org/fhir/slotstatus
type SlotStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SlotStatusCode) Reset() {
	*x = SlotStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlotStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlotStatusCode) ProtoMessage() {}

func (x *SlotStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlotStatusCode.ProtoReflect.Descriptor instead.
func (*SlotStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{200}
}

// The possible sort directions, ascending or descending.
// See http://hl7.org/fhir/sort-direction
type SortDirectionCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SortDirectionCode) Reset() {
	*x = SortDirectionCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortDirectionCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortDirectionCode) ProtoMessage() {}

func (x *SortDirectionCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortDirectionCode.ProtoReflect.Descriptor instead.
func (*SortDirectionCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{201}
}

// Codes providing the combined status of the specimen.
// See http://hl7.org/fhir/specimen-combined
type SpecimenCombinedCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SpecimenCombinedCode) Reset() {
	*x = SpecimenCombinedCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecimenCombinedCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecimenCombinedCode) ProtoMessage() {}

func (x *SpecimenCombinedCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecimenCombinedCode.ProtoReflect.Descriptor instead.
func (*SpecimenCombinedCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{202}
}

// Degree of preference of a type of conditioned specimen.
// See http://hl7.org/fhir/specimen-contained-preference
type SpecimenContainedPreferenceCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SpecimenContainedPreferenceCode) Reset() {
	*x = SpecimenContainedPreferenceCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecimenContainedPreferenceCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecimenContainedPreferenceCode) ProtoMessage() {}

func (x *SpecimenContainedPreferenceCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecimenContainedPreferenceCode.ProtoReflect.Descriptor instead.
func (*SpecimenContainedPreferenceCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{203}
}

// Codes providing the status/availability of a specimen.
// See http://hl7.org/fhir/specimen-status
type SpecimenStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SpecimenStatusCode) Reset() {
	*x = SpecimenStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecimenStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecimenStatusCode) ProtoMessage() {}

func (x *SpecimenStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecimenStatusCode.ProtoReflect.Descriptor instead.
func (*SpecimenStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{204}
}

// The validation status of the target
// See http://hl7.org/fhir/CodeSystem/verificationresult-status
type StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StatusCode) Reset() {
	*x = StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusCode) ProtoMessage() {}

func (x *StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusCode.ProtoReflect.Descriptor instead.
func (*StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{205}
}

// Type for strand.
// See http://hl7.org/fhir/strand-type
type StrandTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StrandTypeCode) Reset() {
	*x = StrandTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrandTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrandTypeCode) ProtoMessage() {}

func (x *StrandTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrandTypeCode.ProtoReflect.Descriptor instead.
func (*StrandTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{206}
}

// Defines the type of structure that a definition is describing.
// See http://hl7.org/fhir/structure-definition-kind
type StructureDefinitionKindCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StructureDefinitionKindCode) Reset() {
	*x = StructureDefinitionKindCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureDefinitionKindCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureDefinitionKindCode) ProtoMessage() {}

func (x *StructureDefinitionKindCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureDefinitionKindCode.ProtoReflect.Descriptor instead.
func (*StructureDefinitionKindCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{207}
}

// If this is the default rule set to apply for the source type, or this
// combination of types. See http://hl7.org/fhir/map-group-type-mode
type StructureMapGroupTypeModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StructureMapGroupTypeModeCode) Reset() {
	*x = StructureMapGroupTypeModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureMapGroupTypeModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureMapGroupTypeModeCode) ProtoMessage() {}

func (x *StructureMapGroupTypeModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureMapGroupTypeModeCode.ProtoReflect.Descriptor instead.
func (*StructureMapGroupTypeModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{208}
}

// Mode for this instance of data.
// See http://hl7.org/fhir/map-input-mode
type StructureMapInputModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StructureMapInputModeCode) Reset() {
	*x = StructureMapInputModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureMapInputModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureMapInputModeCode) ProtoMessage() {}

func (x *StructureMapInputModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureMapInputModeCode.ProtoReflect.Descriptor instead.
func (*StructureMapInputModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{209}
}

// How the referenced structure is used in this mapping.
// See http://hl7.org/fhir/map-model-mode
type StructureMapModelModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StructureMapModelModeCode) Reset() {
	*x = StructureMapModelModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureMapModelModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureMapModelModeCode) ProtoMessage() {}

func (x *StructureMapModelModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureMapModelModeCode.ProtoReflect.Descriptor instead.
func (*StructureMapModelModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{210}
}

// If field is a list, how to manage the source.
// See http://hl7.org/fhir/map-source-list-mode
type StructureMapSourceListModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StructureMapSourceListModeCode) Reset() {
	*x = StructureMapSourceListModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureMapSourceListModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureMapSourceListModeCode) ProtoMessage() {}

func (x *StructureMapSourceListModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureMapSourceListModeCode.ProtoReflect.Descriptor instead.
func (*StructureMapSourceListModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{211}
}

// If field is a list, how to manage the production.
// See http://hl7.org/fhir/map-target-list-mode
type StructureMapTargetListModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StructureMapTargetListModeCode) Reset() {
	*x = StructureMapTargetListModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureMapTargetListModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureMapTargetListModeCode) ProtoMessage() {}

func (x *StructureMapTargetListModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureMapTargetListModeCode.ProtoReflect.Descriptor instead.
func (*StructureMapTargetListModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{212}
}

// How data is copied/created.
// See http://hl7.org/fhir/map-transform
type StructureMapTransformCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StructureMapTransformCode) Reset() {
	*x = StructureMapTransformCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureMapTransformCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureMapTransformCode) ProtoMessage() {}

func (x *StructureMapTransformCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureMapTransformCode.ProtoReflect.Descriptor instead.
func (*StructureMapTransformCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{213}
}

// Concepts for how a measure report consumer and receiver coordinate data
// exchange updates. The choices are snapshot or incremental updates See
// http://hl7.org/fhir/CodeSystem/submit-data-update-type
type SubmitDataUpdateTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubmitDataUpdateTypeCode) Reset() {
	*x = SubmitDataUpdateTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitDataUpdateTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitDataUpdateTypeCode) ProtoMessage() {}

func (x *SubmitDataUpdateTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitDataUpdateTypeCode.ProtoReflect.Descriptor instead.
func (*SubmitDataUpdateTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{214}
}

// The type of notification represented by the status message.
// See http://hl7.org/fhir/subscription-notification-type
type SubscriptionNotificationTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscriptionNotificationTypeCode) Reset() {
	*x = SubscriptionNotificationTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionNotificationTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionNotificationTypeCode) ProtoMessage() {}

func (x *SubscriptionNotificationTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionNotificationTypeCode.ProtoReflect.Descriptor instead.
func (*SubscriptionNotificationTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{215}
}

// Codes to represent how much resource content to send in the notification
// payload. See http://hl7.org/fhir/subscription-payload-content
type SubscriptionPayloadContentCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscriptionPayloadContentCode) Reset() {
	*x = SubscriptionPayloadContentCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionPayloadContentCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionPayloadContentCode) ProtoMessage() {}

func (x *SubscriptionPayloadContentCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionPayloadContentCode.ProtoReflect.Descriptor instead.
func (*SubscriptionPayloadContentCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{216}
}

// This codesystem defines a set of codes that can be used to filter
// Subscription triggers. See http://hl7.org/fhir/subscription-status
type SubscriptionStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscriptionStatusCode) Reset() {
	*x = SubscriptionStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionStatusCode) ProtoMessage() {}

func (x *SubscriptionStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionStatusCode.ProtoReflect.Descriptor instead.
func (*SubscriptionStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{217}
}

// Status of the supply delivery.
// See http://hl7.org/fhir/supplydelivery-status
type SupplyDeliveryStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SupplyDeliveryStatusCode) Reset() {
	*x = SupplyDeliveryStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplyDeliveryStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplyDeliveryStatusCode) ProtoMessage() {}

func (x *SupplyDeliveryStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplyDeliveryStatusCode.ProtoReflect.Descriptor instead.
func (*SupplyDeliveryStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{218}
}

// Status of the supply delivery.
// See http://hl7.org/fhir/supplydelivery-supplyitemtype
type SupplyDeliverySupplyItemTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SupplyDeliverySupplyItemTypeCode) Reset() {
	*x = SupplyDeliverySupplyItemTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplyDeliverySupplyItemTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplyDeliverySupplyItemTypeCode) ProtoMessage() {}

func (x *SupplyDeliverySupplyItemTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplyDeliverySupplyItemTypeCode.ProtoReflect.Descriptor instead.
func (*SupplyDeliverySupplyItemTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{219}
}

// Status of the supply request.
// See http://hl7.org/fhir/supplyrequest-status
type SupplyRequestStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SupplyRequestStatusCode) Reset() {
	*x = SupplyRequestStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplyRequestStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplyRequestStatusCode) ProtoMessage() {}

func (x *SupplyRequestStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplyRequestStatusCode.ProtoReflect.Descriptor instead.
func (*SupplyRequestStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{220}
}

// Distinguishes whether the task is a proposal, plan or full order.
// See http://hl7.org/fhir/task-intent
type TaskIntentCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TaskIntentCode) Reset() {
	*x = TaskIntentCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskIntentCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskIntentCode) ProtoMessage() {}

func (x *TaskIntentCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskIntentCode.ProtoReflect.Descriptor instead.
func (*TaskIntentCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{221}
}

// The current status of the task.
// See http://hl7.org/fhir/task-status
type TaskStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TaskStatusCode) Reset() {
	*x = TaskStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStatusCode) ProtoMessage() {}

func (x *TaskStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStatusCode.ProtoReflect.Descriptor instead.
func (*TaskStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{222}
}

// The results of executing an action.
// See http://hl7.org/fhir/report-action-result-codes
type TestReportActionResultCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TestReportActionResultCode) Reset() {
	*x = TestReportActionResultCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestReportActionResultCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestReportActionResultCode) ProtoMessage() {}

func (x *TestReportActionResultCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestReportActionResultCode.ProtoReflect.Descriptor instead.
func (*TestReportActionResultCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{223}
}

// The type of participant.
// See http://hl7.org/fhir/report-participant-type
type TestReportParticipantTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TestReportParticipantTypeCode) Reset() {
	*x = TestReportParticipantTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestReportParticipantTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestReportParticipantTypeCode) ProtoMessage() {}

func (x *TestReportParticipantTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestReportParticipantTypeCode.ProtoReflect.Descriptor instead.
func (*TestReportParticipantTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{224}
}

// The reported execution result.
// See http://hl7.org/fhir/report-result-codes
type TestReportResultCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TestReportResultCode) Reset() {
	*x = TestReportResultCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestReportResultCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestReportResultCode) ProtoMessage() {}

func (x *TestReportResultCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestReportResultCode.ProtoReflect.Descriptor instead.
func (*TestReportResultCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{225}
}

// The current status of the test report.
// See http://hl7.org/fhir/report-status-codes
type TestReportStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TestReportStatusCode) Reset() {
	*x = TestReportStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestReportStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestReportStatusCode) ProtoMessage() {}

func (x *TestReportStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestReportStatusCode.ProtoReflect.Descriptor instead.
func (*TestReportStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{226}
}

// The allowable request method or HTTP operation codes.
// See http://hl7.org/fhir/http-operations
type TestScriptRequestMethodCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TestScriptRequestMethodCode) Reset() {
	*x = TestScriptRequestMethodCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestScriptRequestMethodCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestScriptRequestMethodCode) ProtoMessage() {}

func (x *TestScriptRequestMethodCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestScriptRequestMethodCode.ProtoReflect.Descriptor instead.
func (*TestScriptRequestMethodCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{227}
}

// Distinguishes whether the transport is a proposal, plan or full order.
// See http://hl7.org/fhir/transport-intent
type TransportIntentCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TransportIntentCode) Reset() {
	*x = TransportIntentCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransportIntentCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportIntentCode) ProtoMessage() {}

func (x *TransportIntentCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportIntentCode.ProtoReflect.Descriptor instead.
func (*TransportIntentCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{228}
}

// Status of transport.
// See http://hl7.org/fhir/transport-status
type TransportStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TransportStatusCode) Reset() {
	*x = TransportStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransportStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportStatusCode) ProtoMessage() {}

func (x *TransportStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportStatusCode.ProtoReflect.Descriptor instead.
func (*TransportStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{229}
}

// The type of trigger.
// See http://hl7.org/fhir/trigger-type
type TriggerTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TriggerTypeCode) Reset() {
	*x = TriggerTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerTypeCode) ProtoMessage() {}

func (x *TriggerTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerTypeCode.ProtoReflect.Descriptor instead.
func (*TriggerTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{230}
}

// Codes providing the triggeredBy type of observation.
// See http://hl7.org/fhir/observation-triggeredbytype
type TriggeredBytypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TriggeredBytypeCode) Reset() {
	*x = TriggeredBytypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggeredBytypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggeredBytypeCode) ProtoMessage() {}

func (x *TriggeredBytypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggeredBytypeCode.ProtoReflect.Descriptor instead.
func (*TriggeredBytypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{231}
}

// How a type relates to its baseDefinition.
// See http://hl7.org/fhir/type-derivation-rule
type TypeDerivationRuleCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TypeDerivationRuleCode) Reset() {
	*x = TypeDerivationRuleCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeDerivationRuleCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeDerivationRuleCode) ProtoMessage() {}

func (x *TypeDerivationRuleCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeDerivationRuleCode.ProtoReflect.Descriptor instead.
func (*TypeDerivationRuleCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{232}
}

// Codes to identify how UDI data was entered.
// See http://hl7.org/fhir/udi-entry-type
type UDIEntryTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UDIEntryTypeCode) Reset() {
	*x = UDIEntryTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UDIEntryTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UDIEntryTypeCode) ProtoMessage() {}

func (x *UDIEntryTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UDIEntryTypeCode.ProtoReflect.Descriptor instead.
func (*UDIEntryTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{233}
}

// The purpose of the Claim: predetermination, preauthorization, claim.
// See http://hl7.org/fhir/claim-use
type UseCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UseCode) Reset() {
	*x = UseCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseCode) ProtoMessage() {}

func (x *UseCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseCode.ProtoReflect.Descriptor instead.
func (*UseCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{234}
}

// A coded concept listing the base codes.
// See http://hl7.org/fhir/vision-base-codes
type VisionBaseCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VisionBaseCode) Reset() {
	*x = VisionBaseCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VisionBaseCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VisionBaseCode) ProtoMessage() {}

func (x *VisionBaseCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VisionBaseCode.ProtoReflect.Descriptor instead.
func (*VisionBaseCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{235}
}

// A coded concept listing the eye codes.
// See http://hl7.org/fhir/vision-eye-codes
type VisionEyesCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VisionEyesCode) Reset() {
	*x = VisionEyesCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VisionEyesCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VisionEyesCode) ProtoMessage() {}

func (x *VisionEyesCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VisionEyesCode.ProtoReflect.Descriptor instead.
func (*VisionEyesCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{236}
}

// The set of weeks with in a month.
// See http://hl7.org/fhir/week-of-month
type WeekOfMonthCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WeekOfMonthCode) Reset() {
	*x = WeekOfMonthCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeekOfMonthCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeekOfMonthCode) ProtoMessage() {}

func (x *WeekOfMonthCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeekOfMonthCode.ProtoReflect.Descriptor instead.
func (*WeekOfMonthCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP(), []int{237}
}

var File_proto_google_fhir_proto_r5_core_codes_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r5_core_codes_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xac, 0x01,
	0x0a, 0x11, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x4e, 0x5f, 0x48,
	0x4f, 0x4c, 0x44, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x05, 0x1a, 0x28, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x94, 0x01, 0x0a,
	0x1d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x73,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x10, 0x02, 0x1a, 0x35, 0x8a, 0x91,
	0xc9, 0xfe, 0x07, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2d, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x22, 0x96, 0x01, 0x0a, 0x17, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x7b, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10,
	0x02, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x03, 0x1a, 0x2f, 0x8a, 0x91, 0xc9,
	0xfe, 0x07, 0x29, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xae, 0x01, 0x0a,
	0x1a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x42,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x56, 0x49, 0x53, 0x55, 0x41, 0x4c, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x45, 0x4e, 0x54, 0x45, 0x4e, 0x43,
	0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x03, 0x1a, 0x32, 0x8a, 0x91, 0xc9, 0xfe, 0x07,
	0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x6e, 0x67, 0x2d, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x22, 0x97, 0x02,
	0x0a, 0x19, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xf9, 0x01, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x52, 0x45, 0x54, 0x45, 0x41, 0x4d, 0x10, 0x05, 0x12, 0x0a,
	0x0a, 0x06, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x43,
	0x41, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08,
	0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x52,
	0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x41, 0x54, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x41,
	0x43, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x45, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x50,
	0x52, 0x41, 0x43, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x45, 0x52, 0x52, 0x4f, 0x4c, 0x45, 0x10,
	0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x50, 0x45, 0x52, 0x53,
	0x4f, 0x4e, 0x10, 0x0b, 0x1a, 0x31, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2b, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x1a, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x67, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x59, 0x45,
	0x53, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x4f, 0x10, 0x02, 0x1a, 0x32, 0x8a, 0x91, 0xc9,
	0xfe, 0x07, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x70, 0x72,
	0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2d, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x22,
	0x92, 0x02, 0x0a, 0x1a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xf3,
	0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x45, 0x46, 0x4f, 0x52, 0x45, 0x10, 0x02, 0x12,
	0x10, 0x0a, 0x0c, 0x42, 0x45, 0x46, 0x4f, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10,
	0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x45, 0x46, 0x4f, 0x52, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x10,
	0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4e, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x10,
	0x05, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4e, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13,
	0x43, 0x4f, 0x4e, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f,
	0x45, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x46, 0x54, 0x45, 0x52, 0x10, 0x08,
	0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10,
	0x07, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x09,
	0x1a, 0x32, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x1a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x55, 0x53, 0x54,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4f, 0x55, 0x4c, 0x44, 0x10, 0x02, 0x12, 0x1a, 0x0a,
	0x16, 0x4d, 0x55, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x4f, 0x43,
	0x55, 0x4d, 0x45, 0x4e, 0x54, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x32, 0x8a, 0x91, 0xc9, 0xfe, 0x07,
	0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x2d, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x22, 0xcd, 0x01,
	0x0a, 0x1b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xad, 0x01,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x59, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x41,
	0x4c, 0x4c, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x58, 0x41, 0x43, 0x54, 0x4c, 0x59,
	0x5f, 0x4f, 0x4e, 0x45, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x54, 0x5f, 0x4d, 0x4f, 0x53,
	0x54, 0x5f, 0x4f, 0x4e, 0x45, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x4e, 0x45, 0x5f, 0x4f,
	0x52, 0x5f, 0x4d, 0x4f, 0x52, 0x45, 0x10, 0x06, 0x1a, 0x33, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2d,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x22, 0x8b, 0x02,
	0x0a, 0x1c, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xea,
	0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x58, 0x49, 0x4d, 0x55, 0x4d, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x49, 0x4e, 0x49, 0x4d, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x45,
	0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x43,
	0x41, 0x4e, 0x44, 0x49, 0x44, 0x41, 0x54, 0x45, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x45, 0x46, 0x45,
	0x52, 0x52, 0x45, 0x44, 0x10, 0x07, 0x12, 0x06, 0x0a, 0x02, 0x55, 0x49, 0x10, 0x08, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x52, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x43,
	0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x10, 0x0a, 0x1a, 0x3f, 0x8a, 0x91, 0xc9, 0xfe,
	0x07, 0x39, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2d, 0x62, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x2d, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x0f,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x6e, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x4f, 0x53, 0x54, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x08, 0x0a,
	0x04, 0x42, 0x4f, 0x54, 0x48, 0x10, 0x03, 0x1a, 0x26, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x20, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x8f, 0x01, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x7d, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45,
	0x4d, 0x50, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x4c, 0x44, 0x10, 0x04, 0x12, 0x0b, 0x0a,
	0x07, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x1a, 0x25, 0x8a, 0x91, 0xc9, 0xfe,
	0x07, 0x1f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x75, 0x73,
	0x65, 0x22, 0x9e, 0x01, 0x0a, 0x18, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x81,
	0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x46, 0x45, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x04, 0x1a, 0x2f, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x29, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x2d, 0x67, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x22, 0x8d, 0x01, 0x0a, 0x19, 0x41, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x70, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x55, 0x41, 0x4c, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x50, 0x4f, 0x54, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x1a,
	0x31, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x22, 0x9b, 0x01, 0x0a, 0x13, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x33, 0x8a, 0x91, 0xc9,
	0xfe, 0x07, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x6f, 0x64, 0x65,
	0x22, 0xb6, 0x01, 0x0a, 0x1e, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f,
	0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x4f, 0x4f, 0x44,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x49, 0x4f, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x10,
	0x04, 0x1a, 0x36, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x67, 0x79, 0x2d, 0x69, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0xac, 0x01, 0x0a, 0x21, 0x41, 0x6c,
	0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x86, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x48, 0x49, 0x47, 0x48, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x53, 0x53, 0x10, 0x03, 0x1a, 0x39, 0x8a,
	0x91, 0xc9, 0xfe, 0x07, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79,
	0x2d, 0x69, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x63, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x9b, 0x01, 0x0a, 0x1e, 0x41, 0x6c, 0x6c,
	0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x79, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x4d, 0x49, 0x4c, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x4f, 0x44,
	0x45, 0x52, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x45, 0x10, 0x03, 0x1a, 0x31, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x22, 0xfb, 0x01, 0x0a, 0x15, 0x41, 0x70, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0xe1, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x42, 0x4f, 0x4f, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07,
	0x41, 0x52, 0x52, 0x49, 0x56, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x55, 0x4c,
	0x46, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x53, 0x48, 0x4f,
	0x57, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49,
	0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x48, 0x45,
	0x43, 0x4b, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x41, 0x49,
	0x54, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x0a, 0x1a, 0x2b, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x25, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0xfe, 0x01, 0x0a, 0x21, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xd8, 0x01, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x55, 0x41, 0x53, 0x49, 0x56,
	0x45, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x45, 0x52, 0x53, 0x55, 0x41, 0x53, 0x49, 0x56,
	0x45, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x45, 0x52, 0x53, 0x55, 0x41, 0x53, 0x49, 0x56,
	0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x45, 0x52,
	0x53, 0x55, 0x41, 0x53, 0x49, 0x56, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4d, 0x4f, 0x44,
	0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x1a, 0x38, 0x8a, 0x91, 0xc9,
	0xfe, 0x07, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x61,
	0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe5, 0x01, 0x0a, 0x25, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0xbb, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x45, 0x52, 0x10,
	0x02, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08,
	0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x06, 0x1a, 0x3d,
	0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xc1, 0x02,
	0x0a, 0x24, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73,
	0x6d, 0x65, 0x6e, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x98, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53,
	0x55, 0x42, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x52,
	0x49, 0x41, 0x47, 0x45, 0x44, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x41, 0x49, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x03, 0x12, 0x16,
	0x0a, 0x12, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56,
	0x45, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52,
	0x45, 0x44, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44,
	0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10,
	0x07, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x45, 0x44, 0x10, 0x08, 0x12, 0x0d,
	0x0a, 0x09, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x09, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x0a, 0x1a, 0x3c, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x36, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e,
	0x74, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x8d, 0x01, 0x0a, 0x1a, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x6f, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02, 0x1a,
	0x30, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x72,
	0x74, 0x2d, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x6f, 0x64, 0x65,
	0x73, 0x22, 0xaa, 0x01, 0x0a, 0x21, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x46, 0x41, 0x49, 0x4c, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x41, 0x53, 0x53, 0x10, 0x02,
	0x12, 0x08, 0x0a, 0x04, 0x53, 0x4b, 0x49, 0x50, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x54,
	0x4f, 0x50, 0x10, 0x04, 0x1a, 0x38, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x32, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x2d, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x8d,
	0x03, 0x0a, 0x19, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xef, 0x02, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x01, 0x12, 0x1f, 0x0a,
	0x0a, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x02, 0x1a, 0x0f, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x09, 0x6e, 0x6f, 0x74, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x12, 0x06,
	0x0a, 0x02, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x06, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e,
	0x10, 0x04, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x12,
	0x23, 0x0a, 0x0c, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10,
	0x05, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72,
	0x54, 0x68, 0x61, 0x6e, 0x12, 0x1d, 0x0a, 0x09, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41,
	0x4e, 0x10, 0x06, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x6c, 0x65, 0x73, 0x73, 0x54,
	0x68, 0x61, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x07, 0x12, 0x1d,
	0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x08, 0x1a, 0x0e, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x08, 0x6e, 0x6f, 0x74, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x0c, 0x0a,
	0x08, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x10, 0x09, 0x12, 0x23, 0x0a, 0x0c, 0x4e,
	0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x10, 0x0a, 0x1a, 0x11, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x6e, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73,
	0x12, 0x08, 0x0a, 0x04, 0x45, 0x56, 0x41, 0x4c, 0x10, 0x0b, 0x12, 0x21, 0x0a, 0x0b, 0x4d, 0x41,
	0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x45, 0x56, 0x41, 0x4c, 0x10, 0x0c, 0x1a, 0x10, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0a, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x45, 0x76, 0x61, 0x6c, 0x1a, 0x2f, 0x8a,
	0x91, 0xc9, 0xfe, 0x07, 0x29, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x2d,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xbb,
	0x0e, 0x0a, 0x1a, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x9c, 0x0e,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x10, 0x0d,
	0x12, 0x31, 0x0a, 0x13, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x10, 0x0e, 0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x12, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x4b, 0x41, 0x59, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x43,
	0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x44, 0x0a, 0x1d, 0x4e, 0x4f, 0x4e, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x54, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x10, 0x1a, 0x21, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x1b, 0x6e, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x0a, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x1a, 0x0f,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x6e, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x25, 0x0a, 0x0d, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54,
	0x10, 0x11, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x0f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41,
	0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x12, 0x1a, 0x14, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x2b, 0x0a, 0x10, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x43, 0x48,
	0x4f, 0x49, 0x43, 0x45, 0x53, 0x10, 0x13, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2d,
	0x0a, 0x11, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x41, 0x4e, 0x45, 0x4e,
	0x54, 0x4c, 0x59, 0x10, 0x14, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x6d, 0x6f, 0x76,
	0x65, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x12, 0x09, 0x0a,
	0x05, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x15, 0x12, 0x1d, 0x0a, 0x09, 0x53, 0x45, 0x45, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x16, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x73,
	0x65, 0x65, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x5f, 0x4d,
	0x4f, 0x44, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x04, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0b, 0x6e, 0x6f, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x09,
	0x55, 0x53, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x10, 0x17, 0x1a, 0x0e, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x08, 0x75, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x2f, 0x0a, 0x12, 0x54,
	0x45, 0x4d, 0x50, 0x4f, 0x52, 0x41, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43,
	0x54, 0x10, 0x18, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x74, 0x65, 0x6d, 0x70, 0x6f,
	0x72, 0x61, 0x72, 0x79, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x2f, 0x0a, 0x12,
	0x50, 0x45, 0x52, 0x4d, 0x41, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x52, 0x45,
	0x43, 0x54, 0x10, 0x19, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x70, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x21, 0x0a,
	0x0b, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x1a, 0x1a, 0x10,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x62, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x1b, 0x12, 0x2b, 0x0a, 0x10, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x1c, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12,
	0x0d, 0x0a, 0x09, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0x06, 0x12, 0x1d,
	0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x07, 0x1a, 0x0e, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x08, 0x6e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2e, 0x0a,
	0x12, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f,
	0x57, 0x45, 0x44, 0x10, 0x08, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x4e, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x27, 0x0a,
	0x0e, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x1d, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x6e, 0x6f, 0x74, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x1d, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x1e, 0x1a, 0x21, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x1b, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x0f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10,
	0x1f, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x46, 0x4c,
	0x49, 0x43, 0x54, 0x10, 0x09, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x4f, 0x4e, 0x45, 0x10, 0x0a, 0x12,
	0x29, 0x0a, 0x0f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52,
	0x45, 0x44, 0x10, 0x20, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x13, 0x50, 0x52,
	0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x0b, 0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x70, 0x72, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x2c, 0x0a,
	0x11, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x41, 0x52,
	0x47, 0x45, 0x10, 0x21, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x55,
	0x52, 0x49, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x22, 0x1a, 0x10, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x75, 0x72, 0x69, 0x54, 0x6f, 0x6f, 0x4c, 0x6f, 0x6e, 0x67, 0x12,
	0x36, 0x0a, 0x16, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x4d,
	0x45, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x23, 0x1a, 0x1a, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x14, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x52, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x41, 0x54, 0x49, 0x53, 0x46, 0x49, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x24, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x4e,
	0x6f, 0x74, 0x53, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2f, 0x0a,
	0x12, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x25, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x65, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x31,
	0x0a, 0x13, 0x4d, 0x49, 0x53, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x26, 0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x6d,
	0x69, 0x73, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x35, 0x0a, 0x15, 0x55, 0x4e, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x27, 0x1a, 0x1a, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x14, 0x75, 0x6e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x10, 0x55, 0x50, 0x47, 0x52,
	0x41, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x28, 0x1a, 0x15,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41,
	0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x29,
	0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x0f, 0x4e,
	0x4f, 0x54, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x45, 0x44, 0x10, 0x2a,
	0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x6e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0b, 0x42, 0x41, 0x44, 0x5f, 0x47, 0x41,
	0x54, 0x45, 0x57, 0x41, 0x59, 0x10, 0x2b, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x62,
	0x61, 0x64, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x31, 0x0a, 0x13, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x2c, 0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x0f,
	0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10,
	0x2d, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x3d, 0x0a, 0x1a, 0x48, 0x54, 0x54, 0x50, 0x5f,
	0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50,
	0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x2e, 0x1a, 0x1d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x17, 0x68,
	0x74, 0x74, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x1a, 0x34, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2e, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x2d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0xb9, 0x01, 0x0a,
	0x14, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x01, 0x43, 0x10,
	0x01, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x43, 0x12, 0x0e, 0x0a, 0x01, 0x52, 0x10,
	0x02, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x52, 0x12, 0x0e, 0x0a, 0x01, 0x55, 0x10,
	0x03, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x55, 0x12, 0x0e, 0x0a, 0x01, 0x44, 0x10,
	0x04, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x44, 0x12, 0x0e, 0x0a, 0x01, 0x45, 0x10,
	0x05, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x45, 0x1a, 0x2c, 0x8a, 0x91, 0xc9, 0xfe,
	0x07, 0x26, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2d, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd7, 0x01, 0x0a, 0x16, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x4d, 0x45, 0x52,
	0x47, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x4c, 0x45, 0x52, 0x54,
	0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x03,
	0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x57,
	0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x54, 0x49,
	0x43, 0x45, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x42, 0x55, 0x47,
	0x10, 0x08, 0x1a, 0x2e, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x28, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x22, 0xa0, 0x01, 0x0a, 0x13, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a,
	0x09, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07,
	0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x10, 0x04, 0x1a, 0x2a, 0x8a, 0x91, 0xc9, 0xfe, 0x07,
	0x24, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x73, 0x74, 0x72,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x91, 0x02, 0x0a, 0x26, 0x42, 0x69, 0x6f, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0xe6, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f,
	0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x4c, 0x4c, 0x4f, 0x43,
	0x41, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x53, 0x53, 0x55, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x46, 0x55, 0x4c, 0x46, 0x49, 0x4c, 0x4c, 0x45,
	0x44, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x45, 0x44, 0x10,
	0x06, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x08, 0x1a, 0x43, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x3d, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x62, 0x69, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x64, 0x65, 0x72, 0x69,
	0x76, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e,
	0x73, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8c, 0x02, 0x0a, 0x0e, 0x42, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xf9, 0x01, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x18, 0x0a,
	0x14, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53,
	0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x41, 0x54, 0x43, 0x48,
	0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x53, 0x50,
	0x4f, 0x4e, 0x53, 0x45, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52,
	0x59, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x53, 0x45, 0x54,
	0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x0a, 0x1a, 0x25, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x1f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x62, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x1b, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x4b, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43,
	0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x52,
	0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x03, 0x1a, 0x33, 0x8a,
	0x91, 0xc9, 0xfe, 0x07, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6b, 0x69,
	0x6e, 0x64, 0x22, 0xb2, 0x01, 0x0a, 0x12, 0x43, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x53, 0x50,
	0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44,
	0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x1a, 0x2a, 0x8a, 0x91, 0xc9,
	0xfe, 0x07, 0x24, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x63, 0x61, 0x72, 0x65, 0x2d, 0x74, 0x65, 0x61, 0x6d,
	0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xdb, 0x01, 0x0a, 0x1d, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x41, 0x4c, 0x4c, 0x5f, 0x4f, 0x46, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x4e,
	0x59, 0x5f, 0x4f, 0x46, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x54, 0x5f, 0x4c, 0x45, 0x41,
	0x53, 0x54, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x54, 0x5f, 0x4d, 0x4f, 0x53, 0x54, 0x10,
	0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x49, 0x53, 0x54, 0x49, 0x43, 0x41, 0x4c,
	0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x45, 0x54, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54,
	0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x41, 0x54, 0x41, 0x53, 0x45, 0x54, 0x10, 0x07, 0x1a,
	0x34, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2d, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd1, 0x01, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xb8,
	0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x4c, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x42, 0x49, 0x4c, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x10,
	0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03,
	0x12, 0x0b, 0x0a, 0x07, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0a, 0x0a,
	0x06, 0x42, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x07, 0x1a, 0x2b, 0x8a, 0x91,
	0xc9, 0xfe, 0x07, 0x25, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x69, 0x74,
	0x65, 0x6d, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x1a, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x7d, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x51, 0x55, 0x45, 0x55, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x03, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x04, 0x1a, 0x27,
	0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x21, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x2d,
	0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x22, 0xd8, 0x01, 0x0a, 0x1d, 0x43, 0x6c, 0x69, 0x6e,
	0x69, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x4e, 0x44, 0x45, 0x53, 0x49, 0x52,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x10, 0x04, 0x12, 0x0b, 0x0a,
	0x07, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x1a, 0x36, 0x8a, 0x91, 0xc9, 0xfe,
	0x07, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x75,
	0x73, 0x65, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x90, 0x01, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45, 0x10,
	0x03, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x41, 0x4e, 0x53, 0x49, 0x4f,
	0x4e, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53,
	0x45, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x58, 0x50, 0x41, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x05,
	0x1a, 0x2d, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x63, 0x6f, 0x64, 0x65,
	0x2d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x22,
	0xbd, 0x01, 0x0a, 0x19, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x9f, 0x01,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e,
	0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x0c,
	0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a,
	0x53, 0x55, 0x50, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x1a, 0x31, 0x8a, 0x91,
	0xc9, 0xfe, 0x07, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22,
	0xb9, 0x01, 0x0a, 0x1e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x48, 0x69,
	0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x4d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x45, 0x44, 0x5f, 0x42, 0x59, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x53, 0x5f, 0x41, 0x10,
	0x02, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x52, 0x54, 0x5f, 0x4f, 0x46, 0x10, 0x03, 0x12, 0x13,
	0x0a, 0x0f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x57, 0x49, 0x54,
	0x48, 0x10, 0x04, 0x1a, 0x36, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72,
	0x63, 0x68, 0x79, 0x2d, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x8e, 0x12, 0x0a, 0x09,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x80, 0x12, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x41, 0x4c, 0x49, 0x43, 0x45, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x41, 0x4e, 0x54, 0x49, 0x51, 0x55, 0x45, 0x57, 0x48, 0x49, 0x54, 0x45, 0x10, 0x02, 0x12,
	0x08, 0x0a, 0x04, 0x41, 0x51, 0x55, 0x41, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x51, 0x55,
	0x41, 0x4d, 0x41, 0x52, 0x49, 0x4e, 0x45, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x5a, 0x55,
	0x52, 0x45, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x45, 0x49, 0x47, 0x45, 0x10, 0x06, 0x12,
	0x0a, 0x0a, 0x06, 0x42, 0x49, 0x53, 0x51, 0x55, 0x45, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x42,
	0x4c, 0x41, 0x43, 0x4b, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x4c, 0x41, 0x4e, 0x43, 0x48,
	0x45, 0x44, 0x41, 0x4c, 0x4d, 0x4f, 0x4e, 0x44, 0x10, 0x09, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4c,
	0x55, 0x45, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x4c, 0x55, 0x45, 0x56, 0x49, 0x4f, 0x4c,
	0x45, 0x54, 0x10, 0x0b, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x52, 0x4f, 0x57, 0x4e, 0x10, 0x0c, 0x12,
	0x0d, 0x0a, 0x09, 0x42, 0x55, 0x52, 0x4c, 0x59, 0x57, 0x4f, 0x4f, 0x44, 0x10, 0x0d, 0x12, 0x0d,
	0x0a, 0x09, 0x43, 0x41, 0x44, 0x45, 0x54, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x0e, 0x12, 0x0e, 0x0a,
	0x0a, 0x43, 0x48, 0x41, 0x52, 0x54, 0x52, 0x45, 0x55, 0x53, 0x45, 0x10, 0x0f, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x48, 0x4f, 0x43, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x10, 0x12, 0x09, 0x0a, 0x05,
	0x43, 0x4f, 0x52, 0x41, 0x4c, 0x10, 0x11, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x52, 0x4e, 0x46,
	0x4c, 0x4f, 0x57, 0x45, 0x52, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x12, 0x12, 0x0c, 0x0a, 0x08, 0x43,
	0x4f, 0x52, 0x4e, 0x53, 0x49, 0x4c, 0x4b, 0x10, 0x13, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x49,
	0x4d, 0x53, 0x4f, 0x4e, 0x10, 0x14, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x59, 0x41, 0x4e, 0x10, 0x15,
	0x12, 0x0c, 0x0a, 0x08, 0x44, 0x41, 0x52, 0x4b, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x16, 0x12, 0x0c,
	0x0a, 0x08, 0x44, 0x41, 0x52, 0x4b, 0x43, 0x59, 0x41, 0x4e, 0x10, 0x17, 0x12, 0x11, 0x0a, 0x0d,
	0x44, 0x41, 0x52, 0x4b, 0x47, 0x4f, 0x4c, 0x44, 0x45, 0x4e, 0x52, 0x4f, 0x44, 0x10, 0x18, 0x12,
	0x0c, 0x0a, 0x08, 0x44, 0x41, 0x52, 0x4b, 0x47, 0x52, 0x41, 0x59, 0x10, 0x19, 0x12, 0x0d, 0x0a,
	0x09, 0x44, 0x41, 0x52, 0x4b, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x1a, 0x12, 0x0c, 0x0a, 0x08,
	0x44, 0x41, 0x52, 0x4b, 0x47, 0x52, 0x45, 0x59, 0x10, 0x1b, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x41,
	0x52, 0x4b, 0x4b, 0x48, 0x41, 0x4b, 0x49, 0x10, 0x1c, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x41, 0x52,
	0x4b, 0x4d, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x41, 0x10, 0x1d, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x41,
	0x52, 0x4b, 0x4f, 0x4c, 0x49, 0x56, 0x45, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x1e, 0x12, 0x0e,
	0x0a, 0x0a, 0x44, 0x41, 0x52, 0x4b, 0x4f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x1f, 0x12, 0x0e,
	0x0a, 0x0a, 0x44, 0x41, 0x52, 0x4b, 0x4f, 0x52, 0x43, 0x48, 0x49, 0x44, 0x10, 0x20, 0x12, 0x0b,
	0x0a, 0x07, 0x44, 0x41, 0x52, 0x4b, 0x52, 0x45, 0x44, 0x10, 0x21, 0x12, 0x0e, 0x0a, 0x0a, 0x44,
	0x41, 0x52, 0x4b, 0x53, 0x41, 0x4c, 0x4d, 0x4f, 0x4e, 0x10, 0x22, 0x12, 0x10, 0x0a, 0x0c, 0x44,
	0x41, 0x52, 0x4b, 0x53, 0x45, 0x41, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x23, 0x12, 0x11, 0x0a,
	0x0d, 0x44, 0x41, 0x52, 0x4b, 0x53, 0x4c, 0x41, 0x54, 0x45, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x24,
	0x12, 0x11, 0x0a, 0x0d, 0x44, 0x41, 0x52, 0x4b, 0x53, 0x4c, 0x41, 0x54, 0x45, 0x47, 0x52, 0x41,
	0x59, 0x10, 0x25, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x41, 0x52, 0x4b, 0x53, 0x4c, 0x41, 0x54, 0x45,
	0x47, 0x52, 0x45, 0x59, 0x10, 0x26, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x41, 0x52, 0x4b, 0x54, 0x55,
	0x52, 0x51, 0x55, 0x4f, 0x49, 0x53, 0x45, 0x10, 0x27, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x41, 0x52,
	0x4b, 0x56, 0x49, 0x4f, 0x4c, 0x45, 0x54, 0x10, 0x28, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x45,
	0x50, 0x50, 0x49, 0x4e, 0x4b, 0x10, 0x29, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x45, 0x45, 0x50, 0x53,
	0x4b, 0x59, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x2a, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x49, 0x4d, 0x47,
	0x52, 0x41, 0x59, 0x10, 0x2b, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x49, 0x4d, 0x47, 0x52, 0x45, 0x59,
	0x10, 0x2c, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x4f, 0x44, 0x47, 0x45, 0x52, 0x42, 0x4c, 0x55, 0x45,
	0x10, 0x2d, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x49, 0x52, 0x45, 0x42, 0x52, 0x49, 0x43, 0x4b, 0x10,
	0x2e, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x4c, 0x4f, 0x52, 0x41, 0x4c, 0x57, 0x48, 0x49, 0x54, 0x45,
	0x10, 0x2f, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x4f, 0x52, 0x45, 0x53, 0x54, 0x47, 0x52, 0x45, 0x45,
	0x4e, 0x10, 0x30, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x55, 0x43, 0x48, 0x53, 0x49, 0x41, 0x10, 0x31,
	0x12, 0x0d, 0x0a, 0x09, 0x47, 0x41, 0x49, 0x4e, 0x53, 0x42, 0x4f, 0x52, 0x4f, 0x10, 0x32, 0x12,
	0x0e, 0x0a, 0x0a, 0x47, 0x48, 0x4f, 0x53, 0x54, 0x57, 0x48, 0x49, 0x54, 0x45, 0x10, 0x33, 0x12,
	0x08, 0x0a, 0x04, 0x47, 0x4f, 0x4c, 0x44, 0x10, 0x34, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x4f, 0x4c,
	0x44, 0x45, 0x4e, 0x52, 0x4f, 0x44, 0x10, 0x35, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x52, 0x41, 0x59,
	0x10, 0x36, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x37, 0x12, 0x0f, 0x0a,
	0x0b, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x38, 0x12, 0x08,
	0x0a, 0x04, 0x47, 0x52, 0x45, 0x59, 0x10, 0x39, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x4f, 0x4e, 0x45,
	0x59, 0x44, 0x45, 0x57, 0x10, 0x3a, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x4f, 0x54, 0x50, 0x49, 0x4e,
	0x4b, 0x10, 0x3b, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x44, 0x49, 0x41, 0x4e, 0x52, 0x45, 0x44,
	0x10, 0x3c, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x4e, 0x44, 0x49, 0x47, 0x4f, 0x10, 0x3d, 0x12, 0x09,
	0x0a, 0x05, 0x49, 0x56, 0x4f, 0x52, 0x59, 0x10, 0x3e, 0x12, 0x09, 0x0a, 0x05, 0x4b, 0x48, 0x41,
	0x4b, 0x49, 0x10, 0x3f, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x41, 0x56, 0x45, 0x4e, 0x44, 0x45, 0x52,
	0x10, 0x40, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x41, 0x56, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x42, 0x4c,
	0x55, 0x53, 0x48, 0x10, 0x41, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x41, 0x57, 0x4e, 0x47, 0x52, 0x45,
	0x45, 0x4e, 0x10, 0x42, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x45, 0x4d, 0x4f, 0x4e, 0x43, 0x48, 0x49,
	0x46, 0x46, 0x4f, 0x4e, 0x10, 0x43, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x42,
	0x4c, 0x55, 0x45, 0x10, 0x44, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x43, 0x4f,
	0x52, 0x41, 0x4c, 0x10, 0x45, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x43, 0x59,
	0x41, 0x4e, 0x10, 0x46, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x47, 0x4f, 0x4c,
	0x44, 0x45, 0x4e, 0x52, 0x4f, 0x44, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x47, 0x12, 0x0d,
	0x0a, 0x09, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x47, 0x52, 0x41, 0x59, 0x10, 0x48, 0x12, 0x0e, 0x0a,
	0x0a, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x49, 0x12, 0x0d, 0x0a,
	0x09, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x47, 0x52, 0x45, 0x59, 0x10, 0x4a, 0x12, 0x0d, 0x0a, 0x09,
	0x4c, 0x49, 0x47, 0x48, 0x54, 0x50, 0x49, 0x4e, 0x4b, 0x10, 0x4b, 0x12, 0x0f, 0x0a, 0x0b, 0x4c,
	0x49, 0x47, 0x48, 0x54, 0x53, 0x41, 0x4c, 0x4d, 0x4f, 0x4e, 0x10, 0x4c, 0x12, 0x11, 0x0a, 0x0d,
	0x4c, 0x49, 0x47, 0x48, 0x54, 0x53, 0x45, 0x41, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x4d, 0x12,
	0x10, 0x0a, 0x0c, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x53, 0x4b, 0x59, 0x42, 0x4c, 0x55, 0x45, 0x10,
	0x4e, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x53, 0x4c, 0x41, 0x54, 0x45, 0x47,
	0x52, 0x41, 0x59, 0x10, 0x4f, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x53, 0x4c,
	0x41, 0x54, 0x45, 0x47, 0x52, 0x45, 0x59, 0x10, 0x50, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x49, 0x47,
	0x48, 0x54, 0x53, 0x54, 0x45, 0x45, 0x4c, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x51, 0x12, 0x0f, 0x0a,
	0x0b, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x52, 0x12, 0x08,
	0x0a, 0x04, 0x4c, 0x49, 0x4d, 0x45, 0x10, 0x53, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x49, 0x4d, 0x45,
	0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x54, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x49, 0x4e, 0x45, 0x4e,
	0x10, 0x55, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x41, 0x10, 0x56, 0x12,
	0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x52, 0x4f, 0x4f, 0x4e, 0x10, 0x57, 0x12, 0x14, 0x0a, 0x10, 0x4d,
	0x45, 0x44, 0x49, 0x55, 0x4d, 0x41, 0x51, 0x55, 0x41, 0x4d, 0x41, 0x52, 0x49, 0x4e, 0x45, 0x10,
	0x58, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x42, 0x4c, 0x55, 0x45, 0x10,
	0x59, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x4f, 0x52, 0x43, 0x48, 0x49,
	0x44, 0x10, 0x5a, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x50, 0x55, 0x52,
	0x50, 0x4c, 0x45, 0x10, 0x5b, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x53,
	0x45, 0x41, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x5c, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x45, 0x44,
	0x49, 0x55, 0x4d, 0x53, 0x4c, 0x41, 0x54, 0x45, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x5d, 0x12, 0x15,
	0x0a, 0x11, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x53, 0x50, 0x52, 0x49, 0x4e, 0x47, 0x47, 0x52,
	0x45, 0x45, 0x4e, 0x10, 0x5e, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x54,
	0x55, 0x52, 0x51, 0x55, 0x4f, 0x49, 0x53, 0x45, 0x10, 0x5f, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x45,
	0x44, 0x49, 0x55, 0x4d, 0x56, 0x49, 0x4f, 0x4c, 0x45, 0x54, 0x52, 0x45, 0x44, 0x10, 0x60, 0x12,
	0x10, 0x0a, 0x0c, 0x4d, 0x49, 0x44, 0x4e, 0x49, 0x47, 0x48, 0x54, 0x42, 0x4c, 0x55, 0x45, 0x10,
	0x61, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x49, 0x4e, 0x54, 0x43, 0x52, 0x45, 0x41, 0x4d, 0x10, 0x62,
	0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x49, 0x53, 0x54, 0x59, 0x52, 0x4f, 0x53, 0x45, 0x10, 0x63, 0x12,
	0x0c, 0x0a, 0x08, 0x4d, 0x4f, 0x43, 0x43, 0x41, 0x53, 0x49, 0x4e, 0x10, 0x64, 0x12, 0x0f, 0x0a,
	0x0b, 0x4e, 0x41, 0x56, 0x41, 0x4a, 0x4f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x10, 0x65, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x41, 0x56, 0x59, 0x10, 0x66, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x4c, 0x44, 0x4c,
	0x41, 0x43, 0x45, 0x10, 0x67, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x4c, 0x49, 0x56, 0x45, 0x10, 0x68,
	0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x4c, 0x49, 0x56, 0x45, 0x44, 0x52, 0x41, 0x42, 0x10, 0x69, 0x12,
	0x0a, 0x0a, 0x06, 0x4f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x6a, 0x12, 0x0d, 0x0a, 0x09, 0x4f,
	0x52, 0x41, 0x4e, 0x47, 0x45, 0x52, 0x45, 0x44, 0x10, 0x6b, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x52,
	0x43, 0x48, 0x49, 0x44, 0x10, 0x6c, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x41, 0x4c, 0x45, 0x47, 0x4f,
	0x4c, 0x44, 0x45, 0x4e, 0x52, 0x4f, 0x44, 0x10, 0x6d, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x41, 0x4c,
	0x45, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x6e, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x41, 0x4c, 0x45,
	0x54, 0x55, 0x52, 0x51, 0x55, 0x4f, 0x49, 0x53, 0x45, 0x10, 0x6f, 0x12, 0x11, 0x0a, 0x0d, 0x50,
	0x41, 0x4c, 0x45, 0x56, 0x49, 0x4f, 0x4c, 0x45, 0x54, 0x52, 0x45, 0x44, 0x10, 0x70, 0x12, 0x0e,
	0x0a, 0x0a, 0x50, 0x41, 0x50, 0x41, 0x59, 0x41, 0x57, 0x48, 0x49, 0x50, 0x10, 0x71, 0x12, 0x0d,
	0x0a, 0x09, 0x50, 0x45, 0x41, 0x43, 0x48, 0x50, 0x55, 0x46, 0x46, 0x10, 0x72, 0x12, 0x08, 0x0a,
	0x04, 0x50, 0x45, 0x52, 0x55, 0x10, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x49, 0x4e, 0x4b, 0x10,
	0x74, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4c, 0x55, 0x4d, 0x10, 0x75, 0x12, 0x0e, 0x0a, 0x0a, 0x50,
	0x4f, 0x57, 0x44, 0x45, 0x52, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x76, 0x12, 0x0a, 0x0a, 0x06, 0x50,
	0x55, 0x52, 0x50, 0x4c, 0x45, 0x10, 0x77, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x42, 0x45, 0x43,
	0x43, 0x41, 0x50, 0x55, 0x52, 0x50, 0x4c, 0x45, 0x10, 0x78, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x45,
	0x44, 0x10, 0x79, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x4f, 0x53, 0x59, 0x42, 0x52, 0x4f, 0x57, 0x4e,
	0x10, 0x7a, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x4f, 0x59, 0x41, 0x4c, 0x42, 0x4c, 0x55, 0x45, 0x10,
	0x7b, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x41, 0x44, 0x44, 0x4c, 0x45, 0x42, 0x52, 0x4f, 0x57, 0x4e,
	0x10, 0x7c, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x41, 0x4c, 0x4d, 0x4f, 0x4e, 0x10, 0x7d, 0x12, 0x0e,
	0x0a, 0x0a, 0x53, 0x41, 0x4e, 0x44, 0x59, 0x42, 0x52, 0x4f, 0x57, 0x4e, 0x10, 0x7e, 0x12, 0x0c,
	0x0a, 0x08, 0x53, 0x45, 0x41, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x7f, 0x12, 0x0d, 0x0a, 0x08,
	0x53, 0x45, 0x41, 0x53, 0x48, 0x45, 0x4c, 0x4c, 0x10, 0x80, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x53,
	0x49, 0x45, 0x4e, 0x4e, 0x41, 0x10, 0x81, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x53, 0x49, 0x4c, 0x56,
	0x45, 0x52, 0x10, 0x82, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x53, 0x4b, 0x59, 0x42, 0x4c, 0x55, 0x45,
	0x10, 0x83, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x53, 0x4c, 0x41, 0x54, 0x45, 0x42, 0x4c, 0x55, 0x45,
	0x10, 0x84, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x53, 0x4c, 0x41, 0x54, 0x45, 0x47, 0x52, 0x41, 0x59,
	0x10, 0x85, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x53, 0x4c, 0x41, 0x54, 0x45, 0x47, 0x52, 0x45, 0x59,
	0x10, 0x86, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x53, 0x4e, 0x4f, 0x57, 0x10, 0x87, 0x01, 0x12, 0x10,
	0x0a, 0x0b, 0x53, 0x50, 0x52, 0x49, 0x4e, 0x47, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x88, 0x01,
	0x12, 0x0e, 0x0a, 0x09, 0x53, 0x54, 0x45, 0x45, 0x4c, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x89, 0x01,
	0x12, 0x08, 0x0a, 0x03, 0x54, 0x41, 0x4e, 0x10, 0x8a, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x54, 0x45,
	0x41, 0x4c, 0x10, 0x8b, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x54, 0x48, 0x49, 0x53, 0x54, 0x4c, 0x45,
	0x10, 0x8c, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x54, 0x4f, 0x4d, 0x41, 0x54, 0x4f, 0x10, 0x8d, 0x01,
	0x12, 0x0e, 0x0a, 0x09, 0x54, 0x55, 0x52, 0x51, 0x55, 0x4f, 0x49, 0x53, 0x45, 0x10, 0x8e, 0x01,
	0x12, 0x0b, 0x0a, 0x06, 0x56, 0x49, 0x4f, 0x4c, 0x45, 0x54, 0x10, 0x8f, 0x01, 0x12, 0x0a, 0x0a,
	0x05, 0x57, 0x48, 0x45, 0x41, 0x54, 0x10, 0x90, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x57, 0x48, 0x49,
	0x54, 0x45, 0x10, 0x91, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x57, 0x48, 0x49, 0x54, 0x45, 0x53, 0x4d,
	0x4f, 0x4b, 0x45, 0x10, 0x92, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57,
	0x10, 0x93, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x47, 0x52, 0x45,
	0x45, 0x4e, 0x10, 0x94, 0x01, 0x1a, 0x25, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x1f, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x57, 0x0a, 0x0c,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x47, 0x42, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x47, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x1a, 0x23, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x1d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x2d, 0x72, 0x67, 0x62, 0x22, 0xb5, 0x02, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x9d, 0x02,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1a, 0x0a, 0x07, 0x50, 0x41, 0x54, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a,
	0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1e,
	0x0a, 0x09, 0x45, 0x4e, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x02, 0x1a, 0x0f, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x27,
	0x0a, 0x0e, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e,
	0x10, 0x03, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0c, 0x50, 0x52, 0x41, 0x43, 0x54,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x45, 0x52, 0x10, 0x04, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x06, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x05, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x50, 0x49, 0x53, 0x4f,
	0x44, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x43, 0x41, 0x52, 0x45, 0x10, 0x06, 0x1a, 0x13, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0d, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72,
	0x65, 0x1a, 0x2a, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x24, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x8f, 0x02,
	0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xf5, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x45,
	0x4c, 0x49, 0x4d, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x49,
	0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4d, 0x45, 0x4e, 0x44, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x07, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x08, 0x12,
	0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x09, 0x12, 0x14,
	0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x0b, 0x1a, 0x2c, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x26, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xd2, 0x01, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0xb2, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x12, 0x18,
	0x0a, 0x06, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x06, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49,
	0x4e, 0x47, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10,
	0x04, 0x12, 0x1c, 0x0a, 0x08, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x05, 0x1a,
	0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a,
	0x33, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x6d, 0x61, 0x70, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x1f, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x4d, 0x61, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64,
	0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a,
	0x0f, 0x55, 0x53, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x49, 0x58, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a,
	0x09, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x03, 0x1a, 0x32, 0x8a, 0x91,
	0xc9, 0xfe, 0x07, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x6d,
	0x61, 0x70, 0x2d, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2d, 0x6d, 0x6f, 0x64, 0x65,
	0x22, 0xeb, 0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0xcc, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x06, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e,
	0x54, 0x45, 0x47, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x4f, 0x4c, 0x45,
	0x41, 0x4e, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x09, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x10, 0x05, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x10, 0x06,
	0x12, 0x08, 0x0a, 0x04, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x07, 0x1a, 0x32, 0x8a, 0x91, 0xc9, 0xfe,
	0x07, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x6d, 0x61, 0x70,
	0x2d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xf0,
	0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xd1, 0x01,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x54, 0x4f,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x51, 0x55, 0x49, 0x56, 0x41, 0x4c, 0x45, 0x4e, 0x54,
	0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x49, 0x53, 0x5f,
	0x4e, 0x41, 0x52, 0x52, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x54, 0x41,
	0x52, 0x47, 0x45, 0x54, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x49, 0x53, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e,
	0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x54,
	0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x10, 0x05, 0x1a, 0x32, 0x8a,
	0x91, 0xc9, 0xfe, 0x07, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x2d, 0x6d, 0x61, 0x70, 0x2d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x22, 0x97, 0x01, 0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x76, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x4e, 0x53, 0x49,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x43, 0x10, 0x02, 0x1a, 0x35, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2f, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x21,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x8c, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x45, 0x41, 0x44, 0x4d,
	0x49, 0x54, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x49, 0x46, 0x46, 0x5f, 0x44, 0x49, 0x41,
	0x47, 0x4e, 0x4f, 0x53, 0x49, 0x53, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x55, 0x54, 0x43,
	0x4f, 0x4d, 0x45, 0x10, 0x03, 0x1a, 0x39, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x33, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2d, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65,
	0x22, 0xa4, 0x01, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x84, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50,
	0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49, 0x4e, 0x47,
	0x4c, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45,
	0x10, 0x03, 0x1a, 0x33, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f,
	0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a,
	0x0e, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x53, 0x49, 0x4e, 0x43, 0x45, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x03,
	0x12, 0x10, 0x0a, 0x0c, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54,
	0x10, 0x04, 0x1a, 0x31, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2d, 0x72, 0x65, 0x61, 0x64, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xdc, 0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x05, 0x53, 0x48, 0x41,
	0x4c, 0x4c, 0x10, 0x01, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x53, 0x48, 0x41, 0x4c,
	0x4c, 0x12, 0x18, 0x0a, 0x06, 0x53, 0x48, 0x4f, 0x55, 0x4c, 0x44, 0x10, 0x02, 0x1a, 0x0c, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x06, 0x53, 0x48, 0x4f, 0x55, 0x4c, 0x44, 0x12, 0x12, 0x0a, 0x03, 0x4d,
	0x41, 0x59, 0x10, 0x03, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x4d, 0x41, 0x59, 0x12,
	0x20, 0x0a, 0x0a, 0x53, 0x48, 0x4f, 0x55, 0x4c, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x10, 0x04, 0x1a,
	0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x53, 0x48, 0x4f, 0x55, 0x4c, 0x44, 0x2d, 0x4e, 0x4f,
	0x54, 0x1a, 0x31, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa8, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x8d, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x03, 0x12,
	0x0e, 0x0a, 0x0a, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x45, 0x44, 0x42, 0x59, 0x10, 0x04, 0x1a,
	0x2e, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x28, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x22,
	0x86, 0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x6a, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x4e, 0x59, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x45,
	0x52, 0x4d, 0x49, 0x54, 0x10, 0x02, 0x1a, 0x30, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2a, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xa7, 0x01,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x54, 0x5f, 0x44,
	0x4f, 0x4e, 0x45, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44,
	0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x08, 0x1a, 0x2d, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x27,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x69, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x1a, 0x2d,
	0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x2d, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x22, 0xb4, 0x01,
	0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x41, 0x58, 0x10,
	0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05,
	0x50, 0x41, 0x47, 0x45, 0x52, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x10, 0x05,
	0x12, 0x07, 0x0a, 0x03, 0x53, 0x4d, 0x53, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x07, 0x1a, 0x2e, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x28, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2d, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x22, 0x9a, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x82, 0x01, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x57,
	0x4f, 0x52, 0x4b, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x4d, 0x50, 0x10, 0x03, 0x12,
	0x07, 0x0a, 0x03, 0x4f, 0x4c, 0x44, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x42, 0x49,
	0x4c, 0x45, 0x10, 0x05, 0x1a, 0x2b, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x25, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2d, 0x75, 0x73,
	0x65, 0x22, 0xd5, 0x02, 0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0xb3, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4d, 0x45, 0x4e,
	0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x45, 0x4e, 0x44, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x50, 0x55, 0x54, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54,
	0x45, 0x44, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x45, 0x47, 0x4f, 0x54, 0x49, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x45, 0x44, 0x10,
	0x09, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x0a, 0x12, 0x0c, 0x0a,
	0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x52,
	0x45, 0x4e, 0x45, 0x57, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x56, 0x4f,
	0x4b, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45,
	0x44, 0x10, 0x0e, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45,
	0x44, 0x10, 0x0f, 0x1a, 0x34, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xbf, 0x02, 0x0a, 0x12, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0xa8, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4d, 0x45, 0x4e, 0x44, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x50, 0x55, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x44, 0x10,
	0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x45, 0x47, 0x4f, 0x54, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x08, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x45, 0x44, 0x10, 0x09, 0x12, 0x0a,
	0x0a, 0x06, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45,
	0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x4e, 0x45,
	0x57, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x44,
	0x10, 0x0d, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44, 0x10, 0x0e,
	0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0f,
	0x1a, 0x29, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x23, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x13,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x55, 0x54, 0x48,
	0x4f, 0x52, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x44, 0x49, 0x54, 0x4f, 0x52, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0c,
	0x0a, 0x08, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x53, 0x45, 0x52, 0x10, 0x04, 0x1a, 0x2a, 0x8a, 0x91,
	0xc9, 0xfe, 0x07, 0x24, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x6f, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x1d, 0x43, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x42, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x7c, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x45, 0x53, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x53, 0x10, 0x02, 0x1a,
	0x37, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x2d, 0x63, 0x72, 0x2d,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x22, 0x9c, 0x01, 0x0a, 0x0e, 0x44, 0x61, 0x79,
	0x73, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x07, 0x0a, 0x03, 0x4d, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x55, 0x45,
	0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x45, 0x44, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x54,
	0x48, 0x55, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x52, 0x49, 0x10, 0x05, 0x12, 0x07, 0x0a,
	0x03, 0x53, 0x41, 0x54, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x55, 0x4e, 0x10, 0x07, 0x1a,
	0x26, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x79, 0x73, 0x2d,
	0x6f, 0x66, 0x2d, 0x77, 0x65, 0x65, 0x6b, 0x22, 0x92, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x75, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x49, 0x47,
	0x48, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x4f, 0x44, 0x45, 0x52, 0x41, 0x54, 0x45, 0x10,
	0x02, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x57, 0x10, 0x03, 0x1a, 0x30, 0x8a, 0x91, 0xc9, 0xfe,
	0x07, 0x2a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x2d, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x22, 0x7c, 0x0a, 0x17,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x61, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4d,
	0x49, 0x54, 0x49, 0x47, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x1a, 0x2e, 0x8a, 0x91, 0xc9, 0xfe,
	0x07, 0x28, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x15, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4d, 0x50,
	0x4c, 0x41, 0x4e, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x58, 0x50, 0x4c,
	0x41, 0x4e, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x0c, 0x0a,
	0x08, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x05, 0x1a, 0x32, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2c,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc5, 0x01, 0x0a,
	0x1d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xa3,
	0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x0a, 0x0a, 0x06, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x52,
	0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x44, 0x10, 0x05, 0x1a, 0x39, 0x8a, 0x91, 0xc9, 0xfe, 0x07,
	0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x61, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2d, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x22, 0xae, 0x01, 0x0a, 0x1f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x4f, 0x54, 0x5f,
	0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x53, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x45, 0x52,
	0x49, 0x41, 0x4c, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x53, 0x10, 0x03, 0x1a, 0x36, 0x8a,
	0x91, 0xc9, 0xfe, 0x07, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2d,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0xfb, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0xde, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x45, 0x50, 0x41,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50,
	0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x4e, 0x5f, 0x48,
	0x4f, 0x4c, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f,
	0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54,
	0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x43, 0x4c, 0x49,
	0x4e, 0x45, 0x44, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x09, 0x1a, 0x2f, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x29, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x2d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xca, 0x01, 0x0a, 0x20, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x43,
	0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x04, 0x1a, 0x32, 0x8a, 0x91,
	0xc9, 0xfe, 0x07, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2d, 0x63,
	0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x22, 0xaf, 0x01, 0x0a, 0x1f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x46,
	0x46, 0x53, 0x45, 0x54, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x41, 0x49, 0x4e, 0x10, 0x03,
	0x12, 0x0d, 0x0a, 0x09, 0x54, 0x57, 0x4f, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x04, 0x1a,
	0x31, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x2d, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x8d, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x04, 0x1a, 0x29, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x23, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22,
	0xb1, 0x01, 0x0a, 0x21, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4e,
	0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x46, 0x46, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x54, 0x41, 0x4e, 0x44, 0x42, 0x59, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45,
	0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x1a, 0x33,
	0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x2d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x13, 0x0a, 0x0f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x52, 0x49,
	0x45, 0x4e, 0x44, 0x4c, 0x59, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15,
	0x50, 0x41, 0x54, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x03, 0x1a, 0x29, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x23, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xff, 0x01, 0x0a, 0x23, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x49, 0x6e, 0x55, 0x44, 0x49, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xd7, 0x01, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x4c, 0x4f, 0x54, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x4d, 0x41, 0x4e, 0x55, 0x46, 0x41, 0x43, 0x54, 0x55, 0x52, 0x45, 0x44, 0x5f,
	0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c,
	0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x58, 0x50,
	0x49, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x04, 0x12, 0x15,
	0x0a, 0x11, 0x42, 0x49, 0x4f, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52,
	0x45, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x1a, 0x37, 0x8a, 0x91, 0xc9,
	0xfe, 0x07, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x69,
	0x6e, 0x75, 0x64, 0x69, 0x22, 0xb4, 0x01, 0x0a, 0x22, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d,
	0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x49, 0x43, 0x45, 0x4e,
	0x53, 0x45, 0x10, 0x03, 0x1a, 0x45, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x3f, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x2d, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xd1, 0x01, 0x0a, 0x15,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45,
	0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x54, 0x5f, 0x44, 0x4f, 0x4e,
	0x45, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49,
	0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54,
	0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50, 0x50,
	0x45, 0x44, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10,
	0x07, 0x1a, 0x2c, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x26, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x98, 0x02, 0x0a, 0x1a, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xf9,
	0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x02,
	0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x45, 0x4c, 0x49, 0x4d, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10,
	0x03, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x0b, 0x12,
	0x09, 0x0a, 0x05, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4d,
	0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x52, 0x52, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x45, 0x4e, 0x44,
	0x45, 0x44, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45,
	0x44, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49,
	0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x0a, 0x1a, 0x32, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2c, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2d, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x15, 0x44,
	0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x02,
	0x12, 0x13, 0x0a, 0x07, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x10, 0x03, 0x1a, 0x06, 0xb8,
	0xac, 0x9c, 0x88, 0x0b, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x59, 0x50, 0x45, 0x10, 0x04, 0x12,
	0x0b, 0x0a, 0x07, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x1a, 0x2c, 0x8a, 0x91, 0xc9, 0xfe,
	0x07, 0x26, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x7b, 0x0a, 0x10, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x67, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x10, 0x02, 0x1a, 0x27, 0x8a, 0x91,
	0xc9, 0xfe, 0x07, 0x21, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x1b, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x55, 0x50, 0x45, 0x52,
	0x53, 0x45, 0x44, 0x45, 0x44, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x1a, 0x33, 0x8a,
	0x91, 0xc9, 0xfe, 0x07, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x2d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x16, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x83, 0x01,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x51, 0x55, 0x45, 0x55, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x52, 0x54, 0x49,
	0x41, 0x4c, 0x10, 0x04, 0x1a, 0x2d, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x27, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2d, 0x6f, 0x75, 0x74, 0x63,
	0x6f, 0x6d, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x1d, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x55,
	0x54, 0x48, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x54, 0x53, 0x10, 0x02, 0x12,
	0x0d, 0x0a, 0x09, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x10, 0x03, 0x12, 0x0e,
	0x0a, 0x0a, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x1a, 0x34,
	0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x70, 0x75, 0x72,
	0x70, 0x6f, 0x73, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x1e, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x75, 0x72, 0x70,
	0x6f, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x41, 0x55, 0x54, 0x48, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x53, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x54, 0x53, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x10, 0x03,
	0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04,
	0x1a, 0x35, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x65, 0x6c, 0x69, 0x67,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2d,
	0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x16, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x57, 0x68, 0x65, 0x6e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x6d, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12,
	0x07, 0x0a, 0x03, 0x41, 0x4e, 0x59, 0x10, 0x02, 0x1a, 0x37, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x31,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72,
	0x65, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x22, 0xad, 0x01, 0x0a, 0x1b, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x8d, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x4c, 0x41, 0x4e, 0x4e, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x04, 0x1a, 0x33, 0x8a, 0x91,
	0xc9, 0xfe, 0x07, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x2d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xf4, 0x01, 0x0a, 0x13, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xdc, 0x01, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x4c, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x49,
	0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07,
	0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x49, 0x53,
	0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x49, 0x53, 0x43, 0x4f,
	0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x08, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x09, 0x1a, 0x2a, 0x8a, 0x91,
	0xc9, 0xfe, 0x07, 0x24, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa9, 0x01, 0x0a, 0x12, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x92, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x46,
	0x46, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49,
	0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x1a, 0x29, 0x8a, 0x91, 0xc9, 0xfe, 0x07,
	0x23, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2d, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x15, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d,
	0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x82,
	0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x51, 0x55, 0x45, 0x55, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a,
	0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x52, 0x54,
	0x49, 0x41, 0x4c, 0x10, 0x04, 0x1a, 0x2c, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x26, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6f, 0x75, 0x74, 0x63,
	0x6f, 0x6d, 0x65, 0x22, 0xd6, 0x01, 0x0a, 0x17, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f,
	0x66, 0x43, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0xba, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x4c, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x41, 0x49, 0x54, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4f,
	0x4e, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x49, 0x4e, 0x49, 0x53,
	0x48, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c,
	0x45, 0x44, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f,
	0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x07, 0x1a, 0x30, 0x8a, 0x91, 0xc9, 0xfe,
	0x07, 0x2a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x2d, 0x6f, 0x66,
	0x2d, 0x63, 0x61, 0x72, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x88, 0x01, 0x0a,
	0x17, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x6d, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x43, 0x45,
	0x49, 0x56, 0x45, 0x52, 0x10, 0x02, 0x1a, 0x2f, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x29, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xda, 0x01, 0x0a, 0x0f, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53,
	0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x54, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x03,
	0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x04, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x07, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x08, 0x1a, 0x26, 0x8a, 0x91,
	0xc9, 0xfe, 0x07, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0xb0, 0x03, 0x0a, 0x0f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x9c, 0x03, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x04, 0x4d, 0x4f, 0x52, 0x4e, 0x10, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x4d,
	0x4f, 0x52, 0x4e, 0x12, 0x20, 0x0a, 0x0a, 0x4d, 0x4f, 0x52, 0x4e, 0x5f, 0x45, 0x41, 0x52, 0x4c,
	0x59, 0x10, 0x02, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x4d, 0x4f, 0x52, 0x4e, 0x2e,
	0x65, 0x61, 0x72, 0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x09, 0x4d, 0x4f, 0x52, 0x4e, 0x5f, 0x4c, 0x41,
	0x54, 0x45, 0x10, 0x03, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x4d, 0x4f, 0x52, 0x4e,
	0x2e, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x4e, 0x4f, 0x4f, 0x4e, 0x10, 0x04, 0x1a,
	0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x4e, 0x4f, 0x4f, 0x4e, 0x12, 0x12, 0x0a, 0x03, 0x41,
	0x46, 0x54, 0x10, 0x05, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x41, 0x46, 0x54, 0x12,
	0x1e, 0x0a, 0x09, 0x41, 0x46, 0x54, 0x5f, 0x45, 0x41, 0x52, 0x4c, 0x59, 0x10, 0x06, 0x1a, 0x0f,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x41, 0x46, 0x54, 0x2e, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x12,
	0x1c, 0x0a, 0x08, 0x41, 0x46, 0x54, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x07, 0x1a, 0x0e, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x08, 0x41, 0x46, 0x54, 0x2e, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a,
	0x03, 0x45, 0x56, 0x45, 0x10, 0x08, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x45, 0x56,
	0x45, 0x12, 0x1e, 0x0a, 0x09, 0x45, 0x56, 0x45, 0x5f, 0x45, 0x41, 0x52, 0x4c, 0x59, 0x10, 0x09,
	0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x45, 0x56, 0x45, 0x2e, 0x65, 0x61, 0x72, 0x6c,
	0x79, 0x12, 0x1c, 0x0a, 0x08, 0x45, 0x56, 0x45, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x0a, 0x1a,
	0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x45, 0x56, 0x45, 0x2e, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x05, 0x4e, 0x49, 0x47, 0x48, 0x54, 0x10, 0x0b, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x05, 0x4e, 0x49, 0x47, 0x48, 0x54, 0x12, 0x12, 0x0a, 0x03, 0x50, 0x48, 0x53, 0x10, 0x0c,
	0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x50, 0x48, 0x53, 0x12, 0x12, 0x0a, 0x03, 0x49,
	0x4d, 0x44, 0x10, 0x0d, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x49, 0x4d, 0x44, 0x1a,
	0x26, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2d, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x22, 0xb1, 0x01, 0x0a, 0x1c, 0x45, 0x76, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x4f, 0x55, 0x53, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x44, 0x49, 0x43, 0x48, 0x4f, 0x54, 0x4f, 0x4d, 0x4f, 0x55, 0x53, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x50,
	0x4f, 0x4c, 0x59, 0x43, 0x48, 0x4f, 0x54, 0x4f, 0x4d, 0x4f, 0x55, 0x53, 0x10, 0x04, 0x1a, 0x2b,
	0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x25, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x2d, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x22, 0x90, 0x01, 0x0a, 0x1c,
	0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x70, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x03, 0x1a, 0x34, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2e,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x61,
	0x72, 0x69, 0x6f, 0x2d, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb8,
	0x01, 0x0a, 0x1e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66,
	0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x95, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10,
	0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x04, 0x1a, 0x35, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x65, 0x78,
	0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x66, 0x62, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x18, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x7e, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x48,
	0x49, 0x52, 0x50, 0x41, 0x54, 0x48, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4c, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49,
	0x4f, 0x4e, 0x10, 0x03, 0x1a, 0x30, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2a, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb1, 0x04, 0x0a, 0x17, 0x46, 0x48, 0x49, 0x52, 0x43,
	0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x95, 0x04, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x50, 0x4c, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x12, 0x09, 0x0a,
	0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x43, 0x45, 0x49,
	0x56, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45,
	0x44, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10,
	0x08, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x52, 0x52, 0x49, 0x56, 0x45, 0x44, 0x10, 0x09, 0x12, 0x0a,
	0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55,
	0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45,
	0x44, 0x10, 0x0d, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10,
	0x0e, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x0f, 0x12,
	0x0d, 0x0a, 0x09, 0x41, 0x42, 0x41, 0x4e, 0x44, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x10, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x11, 0x12, 0x0f, 0x0a, 0x0b, 0x55,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x12, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x13, 0x12, 0x0c, 0x0a, 0x08, 0x52,
	0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44, 0x10, 0x14, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x46,
	0x55, 0x54, 0x45, 0x44, 0x10, 0x15, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x49, 0x46, 0x46, 0x45, 0x52,
	0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x16, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x52, 0x54,
	0x49, 0x41, 0x4c, 0x10, 0x17, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x55, 0x53, 0x59, 0x5f, 0x55, 0x4e,
	0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x18, 0x12, 0x08, 0x0a, 0x04, 0x46,
	0x52, 0x45, 0x45, 0x10, 0x19, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x52, 0x47,
	0x45, 0x54, 0x10, 0x1a, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x48, 0x45, 0x41, 0x44, 0x5f, 0x4f, 0x46,
	0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x10, 0x1b, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x45, 0x48,
	0x49, 0x4e, 0x44, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x10, 0x1c, 0x12, 0x0d, 0x0a, 0x09,
	0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x1d, 0x12, 0x13, 0x0a, 0x0f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x44, 0x55, 0x43, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x10, 0x1e,
	0x12, 0x0d, 0x0a, 0x09, 0x48, 0x57, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x10, 0x1f, 0x1a,
	0x29, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x23, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x14, 0x46,
	0x48, 0x49, 0x52, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x7b, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x02, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x1a, 0x27, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x21, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xa0, 0x11, 0x0a, 0x10, 0x46, 0x48, 0x49, 0x52, 0x4f, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x8b, 0x11, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x09, 0x42, 0x4f,
	0x44, 0x59, 0x5f, 0x53, 0x49, 0x54, 0x45, 0x10, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x08, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x43, 0x41, 0x54,
	0x41, 0x4c, 0x4f, 0x47, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x02, 0x1a, 0x12, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0c, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x22, 0x0a, 0x0b, 0x43, 0x4f, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x4e, 0x43, 0x45, 0x10,
	0x03, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x45, 0x4c, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x10, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x1a,
	0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x06, 0x1a, 0x16,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x07,
	0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x10, 0x44, 0x49,
	0x41, 0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49, 0x43, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x08,
	0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x11, 0x44, 0x4f, 0x43, 0x55, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x4e, 0x49, 0x46, 0x45, 0x53, 0x54, 0x10, 0x09, 0x1a, 0x16,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61,
	0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54,
	0x5f, 0x45, 0x56, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x54, 0x48, 0x45,
	0x53, 0x49, 0x53, 0x10, 0x0a, 0x1a, 0x1d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x17, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x73, 0x69, 0x73, 0x12, 0x31, 0x0a, 0x13, 0x45, 0x4c, 0x49, 0x47, 0x49, 0x42, 0x49, 0x4c,
	0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x0b, 0x1a, 0x18, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x12, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x14, 0x45, 0x4c, 0x49, 0x47, 0x49,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10,
	0x0c, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x11,
	0x45, 0x58, 0x50, 0x41, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c,
	0x45, 0x10, 0x0d, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x45, 0x78, 0x70, 0x61, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x10, 0x49,
	0x4d, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x41, 0x4e, 0x49, 0x46, 0x45, 0x53, 0x54, 0x10,
	0x0e, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x49, 0x4d, 0x41, 0x47,
	0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0f, 0x1a, 0x1c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x16, 0x49, 0x6d,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x05, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x10, 0x10, 0x1a,
	0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x2b, 0x0a, 0x10,
	0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x10, 0x11, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x10, 0x4d, 0x45, 0x44,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x10, 0x12, 0x1a,
	0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x11, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x49,
	0x4e, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x10, 0x13, 0x1a, 0x16, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x10, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x48, 0x0a, 0x1f, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x49, 0x4e,
	0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f,
	0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x14, 0x1a, 0x23, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x1d, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4e, 0x0a, 0x22, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f,
	0x44, 0x55, 0x43, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x44, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x15, 0x1a, 0x26, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x20, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x42, 0x0a, 0x1c, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f,
	0x44, 0x55, 0x43, 0x54, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x16, 0x1a, 0x20, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x1c, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x49, 0x4e, 0x41, 0x4c,
	0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x44, 0x49,
	0x45, 0x4e, 0x54, 0x10, 0x17, 0x1a, 0x20, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1a, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x1d, 0x4d, 0x45, 0x44, 0x49, 0x43,
	0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x18, 0x1a, 0x21, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x1b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a,
	0x1e, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55,
	0x43, 0x54, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x46, 0x41, 0x43, 0x54, 0x55, 0x52, 0x45, 0x44, 0x10,
	0x19, 0x1a, 0x22, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1c, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x49, 0x4e,
	0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41,
	0x47, 0x45, 0x44, 0x10, 0x1a, 0x1a, 0x1e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x18, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x20, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x49, 0x4e,
	0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x50, 0x48, 0x41, 0x52, 0x4d,
	0x41, 0x43, 0x45, 0x55, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x1b, 0x1a, 0x24, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x1e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x50, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x65, 0x75, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x12, 0x51, 0x0a, 0x24, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x50,
	0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x53, 0x49, 0x52, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x10, 0x1c, 0x1a, 0x27, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x21, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x05, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x1d, 0x1a,
	0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0e,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x1e,
	0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x11, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x44, 0x55,
	0x52, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x1f, 0x1a, 0x16, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x20, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2b, 0x0a, 0x10, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f,
	0x4e, 0x53, 0x45, 0x10, 0x21, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x10,
	0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x10, 0x22, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0d, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x23, 0x1a, 0x12, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x31, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x24, 0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x12, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f,
	0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x25, 0x1a, 0x1f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x19, 0x52, 0x65, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x17, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x45, 0x56,
	0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x54, 0x48, 0x45, 0x53, 0x49, 0x53,
	0x10, 0x26, 0x1a, 0x1b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x15, 0x52, 0x69, 0x73, 0x6b, 0x45, 0x76,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x12,
	0x1c, 0x0a, 0x08, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x27, 0x1a, 0x0e, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x08, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2f, 0x0a,
	0x12, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x28, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39,
	0x0a, 0x17, 0x53, 0x55, 0x42, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x29, 0x1a, 0x1c, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x16, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x28, 0x8a, 0x91, 0xc9, 0xfe, 0x07,
	0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2d, 0x6f, 0x6c, 0x64, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x22, 0x83, 0x03, 0x0a, 0x1b, 0x46, 0x48, 0x49, 0x52, 0x52, 0x65, 0x73, 0x74,
	0x66, 0x75, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0xe3, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x45, 0x41, 0x44,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x52, 0x45, 0x41, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x41, 0x54,
	0x43, 0x48, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x05,
	0x12, 0x0b, 0x0a, 0x07, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x06, 0x12, 0x14, 0x0a,
	0x10, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59,
	0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10,
	0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x10, 0x0d, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x12, 0x12, 0x10, 0x0a,
	0x0c, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x49, 0x45, 0x53, 0x10, 0x0e, 0x12,
	0x0f, 0x0a, 0x0b, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0f,
	0x12, 0x09, 0x0a, 0x05, 0x42, 0x41, 0x54, 0x43, 0x48, 0x10, 0x10, 0x12, 0x0d, 0x0a, 0x09, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x11, 0x1a, 0x2d, 0x8a, 0x91, 0xc9, 0xfe,
	0x07, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x2d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x99, 0x01, 0x0a, 0x17, 0x46, 0x48,
	0x49, 0x52, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x7e, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49,
	0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x1a, 0x2a, 0x8a, 0x91, 0xc9, 0xfe, 0x07,
	0x24, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc0, 0x48, 0x0a, 0x0d, 0x46, 0x48, 0x49, 0x52, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xae, 0x48, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x04,
	0x42, 0x41, 0x53, 0x45, 0x10, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x42, 0x61,
	0x73, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x1a,
	0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b,
	0x0a, 0x10, 0x42, 0x41, 0x43, 0x4b, 0x42, 0x4f, 0x4e, 0x45, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x03, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x42, 0x61, 0x63, 0x6b,
	0x62, 0x6f, 0x6e, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x04, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x41, 0x44,
	0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x05, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0a, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0a, 0x41, 0x54, 0x54, 0x41,
	0x43, 0x48, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x07, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0c, 0x41, 0x56,
	0x41, 0x49, 0x4c, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x08, 0x1a, 0x12, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x25, 0x0a, 0x0d, 0x42, 0x41, 0x43, 0x4b, 0x42, 0x4f, 0x4e, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x10, 0x09, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x42, 0x61, 0x63, 0x6b, 0x62,
	0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x44, 0x4f, 0x53, 0x41, 0x47,
	0x45, 0x10, 0x0a, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x44, 0x6f, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2f, 0x0a, 0x12, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0b, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x11, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x10, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x0c, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2e, 0x0a, 0x12, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x53, 0x48, 0x45, 0x4c, 0x46,
	0x5f, 0x4c, 0x49, 0x46, 0x45, 0x10, 0x0d, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x68, 0x65, 0x6c, 0x66, 0x4c, 0x69, 0x66, 0x65, 0x12,
	0x18, 0x0a, 0x06, 0x54, 0x49, 0x4d, 0x49, 0x4e, 0x47, 0x10, 0x0e, 0x1a, 0x0c, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x06, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x10, 0x43, 0x4f, 0x44,
	0x45, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x43, 0x45, 0x50, 0x54, 0x10, 0x0f, 0x1a,
	0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x2f, 0x0a, 0x12, 0x43, 0x4f, 0x44, 0x45, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x10, 0x1a, 0x17,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x43, 0x4f, 0x44, 0x49, 0x4e,
	0x47, 0x10, 0x11, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x43, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x27, 0x0a, 0x0e, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x5f, 0x44, 0x45, 0x54,
	0x41, 0x49, 0x4c, 0x10, 0x12, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x0d, 0x43, 0x4f,
	0x4e, 0x54, 0x41, 0x43, 0x54, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x13, 0x1a, 0x12, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x22, 0x0a, 0x0b, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x4f, 0x52,
	0x10, 0x14, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x10, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x49, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x15, 0x1a, 0x15, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0a, 0x45, 0x58, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x10, 0x16, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x17, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44,
	0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x10,
	0x17, 0x1a, 0x1b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x15, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1e,
	0x0a, 0x09, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x18, 0x1a, 0x0f, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x09, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x0a, 0x48, 0x55, 0x4d, 0x41, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x19, 0x1a, 0x0f,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0a, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x10, 0x1a, 0x1a,
	0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x04, 0x4d, 0x45, 0x54, 0x41, 0x10, 0x1b, 0x1a, 0x0a, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x12, 0x4d, 0x4f, 0x4e, 0x45, 0x54,
	0x41, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x10, 0x1c, 0x1a,
	0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x05, 0x4d, 0x4f, 0x4e, 0x45,
	0x59, 0x10, 0x1d, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x12, 0x1e, 0x0a, 0x09, 0x4e, 0x41, 0x52, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x1e, 0x1a,
	0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x33, 0x0a, 0x14, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x44, 0x45,
	0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1f, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x13, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x06, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x10,
	0x20, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12,
	0x27, 0x0a, 0x0e, 0x50, 0x52, 0x49, 0x4d, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x10, 0x21, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x50, 0x72, 0x69, 0x6d, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x42, 0x41, 0x53, 0x45,
	0x36, 0x34, 0x5f, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x22, 0x1a, 0x12, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12,
	0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x23, 0x12, 0x08, 0x0a, 0x04,
	0x44, 0x41, 0x54, 0x45, 0x10, 0x24, 0x12, 0x1d, 0x0a, 0x09, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x10, 0x25, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c,
	0x10, 0x26, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x10, 0x27, 0x12,
	0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52, 0x10, 0x28, 0x12, 0x23, 0x0a, 0x0c,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x29, 0x1a, 0x11,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e,
	0x74, 0x12, 0x23, 0x0a, 0x0c, 0x55, 0x4e, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x49, 0x4e,
	0x54, 0x10, 0x2a, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x75, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45,
	0x52, 0x36, 0x34, 0x10, 0x2b, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10,
	0x2c, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x2d, 0x12, 0x06, 0x0a, 0x02, 0x49,
	0x44, 0x10, 0x2e, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x41, 0x52, 0x4b, 0x44, 0x4f, 0x57, 0x4e, 0x10,
	0x2f, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x30, 0x12, 0x07, 0x0a, 0x03, 0x55,
	0x52, 0x49, 0x10, 0x31, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x4f, 0x4e, 0x49, 0x43, 0x41,
	0x4c, 0x10, 0x32, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x49, 0x44, 0x10, 0x33, 0x12, 0x07, 0x0a, 0x03,
	0x55, 0x52, 0x4c, 0x10, 0x34, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x10, 0x35, 0x12,
	0x1c, 0x0a, 0x08, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x36, 0x1a, 0x0e, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a,
	0x03, 0x41, 0x47, 0x45, 0x10, 0x37, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x41, 0x67,
	0x65, 0x12, 0x16, 0x0a, 0x05, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x38, 0x1a, 0x0b, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x08, 0x44, 0x49, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x39, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x44,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x44, 0x55, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x3a, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x05, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x3b,
	0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a,
	0x05, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x10, 0x3c, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x21, 0x0a, 0x0b, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x5f, 0x52,
	0x41, 0x4e, 0x47, 0x45, 0x10, 0x3d, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x52, 0x45, 0x46, 0x45,
	0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x3e, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x10, 0x52, 0x45, 0x4c, 0x41,
	0x54, 0x45, 0x44, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x10, 0x3f, 0x1a, 0x15,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x44,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x40, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x09, 0x53, 0x49,
	0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x41, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2f, 0x0a, 0x12, 0x54, 0x52,
	0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x42, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0d, 0x55,
	0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x10, 0x43, 0x1a, 0x12,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x10, 0x44, 0x1a, 0x1a,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x14, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x09, 0x0a, 0x05, 0x58, 0x48,
	0x54, 0x4d, 0x4c, 0x10, 0x45, 0x12, 0x1c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x10, 0x46, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x47, 0x1a,
	0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x18, 0x0a,
	0x06, 0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x10, 0x48, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x06, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x44, 0x4f, 0x4d, 0x41, 0x49,
	0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x49, 0x1a, 0x14, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x4a, 0x1a,
	0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31,
	0x0a, 0x13, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x4b, 0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2b, 0x0a, 0x10, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x4c, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a,
	0x0a, 0x20, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x49, 0x53, 0x54, 0x52, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x4d, 0x1a, 0x24, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1e, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0d, 0x41, 0x44,
	0x56, 0x45, 0x52, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x4e, 0x1a, 0x12, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x41, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x31, 0x0a, 0x13, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x47, 0x59, 0x5f, 0x49, 0x4e, 0x54,
	0x4f, 0x4c, 0x45, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x4f, 0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x12, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x41, 0x50, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x4d,
	0x45, 0x4e, 0x54, 0x10, 0x50, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x41, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x14, 0x41, 0x50, 0x50, 0x4f,
	0x49, 0x4e, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45,
	0x10, 0x51, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x13, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x53, 0x53,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0x52, 0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0b, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10,
	0x53, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x05, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x54, 0x1a, 0x0b,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x42, 0x61, 0x73, 0x69, 0x63, 0x12, 0x42, 0x0a, 0x1c, 0x42,
	0x49, 0x4f, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x44, 0x45, 0x52, 0x49,
	0x56, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x10, 0x55, 0x1a, 0x20, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x1a, 0x42, 0x69, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x6c,
	0x79, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12,
	0x53, 0x0a, 0x25, 0x42, 0x49, 0x4f, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x4c, 0x59, 0x5f,
	0x44, 0x45, 0x52, 0x49, 0x56, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x45, 0x4e, 0x53, 0x45, 0x10, 0x56, 0x1a, 0x28, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x22, 0x42, 0x69, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x44, 0x65,
	0x72, 0x69, 0x76, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x69, 0x73, 0x70,
	0x65, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x42, 0x4f, 0x44, 0x59, 0x5f, 0x53, 0x54, 0x52,
	0x55, 0x43, 0x54, 0x55, 0x52, 0x45, 0x10, 0x57, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d,
	0x42, 0x6f, 0x64, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2f, 0x0a,
	0x12, 0x43, 0x41, 0x4e, 0x4f, 0x4e, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x10, 0x58, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x43, 0x61, 0x6e,
	0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x33,
	0x0a, 0x14, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x59, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x41, 0x52, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x4e,
	0x10, 0x5a, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x10,
	0x5b, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x43, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61,
	0x6d, 0x12, 0x21, 0x0a, 0x0b, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x10, 0x5c, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x36, 0x0a, 0x16, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x5d,
	0x1a, 0x1a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x14, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x08,
	0x43, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x5e, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x08, 0x43, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x05, 0x43, 0x4c,
	0x41, 0x49, 0x4d, 0x10, 0x5f, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x12, 0x27, 0x0a, 0x0e, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x5f, 0x52, 0x45, 0x53, 0x50,
	0x4f, 0x4e, 0x53, 0x45, 0x10, 0x60, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x13, 0x43,
	0x4c, 0x49, 0x4e, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x49, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x10, 0x61, 0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x43, 0x6c, 0x69, 0x6e,
	0x69, 0x63, 0x61, 0x6c, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38,
	0x0a, 0x17, 0x43, 0x4c, 0x49, 0x4e, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x62, 0x1a, 0x1b, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x15, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0b, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x63, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0a, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x26, 0x0a, 0x0d, 0x43,
	0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x64, 0x1a, 0x13,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x65, 0x1a, 0x1a,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x16, 0x43, 0x4f,
	0x4d, 0x50, 0x41, 0x52, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x66, 0x1a, 0x1b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x15, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0b, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x67, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0b, 0x43, 0x4f, 0x4e, 0x43, 0x45,
	0x50, 0x54, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x68, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x1e, 0x0a, 0x09, 0x43, 0x4f,
	0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x69, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x14, 0x43, 0x4f,
	0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x6a, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x07, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x6b, 0x1a, 0x0d, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x07, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x08, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10, 0x6c, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x08, 0x43, 0x4f, 0x56,
	0x45, 0x52, 0x41, 0x47, 0x45, 0x10, 0x6d, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x43,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x43, 0x4f, 0x56, 0x45, 0x52,
	0x41, 0x47, 0x45, 0x5f, 0x45, 0x4c, 0x49, 0x47, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x6e, 0x1a, 0x20, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x1a, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x1d, 0x43,
	0x4f, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x4c, 0x49, 0x47, 0x49, 0x42, 0x49, 0x4c,
	0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x6f, 0x1a, 0x21,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1b, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6c,
	0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x27, 0x0a, 0x0e, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x53,
	0x53, 0x55, 0x45, 0x10, 0x70, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x10, 0x71, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x12, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41,
	0x53, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x72, 0x1a, 0x17, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x11, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x11, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x73, 0x1a, 0x16, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x0f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x45, 0x4e, 0x53, 0x45, 0x10, 0x74, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x12,
	0x25, 0x0a, 0x0d, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43,
	0x10, 0x75, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x27, 0x0a, 0x0e, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x76, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x23, 0x0a, 0x0c, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x10,
	0x77, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x11, 0x44, 0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53, 0x54,
	0x49, 0x43, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x78, 0x1a, 0x16, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x10, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x2f, 0x0a, 0x12, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x79, 0x1a, 0x17, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x45, 0x4e, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45,
	0x52, 0x10, 0x7a, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x11, 0x45, 0x4e, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45,
	0x52, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x7b, 0x1a, 0x16, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x10, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x08, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10,
	0x7c, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x2f, 0x0a, 0x12, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x7d, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x11, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x13, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x7e, 0x1a, 0x18, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x12, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x50, 0x49, 0x53, 0x4f, 0x44, 0x45,
	0x5f, 0x4f, 0x46, 0x5f, 0x43, 0x41, 0x52, 0x45, 0x10, 0x7f, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0d, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0x12,
	0x2c, 0x0a, 0x10, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x80, 0x01, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x08, 0x45, 0x56, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x81, 0x01, 0x1a, 0x0e, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x08, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x0f,
	0x45, 0x56, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10,
	0x82, 0x01, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x11, 0x45, 0x56, 0x49, 0x44,
	0x45, 0x4e, 0x43, 0x45, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x83, 0x01,
	0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x10, 0x45, 0x58, 0x41, 0x4d,
	0x50, 0x4c, 0x45, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x41, 0x52, 0x49, 0x4f, 0x10, 0x84, 0x01, 0x1a,
	0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x37, 0x0a, 0x16, 0x45, 0x58, 0x50, 0x4c, 0x41, 0x4e,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x46, 0x5f, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x54,
	0x10, 0x85, 0x01, 0x1a, 0x1a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x14, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x12,
	0x35, 0x0a, 0x15, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52,
	0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x86, 0x01, 0x1a, 0x19, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x13, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x15, 0x0a, 0x04, 0x46, 0x4c, 0x41, 0x47, 0x10, 0x87,
	0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x28, 0x0a,
	0x0e, 0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x41, 0x52, 0x59, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10,
	0x88, 0x01, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x26, 0x0a, 0x0d, 0x47, 0x45, 0x4e, 0x4f, 0x4d,
	0x49, 0x43, 0x5f, 0x53, 0x54, 0x55, 0x44, 0x59, 0x10, 0x89, 0x01, 0x1a, 0x12, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0c, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12,
	0x15, 0x0a, 0x04, 0x47, 0x4f, 0x41, 0x4c, 0x10, 0x8a, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x04, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x10, 0x47, 0x52, 0x41, 0x50, 0x48, 0x5f,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x8b, 0x01, 0x1a, 0x15, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x47, 0x72, 0x61, 0x70, 0x68, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x05, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x8c, 0x01,
	0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2e, 0x0a,
	0x11, 0x47, 0x55, 0x49, 0x44, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x53, 0x45, 0x10, 0x8d, 0x01, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x47, 0x75, 0x69,
	0x64, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a,
	0x12, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x43, 0x41, 0x52, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x10, 0x8e, 0x01, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x63, 0x61, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x2e, 0x0a, 0x11, 0x49, 0x4d, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x8f, 0x01, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x49,
	0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x26, 0x0a, 0x0d, 0x49, 0x4d, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x55, 0x44, 0x59,
	0x10, 0x90, 0x01, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x25, 0x0a, 0x0c, 0x49, 0x4d, 0x4d, 0x55, 0x4e,
	0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x91, 0x01, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0c, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a,
	0x0a, 0x17, 0x49, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45,
	0x56, 0x41, 0x4c, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x92, 0x01, 0x1a, 0x1c, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x16, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x1b, 0x49, 0x4d,
	0x4d, 0x55, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d,
	0x4d, 0x45, 0x4e, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x93, 0x01, 0x1a, 0x20, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x1a, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34,
	0x0a, 0x14, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x10, 0x94, 0x01, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x13, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x75, 0x69, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0a, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x44, 0x49, 0x45,
	0x4e, 0x54, 0x10, 0x95, 0x01, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0e, 0x49, 0x4e, 0x53, 0x55, 0x52,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x10, 0x96, 0x01, 0x1a, 0x13, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0d, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0x12, 0x28, 0x0a, 0x0e, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x10, 0x97, 0x01, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2c, 0x0a, 0x10, 0x49,
	0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10,
	0x98, 0x01, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x07, 0x49, 0x4e, 0x56,
	0x4f, 0x49, 0x43, 0x45, 0x10, 0x99, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x52,
	0x59, 0x10, 0x9a, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x07, 0x4c, 0x49, 0x4e, 0x4b, 0x41, 0x47, 0x45, 0x10, 0x9b,
	0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65,
	0x12, 0x15, 0x0a, 0x04, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x9c, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x08, 0x4c, 0x4f, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x9d, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x1c, 0x4d, 0x41, 0x4e, 0x55, 0x46, 0x41,
	0x43, 0x54, 0x55, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x45, 0x46, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x9e, 0x01, 0x1a, 0x20, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x1a, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x49, 0x74, 0x65,
	0x6d, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x07, 0x4d,
	0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x10, 0x9f, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x07, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x0e, 0x4d, 0x45, 0x41, 0x53,
	0x55, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0xa0, 0x01, 0x1a, 0x13, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x21, 0x0a, 0x0a, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0xa1, 0x01, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x19, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0xa2, 0x01, 0x1a, 0x1e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x18, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x13, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x45, 0x4e, 0x53, 0x45, 0x10, 0xa3, 0x01, 0x1a,
	0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x14, 0x4d, 0x45, 0x44,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4c, 0x45, 0x44, 0x47,
	0x45, 0x10, 0xa4, 0x01, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12,
	0x30, 0x0a, 0x12, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xa5, 0x01, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x34, 0x0a, 0x14, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0xa6, 0x01, 0x1a, 0x19, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x13, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x1c, 0x4d, 0x45, 0x44, 0x49, 0x43,
	0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xa7, 0x01, 0x1a, 0x20, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x1a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x12,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0xa8, 0x01, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x0e, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52,
	0x10, 0xa9, 0x01, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x11, 0x4d, 0x45, 0x54, 0x41,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0xaa, 0x01,
	0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x12, 0x4d, 0x4f, 0x4c, 0x45,
	0x43, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x45, 0x10, 0xab,
	0x01, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x4d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c,
	0x61, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0d, 0x4e, 0x41,
	0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0xac, 0x01, 0x1a, 0x12,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x4e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x12, 0x2c, 0x0a, 0x10, 0x4e, 0x55, 0x54, 0x52, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x4e, 0x54, 0x41, 0x4b, 0x45, 0x10, 0xad, 0x01, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0f, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x61, 0x6b, 0x65,
	0x12, 0x2a, 0x0a, 0x0f, 0x4e, 0x55, 0x54, 0x52, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x10, 0xae, 0x01, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x4e, 0x75,
	0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x11,
	0x4e, 0x55, 0x54, 0x52, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43,
	0x54, 0x10, 0xaf, 0x01, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x4e, 0x75, 0x74, 0x72,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0b,
	0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xb0, 0x01, 0x1a, 0x11,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x38, 0x0a, 0x16, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xb1, 0x01, 0x1a, 0x1b,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x15, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x14, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0xb2, 0x01, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2e, 0x0a, 0x11, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f,
	0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x10, 0xb3, 0x01, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x12, 0x25, 0x0a, 0x0c, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0xb4, 0x01, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x18, 0x4f, 0x52, 0x47, 0x41,
	0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x46, 0x46, 0x49, 0x4c, 0x49, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0xb5, 0x01, 0x1a, 0x1d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x17, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x66, 0x66, 0x69, 0x6c,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x1b, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47,
	0x45, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xb6, 0x01, 0x1a, 0x1f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x19,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x07, 0x50, 0x41, 0x54,
	0x49, 0x45, 0x4e, 0x54, 0x10, 0xb7, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x50,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0e, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x10, 0xb8, 0x01, 0x1a, 0x13, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x12, 0x38, 0x0a, 0x16, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f,
	0x4e, 0x43, 0x49, 0x4c, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xb9, 0x01, 0x1a, 0x1b, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x15, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0a, 0x50, 0x45,
	0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0xba, 0x01, 0x1a, 0x10, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0a, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x06, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x10, 0xbb, 0x01, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x06, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x0f, 0x50, 0x4c, 0x41, 0x4e,
	0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xbc, 0x01, 0x1a, 0x14,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0c, 0x50, 0x52, 0x41, 0x43, 0x54, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x45, 0x52, 0x10, 0xbd, 0x01, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x50,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x11, 0x50,
	0x52, 0x41, 0x43, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x4c, 0x45,
	0x10, 0xbe, 0x01, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x09, 0x50,
	0x52, 0x4f, 0x43, 0x45, 0x44, 0x55, 0x52, 0x45, 0x10, 0xbf, 0x01, 0x1a, 0x0f, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0a,
	0x50, 0x52, 0x4f, 0x56, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0xc0, 0x01, 0x1a, 0x10, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x27, 0x0a, 0x0d, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x4e, 0x41, 0x49, 0x52, 0x45,
	0x10, 0xc1, 0x01, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x16, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x49, 0x4f, 0x4e, 0x4e, 0x41, 0x49, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x53, 0x45, 0x10, 0xc2, 0x01, 0x1a, 0x1b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x15, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3a, 0x0a, 0x17, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xc3, 0x01,
	0x1a, 0x1c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x16, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x0e, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e,
	0x10, 0xc4, 0x01, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x15, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x5f, 0x4f, 0x52, 0x43, 0x48, 0x45, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0xc5, 0x01, 0x1a, 0x1a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x14, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x25, 0x0a, 0x0c, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x53,
	0x10, 0xc6, 0x01, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0e, 0x52, 0x45, 0x53, 0x45, 0x41,
	0x52, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x55, 0x44, 0x59, 0x10, 0xc7, 0x01, 0x1a, 0x13, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x75, 0x64,
	0x79, 0x12, 0x2c, 0x0a, 0x10, 0x52, 0x45, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x53, 0x55,
	0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0xc8, 0x01, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f,
	0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x2a, 0x0a, 0x0f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x53, 0x53, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0xc9, 0x01, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x52, 0x69, 0x73,
	0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x08, 0x53,
	0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x10, 0xca, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x10, 0x53, 0x45,
	0x41, 0x52, 0x43, 0x48, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0xcb,
	0x01, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x0f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xcc, 0x01, 0x1a, 0x14,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x04, 0x53, 0x4c, 0x4f, 0x54, 0x10, 0xcd, 0x01, 0x1a,
	0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x08, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x4d, 0x45, 0x4e, 0x10, 0xce, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x32, 0x0a, 0x13, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x4d, 0x45, 0x4e, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0xcf, 0x01, 0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x6d, 0x65, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34,
	0x0a, 0x14, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xd0, 0x01, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x13, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0d, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0xd1, 0x01, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x25, 0x0a, 0x0c,
	0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xd2, 0x01, 0x1a,
	0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x13, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0xd3, 0x01, 0x1a, 0x18, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x12, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x12, 0x53, 0x55, 0x42, 0x53, 0x43,
	0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x50, 0x49, 0x43, 0x10, 0xd4, 0x01,
	0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1f, 0x0a, 0x09, 0x53, 0x55, 0x42,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0xd5, 0x01, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x09, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x14, 0x53, 0x55,
	0x42, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0xd6, 0x01, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x53, 0x75, 0x62,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x37, 0x0a, 0x16, 0x53, 0x55, 0x42, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x55,
	0x43, 0x4c, 0x45, 0x49, 0x43, 0x5f, 0x41, 0x43, 0x49, 0x44, 0x10, 0xd7, 0x01, 0x1a, 0x1a, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x14, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x75,
	0x63, 0x6c, 0x65, 0x69, 0x63, 0x41, 0x63, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x11, 0x53, 0x55, 0x42,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x59, 0x4d, 0x45, 0x52, 0x10, 0xd8,
	0x01, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x11, 0x53, 0x55, 0x42,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x49, 0x4e, 0x10, 0xd9,
	0x01, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x12, 0x49, 0x0a, 0x1f, 0x53, 0x55, 0x42,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xda, 0x01, 0x1a,
	0x23, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1d, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x19, 0x53, 0x55, 0x42, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41,
	0x4c, 0x10, 0xdb, 0x01, 0x1a, 0x1d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x17, 0x53, 0x75, 0x62, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x0f, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x44, 0x45,
	0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x10, 0xdc, 0x01, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12,
	0x28, 0x0a, 0x0e, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x10, 0xdd, 0x01, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x04, 0x54, 0x41, 0x53,
	0x4b, 0x10, 0xde, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x3c, 0x0a, 0x18, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x5f,
	0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x49, 0x45, 0x53, 0x10, 0xdf, 0x01, 0x1a,
	0x1d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x17, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1e,
	0x0a, 0x09, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x10, 0xe0, 0x01, 0x1a, 0x0e,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x22,
	0x0a, 0x0b, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0xe1, 0x01,
	0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x22, 0x0a, 0x0b, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x43, 0x52, 0x49, 0x50,
	0x54, 0x10, 0xe2, 0x01, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x54, 0x65, 0x73, 0x74,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1f, 0x0a, 0x09, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50,
	0x4f, 0x52, 0x54, 0x10, 0xe3, 0x01, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x09, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x53, 0x45, 0x54, 0x10, 0xe4, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x13, 0x56, 0x45, 0x52, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0xe5,
	0x01, 0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x32, 0x0a, 0x13, 0x56,
	0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0xe6, 0x01, 0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x56, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x0a, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x53, 0x10, 0xe7, 0x01,
	0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x1a, 0x24, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0xf0, 0x0c, 0x0a, 0x0f, 0x46, 0x48, 0x49,
	0x52, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xdc, 0x0c, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x5f, 0x30, 0x5f, 0x30, 0x31, 0x10, 0x01, 0x1a, 0x0a, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x04, 0x30, 0x2e, 0x30, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x5f, 0x30,
	0x5f, 0x30, 0x35, 0x10, 0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x30, 0x2e, 0x30,
	0x35, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x5f, 0x30, 0x5f, 0x30, 0x36, 0x10, 0x03, 0x1a, 0x0a, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x04, 0x30, 0x2e, 0x30, 0x36, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x5f, 0x30,
	0x5f, 0x31, 0x31, 0x10, 0x04, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x30, 0x2e, 0x31,
	0x31, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x5f, 0x30, 0x5f, 0x30, 0x10, 0x17, 0x1a, 0x09, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x03, 0x30, 0x2e, 0x30, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x5f, 0x30, 0x5f, 0x30,
	0x5f, 0x38, 0x30, 0x10, 0x05, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x30, 0x2e, 0x30,
	0x2e, 0x38, 0x30, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x5f, 0x30, 0x5f, 0x30, 0x5f, 0x38, 0x31, 0x10,
	0x06, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x30, 0x2e, 0x30, 0x2e, 0x38, 0x31, 0x12,
	0x1a, 0x0a, 0x08, 0x56, 0x5f, 0x30, 0x5f, 0x30, 0x5f, 0x38, 0x32, 0x10, 0x07, 0x1a, 0x0c, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x06, 0x30, 0x2e, 0x30, 0x2e, 0x38, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x56,
	0x5f, 0x30, 0x5f, 0x34, 0x10, 0x18, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x30, 0x2e,
	0x34, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x5f, 0x30, 0x5f, 0x34, 0x5f, 0x30, 0x10, 0x08, 0x1a, 0x0b,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x30, 0x2e, 0x34, 0x2e, 0x30, 0x12, 0x14, 0x0a, 0x05, 0x56,
	0x5f, 0x30, 0x5f, 0x35, 0x10, 0x19, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x30, 0x2e,
	0x35, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x5f, 0x30, 0x5f, 0x35, 0x5f, 0x30, 0x10, 0x09, 0x1a, 0x0b,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x30, 0x2e, 0x35, 0x2e, 0x30, 0x12, 0x14, 0x0a, 0x05, 0x56,
	0x5f, 0x31, 0x5f, 0x30, 0x10, 0x1a, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x31, 0x2e,
	0x30, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x5f, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x10, 0x0a, 0x1a, 0x0b,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0x12, 0x18, 0x0a, 0x07, 0x56,
	0x5f, 0x31, 0x5f, 0x30, 0x5f, 0x31, 0x10, 0x0b, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05,
	0x31, 0x2e, 0x30, 0x2e, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x5f, 0x31, 0x5f, 0x30, 0x5f, 0x32,
	0x10, 0x0c, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x31, 0x2e, 0x30, 0x2e, 0x32, 0x12,
	0x14, 0x0a, 0x05, 0x56, 0x5f, 0x31, 0x5f, 0x31, 0x10, 0x1b, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x03, 0x31, 0x2e, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x5f, 0x31, 0x5f, 0x31, 0x5f, 0x30,
	0x10, 0x0d, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x31, 0x2e, 0x31, 0x2e, 0x30, 0x12,
	0x14, 0x0a, 0x05, 0x56, 0x5f, 0x31, 0x5f, 0x34, 0x10, 0x1c, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x03, 0x31, 0x2e, 0x34, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x5f, 0x31, 0x5f, 0x34, 0x5f, 0x30,
	0x10, 0x0e, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x31, 0x2e, 0x34, 0x2e, 0x30, 0x12,
	0x14, 0x0a, 0x05, 0x56, 0x5f, 0x31, 0x5f, 0x36, 0x10, 0x1d, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x03, 0x31, 0x2e, 0x36, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x5f, 0x31, 0x5f, 0x36, 0x5f, 0x30,
	0x10, 0x0f, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x31, 0x2e, 0x36, 0x2e, 0x30, 0x12,
	0x14, 0x0a, 0x05, 0x56, 0x5f, 0x31, 0x5f, 0x38, 0x10, 0x1e, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x03, 0x31, 0x2e, 0x38, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x5f, 0x31, 0x5f, 0x38, 0x5f, 0x30,
	0x10, 0x10, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x31, 0x2e, 0x38, 0x2e, 0x30, 0x12,
	0x14, 0x0a, 0x05, 0x56, 0x5f, 0x33, 0x5f, 0x30, 0x10, 0x1f, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x03, 0x33, 0x2e, 0x30, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x5f, 0x33, 0x5f, 0x30, 0x5f, 0x30,
	0x10, 0x11, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x33, 0x2e, 0x30, 0x2e, 0x30, 0x12,
	0x18, 0x0a, 0x07, 0x56, 0x5f, 0x33, 0x5f, 0x30, 0x5f, 0x31, 0x10, 0x12, 0x1a, 0x0b, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x05, 0x33, 0x2e, 0x30, 0x2e, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x5f, 0x33,
	0x5f, 0x30, 0x5f, 0x32, 0x10, 0x20, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x33, 0x2e,
	0x30, 0x2e, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x5f, 0x33, 0x5f, 0x33, 0x10, 0x21, 0x1a, 0x09,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x33, 0x2e, 0x33, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x5f, 0x33,
	0x5f, 0x33, 0x5f, 0x30, 0x10, 0x13, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x33, 0x2e,
	0x33, 0x2e, 0x30, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x5f, 0x33, 0x5f, 0x35, 0x10, 0x22, 0x1a, 0x09,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x33, 0x2e, 0x35, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x5f, 0x33,
	0x5f, 0x35, 0x5f, 0x30, 0x10, 0x14, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x33, 0x2e,
	0x35, 0x2e, 0x30, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x5f, 0x34, 0x5f, 0x30, 0x10, 0x23, 0x1a, 0x09,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x34, 0x2e, 0x30, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x5f, 0x34,
	0x5f, 0x30, 0x5f, 0x30, 0x10, 0x15, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x34, 0x2e,
	0x30, 0x2e, 0x30, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x5f, 0x34, 0x5f, 0x30, 0x5f, 0x31, 0x10, 0x16,
	0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x34, 0x2e, 0x30, 0x2e, 0x31, 0x12, 0x14, 0x0a,
	0x05, 0x56, 0x5f, 0x34, 0x5f, 0x31, 0x10, 0x24, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03,
	0x34, 0x2e, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x5f, 0x34, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x25,
	0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x34, 0x2e, 0x31, 0x2e, 0x30, 0x12, 0x14, 0x0a,
	0x05, 0x56, 0x5f, 0x34, 0x5f, 0x32, 0x10, 0x26, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03,
	0x34, 0x2e, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x5f, 0x34, 0x5f, 0x32, 0x5f, 0x30, 0x10, 0x27,
	0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x34, 0x2e, 0x32, 0x2e, 0x30, 0x12, 0x14, 0x0a,
	0x05, 0x56, 0x5f, 0x34, 0x5f, 0x33, 0x10, 0x28, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03,
	0x34, 0x2e, 0x33, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x5f, 0x34, 0x5f, 0x33, 0x5f, 0x30, 0x10, 0x29,
	0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x34, 0x2e, 0x33, 0x2e, 0x30, 0x12, 0x28, 0x0a,
	0x0f, 0x56, 0x5f, 0x34, 0x5f, 0x33, 0x5f, 0x30, 0x5f, 0x43, 0x49, 0x42, 0x55, 0x49, 0x4c, 0x44,
	0x10, 0x2a, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x34, 0x2e, 0x33, 0x2e, 0x30, 0x2d,
	0x63, 0x69, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x56, 0x5f, 0x34, 0x5f, 0x33,
	0x5f, 0x30, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x31, 0x10, 0x2b, 0x1a, 0x15,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x34, 0x2e, 0x33, 0x2e, 0x30, 0x2d, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x5f, 0x34, 0x5f, 0x34, 0x10, 0x2c,
	0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x34, 0x2e, 0x34, 0x12, 0x18, 0x0a, 0x07, 0x56,
	0x5f, 0x34, 0x5f, 0x34, 0x5f, 0x30, 0x10, 0x2d, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05,
	0x34, 0x2e, 0x34, 0x2e, 0x30, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x5f, 0x34, 0x5f, 0x35, 0x10, 0x2e,
	0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x34, 0x2e, 0x35, 0x12, 0x18, 0x0a, 0x07, 0x56,
	0x5f, 0x34, 0x5f, 0x35, 0x5f, 0x30, 0x10, 0x2f, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05,
	0x34, 0x2e, 0x35, 0x2e, 0x30, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x5f, 0x34, 0x5f, 0x36, 0x10, 0x30,
	0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x34, 0x2e, 0x36, 0x12, 0x18, 0x0a, 0x07, 0x56,
	0x5f, 0x34, 0x5f, 0x36, 0x5f, 0x30, 0x10, 0x31, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05,
	0x34, 0x2e, 0x36, 0x2e, 0x30, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x5f, 0x35, 0x5f, 0x30, 0x10, 0x32,
	0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x35, 0x2e, 0x30, 0x12, 0x18, 0x0a, 0x07, 0x56,
	0x5f, 0x35, 0x5f, 0x30, 0x5f, 0x30, 0x10, 0x33, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05,
	0x35, 0x2e, 0x30, 0x2e, 0x30, 0x12, 0x28, 0x0a, 0x0f, 0x56, 0x5f, 0x35, 0x5f, 0x30, 0x5f, 0x30,
	0x5f, 0x43, 0x49, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x10, 0x34, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0d, 0x35, 0x2e, 0x30, 0x2e, 0x30, 0x2d, 0x63, 0x69, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x12,
	0x2c, 0x0a, 0x11, 0x56, 0x5f, 0x35, 0x5f, 0x30, 0x5f, 0x30, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53,
	0x48, 0x4f, 0x54, 0x31, 0x10, 0x35, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x35, 0x2e,
	0x30, 0x2e, 0x30, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x31, 0x12, 0x2c, 0x0a,
	0x11, 0x56, 0x5f, 0x35, 0x5f, 0x30, 0x5f, 0x30, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f,
	0x54, 0x32, 0x10, 0x36, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x35, 0x2e, 0x30, 0x2e,
	0x30, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x32, 0x12, 0x26, 0x0a, 0x0e, 0x56,
	0x5f, 0x35, 0x5f, 0x30, 0x5f, 0x30, 0x5f, 0x42, 0x41, 0x4c, 0x4c, 0x4f, 0x54, 0x10, 0x37, 0x1a,
	0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x35, 0x2e, 0x30, 0x2e, 0x30, 0x2d, 0x62, 0x61, 0x6c,
	0x6c, 0x6f, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x56, 0x5f, 0x35, 0x5f, 0x30, 0x5f, 0x30, 0x5f, 0x53,
	0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x33, 0x10, 0x38, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0f, 0x35, 0x2e, 0x30, 0x2e, 0x30, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x33, 0x12, 0x30, 0x0a, 0x13, 0x56, 0x5f, 0x35, 0x5f, 0x30, 0x5f, 0x30, 0x5f, 0x44, 0x52, 0x41,
	0x46, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x10, 0x39, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x11, 0x35, 0x2e, 0x30, 0x2e, 0x30, 0x2d, 0x64, 0x72, 0x61, 0x66, 0x74, 0x2d, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x1a, 0x26, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x46,
	0x48, 0x49, 0x52, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xae, 0x01, 0x0a, 0x17,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45,
	0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x12,
	0x0a, 0x0e, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x04, 0x1a, 0x28, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x83, 0x02, 0x0a,
	0x12, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0xec, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x06, 0x45, 0x51, 0x55, 0x41,
	0x4c, 0x53, 0x10, 0x01, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x3d, 0x12, 0x08, 0x0a,
	0x04, 0x49, 0x53, 0x5f, 0x41, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x45, 0x53, 0x43, 0x45,
	0x4e, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x46, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x53,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x47, 0x45,
	0x58, 0x10, 0x05, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x4e,
	0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x45, 0x4e, 0x45, 0x52,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x53, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x48, 0x49, 0x4c,
	0x44, 0x5f, 0x4f, 0x46, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x45, 0x53, 0x43, 0x45, 0x4e,
	0x44, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x45, 0x41, 0x46, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x45,
	0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x09, 0x1a, 0x29, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x23, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x22, 0xa3, 0x01, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x03, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x04, 0x1a, 0x23, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x1d, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x66,
	0x6d, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x0e, 0x46, 0x6c, 0x61,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x79, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49,
	0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x1a,
	0x25, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x1f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x66, 0x6c, 0x61, 0x67, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa9, 0x01, 0x0a, 0x17, 0x46, 0x6f, 0x72, 0x6d, 0x75,
	0x6c, 0x61, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49,
	0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x1a, 0x39, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x33, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x66, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x69, 0x74, 0x65, 0x6d, 0x2d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xbd, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x53, 0x74,
	0x75, 0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xa2, 0x01,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x05, 0x1a, 0x2d, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67,
	0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x74, 0x75, 0x64, 0x79, 0x2d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xe9, 0x01, 0x0a, 0x17, 0x47, 0x6f, 0x61, 0x6c, 0x4c, 0x69, 0x66, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xcd,
	0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x4c, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x4e, 0x5f, 0x48,
	0x4f, 0x4c, 0x44, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45,
	0x44, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49,
	0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x09, 0x1a, 0x25, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x1f, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x67, 0x6f, 0x61, 0x6c, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa9,
	0x01, 0x0a, 0x18, 0x47, 0x72, 0x61, 0x70, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0d, 0x0a,
	0x09, 0x44, 0x49, 0x46, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06,
	0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x04, 0x1a, 0x30, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2a,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x17, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x6c, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x48,
	0x45, 0x52, 0x45, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45,
	0x53, 0x10, 0x04, 0x1a, 0x2f, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x29, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x2d, 0x75, 0x73, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x18, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x42, 0x61, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x76, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4e, 0x55, 0x4d, 0x45,
	0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x30, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2a, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x2d, 0x62, 0x61, 0x73, 0x69, 0x73, 0x22, 0xf6, 0x01, 0x0a, 0x0d, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xe4, 0x01, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x41, 0x4e, 0x49, 0x4d, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x41, 0x43,
	0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x52, 0x45, 0x54, 0x45,
	0x41, 0x4d, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x43, 0x41,
	0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x4c,
	0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x52, 0x47,
	0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x52,
	0x45, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x10, 0x0b, 0x12, 0x0c,
	0x0a, 0x08, 0x53, 0x50, 0x45, 0x43, 0x49, 0x4d, 0x45, 0x4e, 0x10, 0x0c, 0x1a, 0x24, 0x8a, 0x91,
	0xc9, 0xfe, 0x07, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xdd, 0x01, 0x0a, 0x1a, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0xbe, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e,
	0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x46,
	0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45,
	0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x1a, 0x32,
	0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x2d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x17, 0x47, 0x75, 0x69, 0x64, 0x65, 0x50, 0x61, 0x67, 0x65,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x83,
	0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x54, 0x4d, 0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x4d, 0x41, 0x52, 0x4b, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x58,
	0x4d, 0x4c, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45,
	0x44, 0x10, 0x04, 0x1a, 0x2f, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x29, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67,
	0x75, 0x69, 0x64, 0x65, 0x2d, 0x70, 0x61, 0x67, 0x65, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xde, 0x01, 0x0a, 0x0c, 0x48, 0x54, 0x54, 0x50, 0x56, 0x65, 0x72,
	0x62, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x03, 0x47, 0x45,
	0x54, 0x10, 0x01, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x47, 0x45, 0x54, 0x12, 0x14,
	0x0a, 0x04, 0x48, 0x45, 0x41, 0x44, 0x10, 0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04,
	0x48, 0x45, 0x41, 0x44, 0x12, 0x14, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x03, 0x1a, 0x0a,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x12, 0x12, 0x0a, 0x03, 0x50, 0x55,
	0x54, 0x10, 0x04, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x50, 0x55, 0x54, 0x12, 0x18,
	0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x05, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x12, 0x16, 0x0a, 0x05, 0x50, 0x41, 0x54, 0x43,
	0x48, 0x10, 0x06, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x50, 0x41, 0x54, 0x43, 0x48,
	0x1a, 0x23, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x1d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x68, 0x74, 0x74, 0x70,
	0x2d, 0x76, 0x65, 0x72, 0x62, 0x22, 0x9d, 0x01, 0x0a, 0x11, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x55, 0x53, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4f,
	0x46, 0x46, 0x49, 0x43, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x4d,
	0x50, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41, 0x52, 0x59,
	0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x4c, 0x44, 0x10, 0x05, 0x1a, 0x28, 0x8a, 0x91, 0xc9,
	0xfe, 0x07, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2d, 0x75, 0x73, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x1a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x41, 0x73, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x31, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x32, 0x10,
	0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x33, 0x10, 0x03, 0x12, 0x0a, 0x0a,
	0x06, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x34, 0x10, 0x04, 0x1a, 0x31, 0x8a, 0x91, 0xc9, 0xfe, 0x07,
	0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2d, 0x61, 0x73,
	0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xc6, 0x01, 0x0a,
	0x21, 0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x32, 0x44, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x4f, 0x49, 0x4e, 0x54,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4f, 0x4c, 0x59, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x02,
	0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x49, 0x52, 0x43, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x0b,
	0x0a, 0x07, 0x45, 0x4c, 0x4c, 0x49, 0x50, 0x53, 0x45, 0x10, 0x05, 0x1a, 0x38, 0x8a, 0x91, 0xc9,
	0xfe, 0x07, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x32, 0x64, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69,
	0x63, 0x74, 0x79, 0x70, 0x65, 0x22, 0xd4, 0x01, 0x0a, 0x21, 0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x33, 0x44, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4d,
	0x55, 0x4c, 0x54, 0x49, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x50,
	0x4f, 0x4c, 0x59, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x4f, 0x4c,
	0x59, 0x47, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4c, 0x4c, 0x49, 0x50, 0x53,
	0x45, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x4c, 0x4c, 0x49, 0x50, 0x53, 0x4f, 0x49, 0x44,
	0x10, 0x06, 0x1a, 0x38, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x69, 0x6d,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x33,
	0x64, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa6, 0x01, 0x0a,
	0x1a, 0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x03, 0x1a, 0x31, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x69, 0x6d,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xbd, 0x01, 0x0a, 0x16, 0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x75, 0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0xa2, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45,
	0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49,
	0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x05, 0x1a, 0x2d, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x27, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x73, 0x74, 0x75, 0x64, 0x79, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x1e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72,
	0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4f,
	0x53, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x55,
	0x41, 0x4c, 0x10, 0x03, 0x1a, 0x36, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x30, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x69, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x75, 0x66,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x2d, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x8f, 0x01, 0x0a,
	0x16, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x75, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53,
	0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x49, 0x46,
	0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x1a, 0x33, 0x8a, 0x91, 0xc9, 0xfe, 0x07,
	0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x74, 0x79, 0x70, 0x65, 0x22, 0xab,
	0x01, 0x0a, 0x17, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49,
	0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x04, 0x1a, 0x2e, 0x8a, 0x91,
	0xc9, 0xfe, 0x07, 0x28, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x69, 0x74, 0x65, 0x6d, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xae, 0x01, 0x0a,
	0x19, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44,
	0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x1a, 0x30, 0x8a, 0x91, 0xc9,
	0xfe, 0x07, 0x2a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xac, 0x01,
	0x0a, 0x11, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46,
	0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x53, 0x53, 0x55, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10,
	0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x05, 0x1a, 0x28, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa3, 0x01, 0x0a,
	0x11, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x41, 0x54, 0x41, 0x4c,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x05, 0x1a, 0x28, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x22,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2d, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x22, 0xd0, 0x04, 0x0a, 0x0d, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0xbe, 0x04, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54,
	0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x04, 0x12, 0x0d,
	0x0a, 0x09, 0x49, 0x4e, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x0c, 0x0a,
	0x08, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x4c,
	0x4f, 0x47, 0x49, 0x4e, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x09,
	0x12, 0x0d, 0x0a, 0x09, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0x0a, 0x12,
	0x0e, 0x0a, 0x0a, 0x53, 0x55, 0x50, 0x50, 0x52, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x0b, 0x12,
	0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x0c, 0x12,
	0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x10, 0x0d, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10,
	0x0e, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x45, 0x53, 0x10, 0x0f, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x10, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x10, 0x11, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10,
	0x12, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x13, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e,
	0x10, 0x14, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x4f, 0x4f, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x4c, 0x59,
	0x10, 0x15, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x52,
	0x55, 0x4c, 0x45, 0x10, 0x16, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43,
	0x54, 0x10, 0x17, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x5f, 0x46,
	0x49, 0x4c, 0x54, 0x45, 0x52, 0x10, 0x20, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x49, 0x45, 0x4e, 0x54, 0x10, 0x18, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x19, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x5f, 0x53, 0x54, 0x4f,
	0x52, 0x45, 0x10, 0x1a, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x1b, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x1c,
	0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x1d,
	0x12, 0x0d, 0x0a, 0x09, 0x54, 0x48, 0x52, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x44, 0x10, 0x1e, 0x12,
	0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c,
	0x10, 0x1f, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x21, 0x1a,
	0x24, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x7f, 0x0a, 0x08, 0x4b, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x73, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x53, 0x55, 0x52, 0x41, 0x4e,
	0x43, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x50, 0x41, 0x59,
	0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x03, 0x1a, 0x27, 0x8a,
	0x91, 0xc9, 0xfe, 0x07, 0x21, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x2d, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xd0, 0x01, 0x0a, 0x20, 0x4b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x41, 0x52, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x53, 0x45, 0x4d, 0x49, 0x5f, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x55, 0x52,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x55, 0x52,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x04, 0x1a, 0x43, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x3d, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x2d, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xea, 0x12, 0x0a, 0x15, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0xd0, 0x12, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x42, 0x4f, 0x55,
	0x54, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x43, 0x4c, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09,
	0x41, 0x4c, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x41,
	0x4d, 0x50, 0x48, 0x54, 0x4d, 0x4c, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x45,
	0x4e, 0x44, 0x49, 0x58, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x50, 0x50, 0x4c, 0x45, 0x5f,
	0x54, 0x4f, 0x55, 0x43, 0x48, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19,
	0x41, 0x50, 0x50, 0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x55, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x55, 0x50, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x41,
	0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x53, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x55, 0x54,
	0x48, 0x4f, 0x52, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44,
	0x5f, 0x42, 0x59, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x4f, 0x4f, 0x4b, 0x4d, 0x41, 0x52,
	0x4b, 0x10, 0x0b, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x4f, 0x4e, 0x49, 0x43, 0x41, 0x4c,
	0x10, 0x0c, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x48, 0x41, 0x50, 0x54, 0x45, 0x52, 0x10, 0x0d, 0x12,
	0x0b, 0x0a, 0x07, 0x43, 0x49, 0x54, 0x45, 0x5f, 0x41, 0x53, 0x10, 0x0e, 0x12, 0x0e, 0x0a, 0x0a,
	0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0f, 0x12, 0x0c, 0x0a, 0x08,
	0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x10, 0x12, 0x27, 0x0a, 0x0e, 0x43, 0x4f,
	0x4e, 0x56, 0x45, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x10, 0x11, 0x1a, 0x13,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x46,
	0x72, 0x6f, 0x6d, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x50, 0x59, 0x52, 0x49, 0x47, 0x48, 0x54,
	0x10, 0x12, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x4f, 0x52,
	0x4d, 0x10, 0x13, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x14,
	0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x44, 0x42, 0x59, 0x10,
	0x15, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x53, 0x10, 0x16,
	0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x49, 0x53, 0x43, 0x4c, 0x4f, 0x53, 0x55, 0x52, 0x45, 0x10, 0x17,
	0x12, 0x10, 0x0a, 0x0c, 0x44, 0x4e, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48,
	0x10, 0x18, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10,
	0x19, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x44, 0x49, 0x54, 0x10, 0x1a, 0x12, 0x0d, 0x0a, 0x09, 0x45,
	0x44, 0x49, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x1b, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x44,
	0x49, 0x54, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x10, 0x1c, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x4e,
	0x43, 0x4c, 0x4f, 0x53, 0x55, 0x52, 0x45, 0x10, 0x1d, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x58, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x1e, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x49, 0x52, 0x53, 0x54,
	0x10, 0x1f, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x4c, 0x4f, 0x53, 0x53, 0x41, 0x52, 0x59, 0x10, 0x20,
	0x12, 0x08, 0x0a, 0x04, 0x48, 0x45, 0x4c, 0x50, 0x10, 0x21, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x4f,
	0x53, 0x54, 0x53, 0x10, 0x22, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x55, 0x42, 0x10, 0x23, 0x12, 0x08,
	0x0a, 0x04, 0x49, 0x43, 0x4f, 0x4e, 0x10, 0x24, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x44, 0x45,
	0x58, 0x10, 0x25, 0x12, 0x27, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f,
	0x41, 0x46, 0x54, 0x45, 0x52, 0x10, 0x26, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x0f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x42, 0x45, 0x46, 0x4f, 0x52, 0x45, 0x10,
	0x27, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x11, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x56, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x10, 0x28, 0x1a, 0x16,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x11, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56,
	0x41, 0x4c, 0x5f, 0x44, 0x49, 0x53, 0x4a, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x29, 0x1a, 0x16, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x44, 0x69, 0x73,
	0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x0f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41,
	0x4c, 0x5f, 0x44, 0x55, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x2a, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x29, 0x0a, 0x0f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x45, 0x51, 0x55,
	0x41, 0x4c, 0x53, 0x10, 0x2b, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44,
	0x5f, 0x42, 0x59, 0x10, 0x2c, 0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x2d, 0x0a, 0x11, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x4e, 0x49,
	0x53, 0x48, 0x45, 0x53, 0x10, 0x2d, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x73, 0x12, 0x21,
	0x0a, 0x0b, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x10, 0x2e, 0x1a,
	0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x49,
	0x6e, 0x12, 0x27, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x45,
	0x45, 0x54, 0x53, 0x10, 0x2f, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x65, 0x65, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x45, 0x54, 0x5f, 0x42, 0x59, 0x10, 0x30, 0x1a,
	0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d,
	0x65, 0x74, 0x42, 0x79, 0x12, 0x36, 0x0a, 0x16, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c,
	0x5f, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x41, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x10, 0x31,
	0x1a, 0x1a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x70, 0x65, 0x64, 0x42, 0x79, 0x12, 0x2d, 0x0a, 0x11,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x41, 0x50,
	0x53, 0x10, 0x32, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x5f,
	0x42, 0x59, 0x10, 0x33, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x29, 0x0a,
	0x0f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x53,
	0x10, 0x34, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x54, 0x45, 0x4d,
	0x10, 0x35, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x36, 0x12, 0x12, 0x0a, 0x0e,
	0x4c, 0x41, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x37,
	0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x10, 0x38, 0x12, 0x0b, 0x0a,
	0x07, 0x4c, 0x49, 0x4e, 0x4b, 0x53, 0x45, 0x54, 0x10, 0x39, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x52,
	0x44, 0x44, 0x10, 0x3a, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x41, 0x4e, 0x49, 0x46, 0x45, 0x53, 0x54,
	0x10, 0x3b, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x41, 0x53, 0x4b, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x10,
	0x3c, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x10,
	0x3d, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x4f, 0x10, 0x3e, 0x12, 0x0c,
	0x0a, 0x08, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x50, 0x55, 0x42, 0x10, 0x3f, 0x12, 0x11, 0x0a, 0x0d,
	0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x50, 0x52, 0x45, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x40, 0x12,
	0x0b, 0x0a, 0x07, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x10, 0x41, 0x12, 0x11, 0x0a, 0x0d,
	0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x42, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x45, 0x58, 0x54, 0x10, 0x43, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x45, 0x58,
	0x54, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x10, 0x44, 0x12, 0x0c, 0x0a, 0x08, 0x4e,
	0x4f, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x45, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x4f,
	0x50, 0x45, 0x4e, 0x45, 0x52, 0x10, 0x46, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x52, 0x45, 0x46,
	0x45, 0x52, 0x52, 0x45, 0x52, 0x10, 0x47, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x45, 0x4e, 0x45,
	0x52, 0x10, 0x48, 0x12, 0x2c, 0x0a, 0x10, 0x4f, 0x50, 0x45, 0x4e, 0x49, 0x44, 0x32, 0x5f, 0x4c,
	0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x49, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x10, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x32, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69,
	0x64, 0x12, 0x2c, 0x0a, 0x10, 0x4f, 0x50, 0x45, 0x4e, 0x49, 0x44, 0x32, 0x5f, 0x50, 0x52, 0x4f,
	0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x4a, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x64, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x0c, 0x0a, 0x08, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x4c, 0x10, 0x4b, 0x12, 0x17, 0x0a,
	0x06, 0x50, 0x33, 0x5f, 0x50, 0x56, 0x31, 0x10, 0x4c, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x05, 0x50, 0x33, 0x50, 0x76, 0x31, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x4d, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x49, 0x4e, 0x47, 0x42, 0x41, 0x43, 0x4b, 0x10,
	0x4e, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10,
	0x4f, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x45, 0x44, 0x45, 0x43, 0x45, 0x53, 0x53, 0x4f, 0x52,
	0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x50, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52,
	0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x10, 0x51, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x45, 0x4c,
	0x4f, 0x41, 0x44, 0x10, 0x52, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x45, 0x52, 0x45, 0x4e, 0x44,
	0x45, 0x52, 0x10, 0x53, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x52, 0x45, 0x56, 0x10, 0x54, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0x55, 0x12, 0x0c, 0x0a, 0x08, 0x50,
	0x52, 0x45, 0x56, 0x49, 0x4f, 0x55, 0x53, 0x10, 0x56, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x45,
	0x56, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x10, 0x57, 0x12, 0x12, 0x0a, 0x0e, 0x50,
	0x52, 0x49, 0x56, 0x41, 0x43, 0x59, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x58, 0x12,
	0x0b, 0x0a, 0x07, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x59, 0x12, 0x0f, 0x0a, 0x0b,
	0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x5a, 0x12, 0x0b, 0x0a,
	0x07, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x5b, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45,
	0x53, 0x54, 0x43, 0x4f, 0x4e, 0x46, 0x10, 0x5c, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x50, 0x4c,
	0x49, 0x45, 0x53, 0x10, 0x5d, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x55, 0x4c, 0x45, 0x49, 0x4e, 0x50,
	0x55, 0x54, 0x10, 0x5e, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0x5f,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x60, 0x12, 0x08, 0x0a,
	0x04, 0x53, 0x45, 0x4c, 0x46, 0x10, 0x61, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x10, 0x62, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x44, 0x45, 0x53, 0x43, 0x10, 0x63, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x44, 0x4f, 0x43, 0x10, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x10, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x50, 0x4f,
	0x4e, 0x53, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x66, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x10, 0x67, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x68, 0x12,
	0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x53, 0x48, 0x45, 0x45, 0x54, 0x10, 0x69, 0x12,
	0x0e, 0x0a, 0x0a, 0x53, 0x55, 0x42, 0x53, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x6a, 0x12,
	0x15, 0x0a, 0x11, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x4f, 0x52, 0x5f, 0x56, 0x45, 0x52,
	0x53, 0x49, 0x4f, 0x4e, 0x10, 0x6b, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x6c, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x41, 0x47, 0x10, 0x6d, 0x12, 0x14, 0x0a, 0x10, 0x54,
	0x45, 0x52, 0x4d, 0x53, 0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10,
	0x6e, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x49, 0x4d, 0x45, 0x47, 0x41, 0x54, 0x45, 0x10, 0x6f, 0x12,
	0x0b, 0x0a, 0x07, 0x54, 0x49, 0x4d, 0x45, 0x4d, 0x41, 0x50, 0x10, 0x70, 0x12, 0x08, 0x0a, 0x04,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x71, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x47, 0x43, 0x10, 0x72, 0x12,
	0x06, 0x0a, 0x02, 0x55, 0x50, 0x10, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x45, 0x52, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x74, 0x12, 0x07, 0x0a, 0x03,
	0x56, 0x49, 0x41, 0x10, 0x75, 0x12, 0x0e, 0x0a, 0x0a, 0x57, 0x45, 0x42, 0x4d, 0x45, 0x4e, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x76, 0x12, 0x10, 0x0a, 0x0c, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x47,
	0x5f, 0x43, 0x4f, 0x50, 0x59, 0x10, 0x77, 0x12, 0x13, 0x0a, 0x0f, 0x57, 0x4f, 0x52, 0x4b, 0x49,
	0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x50, 0x59, 0x5f, 0x4f, 0x46, 0x10, 0x78, 0x1a, 0x38, 0x8a, 0x91,
	0xc9, 0xfe, 0x07, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x69, 0x61, 0x6e, 0x61, 0x2d, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x6e, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x7e, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x52,
	0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x53, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45,
	0x46, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x45, 0x41, 0x4c, 0x53, 0x4f,
	0x10, 0x04, 0x1a, 0x23, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x1d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6c, 0x69,
	0x6e, 0x6b, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x6e, 0x6b,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x75, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x41,
	0x4c, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x49,
	0x53, 0x54, 0x4f, 0x52, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x03, 0x1a, 0x26, 0x8a, 0x91, 0xc9, 0xfe,
	0x07, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x7f, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x6f, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x10,
	0x02, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x53, 0x10, 0x03, 0x1a, 0x23,
	0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x1d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x6d,
	0x6f, 0x64, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x79, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x54, 0x49, 0x52,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f,
	0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x1a, 0x25, 0x8a, 0x91, 0xc9, 0xfe,
	0x07, 0x1f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x77, 0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x63, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x49, 0x4e, 0x44, 0x10,
	0x02, 0x1a, 0x27, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x21, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x12, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x76, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x1a, 0x29,
	0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x23, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x17, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x79, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x1a,
	0x2f, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x29, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xad, 0x01, 0x0a, 0x15, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x44, 0x49, 0x56, 0x49, 0x44, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10,
	0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x03, 0x12, 0x11,
	0x0a, 0x0d, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10,
	0x05, 0x1a, 0x2d, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x22, 0xf2, 0x01, 0x0a, 0x22, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xcb, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x4e, 0x4f, 0x54, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4f,
	0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x07, 0x1a, 0x3c, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x36, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8e, 0x02, 0x0a, 0x1c, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xed, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x50,
	0x52, 0x45, 0x50, 0x41, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07,
	0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45,
	0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x44,
	0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x09, 0x1a, 0x3e, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x38, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x1d, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12,
	0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x1a, 0x3f, 0x8a,
	0x91, 0xc9, 0xfe, 0x07, 0x39, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xfc,
	0x01, 0x0a, 0x1b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xdc,
	0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4c, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e,
	0x41, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45,
	0x46, 0x4c, 0x45, 0x58, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c,
	0x46, 0x49, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x06, 0x12, 0x12,
	0x0a, 0x0e, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x1a, 0x3d,
	0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xfe, 0x01,
	0x0a, 0x1b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xde, 0x01,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x4e, 0x44, 0x45, 0x44, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45,
	0x44, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54,
	0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x08, 0x1a,
	0x3d, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb6,
	0x01, 0x0a, 0x1e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x73, 0x22, 0x93, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44,
	0x45, 0x44, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f,
	0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52,
	0x41, 0x46, 0x54, 0x10, 0x0a, 0x1a, 0x40, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x3a, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x14, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x8a, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x03, 0x1a, 0x36, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x30, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb0, 0x01,
	0x0a, 0x1f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x8c, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x51,
	0x55, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x55, 0x52, 0x52, 0x45,
	0x4e, 0x43, 0x59, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x1a, 0x37, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x31, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2d, 0x73, 0x69, 0x67, 0x6e, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x22, 0xb6, 0x01, 0x0a, 0x20, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x4c,
	0x57, 0x41, 0x59, 0x53, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x45, 0x56, 0x45, 0x52, 0x10, 0x03, 0x12,
	0x0e, 0x0a, 0x0a, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x04, 0x1a,
	0x38, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xab, 0x01, 0x0a, 0x0b, 0x4e, 0x61,
	0x6d, 0x65, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x55, 0x53, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x46, 0x46,
	0x49, 0x43, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x4d, 0x50, 0x10,
	0x03, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x49, 0x43, 0x4b, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x04, 0x12,
	0x0d, 0x0a, 0x09, 0x41, 0x4e, 0x4f, 0x4e, 0x59, 0x4d, 0x4f, 0x55, 0x53, 0x10, 0x05, 0x12, 0x07,
	0x0a, 0x03, 0x4f, 0x4c, 0x44, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x49, 0x44, 0x45,
	0x4e, 0x10, 0x07, 0x1a, 0x22, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x1c, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6e,
	0x61, 0x6d, 0x65, 0x2d, 0x75, 0x73, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x1e, 0x4e, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x4f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44,
	0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x52, 0x49, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x49,
	0x52, 0x49, 0x5f, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x56, 0x32, 0x43,
	0x53, 0x4d, 0x4e, 0x45, 0x4d, 0x4f, 0x4e, 0x49, 0x43, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x04, 0x1a, 0x36, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x30, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x6e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x91,
	0x01, 0x0a, 0x14, 0x4e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x79, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43,
	0x4f, 0x44, 0x45, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x49,
	0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x52,
	0x4f, 0x4f, 0x54, 0x10, 0x03, 0x1a, 0x2b, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x25, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x6e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x13, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x02, 0x12, 0x0e,
	0x0a, 0x0a, 0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x09,
	0x0a, 0x05, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x04, 0x1a, 0x2a, 0x8a, 0x91, 0xc9, 0xfe, 0x07,
	0x24, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x6e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x7e, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x6e, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x49, 0x53,
	0x50, 0x4c, 0x41, 0x59, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x4f, 0x50, 0x45, 0x52, 0x10, 0x03,
	0x1a, 0x23, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x1d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6e, 0x6f, 0x74, 0x65,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x1a, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49,
	0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x1a, 0x31, 0x8a, 0x91, 0xc9, 0xfe, 0x07,
	0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x6e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf6, 0x02, 0x0a,
	0x17, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xda, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a,
	0x08, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x10, 0x43,
	0x4f, 0x44, 0x45, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x43, 0x45, 0x50, 0x54, 0x10,
	0x02, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49,
	0x4e, 0x47, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10,
	0x04, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52, 0x10, 0x05, 0x12, 0x16,
	0x0a, 0x05, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x06, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x10,
	0x07, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x23,
	0x0a, 0x0c, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x08,
	0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x09, 0x12, 0x1d, 0x0a,
	0x09, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x0a, 0x1a, 0x0e, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x06,
	0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x0b, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x1a, 0x2d, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x27, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x2d, 0x64, 0x61, 0x74, 0x61,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x1c, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x52,
	0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52,
	0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x42, 0x53, 0x4f,
	0x4c, 0x55, 0x54, 0x45, 0x10, 0x03, 0x1a, 0x34, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2e, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0xe4, 0x01, 0x0a,
	0x15, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xca, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x50,
	0x52, 0x45, 0x4c, 0x49, 0x4d, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x46, 0x49, 0x4e, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4d, 0x45, 0x4e, 0x44,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44,
	0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x08, 0x1a, 0x2c, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x26, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x7b, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x66, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x10, 0x02, 0x1a, 0x28, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x22, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6b, 0x69, 0x6e, 0x64,
	0x22, 0x9a, 0x01, 0x0a, 0x1b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x7b, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x03, 0x1a, 0x33, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2d,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x83, 0x01,
	0x0a, 0x19, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x66, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x06, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x55, 0x54, 0x10, 0x02,
	0x1a, 0x31, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d,
	0x75, 0x73, 0x65, 0x22, 0x7f, 0x0a, 0x13, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x68, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x53, 0x45, 0x4e, 0x53, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x4e, 0x54,
	0x49, 0x53, 0x45, 0x4e, 0x53, 0x45, 0x10, 0x02, 0x1a, 0x2a, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x24,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x17, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x8e, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03,
	0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x45, 0x45, 0x44, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x04, 0x1a, 0x2d, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x95, 0x01, 0x0a, 0x12, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x7f, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x51, 0x55, 0x45, 0x55, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x03, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x04, 0x1a, 0x29,
	0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x23, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2d, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x22, 0x8b, 0x02, 0x0a, 0x1b, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x62,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xeb, 0x01, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x44, 0x45, 0x4e, 0x59, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x45, 0x53,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x54, 0x5f, 0x4f, 0x56, 0x45,
	0x52, 0x52, 0x49, 0x44, 0x45, 0x53, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x45, 0x44, 0x5f, 0x44, 0x45, 0x4e, 0x59, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44,
	0x45, 0x53, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x45, 0x44, 0x5f,
	0x50, 0x45, 0x52, 0x4d, 0x49, 0x54, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x45, 0x53,
	0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x45, 0x4e, 0x59, 0x5f, 0x55, 0x4e, 0x4c, 0x45, 0x53,
	0x53, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x54, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x45,
	0x52, 0x4d, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x45, 0x4e, 0x59,
	0x10, 0x06, 0x1a, 0x33, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x63, 0x6f,
	0x6d, 0x62, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0xa3, 0x01, 0x0a, 0x14, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x8a, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54,
	0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04,
	0x1a, 0x2b, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x25, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xbf, 0x01,
	0x0a, 0x16, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x42, 0x41, 0x53, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x52, 0x43, 0x48,
	0x41, 0x52, 0x47, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x45, 0x44, 0x55, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x41, 0x58, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d,
	0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x06, 0x1a,
	0x2e, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x28, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x83, 0x01, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x6e, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44,
	0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x1a, 0x28, 0x8a, 0x91, 0xc9,
	0xfe, 0x07, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf5, 0x01, 0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0xd6, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x08, 0x58, 0x4d, 0x4c,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x10, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x78,
	0x6d, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x12, 0x1b, 0x0a, 0x08, 0x58, 0x4d, 0x4c, 0x5f, 0x54, 0x45,
	0x58, 0x54, 0x10, 0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x78, 0x6d, 0x6c, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x10, 0x03, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x74, 0x79, 0x70, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x12, 0x1b, 0x0a, 0x08, 0x43, 0x44, 0x41, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x04,
	0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x63, 0x64, 0x61, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x09, 0x0a, 0x05, 0x58, 0x48, 0x54, 0x4d, 0x4c, 0x10, 0x05, 0x1a, 0x31, 0x8a, 0x91, 0xc9, 0xfe,
	0x07, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2d, 0x72,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xde, 0x01,
	0x0a, 0x10, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0xc9, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x4f, 0x44, 0x45, 0x10,
	0x01, 0x12, 0x18, 0x0a, 0x06, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x1a, 0x0c, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x06, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x54, 0x45, 0x47,
	0x45, 0x52, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10,
	0x05, 0x12, 0x1d, 0x0a, 0x09, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x06,
	0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x10, 0x07, 0x1a, 0x2f, 0x8a,
	0x91, 0xc9, 0xfe, 0x07, 0x29, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x2d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb9,
	0x01, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x0d,
	0x0a, 0x09, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x54, 0x49, 0x41, 0x54, 0x45, 0x53, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x52,
	0x45, 0x4d, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x05, 0x1a, 0x30, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2a,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2d, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x15, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41,
	0x46, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x54, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x04, 0x1a, 0x2c, 0x8a, 0x91, 0xc9, 0xfe,
	0x07, 0x26, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf4, 0x01, 0x0a, 0x16, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0xd9, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x09, 0x4c, 0x45, 0x53, 0x53,
	0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x01, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x3c,
	0x12, 0x23, 0x0a, 0x15, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4f, 0x52,
	0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x5f, 0x54, 0x4f, 0x10, 0x02, 0x1a, 0x08, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x02, 0x3c, 0x3d, 0x12, 0x26, 0x0a, 0x18, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52,
	0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x5f, 0x54,
	0x4f, 0x10, 0x03, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x3e, 0x3d, 0x12, 0x19, 0x0a,
	0x0c, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x04, 0x1a,
	0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x3e, 0x12, 0x06, 0x0a, 0x02, 0x41, 0x44, 0x10, 0x05,
	0x1a, 0x2d, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22,
	0x80, 0x02, 0x0a, 0x21, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72,
	0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xda, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x0c, 0x4f, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x01, 0x1a, 0x11, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12,
	0x28, 0x0a, 0x0f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4f, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x02, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x4f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x4f, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x03,
	0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f,
	0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x39, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x33, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65,
	0x2d, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2d, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x22, 0x9f, 0x01, 0x0a, 0x24, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e,
	0x61, 0x69, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x77, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x48, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x50,
	0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x38, 0x8a, 0x91, 0xc9, 0xfe,
	0x07, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61,
	0x69, 0x72, 0x65, 0x2d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x2d, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x22, 0xba, 0x02, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x98, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x45,
	0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x06, 0x45, 0x51, 0x55, 0x41, 0x4c,
	0x53, 0x10, 0x02, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x3d, 0x12, 0x1a, 0x0a, 0x0c,
	0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x5f, 0x54, 0x4f, 0x10, 0x03, 0x1a, 0x08,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x21, 0x3d, 0x12, 0x19, 0x0a, 0x0c, 0x47, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x04, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x01, 0x3e, 0x12, 0x16, 0x0a, 0x09, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e,
	0x10, 0x05, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x3c, 0x12, 0x26, 0x0a, 0x18, 0x47,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45,
	0x51, 0x55, 0x41, 0x4c, 0x5f, 0x54, 0x4f, 0x10, 0x06, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x02, 0x3e, 0x3d, 0x12, 0x23, 0x0a, 0x15, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e,
	0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x5f, 0x54, 0x4f, 0x10, 0x07, 0x1a, 0x08,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x3c, 0x3d, 0x1a, 0x37, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x31,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72,
	0x65, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x22, 0xbd, 0x02, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61,
	0x69, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x9f, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f,
	0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x43, 0x49, 0x4d,
	0x41, 0x4c, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52, 0x10,
	0x06, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x45, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x09, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x08, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x0a,
	0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10, 0x0b, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x52,
	0x4c, 0x10, 0x0c, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x12, 0x12,
	0x0e, 0x0a, 0x0a, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x0f, 0x12,
	0x0d, 0x0a, 0x09, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x10, 0x12, 0x0c,
	0x0a, 0x08, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x11, 0x1a, 0x23, 0x8a, 0x91,
	0xc9, 0xfe, 0x07, 0x1d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x22, 0xce, 0x01, 0x0a, 0x1f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61,
	0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e,
	0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4d,
	0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x05, 0x1a, 0x36, 0x8a, 0x91, 0xc9, 0xfe,
	0x07, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61,
	0x69, 0x72, 0x65, 0x2d, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x2d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x49, 0x54, 0x45, 0x52,
	0x41, 0x4c, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x10,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x53, 0x10, 0x03, 0x12,
	0x0c, 0x0a, 0x08, 0x45, 0x4e, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x44, 0x10, 0x04, 0x12, 0x09, 0x0a,
	0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x1a, 0x33, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2d,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x9e, 0x01,
	0x0a, 0x19, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x45, 0x49, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x49, 0x4e, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x10, 0x03, 0x1a, 0x31, 0x8a, 0x91, 0xc9,
	0xfe, 0x07, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xba,
	0x05, 0x0a, 0x17, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x9e, 0x05, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4a, 0x55, 0x53, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x45, 0x44, 0x45, 0x43, 0x45, 0x53, 0x53,
	0x4f, 0x52, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x4f,
	0x52, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x45, 0x52, 0x49, 0x56, 0x45, 0x44, 0x5f, 0x46,
	0x52, 0x4f, 0x4d, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x53,
	0x5f, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45,
	0x44, 0x5f, 0x4f, 0x46, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x52, 0x54, 0x5f, 0x4f,
	0x46, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x4d, 0x45, 0x4e, 0x44, 0x53, 0x10, 0x0a, 0x12,
	0x10, 0x0a, 0x0c, 0x41, 0x4d, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x10,
	0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x50, 0x50, 0x45, 0x4e, 0x44, 0x53, 0x10, 0x0c, 0x12, 0x11,
	0x0a, 0x0d, 0x41, 0x50, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x10,
	0x0d, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x49, 0x54, 0x45, 0x53, 0x10, 0x0e, 0x12, 0x0c, 0x0a, 0x08,
	0x43, 0x49, 0x54, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x10, 0x0f, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f,
	0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x4f, 0x4e, 0x10, 0x10, 0x12, 0x0e, 0x0a, 0x0a, 0x43,
	0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x10, 0x11, 0x12, 0x0c, 0x0a, 0x08, 0x43,
	0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x10, 0x12, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x4e,
	0x54, 0x41, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x10, 0x13, 0x12, 0x0c, 0x0a, 0x08, 0x43,
	0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x53, 0x10, 0x14, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x52,
	0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x10, 0x15, 0x12, 0x0c, 0x0a, 0x08,
	0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x53, 0x10, 0x16, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45,
	0x50, 0x4c, 0x41, 0x43, 0x45, 0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x10, 0x17, 0x12, 0x0c, 0x0a,
	0x08, 0x52, 0x45, 0x54, 0x52, 0x41, 0x43, 0x54, 0x53, 0x10, 0x18, 0x12, 0x10, 0x0a, 0x0c, 0x52,
	0x45, 0x54, 0x52, 0x41, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x10, 0x19, 0x12, 0x09, 0x0a,
	0x05, 0x53, 0x49, 0x47, 0x4e, 0x53, 0x10, 0x1a, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x49, 0x4d, 0x49,
	0x4c, 0x41, 0x52, 0x5f, 0x54, 0x4f, 0x10, 0x1b, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x55, 0x50, 0x50,
	0x4f, 0x52, 0x54, 0x53, 0x10, 0x1c, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52,
	0x54, 0x45, 0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x10, 0x1d, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x4f, 0x52, 0x4d, 0x53, 0x10, 0x1e, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x4f, 0x10, 0x1f,
	0x12, 0x14, 0x0a, 0x10, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x10, 0x20, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45,
	0x4e, 0x54, 0x53, 0x10, 0x21, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x46, 0x10, 0x22, 0x12, 0x10, 0x0a, 0x0c, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x10, 0x23, 0x12, 0x0b, 0x0a,
	0x07, 0x43, 0x49, 0x54, 0x45, 0x5f, 0x41, 0x53, 0x10, 0x24, 0x1a, 0x2f, 0x8a, 0x91, 0xc9, 0xfe,
	0x07, 0x29, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x61, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x1f,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x79, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x5f, 0x4f, 0x46, 0x10, 0x02,
	0x1a, 0x38, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x2d, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x2d, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x22, 0xc8, 0x02, 0x0a, 0x1a, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xa9, 0x02, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x53, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x41, 0x4d, 0x45, 0x4e, 0x44, 0x53, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x50, 0x50, 0x45,
	0x4e, 0x44, 0x53, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x4f,
	0x52, 0x4d, 0x53, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x0d, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45,
	0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x10, 0x05, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0c,
	0x41, 0x4d, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x10, 0x06, 0x1a, 0x11,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x61, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x57, 0x69, 0x74,
	0x68, 0x12, 0x25, 0x0a, 0x0d, 0x41, 0x50, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x10, 0x07, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x61, 0x70, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x12, 0x2b, 0x0a, 0x10, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x10, 0x08, 0x1a, 0x15,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x64, 0x57, 0x69, 0x74, 0x68, 0x1a, 0x2e, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x28, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xec, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xd6, 0x01, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x50, 0x4c, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x49, 0x52, 0x45,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x46, 0x4c, 0x45, 0x58,
	0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x49, 0x4c, 0x4c,
	0x45, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x08, 0x12, 0x0a,
	0x0a, 0x06, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x1a, 0x28, 0x8a, 0x91, 0xc9, 0xfe,
	0x07, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x7b, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x55, 0x52, 0x47, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x53, 0x41,
	0x50, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x54, 0x41, 0x54, 0x10, 0x04, 0x1a, 0x2a, 0x8a,
	0x91, 0xc9, 0xfe, 0x07, 0x24, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0xc5, 0x01, 0x0a, 0x11, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0xaf, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4f,
	0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x56, 0x4f,
	0x4b, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f,
	0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x07, 0x1a, 0x28, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x22, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xa2, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x84, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49,
	0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x45, 0x44,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x1a, 0x2b, 0x8a, 0x91, 0xc9, 0xfe, 0x07,
	0x25, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x8d, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x79, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x49, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b,
	0x46, 0x41, 0x54, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x1a, 0x27, 0x8a,
	0x91, 0xc9, 0xfe, 0x07, 0x21, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x74, 0x66,
	0x75, 0x6c, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x6d, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x49, 0x45,
	0x4e, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x02,
	0x1a, 0x31, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x74,
	0x66, 0x75, 0x6c, 0x2d, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2d, 0x6d,
	0x6f, 0x64, 0x65, 0x22, 0x90, 0x59, 0x0a, 0x0f, 0x53, 0x50, 0x44, 0x58, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xfc, 0x58, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x4e, 0x4f, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10,
	0x01, 0x12, 0x27, 0x0a, 0x17, 0x42, 0x53, 0x44, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x5f, 0x43, 0x4c,
	0x41, 0x55, 0x53, 0x45, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x10, 0x02, 0x1a, 0x0a,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x30, 0x42, 0x53, 0x44, 0x12, 0x12, 0x0a, 0x03, 0x41, 0x41,
	0x4c, 0x10, 0x03, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x41, 0x41, 0x4c, 0x12, 0x1c,
	0x0a, 0x08, 0x41, 0x42, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x53, 0x10, 0x04, 0x1a, 0x0e, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x08, 0x41, 0x62, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0a,
	0x41, 0x44, 0x4f, 0x42, 0x45, 0x5f, 0x32, 0x30, 0x30, 0x36, 0x10, 0x05, 0x1a, 0x10, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0a, 0x41, 0x64, 0x6f, 0x62, 0x65, 0x2d, 0x32, 0x30, 0x30, 0x36, 0x12, 0x22,
	0x0a, 0x0b, 0x41, 0x44, 0x4f, 0x42, 0x45, 0x5f, 0x47, 0x4c, 0x59, 0x50, 0x48, 0x10, 0x06, 0x1a,
	0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x41, 0x64, 0x6f, 0x62, 0x65, 0x2d, 0x47, 0x6c, 0x79,
	0x70, 0x68, 0x12, 0x14, 0x0a, 0x04, 0x41, 0x44, 0x53, 0x4c, 0x10, 0x07, 0x1a, 0x0a, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x04, 0x41, 0x44, 0x53, 0x4c, 0x12, 0x1a, 0x0a, 0x07, 0x41, 0x46, 0x4c, 0x5f,
	0x31, 0x5f, 0x31, 0x10, 0x08, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x41, 0x46, 0x4c,
	0x2d, 0x31, 0x2e, 0x31, 0x12, 0x1a, 0x0a, 0x07, 0x41, 0x46, 0x4c, 0x5f, 0x31, 0x5f, 0x32, 0x10,
	0x09, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x41, 0x46, 0x4c, 0x2d, 0x31, 0x2e, 0x32,
	0x12, 0x1a, 0x0a, 0x07, 0x41, 0x46, 0x4c, 0x5f, 0x32, 0x5f, 0x30, 0x10, 0x0a, 0x1a, 0x0d, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x07, 0x41, 0x46, 0x4c, 0x2d, 0x32, 0x2e, 0x30, 0x12, 0x1a, 0x0a, 0x07,
	0x41, 0x46, 0x4c, 0x5f, 0x32, 0x5f, 0x31, 0x10, 0x0b, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x07, 0x41, 0x46, 0x4c, 0x2d, 0x32, 0x2e, 0x31, 0x12, 0x1a, 0x0a, 0x07, 0x41, 0x46, 0x4c, 0x5f,
	0x33, 0x5f, 0x30, 0x10, 0x0c, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x41, 0x46, 0x4c,
	0x2d, 0x33, 0x2e, 0x30, 0x12, 0x1c, 0x0a, 0x08, 0x41, 0x46, 0x4d, 0x50, 0x41, 0x52, 0x53, 0x45,
	0x10, 0x0d, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x41, 0x66, 0x6d, 0x70, 0x61, 0x72,
	0x73, 0x65, 0x12, 0x26, 0x0a, 0x0d, 0x41, 0x47, 0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x5f, 0x4f,
	0x4e, 0x4c, 0x59, 0x10, 0x0e, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x41, 0x47, 0x50,
	0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x2d, 0x6f, 0x6e, 0x6c, 0x79, 0x12, 0x2e, 0x0a, 0x11, 0x41, 0x47,
	0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x5f, 0x4f, 0x52, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x52, 0x10,
	0x0f, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x41, 0x47, 0x50, 0x4c, 0x2d, 0x31, 0x2e,
	0x30, 0x2d, 0x6f, 0x72, 0x2d, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0d, 0x41, 0x47,
	0x50, 0x4c, 0x5f, 0x33, 0x5f, 0x30, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x10, 0x1a, 0x13, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x41, 0x47, 0x50, 0x4c, 0x2d, 0x33, 0x2e, 0x30, 0x2d, 0x6f, 0x6e,
	0x6c, 0x79, 0x12, 0x2e, 0x0a, 0x11, 0x41, 0x47, 0x50, 0x4c, 0x5f, 0x33, 0x5f, 0x30, 0x5f, 0x4f,
	0x52, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x52, 0x10, 0x11, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x11, 0x41, 0x47, 0x50, 0x4c, 0x2d, 0x33, 0x2e, 0x30, 0x2d, 0x6f, 0x72, 0x2d, 0x6c, 0x61, 0x74,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x07, 0x41, 0x4c, 0x41, 0x44, 0x44, 0x49, 0x4e, 0x10, 0x12, 0x1a,
	0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x41, 0x6c, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x12, 0x1a,
	0x0a, 0x07, 0x41, 0x4d, 0x44, 0x50, 0x4c, 0x50, 0x41, 0x10, 0x13, 0x1a, 0x0d, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x07, 0x41, 0x4d, 0x44, 0x50, 0x4c, 0x50, 0x41, 0x12, 0x12, 0x0a, 0x03, 0x41, 0x4d,
	0x4c, 0x10, 0x14, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x41, 0x4d, 0x4c, 0x12, 0x16,
	0x0a, 0x05, 0x41, 0x4d, 0x50, 0x41, 0x53, 0x10, 0x15, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x05, 0x41, 0x4d, 0x50, 0x41, 0x53, 0x12, 0x1c, 0x0a, 0x08, 0x41, 0x4e, 0x54, 0x4c, 0x52, 0x5f,
	0x50, 0x44, 0x10, 0x16, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x41, 0x4e, 0x54, 0x4c,
	0x52, 0x2d, 0x50, 0x44, 0x12, 0x20, 0x0a, 0x0a, 0x41, 0x50, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x31,
	0x5f, 0x30, 0x10, 0x17, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x41, 0x70, 0x61, 0x63,
	0x68, 0x65, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x20, 0x0a, 0x0a, 0x41, 0x50, 0x41, 0x43, 0x48, 0x45,
	0x5f, 0x31, 0x5f, 0x31, 0x10, 0x18, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x41, 0x70,
	0x61, 0x63, 0x68, 0x65, 0x2d, 0x31, 0x2e, 0x31, 0x12, 0x20, 0x0a, 0x0a, 0x41, 0x50, 0x41, 0x43,
	0x48, 0x45, 0x5f, 0x32, 0x5f, 0x30, 0x10, 0x19, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a,
	0x41, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2d, 0x32, 0x2e, 0x30, 0x12, 0x18, 0x0a, 0x06, 0x41, 0x50,
	0x41, 0x46, 0x4d, 0x4c, 0x10, 0x1a, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x41, 0x50,
	0x41, 0x46, 0x4d, 0x4c, 0x12, 0x1a, 0x0a, 0x07, 0x41, 0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10,
	0x1b, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x41, 0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x30,
	0x12, 0x1c, 0x0a, 0x08, 0x41, 0x50, 0x53, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x1c, 0x1a, 0x0e,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x41, 0x50, 0x53, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x1c,
	0x0a, 0x08, 0x41, 0x50, 0x53, 0x4c, 0x5f, 0x31, 0x5f, 0x31, 0x10, 0x1d, 0x1a, 0x0e, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x08, 0x41, 0x50, 0x53, 0x4c, 0x2d, 0x31, 0x2e, 0x31, 0x12, 0x1c, 0x0a, 0x08,
	0x41, 0x50, 0x53, 0x4c, 0x5f, 0x31, 0x5f, 0x32, 0x10, 0x1e, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x08, 0x41, 0x50, 0x53, 0x4c, 0x2d, 0x31, 0x2e, 0x32, 0x12, 0x1c, 0x0a, 0x08, 0x41, 0x50,
	0x53, 0x4c, 0x5f, 0x32, 0x5f, 0x30, 0x10, 0x1f, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08,
	0x41, 0x50, 0x53, 0x4c, 0x2d, 0x32, 0x2e, 0x30, 0x12, 0x2c, 0x0a, 0x10, 0x41, 0x52, 0x54, 0x49,
	0x53, 0x54, 0x49, 0x43, 0x5f, 0x31, 0x5f, 0x30, 0x5f, 0x43, 0x4c, 0x38, 0x10, 0x20, 0x1a, 0x16,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2d, 0x31,
	0x2e, 0x30, 0x2d, 0x63, 0x6c, 0x38, 0x12, 0x2e, 0x0a, 0x11, 0x41, 0x52, 0x54, 0x49, 0x53, 0x54,
	0x49, 0x43, 0x5f, 0x31, 0x5f, 0x30, 0x5f, 0x50, 0x45, 0x52, 0x4c, 0x10, 0x21, 0x1a, 0x17, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x11, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2d, 0x31, 0x2e,
	0x30, 0x2d, 0x50, 0x65, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0c, 0x41, 0x52, 0x54, 0x49, 0x53, 0x54,
	0x49, 0x43, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x22, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c,
	0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x24, 0x0a, 0x0c,
	0x41, 0x52, 0x54, 0x49, 0x53, 0x54, 0x49, 0x43, 0x5f, 0x32, 0x5f, 0x30, 0x10, 0x23, 0x1a, 0x12,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2d, 0x32,
	0x2e, 0x30, 0x12, 0x18, 0x0a, 0x06, 0x42, 0x41, 0x48, 0x59, 0x50, 0x48, 0x10, 0x24, 0x1a, 0x0c,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x42, 0x61, 0x68, 0x79, 0x70, 0x68, 0x12, 0x14, 0x0a, 0x04,
	0x42, 0x41, 0x52, 0x52, 0x10, 0x25, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x42, 0x61,
	0x72, 0x72, 0x12, 0x1c, 0x0a, 0x08, 0x42, 0x45, 0x45, 0x52, 0x57, 0x41, 0x52, 0x45, 0x10, 0x26,
	0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x42, 0x65, 0x65, 0x72, 0x77, 0x61, 0x72, 0x65,
	0x12, 0x29, 0x0a, 0x0f, 0x42, 0x49, 0x54, 0x5f, 0x54, 0x4f, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f,
	0x31, 0x5f, 0x30, 0x10, 0x27, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x42, 0x69, 0x74,
	0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x29, 0x0a, 0x0f, 0x42,
	0x49, 0x54, 0x5f, 0x54, 0x4f, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x31, 0x5f, 0x31, 0x10, 0x28,
	0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x42, 0x69, 0x74, 0x54, 0x6f, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x2d, 0x31, 0x2e, 0x31, 0x12, 0x1a, 0x0a, 0x07, 0x42, 0x4f, 0x52, 0x43, 0x45, 0x55,
	0x58, 0x10, 0x29, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x42, 0x6f, 0x72, 0x63, 0x65,
	0x75, 0x78, 0x12, 0x24, 0x0a, 0x0c, 0x42, 0x53, 0x44, 0x5f, 0x31, 0x5f, 0x43, 0x4c, 0x41, 0x55,
	0x53, 0x45, 0x10, 0x2a, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x42, 0x53, 0x44, 0x2d,
	0x31, 0x2d, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x15, 0x42, 0x53, 0x44, 0x5f,
	0x32, 0x5f, 0x43, 0x4c, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x42, 0x53,
	0x44, 0x10, 0x2b, 0x1a, 0x1a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x14, 0x42, 0x53, 0x44, 0x2d, 0x32,
	0x2d, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x2d, 0x46, 0x72, 0x65, 0x65, 0x42, 0x53, 0x44, 0x12,
	0x33, 0x0a, 0x14, 0x42, 0x53, 0x44, 0x5f, 0x32, 0x5f, 0x43, 0x4c, 0x41, 0x55, 0x53, 0x45, 0x5f,
	0x4e, 0x45, 0x54, 0x5f, 0x42, 0x53, 0x44, 0x10, 0x2c, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x13, 0x42, 0x53, 0x44, 0x2d, 0x32, 0x2d, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x2d, 0x4e, 0x65,
	0x74, 0x42, 0x53, 0x44, 0x12, 0x32, 0x0a, 0x13, 0x42, 0x53, 0x44, 0x5f, 0x32, 0x5f, 0x43, 0x4c,
	0x41, 0x55, 0x53, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x2d, 0x1a, 0x19, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x13, 0x42, 0x53, 0x44, 0x2d, 0x32, 0x2d, 0x43, 0x6c, 0x61, 0x75, 0x73,
	0x65, 0x2d, 0x50, 0x61, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0c, 0x42, 0x53, 0x44, 0x5f,
	0x32, 0x5f, 0x43, 0x4c, 0x41, 0x55, 0x53, 0x45, 0x10, 0x2e, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0c, 0x42, 0x53, 0x44, 0x2d, 0x32, 0x2d, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x3c,
	0x0a, 0x18, 0x42, 0x53, 0x44, 0x5f, 0x33, 0x5f, 0x43, 0x4c, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x2f, 0x1a, 0x1e, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x18, 0x42, 0x53, 0x44, 0x2d, 0x33, 0x2d, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65,
	0x2d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x12,
	0x42, 0x53, 0x44, 0x5f, 0x33, 0x5f, 0x43, 0x4c, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x43, 0x4c, 0x45,
	0x41, 0x52, 0x10, 0x30, 0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x42, 0x53, 0x44, 0x2d,
	0x33, 0x2d, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x2d, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x2e,
	0x0a, 0x11, 0x42, 0x53, 0x44, 0x5f, 0x33, 0x5f, 0x43, 0x4c, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x4c,
	0x42, 0x4e, 0x4c, 0x10, 0x31, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x42, 0x53, 0x44,
	0x2d, 0x33, 0x2d, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x2d, 0x4c, 0x42, 0x4e, 0x4c, 0x12, 0x54,
	0x0a, 0x24, 0x42, 0x53, 0x44, 0x5f, 0x33, 0x5f, 0x43, 0x4c, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x4e,
	0x4f, 0x5f, 0x4e, 0x55, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53,
	0x45, 0x5f, 0x32, 0x30, 0x31, 0x34, 0x10, 0x32, 0x1a, 0x2a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x24,
	0x42, 0x53, 0x44, 0x2d, 0x33, 0x2d, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x2d, 0x4e, 0x6f, 0x2d,
	0x4e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x2d, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2d,
	0x32, 0x30, 0x31, 0x34, 0x12, 0x4a, 0x0a, 0x1f, 0x42, 0x53, 0x44, 0x5f, 0x33, 0x5f, 0x43, 0x4c,
	0x41, 0x55, 0x53, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x4e, 0x55, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f,
	0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x10, 0x33, 0x1a, 0x25, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x1f, 0x42, 0x53, 0x44, 0x2d, 0x33, 0x2d, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x2d, 0x4e, 0x6f,
	0x2d, 0x4e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x2d, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x12, 0x4c, 0x0a, 0x20, 0x42, 0x53, 0x44, 0x5f, 0x33, 0x5f, 0x43, 0x4c, 0x41, 0x55, 0x53, 0x45,
	0x5f, 0x4e, 0x4f, 0x5f, 0x4e, 0x55, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x57, 0x41, 0x52, 0x52,
	0x41, 0x4e, 0x54, 0x59, 0x10, 0x34, 0x1a, 0x26, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x20, 0x42, 0x53,
	0x44, 0x2d, 0x33, 0x2d, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x2d, 0x4e, 0x6f, 0x2d, 0x4e, 0x75,
	0x63, 0x6c, 0x65, 0x61, 0x72, 0x2d, 0x57, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x74, 0x79, 0x12, 0x24,
	0x0a, 0x0c, 0x42, 0x53, 0x44, 0x5f, 0x33, 0x5f, 0x43, 0x4c, 0x41, 0x55, 0x53, 0x45, 0x10, 0x35,
	0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x42, 0x53, 0x44, 0x2d, 0x33, 0x2d, 0x43, 0x6c,
	0x61, 0x75, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x0f, 0x42, 0x53, 0x44, 0x5f, 0x34, 0x5f, 0x43, 0x4c,
	0x41, 0x55, 0x53, 0x45, 0x5f, 0x55, 0x43, 0x10, 0x36, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0f, 0x42, 0x53, 0x44, 0x2d, 0x34, 0x2d, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x2d, 0x55, 0x43,
	0x12, 0x24, 0x0a, 0x0c, 0x42, 0x53, 0x44, 0x5f, 0x34, 0x5f, 0x43, 0x4c, 0x41, 0x55, 0x53, 0x45,
	0x10, 0x37, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x42, 0x53, 0x44, 0x2d, 0x34, 0x2d,
	0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0e, 0x42, 0x53, 0x44, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x38, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0e, 0x42, 0x53, 0x44, 0x2d, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2a, 0x0a, 0x0f, 0x42, 0x53, 0x44, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x10, 0x39, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x42, 0x53, 0x44,
	0x2d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x07,
	0x42, 0x53, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x3a, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x07, 0x42, 0x53, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x22, 0x0a, 0x0b, 0x42, 0x5a, 0x49, 0x50,
	0x32, 0x5f, 0x31, 0x5f, 0x30, 0x5f, 0x35, 0x10, 0x3b, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0b, 0x62, 0x7a, 0x69, 0x70, 0x32, 0x2d, 0x31, 0x2e, 0x30, 0x2e, 0x35, 0x12, 0x22, 0x0a, 0x0b,
	0x42, 0x5a, 0x49, 0x50, 0x32, 0x5f, 0x31, 0x5f, 0x30, 0x5f, 0x36, 0x10, 0x3c, 0x1a, 0x11, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x62, 0x7a, 0x69, 0x70, 0x32, 0x2d, 0x31, 0x2e, 0x30, 0x2e, 0x36,
	0x12, 0x1a, 0x0a, 0x07, 0x43, 0x41, 0x4c, 0x44, 0x45, 0x52, 0x41, 0x10, 0x3d, 0x1a, 0x0d, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x07, 0x43, 0x61, 0x6c, 0x64, 0x65, 0x72, 0x61, 0x12, 0x20, 0x0a, 0x0a,
	0x43, 0x41, 0x54, 0x4f, 0x53, 0x4c, 0x5f, 0x31, 0x5f, 0x31, 0x10, 0x3e, 0x1a, 0x10, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0a, 0x43, 0x41, 0x54, 0x4f, 0x53, 0x4c, 0x2d, 0x31, 0x2e, 0x31, 0x12, 0x1e,
	0x0a, 0x09, 0x43, 0x43, 0x5f, 0x42, 0x59, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x3f, 0x1a, 0x0f, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x09, 0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x1e,
	0x0a, 0x09, 0x43, 0x43, 0x5f, 0x42, 0x59, 0x5f, 0x32, 0x5f, 0x30, 0x10, 0x40, 0x1a, 0x0f, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x09, 0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d, 0x32, 0x2e, 0x30, 0x12, 0x1e,
	0x0a, 0x09, 0x43, 0x43, 0x5f, 0x42, 0x59, 0x5f, 0x32, 0x5f, 0x35, 0x10, 0x41, 0x1a, 0x0f, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x09, 0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d, 0x32, 0x2e, 0x35, 0x12, 0x1e,
	0x0a, 0x09, 0x43, 0x43, 0x5f, 0x42, 0x59, 0x5f, 0x33, 0x5f, 0x30, 0x10, 0x42, 0x1a, 0x0f, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x09, 0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d, 0x33, 0x2e, 0x30, 0x12, 0x1e,
	0x0a, 0x09, 0x43, 0x43, 0x5f, 0x42, 0x59, 0x5f, 0x34, 0x5f, 0x30, 0x10, 0x43, 0x1a, 0x0f, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x09, 0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d, 0x34, 0x2e, 0x30, 0x12, 0x24,
	0x0a, 0x0c, 0x43, 0x43, 0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x43, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x44,
	0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d, 0x4e, 0x43,
	0x2d, 0x31, 0x2e, 0x30, 0x12, 0x24, 0x0a, 0x0c, 0x43, 0x43, 0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x43,
	0x5f, 0x32, 0x5f, 0x30, 0x10, 0x45, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x43, 0x43,
	0x2d, 0x42, 0x59, 0x2d, 0x4e, 0x43, 0x2d, 0x32, 0x2e, 0x30, 0x12, 0x24, 0x0a, 0x0c, 0x43, 0x43,
	0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x43, 0x5f, 0x32, 0x5f, 0x35, 0x10, 0x46, 0x1a, 0x12, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0c, 0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d, 0x4e, 0x43, 0x2d, 0x32, 0x2e, 0x35,
	0x12, 0x24, 0x0a, 0x0c, 0x43, 0x43, 0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x43, 0x5f, 0x33, 0x5f, 0x30,
	0x10, 0x47, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d,
	0x4e, 0x43, 0x2d, 0x33, 0x2e, 0x30, 0x12, 0x24, 0x0a, 0x0c, 0x43, 0x43, 0x5f, 0x42, 0x59, 0x5f,
	0x4e, 0x43, 0x5f, 0x34, 0x5f, 0x30, 0x10, 0x48, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c,
	0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d, 0x4e, 0x43, 0x2d, 0x34, 0x2e, 0x30, 0x12, 0x2a, 0x0a, 0x0f,
	0x43, 0x43, 0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x43, 0x5f, 0x4e, 0x44, 0x5f, 0x31, 0x5f, 0x30, 0x10,
	0x49, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d, 0x4e,
	0x43, 0x2d, 0x4e, 0x44, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x2a, 0x0a, 0x0f, 0x43, 0x43, 0x5f, 0x42,
	0x59, 0x5f, 0x4e, 0x43, 0x5f, 0x4e, 0x44, 0x5f, 0x32, 0x5f, 0x30, 0x10, 0x4a, 0x1a, 0x15, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d, 0x4e, 0x43, 0x2d, 0x4e, 0x44,
	0x2d, 0x32, 0x2e, 0x30, 0x12, 0x2a, 0x0a, 0x0f, 0x43, 0x43, 0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x43,
	0x5f, 0x4e, 0x44, 0x5f, 0x32, 0x5f, 0x35, 0x10, 0x4b, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0f, 0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d, 0x4e, 0x43, 0x2d, 0x4e, 0x44, 0x2d, 0x32, 0x2e, 0x35,
	0x12, 0x2a, 0x0a, 0x0f, 0x43, 0x43, 0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x43, 0x5f, 0x4e, 0x44, 0x5f,
	0x33, 0x5f, 0x30, 0x10, 0x4c, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x43, 0x43, 0x2d,
	0x42, 0x59, 0x2d, 0x4e, 0x43, 0x2d, 0x4e, 0x44, 0x2d, 0x33, 0x2e, 0x30, 0x12, 0x2a, 0x0a, 0x0f,
	0x43, 0x43, 0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x43, 0x5f, 0x4e, 0x44, 0x5f, 0x34, 0x5f, 0x30, 0x10,
	0x4d, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d, 0x4e,
	0x43, 0x2d, 0x4e, 0x44, 0x2d, 0x34, 0x2e, 0x30, 0x12, 0x2a, 0x0a, 0x0f, 0x43, 0x43, 0x5f, 0x42,
	0x59, 0x5f, 0x4e, 0x43, 0x5f, 0x53, 0x41, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x4e, 0x1a, 0x15, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d, 0x4e, 0x43, 0x2d, 0x53, 0x41,
	0x2d, 0x31, 0x2e, 0x30, 0x12, 0x2a, 0x0a, 0x0f, 0x43, 0x43, 0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x43,
	0x5f, 0x53, 0x41, 0x5f, 0x32, 0x5f, 0x30, 0x10, 0x4f, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0f, 0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d, 0x4e, 0x43, 0x2d, 0x53, 0x41, 0x2d, 0x32, 0x2e, 0x30,
	0x12, 0x2a, 0x0a, 0x0f, 0x43, 0x43, 0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x43, 0x5f, 0x53, 0x41, 0x5f,
	0x32, 0x5f, 0x35, 0x10, 0x50, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x43, 0x43, 0x2d,
	0x42, 0x59, 0x2d, 0x4e, 0x43, 0x2d, 0x53, 0x41, 0x2d, 0x32, 0x2e, 0x35, 0x12, 0x2a, 0x0a, 0x0f,
	0x43, 0x43, 0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x43, 0x5f, 0x53, 0x41, 0x5f, 0x33, 0x5f, 0x30, 0x10,
	0x51, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d, 0x4e,
	0x43, 0x2d, 0x53, 0x41, 0x2d, 0x33, 0x2e, 0x30, 0x12, 0x2a, 0x0a, 0x0f, 0x43, 0x43, 0x5f, 0x42,
	0x59, 0x5f, 0x4e, 0x43, 0x5f, 0x53, 0x41, 0x5f, 0x34, 0x5f, 0x30, 0x10, 0x52, 0x1a, 0x15, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d, 0x4e, 0x43, 0x2d, 0x53, 0x41,
	0x2d, 0x34, 0x2e, 0x30, 0x12, 0x24, 0x0a, 0x0c, 0x43, 0x43, 0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x44,
	0x5f, 0x31, 0x5f, 0x30, 0x10, 0x53, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x43, 0x43,
	0x2d, 0x42, 0x59, 0x2d, 0x4e, 0x44, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x24, 0x0a, 0x0c, 0x43, 0x43,
	0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x44, 0x5f, 0x32, 0x5f, 0x30, 0x10, 0x54, 0x1a, 0x12, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0c, 0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d, 0x4e, 0x44, 0x2d, 0x32, 0x2e, 0x30,
	0x12, 0x24, 0x0a, 0x0c, 0x43, 0x43, 0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x44, 0x5f, 0x32, 0x5f, 0x35,
	0x10, 0x55, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d,
	0x4e, 0x44, 0x2d, 0x32, 0x2e, 0x35, 0x12, 0x24, 0x0a, 0x0c, 0x43, 0x43, 0x5f, 0x42, 0x59, 0x5f,
	0x4e, 0x44, 0x5f, 0x33, 0x5f, 0x30, 0x10, 0x56, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c,
	0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d, 0x4e, 0x44, 0x2d, 0x33, 0x2e, 0x30, 0x12, 0x24, 0x0a, 0x0c,
	0x43, 0x43, 0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x44, 0x5f, 0x34, 0x5f, 0x30, 0x10, 0x57, 0x1a, 0x12,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d, 0x4e, 0x44, 0x2d, 0x34,
	0x2e, 0x30, 0x12, 0x24, 0x0a, 0x0c, 0x43, 0x43, 0x5f, 0x42, 0x59, 0x5f, 0x53, 0x41, 0x5f, 0x31,
	0x5f, 0x30, 0x10, 0x58, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x43, 0x43, 0x2d, 0x42,
	0x59, 0x2d, 0x53, 0x41, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x24, 0x0a, 0x0c, 0x43, 0x43, 0x5f, 0x42,
	0x59, 0x5f, 0x53, 0x41, 0x5f, 0x32, 0x5f, 0x30, 0x10, 0x59, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0c, 0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d, 0x53, 0x41, 0x2d, 0x32, 0x2e, 0x30, 0x12, 0x24,
	0x0a, 0x0c, 0x43, 0x43, 0x5f, 0x42, 0x59, 0x5f, 0x53, 0x41, 0x5f, 0x32, 0x5f, 0x35, 0x10, 0x5a,
	0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d, 0x53, 0x41,
	0x2d, 0x32, 0x2e, 0x35, 0x12, 0x24, 0x0a, 0x0c, 0x43, 0x43, 0x5f, 0x42, 0x59, 0x5f, 0x53, 0x41,
	0x5f, 0x33, 0x5f, 0x30, 0x10, 0x5b, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x43, 0x43,
	0x2d, 0x42, 0x59, 0x2d, 0x53, 0x41, 0x2d, 0x33, 0x2e, 0x30, 0x12, 0x24, 0x0a, 0x0c, 0x43, 0x43,
	0x5f, 0x42, 0x59, 0x5f, 0x53, 0x41, 0x5f, 0x34, 0x5f, 0x30, 0x10, 0x5c, 0x1a, 0x12, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0c, 0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d, 0x53, 0x41, 0x2d, 0x34, 0x2e, 0x30,
	0x12, 0x1a, 0x0a, 0x07, 0x43, 0x43, 0x30, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x5d, 0x1a, 0x0d, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x07, 0x43, 0x43, 0x30, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x1c, 0x0a, 0x08,
	0x43, 0x44, 0x44, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x5e, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x08, 0x43, 0x44, 0x44, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x1c, 0x0a, 0x08, 0x43, 0x44,
	0x44, 0x4c, 0x5f, 0x31, 0x5f, 0x31, 0x10, 0x5f, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08,
	0x43, 0x44, 0x44, 0x4c, 0x2d, 0x31, 0x2e, 0x31, 0x12, 0x32, 0x0a, 0x13, 0x43, 0x44, 0x4c, 0x41,
	0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x56, 0x45, 0x5f, 0x31, 0x5f, 0x30, 0x10,
	0x60, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x43, 0x44, 0x4c, 0x41, 0x2d, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x76, 0x65, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x2c, 0x0a, 0x10,
	0x43, 0x44, 0x4c, 0x41, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x31, 0x5f, 0x30,
	0x10, 0x61, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x43, 0x44, 0x4c, 0x41, 0x2d, 0x53,
	0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x20, 0x0a, 0x0a, 0x43, 0x45,
	0x43, 0x49, 0x4c, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x62, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0a, 0x43, 0x45, 0x43, 0x49, 0x4c, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x20, 0x0a, 0x0a,
	0x43, 0x45, 0x43, 0x49, 0x4c, 0x4c, 0x5f, 0x31, 0x5f, 0x31, 0x10, 0x63, 0x1a, 0x10, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0a, 0x43, 0x45, 0x43, 0x49, 0x4c, 0x4c, 0x2d, 0x31, 0x2e, 0x31, 0x12, 0x20,
	0x0a, 0x0a, 0x43, 0x45, 0x43, 0x49, 0x4c, 0x4c, 0x5f, 0x32, 0x5f, 0x30, 0x10, 0x64, 0x1a, 0x10,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x43, 0x45, 0x43, 0x49, 0x4c, 0x4c, 0x2d, 0x32, 0x2e, 0x30,
	0x12, 0x20, 0x0a, 0x0a, 0x43, 0x45, 0x43, 0x49, 0x4c, 0x4c, 0x5f, 0x32, 0x5f, 0x31, 0x10, 0x65,
	0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x43, 0x45, 0x43, 0x49, 0x4c, 0x4c, 0x2d, 0x32,
	0x2e, 0x31, 0x12, 0x1c, 0x0a, 0x08, 0x43, 0x45, 0x43, 0x49, 0x4c, 0x4c, 0x5f, 0x42, 0x10, 0x66,
	0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x43, 0x45, 0x43, 0x49, 0x4c, 0x4c, 0x2d, 0x42,
	0x12, 0x1c, 0x0a, 0x08, 0x43, 0x45, 0x43, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x10, 0x67, 0x1a, 0x0e,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x43, 0x45, 0x43, 0x49, 0x4c, 0x4c, 0x2d, 0x43, 0x12, 0x21,
	0x0a, 0x0b, 0x43, 0x4c, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x53, 0x54, 0x49, 0x43, 0x10, 0x68, 0x1a,
	0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x43, 0x6c, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x12, 0x22, 0x0a, 0x0b, 0x43, 0x4e, 0x52, 0x49, 0x5f, 0x4a, 0x59, 0x54, 0x48, 0x4f, 0x4e,
	0x10, 0x69, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x43, 0x4e, 0x52, 0x49, 0x2d, 0x4a,
	0x79, 0x74, 0x68, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x1a, 0x43, 0x4e, 0x52, 0x49, 0x5f, 0x50, 0x59,
	0x54, 0x48, 0x4f, 0x4e, 0x5f, 0x47, 0x50, 0x4c, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x54, 0x49,
	0x42, 0x4c, 0x45, 0x10, 0x6a, 0x1a, 0x20, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1a, 0x43, 0x4e, 0x52,
	0x49, 0x2d, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2d, 0x47, 0x50, 0x4c, 0x2d, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x43, 0x4e, 0x52, 0x49, 0x5f,
	0x50, 0x59, 0x54, 0x48, 0x4f, 0x4e, 0x10, 0x6b, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b,
	0x43, 0x4e, 0x52, 0x49, 0x2d, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0a, 0x43,
	0x4f, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x31, 0x5f, 0x31, 0x10, 0x6c, 0x1a, 0x10, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0a, 0x43, 0x6f, 0x6e, 0x64, 0x6f, 0x72, 0x2d, 0x31, 0x2e, 0x31, 0x12, 0x1c, 0x0a,
	0x08, 0x43, 0x50, 0x41, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x6d, 0x1a, 0x0e, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x08, 0x43, 0x50, 0x41, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x1a, 0x0a, 0x07, 0x43,
	0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x6e, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07,
	0x43, 0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x1e, 0x0a, 0x09, 0x43, 0x50, 0x4f, 0x4c, 0x5f,
	0x31, 0x5f, 0x30, 0x32, 0x10, 0x6f, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x43, 0x50,
	0x4f, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x32, 0x12, 0x1e, 0x0a, 0x09, 0x43, 0x52, 0x4f, 0x53, 0x53,
	0x57, 0x4f, 0x52, 0x44, 0x10, 0x70, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x43, 0x72,
	0x6f, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x29, 0x0a, 0x0f, 0x43, 0x52, 0x59, 0x53, 0x54,
	0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x45, 0x52, 0x10, 0x71, 0x1a, 0x14, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0e, 0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x65, 0x72, 0x12, 0x22, 0x0a, 0x0b, 0x43, 0x55, 0x41, 0x5f, 0x4f, 0x50, 0x4c, 0x5f, 0x31, 0x5f,
	0x30, 0x10, 0x72, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x43, 0x55, 0x41, 0x2d, 0x4f,
	0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x14, 0x0a, 0x04, 0x43, 0x55, 0x42, 0x45, 0x10, 0x73,
	0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x43, 0x75, 0x62, 0x65, 0x12, 0x08, 0x0a, 0x04,
	0x43, 0x55, 0x52, 0x4c, 0x10, 0x74, 0x12, 0x1e, 0x0a, 0x09, 0x44, 0x5f, 0x46, 0x53, 0x4c, 0x5f,
	0x31, 0x5f, 0x30, 0x10, 0x75, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x44, 0x2d, 0x46,
	0x53, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x46, 0x46, 0x4d, 0x41,
	0x52, 0x4b, 0x10, 0x76, 0x12, 0x12, 0x0a, 0x03, 0x44, 0x4f, 0x43, 0x10, 0x77, 0x1a, 0x09, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x03, 0x44, 0x4f, 0x43, 0x12, 0x1a, 0x0a, 0x07, 0x44, 0x4f, 0x54, 0x53,
	0x45, 0x51, 0x4e, 0x10, 0x78, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x44, 0x6f, 0x74,
	0x73, 0x65, 0x71, 0x6e, 0x12, 0x14, 0x0a, 0x04, 0x44, 0x53, 0x44, 0x50, 0x10, 0x79, 0x1a, 0x0a,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x44, 0x53, 0x44, 0x50, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x56,
	0x49, 0x50, 0x44, 0x46, 0x4d, 0x10, 0x7a, 0x12, 0x1a, 0x0a, 0x07, 0x45, 0x43, 0x4c, 0x5f, 0x31,
	0x5f, 0x30, 0x10, 0x7b, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x45, 0x43, 0x4c, 0x2d,
	0x31, 0x2e, 0x30, 0x12, 0x1a, 0x0a, 0x07, 0x45, 0x43, 0x4c, 0x5f, 0x32, 0x5f, 0x30, 0x10, 0x7c,
	0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x45, 0x43, 0x4c, 0x2d, 0x32, 0x2e, 0x30, 0x12,
	0x1a, 0x0a, 0x07, 0x45, 0x46, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x7d, 0x1a, 0x0d, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x07, 0x45, 0x46, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x1a, 0x0a, 0x07, 0x45,
	0x46, 0x4c, 0x5f, 0x32, 0x5f, 0x30, 0x10, 0x7e, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07,
	0x45, 0x46, 0x4c, 0x2d, 0x32, 0x2e, 0x30, 0x12, 0x19, 0x0a, 0x07, 0x45, 0x5f, 0x47, 0x45, 0x4e,
	0x49, 0x58, 0x10, 0x7f, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x65, 0x47, 0x65, 0x6e,
	0x69, 0x78, 0x12, 0x1b, 0x0a, 0x07, 0x45, 0x4e, 0x54, 0x45, 0x53, 0x53, 0x41, 0x10, 0x80, 0x01,
	0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x45, 0x6e, 0x74, 0x65, 0x73, 0x73, 0x61, 0x12,
	0x1b, 0x0a, 0x07, 0x45, 0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x81, 0x01, 0x1a, 0x0d, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x07, 0x45, 0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x1b, 0x0a, 0x07,
	0x45, 0x50, 0x4c, 0x5f, 0x32, 0x5f, 0x30, 0x10, 0x82, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x07, 0x45, 0x50, 0x4c, 0x2d, 0x32, 0x2e, 0x30, 0x12, 0x20, 0x0a, 0x0a, 0x45, 0x52, 0x4c,
	0x5f, 0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x31, 0x10, 0x83, 0x01, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x09, 0x45, 0x72, 0x6c, 0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x31, 0x12, 0x22, 0x0a, 0x0b, 0x45,
	0x55, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x47, 0x52, 0x49, 0x44, 0x10, 0x84, 0x01, 0x1a, 0x10, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x45, 0x55, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x08, 0x45, 0x55, 0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x85, 0x01, 0x1a, 0x0e,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x45, 0x55, 0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x1d,
	0x0a, 0x08, 0x45, 0x55, 0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x31, 0x10, 0x86, 0x01, 0x1a, 0x0e, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x08, 0x45, 0x55, 0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x31, 0x12, 0x1d, 0x0a,
	0x08, 0x45, 0x55, 0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x32, 0x10, 0x87, 0x01, 0x1a, 0x0e, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x08, 0x45, 0x55, 0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x32, 0x12, 0x1b, 0x0a, 0x07,
	0x45, 0x55, 0x52, 0x4f, 0x53, 0x59, 0x4d, 0x10, 0x88, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x07, 0x45, 0x75, 0x72, 0x6f, 0x73, 0x79, 0x6d, 0x12, 0x15, 0x0a, 0x04, 0x46, 0x41, 0x49,
	0x52, 0x10, 0x89, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x46, 0x61, 0x69, 0x72,
	0x12, 0x27, 0x0a, 0x0d, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x57, 0x4f, 0x52, 0x58, 0x5f, 0x31, 0x5f,
	0x30, 0x10, 0x8a, 0x01, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x77, 0x6f, 0x72, 0x78, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x20, 0x0a, 0x0a, 0x46, 0x52, 0x45,
	0x45, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x8b, 0x01, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x09, 0x46, 0x72, 0x65, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x46,
	0x53, 0x46, 0x41, 0x50, 0x10, 0x8c, 0x01, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x46,
	0x53, 0x46, 0x41, 0x50, 0x12, 0x17, 0x0a, 0x05, 0x46, 0x53, 0x46, 0x55, 0x4c, 0x10, 0x8d, 0x01,
	0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x46, 0x53, 0x46, 0x55, 0x4c, 0x12, 0x1b, 0x0a,
	0x07, 0x46, 0x53, 0x46, 0x55, 0x4c, 0x4c, 0x52, 0x10, 0x8e, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x07, 0x46, 0x53, 0x46, 0x55, 0x4c, 0x4c, 0x52, 0x12, 0x13, 0x0a, 0x03, 0x46, 0x54,
	0x4c, 0x10, 0x8f, 0x01, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x46, 0x54, 0x4c, 0x12,
	0x27, 0x0a, 0x0d, 0x47, 0x46, 0x44, 0x4c, 0x5f, 0x31, 0x5f, 0x31, 0x5f, 0x4f, 0x4e, 0x4c, 0x59,
	0x10, 0x90, 0x01, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x47, 0x46, 0x44, 0x4c, 0x2d,
	0x31, 0x2e, 0x31, 0x2d, 0x6f, 0x6e, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x11, 0x47, 0x46, 0x44, 0x4c,
	0x5f, 0x31, 0x5f, 0x31, 0x5f, 0x4f, 0x52, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x52, 0x10, 0x91, 0x01,
	0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x47, 0x46, 0x44, 0x4c, 0x2d, 0x31, 0x2e, 0x31,
	0x2d, 0x6f, 0x72, 0x2d, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0d, 0x47, 0x46, 0x44,
	0x4c, 0x5f, 0x31, 0x5f, 0x32, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x92, 0x01, 0x1a, 0x13, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x47, 0x46, 0x44, 0x4c, 0x2d, 0x31, 0x2e, 0x32, 0x2d, 0x6f, 0x6e,
	0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x11, 0x47, 0x46, 0x44, 0x4c, 0x5f, 0x31, 0x5f, 0x32, 0x5f, 0x4f,
	0x52, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x52, 0x10, 0x93, 0x01, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x11, 0x47, 0x46, 0x44, 0x4c, 0x2d, 0x31, 0x2e, 0x32, 0x2d, 0x6f, 0x72, 0x2d, 0x6c, 0x61,
	0x74, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0d, 0x47, 0x46, 0x44, 0x4c, 0x5f, 0x31, 0x5f, 0x33, 0x5f,
	0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x94, 0x01, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x47,
	0x46, 0x44, 0x4c, 0x2d, 0x31, 0x2e, 0x33, 0x2d, 0x6f, 0x6e, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x11,
	0x47, 0x46, 0x44, 0x4c, 0x5f, 0x31, 0x5f, 0x33, 0x5f, 0x4f, 0x52, 0x5f, 0x4c, 0x41, 0x54, 0x45,
	0x52, 0x10, 0x95, 0x01, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x47, 0x46, 0x44, 0x4c,
	0x2d, 0x31, 0x2e, 0x33, 0x2d, 0x6f, 0x72, 0x2d, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x08, 0x47, 0x49, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x10, 0x96, 0x01, 0x1a, 0x0e, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x08, 0x47, 0x69, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x12, 0x17, 0x0a, 0x05,
	0x47, 0x4c, 0x32, 0x50, 0x53, 0x10, 0x97, 0x01, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05,
	0x47, 0x4c, 0x32, 0x50, 0x53, 0x12, 0x17, 0x0a, 0x05, 0x47, 0x4c, 0x49, 0x44, 0x45, 0x10, 0x98,
	0x01, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x47, 0x6c, 0x69, 0x64, 0x65, 0x12, 0x19,
	0x0a, 0x06, 0x47, 0x4c, 0x55, 0x4c, 0x58, 0x45, 0x10, 0x99, 0x01, 0x1a, 0x0c, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x06, 0x47, 0x6c, 0x75, 0x6c, 0x78, 0x65, 0x12, 0x0c, 0x0a, 0x07, 0x47, 0x4e, 0x55,
	0x50, 0x4c, 0x4f, 0x54, 0x10, 0x9a, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x47, 0x50, 0x4c, 0x5f, 0x31,
	0x5f, 0x30, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x9b, 0x01, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0c, 0x47, 0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x2d, 0x6f, 0x6e, 0x6c, 0x79, 0x12, 0x2d,
	0x0a, 0x10, 0x47, 0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x5f, 0x4f, 0x52, 0x5f, 0x4c, 0x41, 0x54,
	0x45, 0x52, 0x10, 0x9c, 0x01, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x47, 0x50, 0x4c,
	0x2d, 0x31, 0x2e, 0x30, 0x2d, 0x6f, 0x72, 0x2d, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x12, 0x25, 0x0a,
	0x0c, 0x47, 0x50, 0x4c, 0x5f, 0x32, 0x5f, 0x30, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x9d, 0x01,
	0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x47, 0x50, 0x4c, 0x2d, 0x32, 0x2e, 0x30, 0x2d,
	0x6f, 0x6e, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x10, 0x47, 0x50, 0x4c, 0x5f, 0x32, 0x5f, 0x30, 0x5f,
	0x4f, 0x52, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x52, 0x10, 0x9e, 0x01, 0x1a, 0x16, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x10, 0x47, 0x50, 0x4c, 0x2d, 0x32, 0x2e, 0x30, 0x2d, 0x6f, 0x72, 0x2d, 0x6c, 0x61,
	0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0c, 0x47, 0x50, 0x4c, 0x5f, 0x33, 0x5f, 0x30, 0x5f, 0x4f,
	0x4e, 0x4c, 0x59, 0x10, 0x9f, 0x01, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x47, 0x50,
	0x4c, 0x2d, 0x33, 0x2e, 0x30, 0x2d, 0x6f, 0x6e, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x10, 0x47, 0x50,
	0x4c, 0x5f, 0x33, 0x5f, 0x30, 0x5f, 0x4f, 0x52, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x52, 0x10, 0xa0,
	0x01, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x47, 0x50, 0x4c, 0x2d, 0x33, 0x2e, 0x30,
	0x2d, 0x6f, 0x72, 0x2d, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0b, 0x47, 0x5f, 0x53,
	0x4f, 0x41, 0x50, 0x5f, 0x31, 0x5f, 0x33, 0x42, 0x10, 0xa1, 0x01, 0x1a, 0x10, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0a, 0x67, 0x53, 0x4f, 0x41, 0x50, 0x2d, 0x31, 0x2e, 0x33, 0x62, 0x12, 0x28, 0x0a,
	0x0e, 0x48, 0x41, 0x53, 0x4b, 0x45, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10,
	0xa2, 0x01, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x48, 0x61, 0x73, 0x6b, 0x65, 0x6c,
	0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x15, 0x0a, 0x04, 0x48, 0x50, 0x4e, 0x44, 0x10,
	0xa3, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x48, 0x50, 0x4e, 0x44, 0x12, 0x1d,
	0x0a, 0x08, 0x49, 0x42, 0x4d, 0x5f, 0x50, 0x49, 0x42, 0x53, 0x10, 0xa4, 0x01, 0x1a, 0x0e, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x08, 0x49, 0x42, 0x4d, 0x2d, 0x70, 0x69, 0x62, 0x73, 0x12, 0x13, 0x0a,
	0x03, 0x49, 0x43, 0x55, 0x10, 0xa5, 0x01, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x49,
	0x43, 0x55, 0x12, 0x13, 0x0a, 0x03, 0x49, 0x4a, 0x47, 0x10, 0xa6, 0x01, 0x1a, 0x09, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x03, 0x49, 0x4a, 0x47, 0x12, 0x24, 0x0a, 0x0c, 0x49, 0x4d, 0x41, 0x47, 0x45,
	0x5f, 0x4d, 0x41, 0x47, 0x49, 0x43, 0x4b, 0x10, 0xa7, 0x01, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x6b, 0x12, 0x1a, 0x0a,
	0x07, 0x49, 0x5f, 0x4d, 0x41, 0x54, 0x49, 0x58, 0x10, 0xa8, 0x01, 0x1a, 0x0c, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x06, 0x69, 0x4d, 0x61, 0x74, 0x69, 0x78, 0x12, 0x19, 0x0a, 0x06, 0x49, 0x4d, 0x4c,
	0x49, 0x42, 0x32, 0x10, 0xa9, 0x01, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x49, 0x6d,
	0x6c, 0x69, 0x62, 0x32, 0x12, 0x1d, 0x0a, 0x08, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x5a, 0x49, 0x50,
	0x10, 0xaa, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x49, 0x6e, 0x66, 0x6f, 0x2d,
	0x5a, 0x49, 0x50, 0x12, 0x21, 0x0a, 0x0a, 0x49, 0x4e, 0x54, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x50,
	0x49, 0x10, 0xab, 0x01, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x49, 0x6e, 0x74, 0x65,
	0x6c, 0x2d, 0x41, 0x43, 0x50, 0x49, 0x12, 0x17, 0x0a, 0x05, 0x49, 0x4e, 0x54, 0x45, 0x4c, 0x10,
	0xac, 0x01, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x12,
	0x27, 0x0a, 0x0d, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x31, 0x5f, 0x30,
	0x10, 0xad, 0x01, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x62, 0x61, 0x73, 0x65, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x13, 0x0a, 0x03, 0x49, 0x50, 0x41, 0x10,
	0xae, 0x01, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x49, 0x50, 0x41, 0x12, 0x1b, 0x0a,
	0x07, 0x49, 0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0xaf, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x07, 0x49, 0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x13, 0x0a, 0x03, 0x49, 0x53,
	0x43, 0x10, 0xb0, 0x01, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x49, 0x53, 0x43, 0x12,
	0x22, 0x0a, 0x0b, 0x4a, 0x41, 0x53, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x32, 0x5f, 0x30, 0x10, 0xb1,
	0x01, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x4a, 0x61, 0x73, 0x50, 0x65, 0x72, 0x2d,
	0x32, 0x2e, 0x30, 0x12, 0x15, 0x0a, 0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0xb2, 0x01, 0x1a, 0x0a,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x1b, 0x0a, 0x07, 0x4c, 0x41,
	0x4c, 0x5f, 0x31, 0x5f, 0x32, 0x10, 0xb3, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07,
	0x4c, 0x41, 0x4c, 0x2d, 0x31, 0x2e, 0x32, 0x12, 0x1b, 0x0a, 0x07, 0x4c, 0x41, 0x4c, 0x5f, 0x31,
	0x5f, 0x33, 0x10, 0xb4, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4c, 0x41, 0x4c,
	0x2d, 0x31, 0x2e, 0x33, 0x12, 0x1b, 0x0a, 0x07, 0x4c, 0x41, 0x54, 0x45, 0x58, 0x32, 0x45, 0x10,
	0xb5, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4c, 0x61, 0x74, 0x65, 0x78, 0x32,
	0x65, 0x12, 0x1f, 0x0a, 0x09, 0x4c, 0x45, 0x50, 0x54, 0x4f, 0x4e, 0x49, 0x43, 0x41, 0x10, 0xb6,
	0x01, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x4c, 0x65, 0x70, 0x74, 0x6f, 0x6e, 0x69,
	0x63, 0x61, 0x12, 0x27, 0x0a, 0x0d, 0x4c, 0x47, 0x50, 0x4c, 0x5f, 0x32, 0x5f, 0x30, 0x5f, 0x4f,
	0x4e, 0x4c, 0x59, 0x10, 0xb7, 0x01, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x4c, 0x47,
	0x50, 0x4c, 0x2d, 0x32, 0x2e, 0x30, 0x2d, 0x6f, 0x6e, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x11, 0x4c,
	0x47, 0x50, 0x4c, 0x5f, 0x32, 0x5f, 0x30, 0x5f, 0x4f, 0x52, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x52,
	0x10, 0xb8, 0x01, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x4c, 0x47, 0x50, 0x4c, 0x2d,
	0x32, 0x2e, 0x30, 0x2d, 0x6f, 0x72, 0x2d, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0d,
	0x4c, 0x47, 0x50, 0x4c, 0x5f, 0x32, 0x5f, 0x31, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0xb9, 0x01,
	0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x4c, 0x47, 0x50, 0x4c, 0x2d, 0x32, 0x2e, 0x31,
	0x2d, 0x6f, 0x6e, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x11, 0x4c, 0x47, 0x50, 0x4c, 0x5f, 0x32, 0x5f,
	0x31, 0x5f, 0x4f, 0x52, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x52, 0x10, 0xba, 0x01, 0x1a, 0x17, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x11, 0x4c, 0x47, 0x50, 0x4c, 0x2d, 0x32, 0x2e, 0x31, 0x2d, 0x6f, 0x72,
	0x2d, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0d, 0x4c, 0x47, 0x50, 0x4c, 0x5f, 0x33,
	0x5f, 0x30, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0xbb, 0x01, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0d, 0x4c, 0x47, 0x50, 0x4c, 0x2d, 0x33, 0x2e, 0x30, 0x2d, 0x6f, 0x6e, 0x6c, 0x79, 0x12,
	0x2f, 0x0a, 0x11, 0x4c, 0x47, 0x50, 0x4c, 0x5f, 0x33, 0x5f, 0x30, 0x5f, 0x4f, 0x52, 0x5f, 0x4c,
	0x41, 0x54, 0x45, 0x52, 0x10, 0xbc, 0x01, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x4c,
	0x47, 0x50, 0x4c, 0x2d, 0x33, 0x2e, 0x30, 0x2d, 0x6f, 0x72, 0x2d, 0x6c, 0x61, 0x74, 0x65, 0x72,
	0x12, 0x19, 0x0a, 0x06, 0x4c, 0x47, 0x50, 0x4c, 0x4c, 0x52, 0x10, 0xbd, 0x01, 0x1a, 0x0c, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x06, 0x4c, 0x47, 0x50, 0x4c, 0x4c, 0x52, 0x12, 0x19, 0x0a, 0x06, 0x4c,
	0x49, 0x42, 0x50, 0x4e, 0x47, 0x10, 0xbe, 0x01, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06,
	0x4c, 0x69, 0x62, 0x70, 0x6e, 0x67, 0x12, 0x0c, 0x0a, 0x07, 0x4c, 0x49, 0x42, 0x54, 0x49, 0x46,
	0x46, 0x10, 0xbf, 0x01, 0x12, 0x25, 0x0a, 0x0d, 0x4c, 0x49, 0x5f, 0x4c, 0x49, 0x5f, 0x51, 0x5f,
	0x50, 0x5f, 0x31, 0x5f, 0x31, 0x10, 0xc0, 0x01, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b,
	0x4c, 0x69, 0x4c, 0x69, 0x51, 0x2d, 0x50, 0x2d, 0x31, 0x2e, 0x31, 0x12, 0x25, 0x0a, 0x0d, 0x4c,
	0x49, 0x5f, 0x4c, 0x49, 0x5f, 0x51, 0x5f, 0x52, 0x5f, 0x31, 0x5f, 0x31, 0x10, 0xc1, 0x01, 0x1a,
	0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x4c, 0x69, 0x4c, 0x69, 0x51, 0x2d, 0x52, 0x2d, 0x31,
	0x2e, 0x31, 0x12, 0x2d, 0x0a, 0x11, 0x4c, 0x49, 0x5f, 0x4c, 0x49, 0x5f, 0x51, 0x5f, 0x52, 0x50,
	0x4c, 0x55, 0x53, 0x5f, 0x31, 0x5f, 0x31, 0x10, 0xc2, 0x01, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0f, 0x4c, 0x69, 0x4c, 0x69, 0x51, 0x2d, 0x52, 0x70, 0x6c, 0x75, 0x73, 0x2d, 0x31, 0x2e,
	0x31, 0x12, 0x26, 0x0a, 0x0d, 0x4c, 0x49, 0x4e, 0x55, 0x58, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f,
	0x49, 0x42, 0x10, 0xc3, 0x01, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x4c, 0x69, 0x6e,
	0x75, 0x78, 0x2d, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x42, 0x12, 0x1b, 0x0a, 0x07, 0x4c, 0x50, 0x4c,
	0x5f, 0x31, 0x5f, 0x30, 0x10, 0xc4, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4c,
	0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x1d, 0x0a, 0x08, 0x4c, 0x50, 0x4c, 0x5f, 0x31, 0x5f,
	0x30, 0x32, 0x10, 0xc5, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x4c, 0x50, 0x4c,
	0x2d, 0x31, 0x2e, 0x30, 0x32, 0x12, 0x1d, 0x0a, 0x08, 0x4c, 0x50, 0x50, 0x4c, 0x5f, 0x31, 0x5f,
	0x30, 0x10, 0xc6, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x4c, 0x50, 0x50, 0x4c,
	0x2d, 0x31, 0x2e, 0x30, 0x12, 0x1d, 0x0a, 0x08, 0x4c, 0x50, 0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x31,
	0x10, 0xc7, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x4c, 0x50, 0x50, 0x4c, 0x2d,
	0x31, 0x2e, 0x31, 0x12, 0x1d, 0x0a, 0x08, 0x4c, 0x50, 0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x32, 0x10,
	0xc8, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x4c, 0x50, 0x50, 0x4c, 0x2d, 0x31,
	0x2e, 0x32, 0x12, 0x1f, 0x0a, 0x09, 0x4c, 0x50, 0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x33, 0x41, 0x10,
	0xc9, 0x01, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x4c, 0x50, 0x50, 0x4c, 0x2d, 0x31,
	0x2e, 0x33, 0x61, 0x12, 0x1f, 0x0a, 0x09, 0x4c, 0x50, 0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x33, 0x43,
	0x10, 0xca, 0x01, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x4c, 0x50, 0x50, 0x4c, 0x2d,
	0x31, 0x2e, 0x33, 0x63, 0x12, 0x20, 0x0a, 0x0a, 0x4d, 0x41, 0x4b, 0x45, 0x5f, 0x49, 0x4e, 0x44,
	0x45, 0x58, 0x10, 0xcb, 0x01, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x4d, 0x61, 0x6b,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x06, 0x4d, 0x49, 0x52, 0x5f, 0x4f, 0x53,
	0x10, 0xcc, 0x01, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x4d, 0x69, 0x72, 0x4f, 0x53,
	0x12, 0x17, 0x0a, 0x05, 0x4d, 0x49, 0x54, 0x5f, 0x30, 0x10, 0xcd, 0x01, 0x1a, 0x0b, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x05, 0x4d, 0x49, 0x54, 0x2d, 0x30, 0x12, 0x2b, 0x0a, 0x0f, 0x4d, 0x49, 0x54,
	0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x49, 0x4e, 0x47, 0x10, 0xce, 0x01, 0x1a,
	0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x4d, 0x49, 0x54, 0x2d, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x07, 0x4d, 0x49, 0x54, 0x5f, 0x43, 0x4d,
	0x55, 0x10, 0xcf, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4d, 0x49, 0x54, 0x2d,
	0x43, 0x4d, 0x55, 0x12, 0x1d, 0x0a, 0x08, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x4e, 0x41, 0x10,
	0xd0, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x4d, 0x49, 0x54, 0x2d, 0x65, 0x6e,
	0x6e, 0x61, 0x12, 0x1b, 0x0a, 0x07, 0x4d, 0x49, 0x54, 0x5f, 0x46, 0x45, 0x48, 0x10, 0xd1, 0x01,
	0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4d, 0x49, 0x54, 0x2d, 0x66, 0x65, 0x68, 0x12,
	0x13, 0x0a, 0x03, 0x4d, 0x49, 0x54, 0x10, 0xd2, 0x01, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x03, 0x4d, 0x49, 0x54, 0x12, 0x19, 0x0a, 0x06, 0x4d, 0x49, 0x54, 0x4e, 0x46, 0x41, 0x10, 0xd3,
	0x01, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x4d, 0x49, 0x54, 0x4e, 0x46, 0x41, 0x12,
	0x1d, 0x0a, 0x08, 0x4d, 0x4f, 0x54, 0x4f, 0x53, 0x4f, 0x54, 0x4f, 0x10, 0xd4, 0x01, 0x1a, 0x0e,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x4d, 0x6f, 0x74, 0x6f, 0x73, 0x6f, 0x74, 0x6f, 0x12, 0x0b,
	0x0a, 0x06, 0x4d, 0x50, 0x49, 0x43, 0x48, 0x32, 0x10, 0xd5, 0x01, 0x12, 0x1b, 0x0a, 0x07, 0x4d,
	0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0xd6, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x07, 0x4d, 0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x1b, 0x0a, 0x07, 0x4d, 0x50, 0x4c, 0x5f,
	0x31, 0x5f, 0x31, 0x10, 0xd7, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4d, 0x50,
	0x4c, 0x2d, 0x31, 0x2e, 0x31, 0x12, 0x47, 0x0a, 0x1d, 0x4d, 0x50, 0x4c, 0x5f, 0x32, 0x5f, 0x30,
	0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x50, 0x59, 0x4c, 0x45, 0x46, 0x54, 0x5f, 0x45, 0x58, 0x43,
	0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xd8, 0x01, 0x1a, 0x23, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x1d, 0x4d, 0x50, 0x4c, 0x2d, 0x32, 0x2e, 0x30, 0x2d, 0x6e, 0x6f, 0x2d, 0x63, 0x6f, 0x70, 0x79,
	0x6c, 0x65, 0x66, 0x74, 0x2d, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x07, 0x4d, 0x50, 0x4c, 0x5f, 0x32, 0x5f, 0x30, 0x10, 0xd9, 0x01, 0x1a, 0x0d, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x07, 0x4d, 0x50, 0x4c, 0x2d, 0x32, 0x2e, 0x30, 0x12, 0x17, 0x0a, 0x05, 0x4d,
	0x53, 0x5f, 0x50, 0x4c, 0x10, 0xda, 0x01, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x4d,
	0x53, 0x2d, 0x50, 0x4c, 0x12, 0x17, 0x0a, 0x05, 0x4d, 0x53, 0x5f, 0x52, 0x4c, 0x10, 0xdb, 0x01,
	0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x4d, 0x53, 0x2d, 0x52, 0x4c, 0x12, 0x15, 0x0a,
	0x04, 0x4d, 0x54, 0x4c, 0x4c, 0x10, 0xdc, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04,
	0x4d, 0x54, 0x4c, 0x4c, 0x12, 0x1b, 0x0a, 0x07, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x53, 0x10,
	0xdd, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x73, 0x12, 0x13, 0x0a, 0x03, 0x4d, 0x55, 0x50, 0x10, 0xde, 0x01, 0x1a, 0x09, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x03, 0x4d, 0x75, 0x70, 0x12, 0x1d, 0x0a, 0x08, 0x4e, 0x41, 0x53, 0x41, 0x5f, 0x31,
	0x5f, 0x33, 0x10, 0xdf, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x4e, 0x41, 0x53,
	0x41, 0x2d, 0x31, 0x2e, 0x33, 0x12, 0x19, 0x0a, 0x06, 0x4e, 0x41, 0x55, 0x4d, 0x45, 0x4e, 0x10,
	0xe0, 0x01, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x4e, 0x61, 0x75, 0x6d, 0x65, 0x6e,
	0x12, 0x1d, 0x0a, 0x08, 0x4e, 0x42, 0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0xe1, 0x01, 0x1a,
	0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x4e, 0x42, 0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x12,
	0x15, 0x0a, 0x04, 0x4e, 0x43, 0x53, 0x41, 0x10, 0xe2, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x04, 0x4e, 0x43, 0x53, 0x41, 0x12, 0x1d, 0x0a, 0x08, 0x4e, 0x45, 0x54, 0x5f, 0x53, 0x4e,
	0x4d, 0x50, 0x10, 0xe3, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x4e, 0x65, 0x74,
	0x2d, 0x53, 0x4e, 0x4d, 0x50, 0x12, 0x1a, 0x0a, 0x07, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x44, 0x46,
	0x10, 0xe4, 0x01, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x4e, 0x65, 0x74, 0x43, 0x44,
	0x46, 0x12, 0x1d, 0x0a, 0x08, 0x4e, 0x45, 0x57, 0x53, 0x4c, 0x45, 0x54, 0x52, 0x10, 0xe5, 0x01,
	0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x72,
	0x12, 0x15, 0x0a, 0x04, 0x4e, 0x47, 0x50, 0x4c, 0x10, 0xe6, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x04, 0x4e, 0x47, 0x50, 0x4c, 0x12, 0x1d, 0x0a, 0x08, 0x4e, 0x4c, 0x4f, 0x44, 0x5f,
	0x31, 0x5f, 0x30, 0x10, 0xe7, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x4e, 0x4c,
	0x4f, 0x44, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x15, 0x0a, 0x04, 0x4e, 0x4c, 0x50, 0x4c, 0x10, 0xe8,
	0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x4e, 0x4c, 0x50, 0x4c, 0x12, 0x17, 0x0a,
	0x05, 0x4e, 0x4f, 0x4b, 0x49, 0x41, 0x10, 0xe9, 0x01, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x05, 0x4e, 0x6f, 0x6b, 0x69, 0x61, 0x12, 0x15, 0x0a, 0x04, 0x4e, 0x4f, 0x53, 0x4c, 0x10, 0xea,
	0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x4e, 0x4f, 0x53, 0x4c, 0x12, 0x17, 0x0a,
	0x05, 0x4e, 0x4f, 0x57, 0x45, 0x42, 0x10, 0xeb, 0x01, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x05, 0x4e, 0x6f, 0x77, 0x65, 0x62, 0x12, 0x1b, 0x0a, 0x07, 0x4e, 0x50, 0x4c, 0x5f, 0x31, 0x5f,
	0x30, 0x10, 0xec, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4e, 0x50, 0x4c, 0x2d,
	0x31, 0x2e, 0x30, 0x12, 0x1b, 0x0a, 0x07, 0x4e, 0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x31, 0x10, 0xed,
	0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4e, 0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x31,
	0x12, 0x1f, 0x0a, 0x09, 0x4e, 0x50, 0x4f, 0x53, 0x4c, 0x5f, 0x33, 0x5f, 0x30, 0x10, 0xee, 0x01,
	0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x4e, 0x50, 0x4f, 0x53, 0x4c, 0x2d, 0x33, 0x2e,
	0x30, 0x12, 0x13, 0x0a, 0x03, 0x4e, 0x52, 0x4c, 0x10, 0xef, 0x01, 0x1a, 0x09, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x03, 0x4e, 0x52, 0x4c, 0x12, 0x13, 0x0a, 0x03, 0x4e, 0x54, 0x50, 0x10, 0xf0, 0x01,
	0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x4e, 0x54, 0x50, 0x12, 0x1b, 0x0a, 0x07, 0x4f,
	0x43, 0x43, 0x54, 0x5f, 0x50, 0x4c, 0x10, 0xf1, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x07, 0x4f, 0x43, 0x43, 0x54, 0x2d, 0x50, 0x4c, 0x12, 0x1d, 0x0a, 0x08, 0x4f, 0x43, 0x4c, 0x43,
	0x5f, 0x32, 0x5f, 0x30, 0x10, 0xf2, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x4f,
	0x43, 0x4c, 0x43, 0x2d, 0x32, 0x2e, 0x30, 0x12, 0x1f, 0x0a, 0x0a, 0x4f, 0x5f, 0x44, 0x42, 0x5f,
	0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0xf3, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08,
	0x4f, 0x44, 0x62, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x1b, 0x0a, 0x07, 0x4f, 0x46, 0x4c, 0x5f,
	0x31, 0x5f, 0x30, 0x10, 0xf4, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4f, 0x46,
	0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x1b, 0x0a, 0x07, 0x4f, 0x46, 0x4c, 0x5f, 0x31, 0x5f, 0x31,
	0x10, 0xf5, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4f, 0x46, 0x4c, 0x2d, 0x31,
	0x2e, 0x31, 0x12, 0x17, 0x0a, 0x05, 0x4f, 0x47, 0x54, 0x53, 0x4c, 0x10, 0xf6, 0x01, 0x1a, 0x0b,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x4f, 0x47, 0x54, 0x53, 0x4c, 0x12, 0x1f, 0x0a, 0x09, 0x4f,
	0x4c, 0x44, 0x41, 0x50, 0x5f, 0x31, 0x5f, 0x31, 0x10, 0xf7, 0x01, 0x1a, 0x0f, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x09, 0x4f, 0x4c, 0x44, 0x41, 0x50, 0x2d, 0x31, 0x2e, 0x31, 0x12, 0x1f, 0x0a, 0x09,
	0x4f, 0x4c, 0x44, 0x41, 0x50, 0x5f, 0x31, 0x5f, 0x32, 0x10, 0xf8, 0x01, 0x1a, 0x0f, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x09, 0x4f, 0x4c, 0x44, 0x41, 0x50, 0x2d, 0x31, 0x2e, 0x32, 0x12, 0x1f, 0x0a,
	0x09, 0x4f, 0x4c, 0x44, 0x41, 0x50, 0x5f, 0x31, 0x5f, 0x33, 0x10, 0xf9, 0x01, 0x1a, 0x0f, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x09, 0x4f, 0x4c, 0x44, 0x41, 0x50, 0x2d, 0x31, 0x2e, 0x33, 0x12, 0x1f,
	0x0a, 0x09, 0x4f, 0x4c, 0x44, 0x41, 0x50, 0x5f, 0x31, 0x5f, 0x34, 0x10, 0xfa, 0x01, 0x1a, 0x0f,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x4f, 0x4c, 0x44, 0x41, 0x50, 0x2d, 0x31, 0x2e, 0x34, 0x12,
	0x23, 0x0a, 0x0b, 0x4f, 0x4c, 0x44, 0x41, 0x50, 0x5f, 0x32, 0x5f, 0x30, 0x5f, 0x31, 0x10, 0xfb,
	0x01, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x4f, 0x4c, 0x44, 0x41, 0x50, 0x2d, 0x32,
	0x2e, 0x30, 0x2e, 0x31, 0x12, 0x1f, 0x0a, 0x09, 0x4f, 0x4c, 0x44, 0x41, 0x50, 0x5f, 0x32, 0x5f,
	0x30, 0x10, 0xfc, 0x01, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x4f, 0x4c, 0x44, 0x41,
	0x50, 0x2d, 0x32, 0x2e, 0x30, 0x12, 0x1f, 0x0a, 0x09, 0x4f, 0x4c, 0x44, 0x41, 0x50, 0x5f, 0x32,
	0x5f, 0x31, 0x10, 0xfd, 0x01, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x4f, 0x4c, 0x44,
	0x41, 0x50, 0x2d, 0x32, 0x2e, 0x31, 0x12, 0x23, 0x0a, 0x0b, 0x4f, 0x4c, 0x44, 0x41, 0x50, 0x5f,
	0x32, 0x5f, 0x32, 0x5f, 0x31, 0x10, 0xfe, 0x01, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b,
	0x4f, 0x4c, 0x44, 0x41, 0x50, 0x2d, 0x32, 0x2e, 0x32, 0x2e, 0x31, 0x12, 0x23, 0x0a, 0x0b, 0x4f,
	0x4c, 0x44, 0x41, 0x50, 0x5f, 0x32, 0x5f, 0x32, 0x5f, 0x32, 0x10, 0xff, 0x01, 0x1a, 0x11, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x4f, 0x4c, 0x44, 0x41, 0x50, 0x2d, 0x32, 0x2e, 0x32, 0x2e, 0x32,
	0x12, 0x1f, 0x0a, 0x09, 0x4f, 0x4c, 0x44, 0x41, 0x50, 0x5f, 0x32, 0x5f, 0x32, 0x10, 0x80, 0x02,
	0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x4f, 0x4c, 0x44, 0x41, 0x50, 0x2d, 0x32, 0x2e,
	0x32, 0x12, 0x1f, 0x0a, 0x09, 0x4f, 0x4c, 0x44, 0x41, 0x50, 0x5f, 0x32, 0x5f, 0x33, 0x10, 0x81,
	0x02, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x4f, 0x4c, 0x44, 0x41, 0x50, 0x2d, 0x32,
	0x2e, 0x33, 0x12, 0x1f, 0x0a, 0x09, 0x4f, 0x4c, 0x44, 0x41, 0x50, 0x5f, 0x32, 0x5f, 0x34, 0x10,
	0x82, 0x02, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x4f, 0x4c, 0x44, 0x41, 0x50, 0x2d,
	0x32, 0x2e, 0x34, 0x12, 0x1f, 0x0a, 0x09, 0x4f, 0x4c, 0x44, 0x41, 0x50, 0x5f, 0x32, 0x5f, 0x35,
	0x10, 0x83, 0x02, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x4f, 0x4c, 0x44, 0x41, 0x50,
	0x2d, 0x32, 0x2e, 0x35, 0x12, 0x1f, 0x0a, 0x09, 0x4f, 0x4c, 0x44, 0x41, 0x50, 0x5f, 0x32, 0x5f,
	0x36, 0x10, 0x84, 0x02, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x4f, 0x4c, 0x44, 0x41,
	0x50, 0x2d, 0x32, 0x2e, 0x36, 0x12, 0x1f, 0x0a, 0x09, 0x4f, 0x4c, 0x44, 0x41, 0x50, 0x5f, 0x32,
	0x5f, 0x37, 0x10, 0x85, 0x02, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x4f, 0x4c, 0x44,
	0x41, 0x50, 0x2d, 0x32, 0x2e, 0x37, 0x12, 0x1f, 0x0a, 0x09, 0x4f, 0x4c, 0x44, 0x41, 0x50, 0x5f,
	0x32, 0x5f, 0x38, 0x10, 0x86, 0x02, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x4f, 0x4c,
	0x44, 0x41, 0x50, 0x2d, 0x32, 0x2e, 0x38, 0x12, 0x13, 0x0a, 0x03, 0x4f, 0x4d, 0x4c, 0x10, 0x87,
	0x02, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x4f, 0x4d, 0x4c, 0x12, 0x1c, 0x0a, 0x08,
	0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x53, 0x53, 0x4c, 0x10, 0x88, 0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x07, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x53, 0x4c, 0x12, 0x1b, 0x0a, 0x07, 0x4f, 0x50,
	0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x89, 0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07,
	0x4f, 0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x23, 0x0a, 0x0b, 0x4f, 0x53, 0x45, 0x54, 0x5f,
	0x50, 0x4c, 0x5f, 0x32, 0x5f, 0x31, 0x10, 0x8a, 0x02, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0b, 0x4f, 0x53, 0x45, 0x54, 0x2d, 0x50, 0x4c, 0x2d, 0x32, 0x2e, 0x31, 0x12, 0x1b, 0x0a, 0x07,
	0x4f, 0x53, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x8b, 0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x07, 0x4f, 0x53, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x1b, 0x0a, 0x07, 0x4f, 0x53, 0x4c,
	0x5f, 0x31, 0x5f, 0x31, 0x10, 0x8c, 0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4f,
	0x53, 0x4c, 0x2d, 0x31, 0x2e, 0x31, 0x12, 0x1b, 0x0a, 0x07, 0x4f, 0x53, 0x4c, 0x5f, 0x32, 0x5f,
	0x30, 0x10, 0x8d, 0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4f, 0x53, 0x4c, 0x2d,
	0x32, 0x2e, 0x30, 0x12, 0x1b, 0x0a, 0x07, 0x4f, 0x53, 0x4c, 0x5f, 0x32, 0x5f, 0x31, 0x10, 0x8e,
	0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4f, 0x53, 0x4c, 0x2d, 0x32, 0x2e, 0x31,
	0x12, 0x1b, 0x0a, 0x07, 0x4f, 0x53, 0x4c, 0x5f, 0x33, 0x5f, 0x30, 0x10, 0x8f, 0x02, 0x1a, 0x0d,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4f, 0x53, 0x4c, 0x2d, 0x33, 0x2e, 0x30, 0x12, 0x1d, 0x0a,
	0x08, 0x50, 0x44, 0x44, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x90, 0x02, 0x1a, 0x0e, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x08, 0x50, 0x44, 0x44, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x1b, 0x0a, 0x07,
	0x50, 0x48, 0x50, 0x5f, 0x33, 0x5f, 0x30, 0x10, 0x91, 0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x07, 0x50, 0x48, 0x50, 0x2d, 0x33, 0x2e, 0x30, 0x12, 0x1d, 0x0a, 0x08, 0x50, 0x48, 0x50,
	0x5f, 0x33, 0x5f, 0x30, 0x31, 0x10, 0x92, 0x02, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08,
	0x50, 0x48, 0x50, 0x2d, 0x33, 0x2e, 0x30, 0x31, 0x12, 0x19, 0x0a, 0x06, 0x50, 0x4c, 0x45, 0x58,
	0x55, 0x53, 0x10, 0x93, 0x02, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x50, 0x6c, 0x65,
	0x78, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0b, 0x50, 0x4f, 0x53, 0x54, 0x47, 0x52, 0x45, 0x5f, 0x53,
	0x51, 0x4c, 0x10, 0x94, 0x02, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x50, 0x6f, 0x73,
	0x74, 0x67, 0x72, 0x65, 0x53, 0x51, 0x4c, 0x12, 0x0b, 0x0a, 0x06, 0x50, 0x53, 0x46, 0x52, 0x41,
	0x47, 0x10, 0x95, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x50, 0x53, 0x55, 0x54, 0x49, 0x4c, 0x53, 0x10,
	0x96, 0x02, 0x12, 0x21, 0x0a, 0x0a, 0x50, 0x59, 0x54, 0x48, 0x4f, 0x4e, 0x5f, 0x32, 0x5f, 0x30,
	0x10, 0x97, 0x02, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x50, 0x79, 0x74, 0x68, 0x6f,
	0x6e, 0x2d, 0x32, 0x2e, 0x30, 0x12, 0x17, 0x0a, 0x05, 0x51, 0x48, 0x55, 0x4c, 0x4c, 0x10, 0x98,
	0x02, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x51, 0x68, 0x75, 0x6c, 0x6c, 0x12, 0x1b,
	0x0a, 0x07, 0x51, 0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x99, 0x02, 0x1a, 0x0d, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x07, 0x51, 0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x17, 0x0a, 0x05, 0x52,
	0x44, 0x49, 0x53, 0x43, 0x10, 0x9a, 0x02, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x52,
	0x64, 0x69, 0x73, 0x63, 0x12, 0x23, 0x0a, 0x0c, 0x52, 0x5f, 0x48, 0x45, 0x5f, 0x43, 0x4f, 0x53,
	0x5f, 0x31, 0x5f, 0x31, 0x10, 0x9b, 0x02, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x52,
	0x48, 0x65, 0x43, 0x6f, 0x73, 0x2d, 0x31, 0x2e, 0x31, 0x12, 0x1b, 0x0a, 0x07, 0x52, 0x50, 0x4c,
	0x5f, 0x31, 0x5f, 0x31, 0x10, 0x9c, 0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x52,
	0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x31, 0x12, 0x1b, 0x0a, 0x07, 0x52, 0x50, 0x4c, 0x5f, 0x31, 0x5f,
	0x35, 0x10, 0x9d, 0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x52, 0x50, 0x4c, 0x2d,
	0x31, 0x2e, 0x35, 0x12, 0x1d, 0x0a, 0x08, 0x52, 0x50, 0x53, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10,
	0x9e, 0x02, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x52, 0x50, 0x53, 0x4c, 0x2d, 0x31,
	0x2e, 0x30, 0x12, 0x19, 0x0a, 0x06, 0x52, 0x53, 0x41, 0x5f, 0x4d, 0x44, 0x10, 0x9f, 0x02, 0x1a,
	0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x52, 0x53, 0x41, 0x2d, 0x4d, 0x44, 0x12, 0x17, 0x0a,
	0x05, 0x52, 0x53, 0x43, 0x50, 0x4c, 0x10, 0xa0, 0x02, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x05, 0x52, 0x53, 0x43, 0x50, 0x4c, 0x12, 0x15, 0x0a, 0x04, 0x52, 0x55, 0x42, 0x59, 0x10, 0xa1,
	0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x52, 0x75, 0x62, 0x79, 0x12, 0x19, 0x0a,
	0x06, 0x53, 0x41, 0x58, 0x5f, 0x50, 0x44, 0x10, 0xa2, 0x02, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x06, 0x53, 0x41, 0x58, 0x2d, 0x50, 0x44, 0x12, 0x1b, 0x0a, 0x07, 0x53, 0x41, 0x58, 0x50,
	0x41, 0x54, 0x48, 0x10, 0xa3, 0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x53, 0x61,
	0x78, 0x70, 0x61, 0x74, 0x68, 0x12, 0x15, 0x0a, 0x04, 0x53, 0x43, 0x45, 0x41, 0x10, 0xa4, 0x02,
	0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x53, 0x43, 0x45, 0x41, 0x12, 0x1d, 0x0a, 0x08,
	0x53, 0x45, 0x4e, 0x44, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0xa5, 0x02, 0x1a, 0x0e, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x09, 0x53,
	0x47, 0x49, 0x5f, 0x42, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0xa6, 0x02, 0x1a, 0x0f, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x09, 0x53, 0x47, 0x49, 0x2d, 0x42, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x1f, 0x0a, 0x09,
	0x53, 0x47, 0x49, 0x5f, 0x42, 0x5f, 0x31, 0x5f, 0x31, 0x10, 0xa7, 0x02, 0x1a, 0x0f, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x09, 0x53, 0x47, 0x49, 0x2d, 0x42, 0x2d, 0x31, 0x2e, 0x31, 0x12, 0x1f, 0x0a,
	0x09, 0x53, 0x47, 0x49, 0x5f, 0x42, 0x5f, 0x32, 0x5f, 0x30, 0x10, 0xa8, 0x02, 0x1a, 0x0f, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x09, 0x53, 0x47, 0x49, 0x2d, 0x42, 0x2d, 0x32, 0x2e, 0x30, 0x12, 0x20,
	0x0a, 0x0a, 0x53, 0x49, 0x4d, 0x5f, 0x50, 0x4c, 0x5f, 0x32, 0x5f, 0x30, 0x10, 0xa9, 0x02, 0x1a,
	0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x53, 0x69, 0x6d, 0x50, 0x4c, 0x2d, 0x32, 0x2e, 0x30,
	0x12, 0x1f, 0x0a, 0x09, 0x53, 0x49, 0x53, 0x53, 0x4c, 0x5f, 0x31, 0x5f, 0x32, 0x10, 0xaa, 0x02,
	0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x53, 0x49, 0x53, 0x53, 0x4c, 0x2d, 0x31, 0x2e,
	0x32, 0x12, 0x17, 0x0a, 0x05, 0x53, 0x49, 0x53, 0x53, 0x4c, 0x10, 0xab, 0x02, 0x1a, 0x0b, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x05, 0x53, 0x49, 0x53, 0x53, 0x4c, 0x12, 0x1f, 0x0a, 0x09, 0x53, 0x4c,
	0x45, 0x45, 0x50, 0x59, 0x43, 0x41, 0x54, 0x10, 0xac, 0x02, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x09, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x79, 0x63, 0x61, 0x74, 0x12, 0x17, 0x0a, 0x05, 0x53,
	0x4d, 0x4c, 0x4e, 0x4a, 0x10, 0xad, 0x02, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x53,
	0x4d, 0x4c, 0x4e, 0x4a, 0x12, 0x17, 0x0a, 0x05, 0x53, 0x4d, 0x50, 0x50, 0x4c, 0x10, 0xae, 0x02,
	0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x53, 0x4d, 0x50, 0x50, 0x4c, 0x12, 0x15, 0x0a,
	0x04, 0x53, 0x4e, 0x49, 0x41, 0x10, 0xaf, 0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04,
	0x53, 0x4e, 0x49, 0x41, 0x12, 0x21, 0x0a, 0x0a, 0x53, 0x50, 0x45, 0x4e, 0x43, 0x45, 0x52, 0x5f,
	0x38, 0x36, 0x10, 0xb0, 0x02, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x53, 0x70, 0x65,
	0x6e, 0x63, 0x65, 0x72, 0x2d, 0x38, 0x36, 0x12, 0x21, 0x0a, 0x0a, 0x53, 0x50, 0x45, 0x4e, 0x43,
	0x45, 0x52, 0x5f, 0x39, 0x34, 0x10, 0xb1, 0x02, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a,
	0x53, 0x70, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x2d, 0x39, 0x34, 0x12, 0x21, 0x0a, 0x0a, 0x53, 0x50,
	0x45, 0x4e, 0x43, 0x45, 0x52, 0x5f, 0x39, 0x39, 0x10, 0xb2, 0x02, 0x1a, 0x10, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0a, 0x53, 0x70, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x2d, 0x39, 0x39, 0x12, 0x1b, 0x0a,
	0x07, 0x53, 0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0xb3, 0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x07, 0x53, 0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x2a, 0x0a, 0x0f, 0x53, 0x55,
	0x47, 0x41, 0x52, 0x5f, 0x43, 0x52, 0x4d, 0x5f, 0x31, 0x5f, 0x31, 0x5f, 0x33, 0x10, 0xb4, 0x02,
	0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x53, 0x75, 0x67, 0x61, 0x72, 0x43, 0x52, 0x4d,
	0x2d, 0x31, 0x2e, 0x31, 0x2e, 0x33, 0x12, 0x13, 0x0a, 0x03, 0x53, 0x57, 0x4c, 0x10, 0xb5, 0x02,
	0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x53, 0x57, 0x4c, 0x12, 0x13, 0x0a, 0x03, 0x54,
	0x43, 0x4c, 0x10, 0xb6, 0x02, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x54, 0x43, 0x4c,
	0x12, 0x25, 0x0a, 0x0c, 0x54, 0x43, 0x50, 0x5f, 0x57, 0x52, 0x41, 0x50, 0x50, 0x45, 0x52, 0x53,
	0x10, 0xb7, 0x02, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x54, 0x43, 0x50, 0x2d, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x06, 0x54, 0x5f, 0x4d, 0x41, 0x54,
	0x45, 0x10, 0xb8, 0x02, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x54, 0x4d, 0x61, 0x74,
	0x65, 0x12, 0x21, 0x0a, 0x0a, 0x54, 0x4f, 0x52, 0x51, 0x55, 0x45, 0x5f, 0x31, 0x5f, 0x31, 0x10,
	0xb9, 0x02, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x54, 0x4f, 0x52, 0x51, 0x55, 0x45,
	0x2d, 0x31, 0x2e, 0x31, 0x12, 0x15, 0x0a, 0x04, 0x54, 0x4f, 0x53, 0x4c, 0x10, 0xba, 0x02, 0x1a,
	0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x54, 0x4f, 0x53, 0x4c, 0x12, 0x2d, 0x0a, 0x10, 0x55,
	0x4e, 0x49, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x46, 0x53, 0x5f, 0x32, 0x30, 0x31, 0x35, 0x10,
	0xbb, 0x02, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x55, 0x6e, 0x69, 0x63, 0x6f, 0x64,
	0x65, 0x2d, 0x44, 0x46, 0x53, 0x2d, 0x32, 0x30, 0x31, 0x35, 0x12, 0x2d, 0x0a, 0x10, 0x55, 0x4e,
	0x49, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x46, 0x53, 0x5f, 0x32, 0x30, 0x31, 0x36, 0x10, 0xbc,
	0x02, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x55, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65,
	0x2d, 0x44, 0x46, 0x53, 0x2d, 0x32, 0x30, 0x31, 0x36, 0x12, 0x23, 0x0a, 0x0b, 0x55, 0x4e, 0x49,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x4f, 0x55, 0x10, 0xbd, 0x02, 0x1a, 0x11, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0b, 0x55, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x54, 0x4f, 0x55, 0x12, 0x1f,
	0x0a, 0x09, 0x55, 0x4e, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x10, 0xbe, 0x02, 0x1a, 0x0f,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x55, 0x6e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12,
	0x1b, 0x0a, 0x07, 0x55, 0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0xbf, 0x02, 0x1a, 0x0d, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x07, 0x55, 0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x13, 0x0a, 0x03,
	0x56, 0x49, 0x4d, 0x10, 0xc0, 0x02, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x56, 0x69,
	0x6d, 0x12, 0x1b, 0x0a, 0x07, 0x56, 0x4f, 0x53, 0x54, 0x52, 0x4f, 0x4d, 0x10, 0xc1, 0x02, 0x1a,
	0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x56, 0x4f, 0x53, 0x54, 0x52, 0x4f, 0x4d, 0x12, 0x1b,
	0x0a, 0x07, 0x56, 0x53, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0xc2, 0x02, 0x1a, 0x0d, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x07, 0x56, 0x53, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x25, 0x0a, 0x0c, 0x57,
	0x33, 0x43, 0x5f, 0x31, 0x39, 0x39, 0x38, 0x30, 0x37, 0x32, 0x30, 0x10, 0xc3, 0x02, 0x1a, 0x12,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x57, 0x33, 0x43, 0x2d, 0x31, 0x39, 0x39, 0x38, 0x30, 0x37,
	0x32, 0x30, 0x12, 0x25, 0x0a, 0x0c, 0x57, 0x33, 0x43, 0x5f, 0x32, 0x30, 0x31, 0x35, 0x30, 0x35,
	0x31, 0x33, 0x10, 0xc4, 0x02, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x57, 0x33, 0x43,
	0x2d, 0x32, 0x30, 0x31, 0x35, 0x30, 0x35, 0x31, 0x33, 0x12, 0x13, 0x0a, 0x03, 0x57, 0x33, 0x43,
	0x10, 0xc5, 0x02, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x57, 0x33, 0x43, 0x12, 0x21,
	0x0a, 0x0a, 0x57, 0x41, 0x54, 0x43, 0x4f, 0x4d, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0xc6, 0x02, 0x1a,
	0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x57, 0x61, 0x74, 0x63, 0x6f, 0x6d, 0x2d, 0x31, 0x2e,
	0x30, 0x12, 0x19, 0x0a, 0x06, 0x57, 0x53, 0x55, 0x49, 0x50, 0x41, 0x10, 0xc7, 0x02, 0x1a, 0x0c,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x57, 0x73, 0x75, 0x69, 0x70, 0x61, 0x12, 0x17, 0x0a, 0x05,
	0x57, 0x54, 0x46, 0x50, 0x4c, 0x10, 0xc8, 0x02, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05,
	0x57, 0x54, 0x46, 0x50, 0x4c, 0x12, 0x13, 0x0a, 0x03, 0x58, 0x31, 0x31, 0x10, 0xc9, 0x02, 0x1a,
	0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x58, 0x31, 0x31, 0x12, 0x17, 0x0a, 0x05, 0x58, 0x45,
	0x52, 0x4f, 0x58, 0x10, 0xca, 0x02, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x58, 0x65,
	0x72, 0x6f, 0x78, 0x12, 0x24, 0x0a, 0x0c, 0x58, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x38, 0x36, 0x5f,
	0x31, 0x5f, 0x31, 0x10, 0xcb, 0x02, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x58, 0x46,
	0x72, 0x65, 0x65, 0x38, 0x36, 0x2d, 0x31, 0x2e, 0x31, 0x12, 0x0b, 0x0a, 0x06, 0x58, 0x49, 0x4e,
	0x45, 0x54, 0x44, 0x10, 0xcc, 0x02, 0x12, 0x15, 0x0a, 0x04, 0x58, 0x4e, 0x45, 0x54, 0x10, 0xcd,
	0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x58, 0x6e, 0x65, 0x74, 0x12, 0x08, 0x0a,
	0x03, 0x58, 0x50, 0x50, 0x10, 0xce, 0x02, 0x12, 0x18, 0x0a, 0x06, 0x58, 0x5f, 0x53, 0x4b, 0x41,
	0x54, 0x10, 0xcf, 0x02, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x58, 0x53, 0x6b, 0x61,
	0x74, 0x12, 0x1b, 0x0a, 0x07, 0x59, 0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0xd0, 0x02, 0x1a,
	0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x59, 0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x1b,
	0x0a, 0x07, 0x59, 0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x31, 0x10, 0xd1, 0x02, 0x1a, 0x0d, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x07, 0x59, 0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x31, 0x12, 0x13, 0x0a, 0x03, 0x5a,
	0x45, 0x44, 0x10, 0xd2, 0x02, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x5a, 0x65, 0x64,
	0x12, 0x1d, 0x0a, 0x08, 0x5a, 0x45, 0x4e, 0x44, 0x5f, 0x32, 0x5f, 0x30, 0x10, 0xd3, 0x02, 0x1a,
	0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x5a, 0x65, 0x6e, 0x64, 0x2d, 0x32, 0x2e, 0x30, 0x12,
	0x21, 0x0a, 0x0a, 0x5a, 0x49, 0x4d, 0x42, 0x52, 0x41, 0x5f, 0x31, 0x5f, 0x33, 0x10, 0xd4, 0x02,
	0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x5a, 0x69, 0x6d, 0x62, 0x72, 0x61, 0x2d, 0x31,
	0x2e, 0x33, 0x12, 0x21, 0x0a, 0x0a, 0x5a, 0x49, 0x4d, 0x42, 0x52, 0x41, 0x5f, 0x31, 0x5f, 0x34,
	0x10, 0xd5, 0x02, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x5a, 0x69, 0x6d, 0x62, 0x72,
	0x61, 0x2d, 0x31, 0x2e, 0x34, 0x12, 0x19, 0x0a, 0x14, 0x5a, 0x4c, 0x49, 0x42, 0x5f, 0x41, 0x43,
	0x4b, 0x4e, 0x4f, 0x57, 0x4c, 0x45, 0x44, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0xd6, 0x02,
	0x12, 0x15, 0x0a, 0x04, 0x5a, 0x4c, 0x49, 0x42, 0x10, 0xd7, 0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x04, 0x5a, 0x6c, 0x69, 0x62, 0x12, 0x1b, 0x0a, 0x07, 0x5a, 0x50, 0x4c, 0x5f, 0x31,
	0x5f, 0x31, 0x10, 0xd8, 0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x5a, 0x50, 0x4c,
	0x2d, 0x31, 0x2e, 0x31, 0x12, 0x1b, 0x0a, 0x07, 0x5a, 0x50, 0x4c, 0x5f, 0x32, 0x5f, 0x30, 0x10,
	0xd9, 0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x5a, 0x50, 0x4c, 0x2d, 0x32, 0x2e,
	0x30, 0x12, 0x1b, 0x0a, 0x07, 0x5a, 0x50, 0x4c, 0x5f, 0x32, 0x5f, 0x31, 0x10, 0xda, 0x02, 0x1a,
	0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x5a, 0x50, 0x4c, 0x2d, 0x32, 0x2e, 0x31, 0x1a, 0x26,
	0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x73, 0x70, 0x64, 0x78, 0x2d, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x97, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x45, 0x51, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02,
	0x4e, 0x45, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x54, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02,
	0x4c, 0x54, 0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x45, 0x10, 0x05, 0x12, 0x06, 0x0a, 0x02,
	0x4c, 0x45, 0x10, 0x06, 0x12, 0x06, 0x0a, 0x02, 0x53, 0x41, 0x10, 0x07, 0x12, 0x06, 0x0a, 0x02,
	0x45, 0x42, 0x10, 0x08, 0x12, 0x06, 0x0a, 0x02, 0x41, 0x50, 0x10, 0x09, 0x1a, 0x2b, 0x8a, 0x91,
	0xc9, 0xfe, 0x07, 0x25, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2d, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x8b, 0x01, 0x0a, 0x13, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x74, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x10, 0x03, 0x1a, 0x2b, 0x8a, 0x91, 0xc9, 0xfe,
	0x07, 0x25, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2d, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xa2, 0x02, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x8b,
	0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x45, 0x58, 0x41, 0x43, 0x54, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43,
	0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x4f, 0x54,
	0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10, 0x05, 0x12, 0x06, 0x0a, 0x02,
	0x49, 0x4e, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x10, 0x07,
	0x12, 0x09, 0x0a, 0x05, 0x42, 0x45, 0x4c, 0x4f, 0x57, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x41,
	0x42, 0x4f, 0x56, 0x45, 0x10, 0x09, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0a,
	0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x10, 0x0b,
	0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0d, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x0e, 0x12, 0x11, 0x0a, 0x0d,
	0x54, 0x45, 0x58, 0x54, 0x5f, 0x41, 0x44, 0x56, 0x41, 0x4e, 0x43, 0x45, 0x44, 0x10, 0x0f, 0x12,
	0x0b, 0x0a, 0x07, 0x49, 0x54, 0x45, 0x52, 0x41, 0x54, 0x45, 0x10, 0x10, 0x1a, 0x2e, 0x8a, 0x91,
	0xc9, 0xfe, 0x07, 0x28, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2d, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xd6, 0x01, 0x0a,
	0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x55, 0x4d,
	0x42, 0x45, 0x52, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x54,
	0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45,
	0x4e, 0x43, 0x45, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x45, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59,
	0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x52, 0x49, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x10, 0x09, 0x1a, 0x2b, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x25,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2d, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x1c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x78, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f,
	0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x54,
	0x49, 0x43, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x03, 0x1a,
	0x2f, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x29, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x6d, 0x6f, 0x64, 0x65,
	0x22, 0x79, 0x0a, 0x10, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x65, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x41, 0x41, 0x10, 0x01,
	0x12, 0x07, 0x0a, 0x03, 0x44, 0x4e, 0x41, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x4e, 0x41,
	0x10, 0x03, 0x1a, 0x27, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x21, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x10,
	0x53, 0x6c, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x8c, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x0b, 0x4f,
	0x50, 0x45, 0x4e, 0x5f, 0x41, 0x54, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x03, 0x1a, 0x0f, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x41, 0x74, 0x45, 0x6e, 0x64, 0x1a, 0x30, 0x8a,
	0x91, 0xc9, 0xfe, 0x07, 0x2a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2d, 0x73, 0x6c, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22,
	0xaf, 0x01, 0x0a, 0x0e, 0x53, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x55, 0x53, 0x59, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x52, 0x45, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x42,
	0x55, 0x53, 0x59, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x03, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x55, 0x53, 0x59, 0x5f, 0x54, 0x45, 0x4e, 0x54, 0x41, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44,
	0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x1a, 0x24, 0x8a, 0x91, 0xc9,
	0xfe, 0x07, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x80, 0x01, 0x0a, 0x11, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x6b, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41,
	0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45,
	0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x1a, 0x28, 0x8a, 0x91, 0xc9, 0xfe,
	0x07, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x73, 0x6f, 0x72, 0x74, 0x2d, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x80, 0x01, 0x0a, 0x14, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65,
	0x6e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x68, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x50, 0x4f, 0x4f, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x2b, 0x8a, 0x91, 0xc9, 0xfe,
	0x07, 0x25, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2d, 0x63,
	0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x1f, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x6d, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x79, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x54, 0x45, 0x10, 0x02, 0x1a, 0x37, 0x8a,
	0x91, 0xc9, 0xfe, 0x07, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65,
	0x6e, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x12, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x6d, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x97, 0x01,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x53, 0x41, 0x54, 0x49, 0x53, 0x46, 0x41, 0x43,
	0x54, 0x4f, 0x52, 0x59, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45,
	0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x1a, 0x29, 0x8a, 0x91,
	0xc9, 0xfe, 0x07, 0x23, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e,
	0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe3, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xd4, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41,
	0x54, 0x54, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x5f, 0x50,
	0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x51, 0x5f,
	0x52, 0x45, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x41, 0x4c,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x56, 0x41, 0x4c,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x07, 0x1a, 0x3e, 0x8a,
	0x91, 0xc9, 0xfe, 0x07, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x72, 0x0a,
	0x0e, 0x53, 0x74, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x60, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x41, 0x54, 0x53, 0x4f, 0x4e, 0x10, 0x01, 0x12,
	0x09, 0x0a, 0x05, 0x43, 0x52, 0x49, 0x43, 0x4b, 0x10, 0x02, 0x1a, 0x25, 0x8a, 0x91, 0xc9, 0xfe,
	0x07, 0x1f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x64, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x22, 0xb8, 0x01, 0x0a, 0x1b, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x98, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x49, 0x4d, 0x49, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x45, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x4f,
	0x47, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x04, 0x1a, 0x33, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2d, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x91, 0x01, 0x0a,
	0x1d, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x70,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x59, 0x50, 0x45, 0x53, 0x10, 0x02, 0x12, 0x12, 0x0a,
	0x0e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x53, 0x10,
	0x03, 0x1a, 0x2d, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6d, 0x61, 0x70,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x2d, 0x6d, 0x6f, 0x64, 0x65,
	0x22, 0x81, 0x01, 0x0a, 0x19, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61,
	0x70, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x64,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x10, 0x02, 0x1a, 0x28, 0x8a, 0x91, 0xc9, 0xfe,
	0x07, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6d, 0x61, 0x70, 0x2d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d,
	0x6d, 0x6f, 0x64, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x19, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x4d, 0x61, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x7f, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x51, 0x55, 0x45, 0x52, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x50,
	0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x44, 0x10, 0x04, 0x1a, 0x28, 0x8a, 0x91, 0xc9, 0xfe, 0x07,
	0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x6d, 0x61, 0x70, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2d, 0x6d,
	0x6f, 0x64, 0x65, 0x22, 0xe6, 0x01, 0x0a, 0x1e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x4d, 0x61, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x46,
	0x49, 0x52, 0x53, 0x54, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x49,
	0x52, 0x53, 0x54, 0x10, 0x02, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x6e, 0x6f, 0x74,
	0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x03,
	0x12, 0x1c, 0x0a, 0x08, 0x4e, 0x4f, 0x54, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x04, 0x1a, 0x0e,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x6e, 0x6f, 0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x08, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x4f, 0x4e, 0x45, 0x10, 0x05, 0x1a, 0x0e, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x08, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x6f, 0x6e, 0x65, 0x1a, 0x2e, 0x8a, 0x91,
	0xc9, 0xfe, 0x07, 0x28, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6d, 0x61, 0x70, 0x2d, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xa0, 0x01, 0x0a,
	0x1e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x7e, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x53, 0x48, 0x41, 0x52, 0x45, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x41, 0x53,
	0x54, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x05, 0x1a,
	0x2e, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x28, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6d, 0x61, 0x70, 0x2d, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22,
	0xb5, 0x02, 0x0a, 0x19, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x97, 0x02,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x43, 0x4f, 0x50, 0x59, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x52, 0x55, 0x4e,
	0x43, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x53, 0x43, 0x41, 0x50, 0x45,
	0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x41, 0x53, 0x54, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06,
	0x41, 0x50, 0x50, 0x45, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x46, 0x45, 0x52,
	0x45, 0x4e, 0x43, 0x45, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x07, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4f,
	0x50, 0x10, 0x09, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x70, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x50,
	0x4f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x56, 0x41, 0x4c,
	0x55, 0x41, 0x54, 0x45, 0x10, 0x0c, 0x12, 0x06, 0x0a, 0x02, 0x43, 0x43, 0x10, 0x0d, 0x12, 0x05,
	0x0a, 0x01, 0x43, 0x10, 0x0e, 0x12, 0x07, 0x0a, 0x03, 0x51, 0x54, 0x59, 0x10, 0x0f, 0x12, 0x06,
	0x0a, 0x02, 0x49, 0x44, 0x10, 0x10, 0x12, 0x06, 0x0a, 0x02, 0x43, 0x50, 0x10, 0x11, 0x1a, 0x27,
	0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x21, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6d, 0x61, 0x70, 0x2d, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x9b, 0x01, 0x0a, 0x18, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x7f, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x43, 0x52,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x4e, 0x41,
	0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x02, 0x1a, 0x3c, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x36, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xda, 0x01, 0x0a, 0x20, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x48, 0x41, 0x4e, 0x44, 0x53, 0x48, 0x41, 0x4b, 0x45, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x48, 0x45, 0x41, 0x52, 0x54, 0x42, 0x45, 0x41, 0x54, 0x10, 0x02, 0x12, 0x16, 0x0a,
	0x12, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x1a, 0x38, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x32,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x1e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4d,
	0x50, 0x54, 0x59, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x59,
	0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x10, 0x03, 0x1a, 0x36, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x30, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xb1, 0x01,
	0x0a, 0x16, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x46, 0x46, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10,
	0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x05, 0x1a, 0x2d, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xb5, 0x01, 0x0a, 0x18, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x98,
	0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45,
	0x53, 0x53, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x42, 0x41, 0x4e, 0x44, 0x4f, 0x4e, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x1a, 0x2f, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x29,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x20, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x97,
	0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x02, 0x12,
	0x1e, 0x0a, 0x1a, 0x42, 0x49, 0x4f, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x4c, 0x59, 0x44,
	0x45, 0x52, 0x49, 0x56, 0x45, 0x44, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x10, 0x03, 0x1a,
	0x37, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x73, 0x75, 0x70, 0x70, 0x6c,
	0x79, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x69, 0x74, 0x65, 0x6d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xd5, 0x01, 0x0a, 0x17, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41,
	0x46, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0d,
	0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x07,
	0x1a, 0x2e, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x28, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x73, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x68, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x56, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x01, 0x1a, 0x25, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x1f, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x74,
	0x61, 0x73, 0x6b, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x89, 0x02, 0x0a, 0x0e, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xf6, 0x01,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x43,
	0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10,
	0x06, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x07,
	0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10,
	0x08, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x09, 0x12, 0x0a,
	0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0c, 0x1a,
	0x25, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x1f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xad, 0x01, 0x0a, 0x1a, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x41,
	0x53, 0x53, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x4b, 0x49, 0x50, 0x10, 0x02, 0x12, 0x08,
	0x0a, 0x04, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x52, 0x4e,
	0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05,
	0x1a, 0x34, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x2d, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x1d, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x7e, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x54, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x52, 0x10, 0x03, 0x1a, 0x31, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2b, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x14, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x72, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x41, 0x53, 0x53, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x1a, 0x2d, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x27, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2d,
	0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xba, 0x01, 0x0a, 0x14, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xa1,
	0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53,
	0x53, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x04, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x05, 0x1a, 0x2d, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x64,
	0x65, 0x73, 0x22, 0xb7, 0x01, 0x0a, 0x1b, 0x54, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07,
	0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x41, 0x54,
	0x43, 0x48, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x05, 0x12, 0x07,
	0x0a, 0x03, 0x50, 0x55, 0x54, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x45, 0x41, 0x44, 0x10,
	0x07, 0x1a, 0x29, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x23, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x68, 0x74, 0x74,
	0x70, 0x2d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x72, 0x0a, 0x13,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x5b, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x01, 0x1a, 0x2a, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x24, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x22, 0xc7, 0x01, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a,
	0x09, 0x41, 0x42, 0x41, 0x4e, 0x44, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x50,
	0x4c, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45,
	0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x1a, 0x2a,
	0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x24, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xee, 0x01, 0x0a, 0x0f, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xda,
	0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x41, 0x4d, 0x45, 0x44, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43,
	0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x41, 0x44, 0x44,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d, 0x4f, 0x44,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x45, 0x4e, 0x44, 0x45,
	0x44, 0x10, 0x08, 0x1a, 0x26, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x13,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x42, 0x79, 0x74, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x7d, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x46, 0x4c, 0x45,
	0x58, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x52, 0x45, 0x5f, 0x52, 0x55, 0x4e, 0x10, 0x03, 0x1a, 0x35, 0x8a, 0x91, 0xc9,
	0xfe, 0x07, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x62, 0x79, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x16, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x76, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41,
	0x49, 0x4e, 0x54, 0x10, 0x02, 0x1a, 0x2e, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x28, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x2d, 0x64, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x72, 0x75, 0x6c, 0x65, 0x22, 0xcb, 0x01, 0x0a, 0x10, 0x55, 0x44, 0x49, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x42, 0x41, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x52, 0x46, 0x49, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c,
	0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x41, 0x52, 0x44, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x45, 0x4c, 0x46, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12,
	0x1b, 0x0a, 0x17, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x52, 0x4f, 0x4e, 0x49, 0x43, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x06, 0x1a, 0x28, 0x8a, 0x91, 0xc9, 0xfe, 0x07,
	0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x64, 0x69, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x7e, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x50, 0x52, 0x45, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x45, 0x44, 0x45, 0x54, 0x45, 0x52,
	0x4d, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x1a, 0x23, 0x8a, 0x91, 0xc9, 0xfe,
	0x07, 0x1d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x2d, 0x75, 0x73, 0x65, 0x22,
	0x84, 0x01, 0x0a, 0x0e, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x72, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x55, 0x50, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x03,
	0x12, 0x07, 0x0a, 0x03, 0x4f, 0x55, 0x54, 0x10, 0x04, 0x1a, 0x2b, 0x8a, 0x91, 0xc9, 0xfe, 0x07,
	0x25, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x62, 0x61, 0x73, 0x65,
	0x2d, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x75, 0x0a, 0x0e, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x45, 0x79, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x63, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x45, 0x46, 0x54, 0x10,
	0x02, 0x1a, 0x2a, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x24, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x2d, 0x65, 0x79, 0x65, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x97, 0x01,
	0x0a, 0x0f, 0x57, 0x65, 0x65, 0x6b, 0x4f, 0x66, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x83, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x09, 0x0a,
	0x05, 0x54, 0x48, 0x49, 0x52, 0x44, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x4f, 0x55, 0x52,
	0x54, 0x48, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x05, 0x1a, 0x27,
	0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x21, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x77, 0x65, 0x65, 0x6b, 0x2d, 0x6f,
	0x66, 0x2d, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x42, 0x65, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x50, 0x01, 0x5a, 0x48, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x63, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r5_core_codes_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r5_core_codes_proto_rawDescData = file_proto_google_fhir_proto_r5_core_codes_proto_rawDesc
)

func file_proto_google_fhir_proto_r5_core_codes_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r5_core_codes_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r5_core_codes_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r5_core_codes_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r5_core_codes_proto_rawDescData
}

var file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes = make([]protoimpl.EnumInfo, 238)
var file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes = make([]protoimpl.MessageInfo, 238)
var file_proto_google_fhir_proto_r5_core_codes_proto_goTypes = []interface{}{
	(AccountStatusCode_Value)(0),                      // 0: google.fhir.r5.core.AccountStatusCode.Value
	(ActionCardinalityBehaviorCode_Value)(0),          // 1: google.fhir.r5.core.ActionCardinalityBehaviorCode.Value
	(ActionConditionKindCode_Value)(0),                // 2: google.fhir.r5.core.ActionConditionKindCode.Value
	(ActionGroupingBehaviorCode_Value)(0),             // 3: google.fhir.r5.core.ActionGroupingBehaviorCode.Value
	(ActionParticipantTypeCode_Value)(0),              // 4: google.fhir.r5.core.ActionParticipantTypeCode.Value
	(ActionPrecheckBehaviorCode_Value)(0),             // 5: google.fhir.r5.core.ActionPrecheckBehaviorCode.Value
	(ActionRelationshipTypeCode_Value)(0),             // 6: google.fhir.r5.core.ActionRelationshipTypeCode.Value
	(ActionRequiredBehaviorCode_Value)(0),             // 7: google.fhir.r5.core.ActionRequiredBehaviorCode.Value
	(ActionSelectionBehaviorCode_Value)(0),            // 8: google.fhir.r5.core.ActionSelectionBehaviorCode.Value
	(AdditionalBindingPurposeCode_Value)(0),           // 9: google.fhir.r5.core.AdditionalBindingPurposeCode.Value
	(AddressTypeCode_Value)(0),                        // 10: google.fhir.r5.core.AddressTypeCode.Value
	(AddressUseCode_Value)(0),                         // 11: google.fhir.r5.core.AddressUseCode.Value
	(AdministrativeGenderCode_Value)(0),               // 12: google.fhir.r5.core.AdministrativeGenderCode.Value
	(AdverseEventActualityCode_Value)(0),              // 13: google.fhir.r5.core.AdverseEventActualityCode.Value
	(AggregationModeCode_Value)(0),                    // 14: google.fhir.r5.core.AggregationModeCode.Value
	(AllergyIntoleranceCategoryCode_Value)(0),         // 15: google.fhir.r5.core.AllergyIntoleranceCategoryCode.Value
	(AllergyIntoleranceCriticalityCode_Value)(0),      // 16: google.fhir.r5.core.AllergyIntoleranceCriticalityCode.Value
	(AllergyIntoleranceSeverityCode_Value)(0),         // 17: google.fhir.r5.core.AllergyIntoleranceSeverityCode.Value
	(AppointmentStatusCode_Value)(0),                  // 18: google.fhir.r5.core.AppointmentStatusCode.Value
	(ArtifactAssessmentDispositionCode_Value)(0),      // 19: google.fhir.r5.core.ArtifactAssessmentDispositionCode.Value
	(ArtifactAssessmentInformationTypeCode_Value)(0),  // 20: google.fhir.r5.core.ArtifactAssessmentInformationTypeCode.Value
	(ArtifactAssessmentWorkflowStatusCode_Value)(0),   // 21: google.fhir.r5.core.ArtifactAssessmentWorkflowStatusCode.Value
	(AssertionDirectionTypeCode_Value)(0),             // 22: google.fhir.r5.core.AssertionDirectionTypeCode.Value
	(AssertionManualCompletionTypeCode_Value)(0),      // 23: google.fhir.r5.core.AssertionManualCompletionTypeCode.Value
	(AssertionOperatorTypeCode_Value)(0),              // 24: google.fhir.r5.core.AssertionOperatorTypeCode.Value
	(AssertionResponseTypesCode_Value)(0),             // 25: google.fhir.r5.core.AssertionResponseTypesCode.Value
	(AuditEventActionCode_Value)(0),                   // 26: google.fhir.r5.core.AuditEventActionCode.Value
	(AuditEventSeverityCode_Value)(0),                 // 27: google.fhir.r5.core.AuditEventSeverityCode.Value
	(BindingStrengthCode_Value)(0),                    // 28: google.fhir.r5.core.BindingStrengthCode.Value
	(BiologicallyDerivedProductDispenseCode_Value)(0), // 29: google.fhir.r5.core.BiologicallyDerivedProductDispenseCode.Value
	(BundleTypeCode_Value)(0),                         // 30: google.fhir.r5.core.BundleTypeCode.Value
	(CapabilityStatementKindCode_Value)(0),            // 31: google.fhir.r5.core.CapabilityStatementKindCode.Value
	(CareTeamStatusCode_Value)(0),                     // 32: google.fhir.r5.core.CareTeamStatusCode.Value
	(CharacteristicCombinationCode_Value)(0),          // 33: google.fhir.r5.core.CharacteristicCombinationCode.Value
	(ChargeItemStatusCode_Value)(0),                   // 34: google.fhir.r5.core.ChargeItemStatusCode.Value
	(ClaimProcessingOutcomeCode_Value)(0),             // 35: google.fhir.r5.core.ClaimProcessingOutcomeCode.Value
	(ClinicalUseDefinitionTypeCode_Value)(0),          // 36: google.fhir.r5.core.ClinicalUseDefinitionTypeCode.Value
	(CodeSearchSupportCode_Value)(0),                  // 37: google.fhir.r5.core.CodeSearchSupportCode.Value
	(CodeSystemContentModeCode_Value)(0),              // 38: google.fhir.r5.core.CodeSystemContentModeCode.Value
	(CodeSystemHierarchyMeaningCode_Value)(0),         // 39: google.fhir.r5.core.CodeSystemHierarchyMeaningCode.Value
	(ColorCode_Value)(0),                              // 40: google.fhir.r5.core.ColorCode.Value
	(ColorRGBCode_Value)(0),                           // 41: google.fhir.r5.core.ColorRGBCode.Value
	(CompartmentTypeCode_Value)(0),                    // 42: google.fhir.r5.core.CompartmentTypeCode.Value
	(CompositionStatusCode_Value)(0),                  // 43: google.fhir.r5.core.CompositionStatusCode.Value
	(ConceptMapAttributeTypeCode_Value)(0),            // 44: google.fhir.r5.core.ConceptMapAttributeTypeCode.Value
	(ConceptMapGroupUnmappedModeCode_Value)(0),        // 45: google.fhir.r5.core.ConceptMapGroupUnmappedModeCode.Value
	(ConceptMapPropertyTypeCode_Value)(0),             // 46: google.fhir.r5.core.ConceptMapPropertyTypeCode.Value
	(ConceptMapRelationshipCode_Value)(0),             // 47: google.fhir.r5.core.ConceptMapRelationshipCode.Value
	(ConditionPreconditionTypeCode_Value)(0),          // 48: google.fhir.r5.core.ConditionPreconditionTypeCode.Value
	(ConditionQuestionnairePurposeCode_Value)(0),      // 49: google.fhir.r5.core.ConditionQuestionnairePurposeCode.Value
	(ConditionalDeleteStatusCode_Value)(0),            // 50: google.fhir.r5.core.ConditionalDeleteStatusCode.Value
	(ConditionalReadStatusCode_Value)(0),              // 51: google.fhir.r5.core.ConditionalReadStatusCode.Value
	(ConformanceExpectationCode_Value)(0),             // 52: google.fhir.r5.core.ConformanceExpectationCode.Value
	(ConsentDataMeaningCode_Value)(0),                 // 53: google.fhir.r5.core.ConsentDataMeaningCode.Value
	(ConsentProvisionTypeCode_Value)(0),               // 54: google.fhir.r5.core.ConsentProvisionTypeCode.Value
	(ConsentStateCode_Value)(0),                       // 55: google.fhir.r5.core.ConsentStateCode.Value
	(ConstraintSeverityCode_Value)(0),                 // 56: google.fhir.r5.core.ConstraintSeverityCode.Value
	(ContactPointSystemCode_Value)(0),                 // 57: google.fhir.r5.core.ContactPointSystemCode.Value
	(ContactPointUseCode_Value)(0),                    // 58: google.fhir.r5.core.ContactPointUseCode.Value
	(ContractPublicationStatusCode_Value)(0),          // 59: google.fhir.r5.core.ContractPublicationStatusCode.Value
	(ContractStatusCode_Value)(0),                     // 60: google.fhir.r5.core.ContractStatusCode.Value
	(ContributorTypeCode_Value)(0),                    // 61: google.fhir.r5.core.ContributorTypeCode.Value
	(CriteriaNotExistsBehaviorCode_Value)(0),          // 62: google.fhir.r5.core.CriteriaNotExistsBehaviorCode.Value
	(DaysOfWeekCode_Value)(0),                         // 63: google.fhir.r5.core.DaysOfWeekCode.Value
	(DetectedIssueSeverityCode_Value)(0),              // 64: google.fhir.r5.core.DetectedIssueSeverityCode.Value
	(DetectedIssueStatusCode_Value)(0),                // 65: google.fhir.r5.core.DetectedIssueStatusCode.Value
	(DeviceAssociationCode_Value)(0),                  // 66: google.fhir.r5.core.DeviceAssociationCode.Value
	(DeviceAssociationStatusReason_Value)(0),          // 67: google.fhir.r5.core.DeviceAssociationStatusReason.Value
	(DeviceCorrectiveActionScopeCode_Value)(0),        // 68: google.fhir.r5.core.DeviceCorrectiveActionScopeCode.Value
	(DeviceDispenseStatusCode_Value)(0),               // 69: google.fhir.r5.core.DeviceDispenseStatusCode.Value
	(DeviceMetricCalibrationStateCode_Value)(0),       // 70: google.fhir.r5.core.DeviceMetricCalibrationStateCode.Value
	(DeviceMetricCalibrationTypeCode_Value)(0),        // 71: google.fhir.r5.core.DeviceMetricCalibrationTypeCode.Value
	(DeviceMetricCategoryCode_Value)(0),               // 72: google.fhir.r5.core.DeviceMetricCategoryCode.Value
	(DeviceMetricOperationalStatusCode_Value)(0),      // 73: google.fhir.r5.core.DeviceMetricOperationalStatusCode.Value
	(DeviceNameTypeCode_Value)(0),                     // 74: google.fhir.r5.core.DeviceNameTypeCode.Value
	(DeviceProductionIdentifierInUDICode_Value)(0),    // 75: google.fhir.r5.core.DeviceProductionIdentifierInUDICode.Value
	(DeviceRegulatoryIdentifierTypeCode_Value)(0),     // 76: google.fhir.r5.core.DeviceRegulatoryIdentifierTypeCode.Value
	(DeviceUsageStatusCode_Value)(0),                  // 77: google.fhir.r5.core.DeviceUsageStatusCode.Value
	(DiagnosticReportStatusCode_Value)(0),             // 78: google.fhir.r5.core.DiagnosticReportStatusCode.Value
	(DiscriminatorTypeCode_Value)(0),                  // 79: google.fhir.r5.core.DiscriminatorTypeCode.Value
	(DocumentModeCode_Value)(0),                       // 80: google.fhir.r5.core.DocumentModeCode.Value
	(DocumentReferenceStatusCode_Value)(0),            // 81: google.fhir.r5.core.DocumentReferenceStatusCode.Value
	(EligibilityOutcomeCode_Value)(0),                 // 82: google.fhir.r5.core.EligibilityOutcomeCode.Value
	(EligibilityRequestPurposeCode_Value)(0),          // 83: google.fhir.r5.core.EligibilityRequestPurposeCode.Value
	(EligibilityResponsePurposeCode_Value)(0),         // 84: google.fhir.r5.core.EligibilityResponsePurposeCode.Value
	(EnableWhenBehaviorCode_Value)(0),                 // 85: google.fhir.r5.core.EnableWhenBehaviorCode.Value
	(EncounterLocationStatusCode_Value)(0),            // 86: google.fhir.r5.core.EncounterLocationStatusCode.Value
	(EncounterStatusCode_Value)(0),                    // 87: google.fhir.r5.core.EncounterStatusCode.Value
	(EndpointStatusCode_Value)(0),                     // 88: google.fhir.r5.core.EndpointStatusCode.Value
	(EnrollmentOutcomeCode_Value)(0),                  // 89: google.fhir.r5.core.EnrollmentOutcomeCode.Value
	(EpisodeOfCareStatusCode_Value)(0),                // 90: google.fhir.r5.core.EpisodeOfCareStatusCode.Value
	(EventCapabilityModeCode_Value)(0),                // 91: google.fhir.r5.core.EventCapabilityModeCode.Value
	(EventStatusCode_Value)(0),                        // 92: google.fhir.r5.core.EventStatusCode.Value
	(EventTimingCode_Value)(0),                        // 93: google.fhir.r5.core.EventTimingCode.Value
	(EvidenceVariableHandlingCode_Value)(0),           // 94: google.fhir.r5.core.EvidenceVariableHandlingCode.Value
	(ExampleScenarioActorTypeCode_Value)(0),           // 95: google.fhir.r5.core.ExampleScenarioActorTypeCode.Value
	(ExplanationOfBenefitStatusCode_Value)(0),         // 96: google.fhir.r5.core.ExplanationOfBenefitStatusCode.Value
	(ExtensionContextTypeCode_Value)(0),               // 97: google.fhir.r5.core.ExtensionContextTypeCode.Value
	(FHIRCanonicalStatusCode_Value)(0),                // 98: google.fhir.r5.core.FHIRCanonicalStatusCode.Value
	(FHIRDeviceStatusCode_Value)(0),                   // 99: google.fhir.r5.core.FHIRDeviceStatusCode.Value
	(FHIROldTypesCode_Value)(0),                       // 100: google.fhir.r5.core.FHIROldTypesCode.Value
	(FHIRRestfulInteractionsCode_Value)(0),            // 101: google.fhir.r5.core.FHIRRestfulInteractionsCode.Value
	(FHIRSubstanceStatusCode_Value)(0),                // 102: google.fhir.r5.core.FHIRSubstanceStatusCode.Value
	(FHIRTypesCode_Value)(0),                          // 103: google.fhir.r5.core.FHIRTypesCode.Value
	(FHIRVersionCode_Value)(0),                        // 104: google.fhir.r5.core.FHIRVersionCode.Value
	(FamilyHistoryStatusCode_Value)(0),                // 105: google.fhir.r5.core.FamilyHistoryStatusCode.Value
	(FilterOperatorCode_Value)(0),                     // 106: google.fhir.r5.core.FilterOperatorCode.Value
	(FinancialResourceStatusCode_Value)(0),            // 107: google.fhir.r5.core.FinancialResourceStatusCode.Value
	(FlagStatusCode_Value)(0),                         // 108: google.fhir.r5.core.FlagStatusCode.Value
	(FormularyItemStatusCode_Value)(0),                // 109: google.fhir.r5.core.FormularyItemStatusCode.Value
	(GenomicStudyStatusCode_Value)(0),                 // 110: google.fhir.r5.core.GenomicStudyStatusCode.Value
	(GoalLifecycleStatusCode_Value)(0),                // 111: google.fhir.r5.core.GoalLifecycleStatusCode.Value
	(GraphCompartmentRuleCode_Value)(0),               // 112: google.fhir.r5.core.GraphCompartmentRuleCode.Value
	(GraphCompartmentUseCode_Value)(0),                // 113: google.fhir.r5.core.GraphCompartmentUseCode.Value
	(GroupMembershipBasisCode_Value)(0),               // 114: google.fhir.r5.core.GroupMembershipBasisCode.Value
	(GroupTypeCode_Value)(0),                          // 115: google.fhir.r5.core.GroupTypeCode.Value
	(GuidanceResponseStatusCode_Value)(0),             // 116: google.fhir.r5.core.GuidanceResponseStatusCode.Value
	(GuidePageGenerationCode_Value)(0),                // 117: google.fhir.r5.core.GuidePageGenerationCode.Value
	(HTTPVerbCode_Value)(0),                           // 118: google.fhir.r5.core.HTTPVerbCode.Value
	(IdentifierUseCode_Value)(0),                      // 119: google.fhir.r5.core.IdentifierUseCode.Value
	(IdentityAssuranceLevelCode_Value)(0),             // 120: google.fhir.r5.core.IdentityAssuranceLevelCode.Value
	(ImagingSelection2DGraphicTypeCode_Value)(0),      // 121: google.fhir.r5.core.ImagingSelection2DGraphicTypeCode.Value
	(ImagingSelection3DGraphicTypeCode_Value)(0),      // 122: google.fhir.r5.core.ImagingSelection3DGraphicTypeCode.Value
	(ImagingSelectionStatusCode_Value)(0),             // 123: google.fhir.r5.core.ImagingSelectionStatusCode.Value
	(ImagingStudyStatusCode_Value)(0),                 // 124: google.fhir.r5.core.ImagingStudyStatusCode.Value
	(IngredientManufacturerRoleCode_Value)(0),         // 125: google.fhir.r5.core.IngredientManufacturerRoleCode.Value
	(InventoryCountTypeCode_Value)(0),                 // 126: google.fhir.r5.core.InventoryCountTypeCode.Value
	(InventoryItemStatusCode_Value)(0),                // 127: google.fhir.r5.core.InventoryItemStatusCode.Value
	(InventoryReportStatusCode_Value)(0),              // 128: google.fhir.r5.core.InventoryReportStatusCode.Value
	(InvoiceStatusCode_Value)(0),                      // 129: google.fhir.r5.core.InvoiceStatusCode.Value
	(IssueSeverityCode_Value)(0),                      // 130: google.fhir.r5.core.IssueSeverityCode.Value
	(IssueTypeCode_Value)(0),                          // 131: google.fhir.r5.core.IssueTypeCode.Value
	(KindCode_Value)(0),                               // 132: google.fhir.r5.core.KindCode.Value
	(KnowledgeRepresentationLevelCode_Value)(0),       // 133: google.fhir.r5.core.KnowledgeRepresentationLevelCode.Value
	(LinkRelationTypesCode_Value)(0),                  // 134: google.fhir.r5.core.LinkRelationTypesCode.Value
	(LinkTypeCode_Value)(0),                           // 135: google.fhir.r5.core.LinkTypeCode.Value
	(LinkageTypeCode_Value)(0),                        // 136: google.fhir.r5.core.LinkageTypeCode.Value
	(ListModeCode_Value)(0),                           // 137: google.fhir.r5.core.ListModeCode.Value
	(ListStatusCode_Value)(0),                         // 138: google.fhir.r5.core.ListStatusCode.Value
	(LocationModeCode_Value)(0),                       // 139: google.fhir.r5.core.LocationModeCode.Value
	(LocationStatusCode_Value)(0),                     // 140: google.fhir.r5.core.LocationStatusCode.Value
	(MeasureReportStatusCode_Value)(0),                // 141: google.fhir.r5.core.MeasureReportStatusCode.Value
	(MeasureReportTypeCode_Value)(0),                  // 142: google.fhir.r5.core.MeasureReportTypeCode.Value
	(MedicationAdministrationStatusCode_Value)(0),     // 143: google.fhir.r5.core.MedicationAdministrationStatusCode.Value
	(MedicationDispenseStatusCode_Value)(0),           // 144: google.fhir.r5.core.MedicationDispenseStatusCode.Value
	(MedicationKnowledgeStatusCode_Value)(0),          // 145: google.fhir.r5.core.MedicationKnowledgeStatusCode.Value
	(MedicationRequestIntentCode_Value)(0),            // 146: google.fhir.r5.core.MedicationRequestIntentCode.Value
	(MedicationRequestStatusCode_Value)(0),            // 147: google.fhir.r5.core.MedicationRequestStatusCode.Value
	(MedicationStatementStatusCodes_Value)(0),         // 148: google.fhir.r5.core.MedicationStatementStatusCodes.Value
	(MedicationStatusCode_Value)(0),                   // 149: google.fhir.r5.core.MedicationStatusCode.Value
	(MessageSignificanceCategoryCode_Value)(0),        // 150: google.fhir.r5.core.MessageSignificanceCategoryCode.Value
	(MessageheaderResponseRequestCode_Value)(0),       // 151: google.fhir.r5.core.MessageheaderResponseRequestCode.Value
	(NameUseCode_Value)(0),                            // 152: google.fhir.r5.core.NameUseCode.Value
	(NamingSystemIdentifierTypeCode_Value)(0),         // 153: google.fhir.r5.core.NamingSystemIdentifierTypeCode.Value
	(NamingSystemTypeCode_Value)(0),                   // 154: google.fhir.r5.core.NamingSystemTypeCode.Value
	(NarrativeStatusCode_Value)(0),                    // 155: google.fhir.r5.core.NarrativeStatusCode.Value
	(NoteTypeCode_Value)(0),                           // 156: google.fhir.r5.core.NoteTypeCode.Value
	(NutritionProductStatusCode_Value)(0),             // 157: google.fhir.r5.core.NutritionProductStatusCode.Value
	(ObservationDataTypeCode_Value)(0),                // 158: google.fhir.r5.core.ObservationDataTypeCode.Value
	(ObservationRangeCategoryCode_Value)(0),           // 159: google.fhir.r5.core.ObservationRangeCategoryCode.Value
	(ObservationStatusCode_Value)(0),                  // 160: google.fhir.r5.core.ObservationStatusCode.Value
	(OperationKindCode_Value)(0),                      // 161: google.fhir.r5.core.OperationKindCode.Value
	(OperationParameterScopeCode_Value)(0),            // 162: google.fhir.r5.core.OperationParameterScopeCode.Value
	(OperationParameterUseCode_Value)(0),              // 163: google.fhir.r5.core.OperationParameterUseCode.Value
	(OrientationTypeCode_Value)(0),                    // 164: google.fhir.r5.core.OrientationTypeCode.Value
	(ParticipationStatusCode_Value)(0),                // 165: google.fhir.r5.core.ParticipationStatusCode.Value
	(PaymentOutcomeCode_Value)(0),                     // 166: google.fhir.r5.core.PaymentOutcomeCode.Value
	(PermissionRuleCombiningCode_Value)(0),            // 167: google.fhir.r5.core.PermissionRuleCombiningCode.Value
	(PermissionStatusCode_Value)(0),                   // 168: google.fhir.r5.core.PermissionStatusCode.Value
	(PriceComponentTypeCode_Value)(0),                 // 169: google.fhir.r5.core.PriceComponentTypeCode.Value
	(ProductStatusCode_Value)(0),                      // 170: google.fhir.r5.core.ProductStatusCode.Value
	(PropertyRepresentationCode_Value)(0),             // 171: google.fhir.r5.core.PropertyRepresentationCode.Value
	(PropertyTypeCode_Value)(0),                       // 172: google.fhir.r5.core.PropertyTypeCode.Value
	(ProvenanceEntityRoleCode_Value)(0),               // 173: google.fhir.r5.core.ProvenanceEntityRoleCode.Value
	(PublicationStatusCode_Value)(0),                  // 174: google.fhir.r5.core.PublicationStatusCode.Value
	(QuantityComparatorCode_Value)(0),                 // 175: google.fhir.r5.core.QuantityComparatorCode.Value
	(QuestionnaireAnswerConstraintCode_Value)(0),      // 176: google.fhir.r5.core.QuestionnaireAnswerConstraintCode.Value
	(QuestionnaireItemDisabledDisplayCode_Value)(0),   // 177: google.fhir.r5.core.QuestionnaireItemDisabledDisplayCode.Value
	(QuestionnaireItemOperatorCode_Value)(0),          // 178: google.fhir.r5.core.QuestionnaireItemOperatorCode.Value
	(QuestionnaireItemTypeCode_Value)(0),              // 179: google.fhir.r5.core.QuestionnaireItemTypeCode.Value
	(QuestionnaireResponseStatusCode_Value)(0),        // 180: google.fhir.r5.core.QuestionnaireResponseStatusCode.Value
	(ReferenceHandlingPolicyCode_Value)(0),            // 181: google.fhir.r5.core.ReferenceHandlingPolicyCode.Value
	(ReferenceVersionRulesCode_Value)(0),              // 182: google.fhir.r5.core.ReferenceVersionRulesCode.Value
	(RelatedArtifactTypeCode_Value)(0),                // 183: google.fhir.r5.core.RelatedArtifactTypeCode.Value
	(RelatedArtifactTypeExpandedCode_Value)(0),        // 184: google.fhir.r5.core.RelatedArtifactTypeExpandedCode.Value
	(ReportRelationshipTypeCode_Value)(0),             // 185: google.fhir.r5.core.ReportRelationshipTypeCode.Value
	(RequestIntentCode_Value)(0),                      // 186: google.fhir.r5.core.RequestIntentCode.Value
	(RequestPriorityCode_Value)(0),                    // 187: google.fhir.r5.core.RequestPriorityCode.Value
	(RequestStatusCode_Value)(0),                      // 188: google.fhir.r5.core.RequestStatusCode.Value
	(ResourceVersionPolicyCode_Value)(0),              // 189: google.fhir.r5.core.ResourceVersionPolicyCode.Value
	(ResponseTypeCode_Value)(0),                       // 190: google.fhir.r5.core.ResponseTypeCode.Value
	(RestfulCapabilityModeCode_Value)(0),              // 191: google.fhir.r5.core.RestfulCapabilityModeCode.Value
	(SPDXLicenseCode_Value)(0),                        // 192: google.fhir.r5.core.SPDXLicenseCode.Value
	(SearchComparatorCode_Value)(0),                   // 193: google.fhir.r5.core.SearchComparatorCode.Value
	(SearchEntryModeCode_Value)(0),                    // 194: google.fhir.r5.core.SearchEntryModeCode.Value
	(SearchModifierCode_Value)(0),                     // 195: google.fhir.r5.core.SearchModifierCode.Value
	(SearchParamTypeCode_Value)(0),                    // 196: google.fhir.r5.core.SearchParamTypeCode.Value
	(SearchProcessingModeTypeCode_Value)(0),           // 197: google.fhir.r5.core.SearchProcessingModeTypeCode.Value
	(SequenceTypeCode_Value)(0),                       // 198: google.fhir.r5.core.SequenceTypeCode.Value
	(SlicingRulesCode_Value)(0),                       // 199: google.fhir.r5.core.SlicingRulesCode.Value
	(SlotStatusCode_Value)(0),                         // 200: google.fhir.r5.core.SlotStatusCode.Value
	(SortDirectionCode_Value)(0),                      // 201: google.fhir.r5.core.SortDirectionCode.Value
	(SpecimenCombinedCode_Value)(0),                   // 202: google.fhir.r5.core.SpecimenCombinedCode.Value
	(SpecimenContainedPreferenceCode_Value)(0),        // 203: google.fhir.r5.core.SpecimenContainedPreferenceCode.Value
	(SpecimenStatusCode_Value)(0),                     // 204: google.fhir.r5.core.SpecimenStatusCode.Value
	(StatusCode_Value)(0),                             // 205: google.fhir.r5.core.StatusCode.Value
	(StrandTypeCode_Value)(0),                         // 206: google.fhir.r5.core.StrandTypeCode.Value
	(StructureDefinitionKindCode_Value)(0),            // 207: google.fhir.r5.core.StructureDefinitionKindCode.Value
	(StructureMapGroupTypeModeCode_Value)(0),          // 208: google.fhir.r5.core.StructureMapGroupTypeModeCode.Value
	(StructureMapInputModeCode_Value)(0),              // 209: google.fhir.r5.core.StructureMapInputModeCode.Value
	(StructureMapModelModeCode_Value)(0),              // 210: google.fhir.r5.core.StructureMapModelModeCode.Value
	(StructureMapSourceListModeCode_Value)(0),         // 211: google.fhir.r5.core.StructureMapSourceListModeCode.Value
	(StructureMapTargetListModeCode_Value)(0),         // 212: google.fhir.r5.core.StructureMapTargetListModeCode.Value
	(StructureMapTransformCode_Value)(0),              // 213: google.fhir.r5.core.StructureMapTransformCode.Value
	(SubmitDataUpdateTypeCode_Value)(0),               // 214: google.fhir.r5.core.SubmitDataUpdateTypeCode.Value
	(SubscriptionNotificationTypeCode_Value)(0),       // 215: google.fhir.r5.core.SubscriptionNotificationTypeCode.Value
	(SubscriptionPayloadContentCode_Value)(0),         // 216: google.fhir.r5.core.SubscriptionPayloadContentCode.Value
	(SubscriptionStatusCode_Value)(0),                 // 217: google.fhir.r5.core.SubscriptionStatusCode.Value
	(SupplyDeliveryStatusCode_Value)(0),               // 218: google.fhir.r5.core.SupplyDeliveryStatusCode.Value
	(SupplyDeliverySupplyItemTypeCode_Value)(0),       // 219: google.fhir.r5.core.SupplyDeliverySupplyItemTypeCode.Value
	(SupplyRequestStatusCode_Value)(0),                // 220: google.fhir.r5.core.SupplyRequestStatusCode.Value
	(TaskIntentCode_Value)(0),                         // 221: google.fhir.r5.core.TaskIntentCode.Value
	(TaskStatusCode_Value)(0),                         // 222: google.fhir.r5.core.TaskStatusCode.Value
	(TestReportActionResultCode_Value)(0),             // 223: google.fhir.r5.core.TestReportActionResultCode.Value
	(TestReportParticipantTypeCode_Value)(0),          // 224: google.fhir.r5.core.TestReportParticipantTypeCode.Value
	(TestReportResultCode_Value)(0),                   // 225: google.fhir.r5.core.TestReportResultCode.Value
	(TestReportStatusCode_Value)(0),                   // 226: google.fhir.r5.core.TestReportStatusCode.Value
	(TestScriptRequestMethodCode_Value)(0),            // 227: google.fhir.r5.core.TestScriptRequestMethodCode.Value
	(TransportIntentCode_Value)(0),                    // 228: google.fhir.r5.core.TransportIntentCode.Value
	(TransportStatusCode_Value)(0),                    // 229: google.fhir.r5.core.TransportStatusCode.Value
	(TriggerTypeCode_Value)(0),                        // 230: google.fhir.r5.core.TriggerTypeCode.Value
	(TriggeredBytypeCode_Value)(0),                    // 231: google.fhir.r5.core.TriggeredBytypeCode.Value
	(TypeDerivationRuleCode_Value)(0),                 // 232: google.fhir.r5.core.TypeDerivationRuleCode.Value
	(UDIEntryTypeCode_Value)(0),                       // 233: google.fhir.r5.core.UDIEntryTypeCode.Value
	(UseCode_Value)(0),                                // 234: google.fhir.r5.core.UseCode.Value
	(VisionBaseCode_Value)(0),                         // 235: google.fhir.r5.core.VisionBaseCode.Value
	(VisionEyesCode_Value)(0),                         // 236: google.fhir.r5.core.VisionEyesCode.Value
	(WeekOfMonthCode_Value)(0),                        // 237: google.fhir.r5.core.WeekOfMonthCode.Value
	(*AccountStatusCode)(nil),                         // 238: google.fhir.r5.core.AccountStatusCode
	(*ActionCardinalityBehaviorCode)(nil),             // 239: google.fhir.r5.core.ActionCardinalityBehaviorCode
	(*ActionConditionKindCode)(nil),                   // 240: google.fhir.r5.core.ActionConditionKindCode
	(*ActionGroupingBehaviorCode)(nil),                // 241: google.fhir.r5.core.ActionGroupingBehaviorCode
	(*ActionParticipantTypeCode)(nil),                 // 242: google.fhir.r5.core.ActionParticipantTypeCode
	(*ActionPrecheckBehaviorCode)(nil),                // 243: google.fhir.r5.core.ActionPrecheckBehaviorCode
	(*ActionRelationshipTypeCode)(nil),                // 244: google.fhir.r5.core.ActionRelationshipTypeCode
	(*ActionRequiredBehaviorCode)(nil),                // 245: google.fhir.r5.core.ActionRequiredBehaviorCode
	(*ActionSelectionBehaviorCode)(nil),               // 246: google.fhir.r5.core.ActionSelectionBehaviorCode
	(*AdditionalBindingPurposeCode)(nil),              // 247: google.fhir.r5.core.AdditionalBindingPurposeCode
	(*AddressTypeCode)(nil),                           // 248: google.fhir.r5.core.AddressTypeCode
	(*AddressUseCode)(nil),                            // 249: google.fhir.r5.core.AddressUseCode
	(*AdministrativeGenderCode)(nil),                  // 250: google.fhir.r5.core.AdministrativeGenderCode
	(*AdverseEventActualityCode)(nil),                 // 251: google.fhir.r5.core.AdverseEventActualityCode
	(*AggregationModeCode)(nil),                       // 252: google.fhir.r5.core.AggregationModeCode
	(*AllergyIntoleranceCategoryCode)(nil),            // 253: google.fhir.r5.core.AllergyIntoleranceCategoryCode
	(*AllergyIntoleranceCriticalityCode)(nil),         // 254: google.fhir.r5.core.AllergyIntoleranceCriticalityCode
	(*AllergyIntoleranceSeverityCode)(nil),            // 255: google.fhir.r5.core.AllergyIntoleranceSeverityCode
	(*AppointmentStatusCode)(nil),                     // 256: google.fhir.r5.core.AppointmentStatusCode
	(*ArtifactAssessmentDispositionCode)(nil),         // 257: google.fhir.r5.core.ArtifactAssessmentDispositionCode
	(*ArtifactAssessmentInformationTypeCode)(nil),     // 258: google.fhir.r5.core.ArtifactAssessmentInformationTypeCode
	(*ArtifactAssessmentWorkflowStatusCode)(nil),      // 259: google.fhir.r5.core.ArtifactAssessmentWorkflowStatusCode
	(*AssertionDirectionTypeCode)(nil),                // 260: google.fhir.r5.core.AssertionDirectionTypeCode
	(*AssertionManualCompletionTypeCode)(nil),         // 261: google.fhir.r5.core.AssertionManualCompletionTypeCode
	(*AssertionOperatorTypeCode)(nil),                 // 262: google.fhir.r5.core.AssertionOperatorTypeCode
	(*AssertionResponseTypesCode)(nil),                // 263: google.fhir.r5.core.AssertionResponseTypesCode
	(*AuditEventActionCode)(nil),                      // 264: google.fhir.r5.core.AuditEventActionCode
	(*AuditEventSeverityCode)(nil),                    // 265: google.fhir.r5.core.AuditEventSeverityCode
	(*BindingStrengthCode)(nil),                       // 266: google.fhir.r5.core.BindingStrengthCode
	(*BiologicallyDerivedProductDispenseCode)(nil),    // 267: google.fhir.r5.core.BiologicallyDerivedProductDispenseCode
	(*BundleTypeCode)(nil),                            // 268: google.fhir.r5.core.BundleTypeCode
	(*CapabilityStatementKindCode)(nil),               // 269: google.fhir.r5.core.CapabilityStatementKindCode
	(*CareTeamStatusCode)(nil),                        // 270: google.fhir.r5.core.CareTeamStatusCode
	(*CharacteristicCombinationCode)(nil),             // 271: google.fhir.r5.core.CharacteristicCombinationCode
	(*ChargeItemStatusCode)(nil),                      // 272: google.fhir.r5.core.ChargeItemStatusCode
	(*ClaimProcessingOutcomeCode)(nil),                // 273: google.fhir.r5.core.ClaimProcessingOutcomeCode
	(*ClinicalUseDefinitionTypeCode)(nil),             // 274: google.fhir.r5.core.ClinicalUseDefinitionTypeCode
	(*CodeSearchSupportCode)(nil),                     // 275: google.fhir.r5.core.CodeSearchSupportCode
	(*CodeSystemContentModeCode)(nil),                 // 276: google.fhir.r5.core.CodeSystemContentModeCode
	(*CodeSystemHierarchyMeaningCode)(nil),            // 277: google.fhir.r5.core.CodeSystemHierarchyMeaningCode
	(*ColorCode)(nil),                                 // 278: google.fhir.r5.core.ColorCode
	(*ColorRGBCode)(nil),                              // 279: google.fhir.r5.core.ColorRGBCode
	(*CompartmentTypeCode)(nil),                       // 280: google.fhir.r5.core.CompartmentTypeCode
	(*CompositionStatusCode)(nil),                     // 281: google.fhir.r5.core.CompositionStatusCode
	(*ConceptMapAttributeTypeCode)(nil),               // 282: google.fhir.r5.core.ConceptMapAttributeTypeCode
	(*ConceptMapGroupUnmappedModeCode)(nil),           // 283: google.fhir.r5.core.ConceptMapGroupUnmappedModeCode
	(*ConceptMapPropertyTypeCode)(nil),                // 284: google.fhir.r5.core.ConceptMapPropertyTypeCode
	(*ConceptMapRelationshipCode)(nil),                // 285: google.fhir.r5.core.ConceptMapRelationshipCode
	(*ConditionPreconditionTypeCode)(nil),             // 286: google.fhir.r5.core.ConditionPreconditionTypeCode
	(*ConditionQuestionnairePurposeCode)(nil),         // 287: google.fhir.r5.core.ConditionQuestionnairePurposeCode
	(*ConditionalDeleteStatusCode)(nil),               // 288: google.fhir.r5.core.ConditionalDeleteStatusCode
	(*ConditionalReadStatusCode)(nil),                 // 289: google.fhir.r5.core.ConditionalReadStatusCode
	(*ConformanceExpectationCode)(nil),                // 290: google.fhir.r5.core.ConformanceExpectationCode
	(*ConsentDataMeaningCode)(nil),                    // 291: google.fhir.r5.core.ConsentDataMeaningCode
	(*ConsentProvisionTypeCode)(nil),                  // 292: google.fhir.r5.core.ConsentProvisionTypeCode
	(*ConsentStateCode)(nil),                          // 293: google.fhir.r5.core.ConsentStateCode
	(*ConstraintSeverityCode)(nil),                    // 294: google.fhir.r5.core.ConstraintSeverityCode
	(*ContactPointSystemCode)(nil),                    // 295: google.fhir.r5.core.ContactPointSystemCode
	(*ContactPointUseCode)(nil),                       // 296: google.fhir.r5.core.ContactPointUseCode
	(*ContractPublicationStatusCode)(nil),             // 297: google.fhir.r5.core.ContractPublicationStatusCode
	(*ContractStatusCode)(nil),                        // 298: google.fhir.r5.core.ContractStatusCode
	(*ContributorTypeCode)(nil),                       // 299: google.fhir.r5.core.ContributorTypeCode
	(*CriteriaNotExistsBehaviorCode)(nil),             // 300: google.fhir.r5.core.CriteriaNotExistsBehaviorCode
	(*DaysOfWeekCode)(nil),                            // 301: google.fhir.r5.core.DaysOfWeekCode
	(*DetectedIssueSeverityCode)(nil),                 // 302: google.fhir.r5.core.DetectedIssueSeverityCode
	(*DetectedIssueStatusCode)(nil),                   // 303: google.fhir.r5.core.DetectedIssueStatusCode
	(*DeviceAssociationCode)(nil),                     // 304: google.fhir.r5.core.DeviceAssociationCode
	(*DeviceAssociationStatusReason)(nil),             // 305: google.fhir.r5.core.DeviceAssociationStatusReason
	(*DeviceCorrectiveActionScopeCode)(nil),           // 306: google.fhir.r5.core.DeviceCorrectiveActionScopeCode
	(*DeviceDispenseStatusCode)(nil),                  // 307: google.fhir.r5.core.DeviceDispenseStatusCode
	(*DeviceMetricCalibrationStateCode)(nil),          // 308: google.fhir.r5.core.DeviceMetricCalibrationStateCode
	(*DeviceMetricCalibrationTypeCode)(nil),           // 309: google.fhir.r5.core.DeviceMetricCalibrationTypeCode
	(*DeviceMetricCategoryCode)(nil),                  // 310: google.fhir.r5.core.DeviceMetricCategoryCode
	(*DeviceMetricOperationalStatusCode)(nil),         // 311: google.fhir.r5.core.DeviceMetricOperationalStatusCode
	(*DeviceNameTypeCode)(nil),                        // 312: google.fhir.r5.core.DeviceNameTypeCode
	(*DeviceProductionIdentifierInUDICode)(nil),       // 313: google.fhir.r5.core.DeviceProductionIdentifierInUDICode
	(*DeviceRegulatoryIdentifierTypeCode)(nil),        // 314: google.fhir.r5.core.DeviceRegulatoryIdentifierTypeCode
	(*DeviceUsageStatusCode)(nil),                     // 315: google.fhir.r5.core.DeviceUsageStatusCode
	(*DiagnosticReportStatusCode)(nil),                // 316: google.fhir.r5.core.DiagnosticReportStatusCode
	(*DiscriminatorTypeCode)(nil),                     // 317: google.fhir.r5.core.DiscriminatorTypeCode
	(*DocumentModeCode)(nil),                          // 318: google.fhir.r5.core.DocumentModeCode
	(*DocumentReferenceStatusCode)(nil),               // 319: google.fhir.r5.core.DocumentReferenceStatusCode
	(*EligibilityOutcomeCode)(nil),                    // 320: google.fhir.r5.core.EligibilityOutcomeCode
	(*EligibilityRequestPurposeCode)(nil),             // 321: google.fhir.r5.core.EligibilityRequestPurposeCode
	(*EligibilityResponsePurposeCode)(nil),            // 322: google.fhir.r5.core.EligibilityResponsePurposeCode
	(*EnableWhenBehaviorCode)(nil),                    // 323: google.fhir.r5.core.EnableWhenBehaviorCode
	(*EncounterLocationStatusCode)(nil),               // 324: google.fhir.r5.core.EncounterLocationStatusCode
	(*EncounterStatusCode)(nil),                       // 325: google.fhir.r5.core.EncounterStatusCode
	(*EndpointStatusCode)(nil),                        // 326: google.fhir.r5.core.EndpointStatusCode
	(*EnrollmentOutcomeCode)(nil),                     // 327: google.fhir.r5.core.EnrollmentOutcomeCode
	(*EpisodeOfCareStatusCode)(nil),                   // 328: google.fhir.r5.core.EpisodeOfCareStatusCode
	(*EventCapabilityModeCode)(nil),                   // 329: google.fhir.r5.core.EventCapabilityModeCode
	(*EventStatusCode)(nil),                           // 330: google.fhir.r5.core.EventStatusCode
	(*EventTimingCode)(nil),                           // 331: google.fhir.r5.core.EventTimingCode
	(*EvidenceVariableHandlingCode)(nil),              // 332: google.fhir.r5.core.EvidenceVariableHandlingCode
	(*ExampleScenarioActorTypeCode)(nil),              // 333: google.fhir.r5.core.ExampleScenarioActorTypeCode
	(*ExplanationOfBenefitStatusCode)(nil),            // 334: google.fhir.r5.core.ExplanationOfBenefitStatusCode
	(*ExtensionContextTypeCode)(nil),                  // 335: google.fhir.r5.core.ExtensionContextTypeCode
	(*FHIRCanonicalStatusCode)(nil),                   // 336: google.fhir.r5.core.FHIRCanonicalStatusCode
	(*FHIRDeviceStatusCode)(nil),                      // 337: google.fhir.r5.core.FHIRDeviceStatusCode
	(*FHIROldTypesCode)(nil),                          // 338: google.fhir.r5.core.FHIROldTypesCode
	(*FHIRRestfulInteractionsCode)(nil),               // 339: google.fhir.r5.core.FHIRRestfulInteractionsCode
	(*FHIRSubstanceStatusCode)(nil),                   // 340: google.fhir.r5.core.FHIRSubstanceStatusCode
	(*FHIRTypesCode)(nil),                             // 341: google.fhir.r5.core.FHIRTypesCode
	(*FHIRVersionCode)(nil),                           // 342: google.fhir.r5.core.FHIRVersionCode
	(*FamilyHistoryStatusCode)(nil),                   // 343: google.fhir.r5.core.FamilyHistoryStatusCode
	(*FilterOperatorCode)(nil),                        // 344: google.fhir.r5.core.FilterOperatorCode
	(*FinancialResourceStatusCode)(nil),               // 345: google.fhir.r5.core.FinancialResourceStatusCode
	(*FlagStatusCode)(nil),                            // 346: google.fhir.r5.core.FlagStatusCode
	(*FormularyItemStatusCode)(nil),                   // 347: google.fhir.r5.core.FormularyItemStatusCode
	(*GenomicStudyStatusCode)(nil),                    // 348: google.fhir.r5.core.GenomicStudyStatusCode
	(*GoalLifecycleStatusCode)(nil),                   // 349: google.fhir.r5.core.GoalLifecycleStatusCode
	(*GraphCompartmentRuleCode)(nil),                  // 350: google.fhir.r5.core.GraphCompartmentRuleCode
	(*GraphCompartmentUseCode)(nil),                   // 351: google.fhir.r5.core.GraphCompartmentUseCode
	(*GroupMembershipBasisCode)(nil),                  // 352: google.fhir.r5.core.GroupMembershipBasisCode
	(*GroupTypeCode)(nil),                             // 353: google.fhir.r5.core.GroupTypeCode
	(*GuidanceResponseStatusCode)(nil),                // 354: google.fhir.r5.core.GuidanceResponseStatusCode
	(*GuidePageGenerationCode)(nil),                   // 355: google.fhir.r5.core.GuidePageGenerationCode
	(*HTTPVerbCode)(nil),                              // 356: google.fhir.r5.core.HTTPVerbCode
	(*IdentifierUseCode)(nil),                         // 357: google.fhir.r5.core.IdentifierUseCode
	(*IdentityAssuranceLevelCode)(nil),                // 358: google.fhir.r5.core.IdentityAssuranceLevelCode
	(*ImagingSelection2DGraphicTypeCode)(nil),         // 359: google.fhir.r5.core.ImagingSelection2DGraphicTypeCode
	(*ImagingSelection3DGraphicTypeCode)(nil),         // 360: google.fhir.r5.core.ImagingSelection3DGraphicTypeCode
	(*ImagingSelectionStatusCode)(nil),                // 361: google.fhir.r5.core.ImagingSelectionStatusCode
	(*ImagingStudyStatusCode)(nil),                    // 362: google.fhir.r5.core.ImagingStudyStatusCode
	(*IngredientManufacturerRoleCode)(nil),            // 363: google.fhir.r5.core.IngredientManufacturerRoleCode
	(*InventoryCountTypeCode)(nil),                    // 364: google.fhir.r5.core.InventoryCountTypeCode
	(*InventoryItemStatusCode)(nil),                   // 365: google.fhir.r5.core.InventoryItemStatusCode
	(*InventoryReportStatusCode)(nil),                 // 366: google.fhir.r5.core.InventoryReportStatusCode
	(*InvoiceStatusCode)(nil),                         // 367: google.fhir.r5.core.InvoiceStatusCode
	(*IssueSeverityCode)(nil),                         // 368: google.fhir.r5.core.IssueSeverityCode
	(*IssueTypeCode)(nil),                             // 369: google.fhir.r5.core.IssueTypeCode
	(*KindCode)(nil),                                  // 370: google.fhir.r5.core.KindCode
	(*KnowledgeRepresentationLevelCode)(nil),          // 371: google.fhir.r5.core.KnowledgeRepresentationLevelCode
	(*LinkRelationTypesCode)(nil),                     // 372: google.fhir.r5.core.LinkRelationTypesCode
	(*LinkTypeCode)(nil),                              // 373: google.fhir.r5.core.LinkTypeCode
	(*LinkageTypeCode)(nil),                           // 374: google.fhir.r5.core.LinkageTypeCode
	(*ListModeCode)(nil),                              // 375: google.fhir.r5.core.ListModeCode
	(*ListStatusCode)(nil),                            // 376: google.fhir.r5.core.ListStatusCode
	(*LocationModeCode)(nil),                          // 377: google.fhir.r5.core.LocationModeCode
	(*LocationStatusCode)(nil),                        // 378: google.fhir.r5.core.LocationStatusCode
	(*MeasureReportStatusCode)(nil),                   // 379: google.fhir.r5.core.MeasureReportStatusCode
	(*MeasureReportTypeCode)(nil),                     // 380: google.fhir.r5.core.MeasureReportTypeCode
	(*MedicationAdministrationStatusCode)(nil),        // 381: google.fhir.r5.core.MedicationAdministrationStatusCode
	(*MedicationDispenseStatusCode)(nil),              // 382: google.fhir.r5.core.MedicationDispenseStatusCode
	(*MedicationKnowledgeStatusCode)(nil),             // 383: google.fhir.r5.core.MedicationKnowledgeStatusCode
	(*MedicationRequestIntentCode)(nil),               // 384: google.fhir.r5.core.MedicationRequestIntentCode
	(*MedicationRequestStatusCode)(nil),               // 385: google.fhir.r5.core.MedicationRequestStatusCode
	(*MedicationStatementStatusCodes)(nil),            // 386: google.fhir.r5.core.MedicationStatementStatusCodes
	(*MedicationStatusCode)(nil),                      // 387: google.fhir.r5.core.MedicationStatusCode
	(*MessageSignificanceCategoryCode)(nil),           // 388: google.fhir.r5.core.MessageSignificanceCategoryCode
	(*MessageheaderResponseRequestCode)(nil),          // 389: google.fhir.r5.core.MessageheaderResponseRequestCode
	(*NameUseCode)(nil),                               // 390: google.fhir.r5.core.NameUseCode
	(*NamingSystemIdentifierTypeCode)(nil),            // 391: google.fhir.r5.core.NamingSystemIdentifierTypeCode
	(*NamingSystemTypeCode)(nil),                      // 392: google.fhir.r5.core.NamingSystemTypeCode
	(*NarrativeStatusCode)(nil),                       // 393: google.fhir.r5.core.NarrativeStatusCode
	(*NoteTypeCode)(nil),                              // 394: google.fhir.r5.core.NoteTypeCode
	(*NutritionProductStatusCode)(nil),                // 395: google.fhir.r5.core.NutritionProductStatusCode
	(*ObservationDataTypeCode)(nil),                   // 396: google.fhir.r5.core.ObservationDataTypeCode
	(*ObservationRangeCategoryCode)(nil),              // 397: google.fhir.r5.core.ObservationRangeCategoryCode
	(*ObservationStatusCode)(nil),                     // 398: google.fhir.r5.core.ObservationStatusCode
	(*OperationKindCode)(nil),                         // 399: google.fhir.r5.core.OperationKindCode
	(*OperationParameterScopeCode)(nil),               // 400: google.fhir.r5.core.OperationParameterScopeCode
	(*OperationParameterUseCode)(nil),                 // 401: google.fhir.r5.core.OperationParameterUseCode
	(*OrientationTypeCode)(nil),                       // 402: google.fhir.r5.core.OrientationTypeCode
	(*ParticipationStatusCode)(nil),                   // 403: google.fhir.r5.core.ParticipationStatusCode
	(*PaymentOutcomeCode)(nil),                        // 404: google.fhir.r5.core.PaymentOutcomeCode
	(*PermissionRuleCombiningCode)(nil),               // 405: google.fhir.r5.core.PermissionRuleCombiningCode
	(*PermissionStatusCode)(nil),                      // 406: google.fhir.r5.core.PermissionStatusCode
	(*PriceComponentTypeCode)(nil),                    // 407: google.fhir.r5.core.PriceComponentTypeCode
	(*ProductStatusCode)(nil),                         // 408: google.fhir.r5.core.ProductStatusCode
	(*PropertyRepresentationCode)(nil),                // 409: google.fhir.r5.core.PropertyRepresentationCode
	(*PropertyTypeCode)(nil),                          // 410: google.fhir.r5.core.PropertyTypeCode
	(*ProvenanceEntityRoleCode)(nil),                  // 411: google.fhir.r5.core.ProvenanceEntityRoleCode
	(*PublicationStatusCode)(nil),                     // 412: google.fhir.r5.core.PublicationStatusCode
	(*QuantityComparatorCode)(nil),                    // 413: google.fhir.r5.core.QuantityComparatorCode
	(*QuestionnaireAnswerConstraintCode)(nil),         // 414: google.fhir.r5.core.QuestionnaireAnswerConstraintCode
	(*QuestionnaireItemDisabledDisplayCode)(nil),      // 415: google.fhir.r5.core.QuestionnaireItemDisabledDisplayCode
	(*QuestionnaireItemOperatorCode)(nil),             // 416: google.fhir.r5.core.QuestionnaireItemOperatorCode
	(*QuestionnaireItemTypeCode)(nil),                 // 417: google.fhir.r5.core.QuestionnaireItemTypeCode
	(*QuestionnaireResponseStatusCode)(nil),           // 418: google.fhir.r5.core.QuestionnaireResponseStatusCode
	(*ReferenceHandlingPolicyCode)(nil),               // 419: google.fhir.r5.core.ReferenceHandlingPolicyCode
	(*ReferenceVersionRulesCode)(nil),                 // 420: google.fhir.r5.core.ReferenceVersionRulesCode
	(*RelatedArtifactTypeCode)(nil),                   // 421: google.fhir.r5.core.RelatedArtifactTypeCode
	(*RelatedArtifactTypeExpandedCode)(nil),           // 422: google.fhir.r5.core.RelatedArtifactTypeExpandedCode
	(*ReportRelationshipTypeCode)(nil),                // 423: google.fhir.r5.core.ReportRelationshipTypeCode
	(*RequestIntentCode)(nil),                         // 424: google.fhir.r5.core.RequestIntentCode
	(*RequestPriorityCode)(nil),                       // 425: google.fhir.r5.core.RequestPriorityCode
	(*RequestStatusCode)(nil),                         // 426: google.fhir.r5.core.RequestStatusCode
	(*ResourceVersionPolicyCode)(nil),                 // 427: google.fhir.r5.core.ResourceVersionPolicyCode
	(*ResponseTypeCode)(nil),                          // 428: google.fhir.r5.core.ResponseTypeCode
	(*RestfulCapabilityModeCode)(nil),                 // 429: google.fhir.r5.core.RestfulCapabilityModeCode
	(*SPDXLicenseCode)(nil),                           // 430: google.fhir.r5.core.SPDXLicenseCode
	(*SearchComparatorCode)(nil),                      // 431: google.fhir.r5.core.SearchComparatorCode
	(*SearchEntryModeCode)(nil),                       // 432: google.fhir.r5.core.SearchEntryModeCode
	(*SearchModifierCode)(nil),                        // 433: google.fhir.r5.core.SearchModifierCode
	(*SearchParamTypeCode)(nil),                       // 434: google.fhir.r5.core.SearchParamTypeCode
	(*SearchProcessingModeTypeCode)(nil),              // 435: google.fhir.r5.core.SearchProcessingModeTypeCode
	(*SequenceTypeCode)(nil),                          // 436: google.fhir.r5.core.SequenceTypeCode
	(*SlicingRulesCode)(nil),                          // 437: google.fhir.r5.core.SlicingRulesCode
	(*SlotStatusCode)(nil),                            // 438: google.fhir.r5.core.SlotStatusCode
	(*SortDirectionCode)(nil),                         // 439: google.fhir.r5.core.SortDirectionCode
	(*SpecimenCombinedCode)(nil),                      // 440: google.fhir.r5.core.SpecimenCombinedCode
	(*SpecimenContainedPreferenceCode)(nil),           // 441: google.fhir.r5.core.SpecimenContainedPreferenceCode
	(*SpecimenStatusCode)(nil),                        // 442: google.fhir.r5.core.SpecimenStatusCode
	(*StatusCode)(nil),                                // 443: google.fhir.r5.core.StatusCode
	(*StrandTypeCode)(nil),                            // 444: google.fhir.r5.core.StrandTypeCode
	(*StructureDefinitionKindCode)(nil),               // 445: google.fhir.r5.core.StructureDefinitionKindCode
	(*StructureMapGroupTypeModeCode)(nil),             // 446: google.fhir.r5.core.StructureMapGroupTypeModeCode
	(*StructureMapInputModeCode)(nil),                 // 447: google.fhir.r5.core.StructureMapInputModeCode
	(*StructureMapModelModeCode)(nil),                 // 448: google.fhir.r5.core.StructureMapModelModeCode
	(*StructureMapSourceListModeCode)(nil),            // 449: google.fhir.r5.core.StructureMapSourceListModeCode
	(*StructureMapTargetListModeCode)(nil),            // 450: google.fhir.r5.core.StructureMapTargetListModeCode
	(*StructureMapTransformCode)(nil),                 // 451: google.fhir.r5.core.StructureMapTransformCode
	(*SubmitDataUpdateTypeCode)(nil),                  // 452: google.fhir.r5.core.SubmitDataUpdateTypeCode
	(*SubscriptionNotificationTypeCode)(nil),          // 453: google.fhir.r5.core.SubscriptionNotificationTypeCode
	(*SubscriptionPayloadContentCode)(nil),            // 454: google.fhir.r5.core.SubscriptionPayloadContentCode
	(*SubscriptionStatusCode)(nil),                    // 455: google.fhir.r5.core.SubscriptionStatusCode
	(*SupplyDeliveryStatusCode)(nil),                  // 456: google.fhir.r5.core.SupplyDeliveryStatusCode
	(*SupplyDeliverySupplyItemTypeCode)(nil),          // 457: google.fhir.r5.core.SupplyDeliverySupplyItemTypeCode
	(*SupplyRequestStatusCode)(nil),                   // 458: google.fhir.r5.core.SupplyRequestStatusCode
	(*TaskIntentCode)(nil),                            // 459: google.fhir.r5.core.TaskIntentCode
	(*TaskStatusCode)(nil),                            // 460: google.fhir.r5.core.TaskStatusCode
	(*TestReportActionResultCode)(nil),                // 461: google.fhir.r5.core.TestReportActionResultCode
	(*TestReportParticipantTypeCode)(nil),             // 462: google.fhir.r5.core.TestReportParticipantTypeCode
	(*TestReportResultCode)(nil),                      // 463: google.fhir.r5.core.TestReportResultCode
	(*TestReportStatusCode)(nil),                      // 464: google.fhir.r5.core.TestReportStatusCode
	(*TestScriptRequestMethodCode)(nil),               // 465: google.fhir.r5.core.TestScriptRequestMethodCode
	(*TransportIntentCode)(nil),                       // 466: google.fhir.r5.core.TransportIntentCode
	(*TransportStatusCode)(nil),                       // 467: google.fhir.r5.core.TransportStatusCode
	(*TriggerTypeCode)(nil),                           // 468: google.fhir.r5.core.TriggerTypeCode
	(*TriggeredBytypeCode)(nil),                       // 469: google.fhir.r5.core.TriggeredBytypeCode
	(*TypeDerivationRuleCode)(nil),                    // 470: google.fhir.r5.core.TypeDerivationRuleCode
	(*UDIEntryTypeCode)(nil),                          // 471: google.fhir.r5.core.UDIEntryTypeCode
	(*UseCode)(nil),                                   // 472: google.fhir.r5.core.UseCode
	(*VisionBaseCode)(nil),                            // 473: google.fhir.r5.core.VisionBaseCode
	(*VisionEyesCode)(nil),                            // 474: google.fhir.r5.core.VisionEyesCode
	(*WeekOfMonthCode)(nil),                           // 475: google.fhir.r5.core.WeekOfMonthCode
}
var file_proto_google_fhir_proto_r5_core_codes_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r5_core_codes_proto_init() }
func file_proto_google_fhir_proto_r5_core_codes_proto_init() {
	if File_proto_google_fhir_proto_r5_core_codes_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionCardinalityBehaviorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionConditionKindCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionGroupingBehaviorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionParticipantTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionPrecheckBehaviorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionRelationshipTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionRequiredBehaviorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionSelectionBehaviorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdditionalBindingPurposeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressUseCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdministrativeGenderCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdverseEventActualityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregationModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntoleranceCategoryCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntoleranceCriticalityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntoleranceSeverityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppointmentStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactAssessmentDispositionCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactAssessmentInformationTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactAssessmentWorkflowStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssertionDirectionTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssertionManualCompletionTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssertionOperatorTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssertionResponseTypesCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditEventActionCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditEventSeverityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindingStrengthCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BiologicallyDerivedProductDispenseCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BundleTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapabilityStatementKindCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CareTeamStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacteristicCombinationCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargeItemStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimProcessingOutcomeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClinicalUseDefinitionTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeSearchSupportCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeSystemContentModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeSystemHierarchyMeaningCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColorRGBCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompartmentTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompositionStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConceptMapAttributeTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConceptMapGroupUnmappedModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConceptMapPropertyTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConceptMapRelationshipCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionPreconditionTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionQuestionnairePurposeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionalDeleteStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionalReadStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConformanceExpectationCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsentDataMeaningCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsentProvisionTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsentStateCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConstraintSeverityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactPointSystemCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactPointUseCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractPublicationStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContributorTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CriteriaNotExistsBehaviorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DaysOfWeekCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetectedIssueSeverityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetectedIssueStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceAssociationCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceAssociationStatusReason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceCorrectiveActionScopeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceDispenseStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricCalibrationStateCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricCalibrationTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricCategoryCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricOperationalStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceNameTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceProductionIdentifierInUDICode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceRegulatoryIdentifierTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceUsageStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnosticReportStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscriminatorTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentReferenceStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EligibilityOutcomeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EligibilityRequestPurposeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EligibilityResponsePurposeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableWhenBehaviorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncounterLocationStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncounterStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndpointStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnrollmentOutcomeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpisodeOfCareStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventCapabilityModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTimingCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvidenceVariableHandlingCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExampleScenarioActorTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExplanationOfBenefitStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtensionContextTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FHIRCanonicalStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FHIRDeviceStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FHIROldTypesCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FHIRRestfulInteractionsCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FHIRSubstanceStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FHIRTypesCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FHIRVersionCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FamilyHistoryStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterOperatorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinancialResourceStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormularyItemStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenomicStudyStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoalLifecycleStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphCompartmentRuleCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphCompartmentUseCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupMembershipBasisCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuidanceResponseStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuidePageGenerationCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPVerbCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentifierUseCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityAssuranceLevelCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImagingSelection2DGraphicTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImagingSelection3DGraphicTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImagingSelectionStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImagingStudyStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngredientManufacturerRoleCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InventoryCountTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InventoryItemStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InventoryReportStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvoiceStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueSeverityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KindCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KnowledgeRepresentationLevelCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkRelationTypesCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkageTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasureReportStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasureReportTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationAdministrationStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationDispenseStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledgeStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationRequestIntentCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationRequestStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationStatementStatusCodes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageSignificanceCategoryCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageheaderResponseRequestCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NameUseCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamingSystemIdentifierTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamingSystemTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NarrativeStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NutritionProductStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationDataTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationRangeCategoryCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationKindCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationParameterScopeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationParameterUseCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrientationTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipationStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentOutcomeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionRuleCombiningCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceComponentTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyRepresentationCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvenanceEntityRoleCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicationStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuantityComparatorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireAnswerConstraintCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireItemDisabledDisplayCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireItemOperatorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireItemTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireResponseStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceHandlingPolicyCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceVersionRulesCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelatedArtifactTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelatedArtifactTypeExpandedCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportRelationshipTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestIntentCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestPriorityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceVersionPolicyCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestfulCapabilityModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SPDXLicenseCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchComparatorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchEntryModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchModifierCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchParamTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchProcessingModeTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SequenceTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlicingRulesCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlotStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortDirectionCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecimenCombinedCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecimenContainedPreferenceCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecimenStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrandTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureDefinitionKindCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureMapGroupTypeModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureMapInputModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureMapModelModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureMapSourceListModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureMapTargetListModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureMapTransformCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitDataUpdateTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionNotificationTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionPayloadContentCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplyDeliveryStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplyDeliverySupplyItemTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplyRequestStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskIntentCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestReportActionResultCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestReportParticipantTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestReportResultCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestReportStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestScriptRequestMethodCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransportIntentCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransportStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggeredBytypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeDerivationRuleCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UDIEntryTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VisionBaseCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VisionEyesCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeekOfMonthCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r5_core_codes_proto_rawDesc,
			NumEnums:      238,
			NumMessages:   238,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r5_core_codes_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r5_core_codes_proto_depIdxs,
		EnumInfos:         file_proto_google_fhir_proto_r5_core_codes_proto_enumTypes,
		MessageInfos:      file_proto_google_fhir_proto_r5_core_codes_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r5_core_codes_proto = out.File
	file_proto_google_fhir_proto_r5_core_codes_proto_rawDesc = nil
	file_proto_google_fhir_proto_r5_core_codes_proto_goTypes = nil
	file_proto_google_fhir_proto_r5_core_codes_proto_depIdxs = nil
}
