//    Copyright 2023 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.21.12
// source: proto/google/fhir/proto/r5/core/resources/medication_knowledge.proto

package medication_knowledge_go_proto

import (
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	codes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/codes_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for MedicationKnowledge.
// Definition of Medication Knowledge.
// See http://hl7.org/fhir/StructureDefinition/MedicationKnowledge
type MedicationKnowledge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*anypb.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business identifier for this medication
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,32,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Code that identifies this medication
	Code   *datatypes_go_proto.CodeableConcept `protobuf:"bytes,10,opt,name=code,proto3" json:"code,omitempty"`
	Status *MedicationKnowledge_StatusCode     `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Creator or owner of the knowledge or information about the medication
	Author *datatypes_go_proto.Reference `protobuf:"bytes,33,opt,name=author,proto3" json:"author,omitempty"`
	// Codes that identify the different jurisdictions for which the information
	// of this resource was created
	IntendedJurisdiction []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,34,rep,name=intended_jurisdiction,json=intendedJurisdiction,proto3" json:"intended_jurisdiction,omitempty"`
	// A name associated with the medication being described
	Name                       []*datatypes_go_proto.String                      `protobuf:"bytes,35,rep,name=name,proto3" json:"name,omitempty"`
	RelatedMedicationKnowledge []*MedicationKnowledge_RelatedMedicationKnowledge `protobuf:"bytes,16,rep,name=related_medication_knowledge,json=relatedMedicationKnowledge,proto3" json:"related_medication_knowledge,omitempty"`
	// The set of medication resources that are associated with this medication
	AssociatedMedication []*datatypes_go_proto.Reference `protobuf:"bytes,17,rep,name=associated_medication,json=associatedMedication,proto3" json:"associated_medication,omitempty"`
	// Category of the medication or product
	ProductType []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,18,rep,name=product_type,json=productType,proto3" json:"product_type,omitempty"`
	Monograph   []*MedicationKnowledge_Monograph      `protobuf:"bytes,19,rep,name=monograph,proto3" json:"monograph,omitempty"`
	// The instructions for preparing the medication
	PreparationInstruction *datatypes_go_proto.Markdown                  `protobuf:"bytes,21,opt,name=preparation_instruction,json=preparationInstruction,proto3" json:"preparation_instruction,omitempty"`
	Cost                   []*MedicationKnowledge_Cost                   `protobuf:"bytes,23,rep,name=cost,proto3" json:"cost,omitempty"`
	MonitoringProgram      []*MedicationKnowledge_MonitoringProgram      `protobuf:"bytes,24,rep,name=monitoring_program,json=monitoringProgram,proto3" json:"monitoring_program,omitempty"`
	IndicationGuideline    []*MedicationKnowledge_IndicationGuideline    `protobuf:"bytes,36,rep,name=indication_guideline,json=indicationGuideline,proto3" json:"indication_guideline,omitempty"`
	MedicineClassification []*MedicationKnowledge_MedicineClassification `protobuf:"bytes,26,rep,name=medicine_classification,json=medicineClassification,proto3" json:"medicine_classification,omitempty"`
	Packaging              []*MedicationKnowledge_Packaging              `protobuf:"bytes,37,rep,name=packaging,proto3" json:"packaging,omitempty"`
	// Potential clinical issue with or between medication(s)
	ClinicalUseIssue []*datatypes_go_proto.Reference         `protobuf:"bytes,38,rep,name=clinical_use_issue,json=clinicalUseIssue,proto3" json:"clinical_use_issue,omitempty"`
	StorageGuideline []*MedicationKnowledge_StorageGuideline `protobuf:"bytes,39,rep,name=storage_guideline,json=storageGuideline,proto3" json:"storage_guideline,omitempty"`
	Regulatory       []*MedicationKnowledge_Regulatory       `protobuf:"bytes,30,rep,name=regulatory,proto3" json:"regulatory,omitempty"`
	Definitional     *MedicationKnowledge_Definitional       `protobuf:"bytes,40,opt,name=definitional,proto3" json:"definitional,omitempty"`
}

func (x *MedicationKnowledge) Reset() {
	*x = MedicationKnowledge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge) ProtoMessage() {}

func (x *MedicationKnowledge) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0}
}

func (x *MedicationKnowledge) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationKnowledge) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *MedicationKnowledge) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *MedicationKnowledge) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *MedicationKnowledge) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *MedicationKnowledge) GetContained() []*anypb.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *MedicationKnowledge) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationKnowledge) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationKnowledge) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *MedicationKnowledge) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *MedicationKnowledge) GetStatus() *MedicationKnowledge_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MedicationKnowledge) GetAuthor() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *MedicationKnowledge) GetIntendedJurisdiction() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.IntendedJurisdiction
	}
	return nil
}

func (x *MedicationKnowledge) GetName() []*datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *MedicationKnowledge) GetRelatedMedicationKnowledge() []*MedicationKnowledge_RelatedMedicationKnowledge {
	if x != nil {
		return x.RelatedMedicationKnowledge
	}
	return nil
}

func (x *MedicationKnowledge) GetAssociatedMedication() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.AssociatedMedication
	}
	return nil
}

func (x *MedicationKnowledge) GetProductType() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ProductType
	}
	return nil
}

func (x *MedicationKnowledge) GetMonograph() []*MedicationKnowledge_Monograph {
	if x != nil {
		return x.Monograph
	}
	return nil
}

func (x *MedicationKnowledge) GetPreparationInstruction() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.PreparationInstruction
	}
	return nil
}

func (x *MedicationKnowledge) GetCost() []*MedicationKnowledge_Cost {
	if x != nil {
		return x.Cost
	}
	return nil
}

func (x *MedicationKnowledge) GetMonitoringProgram() []*MedicationKnowledge_MonitoringProgram {
	if x != nil {
		return x.MonitoringProgram
	}
	return nil
}

func (x *MedicationKnowledge) GetIndicationGuideline() []*MedicationKnowledge_IndicationGuideline {
	if x != nil {
		return x.IndicationGuideline
	}
	return nil
}

func (x *MedicationKnowledge) GetMedicineClassification() []*MedicationKnowledge_MedicineClassification {
	if x != nil {
		return x.MedicineClassification
	}
	return nil
}

func (x *MedicationKnowledge) GetPackaging() []*MedicationKnowledge_Packaging {
	if x != nil {
		return x.Packaging
	}
	return nil
}

func (x *MedicationKnowledge) GetClinicalUseIssue() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ClinicalUseIssue
	}
	return nil
}

func (x *MedicationKnowledge) GetStorageGuideline() []*MedicationKnowledge_StorageGuideline {
	if x != nil {
		return x.StorageGuideline
	}
	return nil
}

func (x *MedicationKnowledge) GetRegulatory() []*MedicationKnowledge_Regulatory {
	if x != nil {
		return x.Regulatory
	}
	return nil
}

func (x *MedicationKnowledge) GetDefinitional() *MedicationKnowledge_Definitional {
	if x != nil {
		return x.Definitional
	}
	return nil
}

// active | entered-in-error | inactive
type MedicationKnowledge_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.MedicationKnowledgeStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.MedicationKnowledgeStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                         `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                    `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MedicationKnowledge_StatusCode) Reset() {
	*x = MedicationKnowledge_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_StatusCode) ProtoMessage() {}

func (x *MedicationKnowledge_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_StatusCode.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 0}
}

func (x *MedicationKnowledge_StatusCode) GetValue() codes_go_proto.MedicationKnowledgeStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.MedicationKnowledgeStatusCode_Value(0)
}

func (x *MedicationKnowledge_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationKnowledge_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Associated or related medication information
type MedicationKnowledge_RelatedMedicationKnowledge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Category of medicationKnowledge
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Associated documentation about the associated medication knowledge
	Reference []*datatypes_go_proto.Reference `protobuf:"bytes,5,rep,name=reference,proto3" json:"reference,omitempty"`
}

func (x *MedicationKnowledge_RelatedMedicationKnowledge) Reset() {
	*x = MedicationKnowledge_RelatedMedicationKnowledge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_RelatedMedicationKnowledge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_RelatedMedicationKnowledge) ProtoMessage() {}

func (x *MedicationKnowledge_RelatedMedicationKnowledge) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_RelatedMedicationKnowledge.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_RelatedMedicationKnowledge) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 1}
}

func (x *MedicationKnowledge_RelatedMedicationKnowledge) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationKnowledge_RelatedMedicationKnowledge) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationKnowledge_RelatedMedicationKnowledge) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationKnowledge_RelatedMedicationKnowledge) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MedicationKnowledge_RelatedMedicationKnowledge) GetReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Reference
	}
	return nil
}

// Associated documentation about the medication
type MedicationKnowledge_Monograph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The category of medication document
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Associated documentation about the medication
	Source *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *MedicationKnowledge_Monograph) Reset() {
	*x = MedicationKnowledge_Monograph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_Monograph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_Monograph) ProtoMessage() {}

func (x *MedicationKnowledge_Monograph) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_Monograph.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_Monograph) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 2}
}

func (x *MedicationKnowledge_Monograph) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationKnowledge_Monograph) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationKnowledge_Monograph) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationKnowledge_Monograph) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MedicationKnowledge_Monograph) GetSource() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Source
	}
	return nil
}

// The pricing of the medication
type MedicationKnowledge_Cost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The date range for which the cost is effective
	EffectiveDate []*datatypes_go_proto.Period `protobuf:"bytes,7,rep,name=effective_date,json=effectiveDate,proto3" json:"effective_date,omitempty"`
	// The category of the cost information
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// The source or owner for the price information
	Source *datatypes_go_proto.String      `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
	Cost   *MedicationKnowledge_Cost_CostX `protobuf:"bytes,8,opt,name=cost,proto3" json:"cost,omitempty"`
}

func (x *MedicationKnowledge_Cost) Reset() {
	*x = MedicationKnowledge_Cost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_Cost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_Cost) ProtoMessage() {}

func (x *MedicationKnowledge_Cost) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_Cost.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_Cost) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 3}
}

func (x *MedicationKnowledge_Cost) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationKnowledge_Cost) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationKnowledge_Cost) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationKnowledge_Cost) GetEffectiveDate() []*datatypes_go_proto.Period {
	if x != nil {
		return x.EffectiveDate
	}
	return nil
}

func (x *MedicationKnowledge_Cost) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MedicationKnowledge_Cost) GetSource() *datatypes_go_proto.String {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *MedicationKnowledge_Cost) GetCost() *MedicationKnowledge_Cost_CostX {
	if x != nil {
		return x.Cost
	}
	return nil
}

// Program under which a medication is reviewed
type MedicationKnowledge_MonitoringProgram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of program under which the medication is monitored
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Name of the reviewing program
	Name *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *MedicationKnowledge_MonitoringProgram) Reset() {
	*x = MedicationKnowledge_MonitoringProgram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_MonitoringProgram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_MonitoringProgram) ProtoMessage() {}

func (x *MedicationKnowledge_MonitoringProgram) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_MonitoringProgram.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_MonitoringProgram) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 4}
}

func (x *MedicationKnowledge_MonitoringProgram) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationKnowledge_MonitoringProgram) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationKnowledge_MonitoringProgram) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationKnowledge_MonitoringProgram) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MedicationKnowledge_MonitoringProgram) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

// Guidelines or protocols for administration of the medication for an
// indication
type MedicationKnowledge_IndicationGuideline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Indication for use that applies to the specific administration guideline
	Indication      []*datatypes_go_proto.CodeableReference                    `protobuf:"bytes,4,rep,name=indication,proto3" json:"indication,omitempty"`
	DosingGuideline []*MedicationKnowledge_IndicationGuideline_DosingGuideline `protobuf:"bytes,5,rep,name=dosing_guideline,json=dosingGuideline,proto3" json:"dosing_guideline,omitempty"`
}

func (x *MedicationKnowledge_IndicationGuideline) Reset() {
	*x = MedicationKnowledge_IndicationGuideline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_IndicationGuideline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_IndicationGuideline) ProtoMessage() {}

func (x *MedicationKnowledge_IndicationGuideline) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_IndicationGuideline.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_IndicationGuideline) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 5}
}

func (x *MedicationKnowledge_IndicationGuideline) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationKnowledge_IndicationGuideline) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationKnowledge_IndicationGuideline) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationKnowledge_IndicationGuideline) GetIndication() []*datatypes_go_proto.CodeableReference {
	if x != nil {
		return x.Indication
	}
	return nil
}

func (x *MedicationKnowledge_IndicationGuideline) GetDosingGuideline() []*MedicationKnowledge_IndicationGuideline_DosingGuideline {
	if x != nil {
		return x.DosingGuideline
	}
	return nil
}

// Categorization of the medication within a formulary or classification
// system
type MedicationKnowledge_MedicineClassification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The type of category for the medication (for example, therapeutic
	// classification, therapeutic sub-classification)
	Type   *datatypes_go_proto.CodeableConcept                 `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Source *MedicationKnowledge_MedicineClassification_SourceX `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
	// Specific category assigned to the medication
	Classification []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,rep,name=classification,proto3" json:"classification,omitempty"`
}

func (x *MedicationKnowledge_MedicineClassification) Reset() {
	*x = MedicationKnowledge_MedicineClassification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_MedicineClassification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_MedicineClassification) ProtoMessage() {}

func (x *MedicationKnowledge_MedicineClassification) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_MedicineClassification.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_MedicineClassification) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 6}
}

func (x *MedicationKnowledge_MedicineClassification) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationKnowledge_MedicineClassification) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationKnowledge_MedicineClassification) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationKnowledge_MedicineClassification) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MedicationKnowledge_MedicineClassification) GetSource() *MedicationKnowledge_MedicineClassification_SourceX {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *MedicationKnowledge_MedicineClassification) GetClassification() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Classification
	}
	return nil
}

// Details about packaged medications
type MedicationKnowledge_Packaging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Cost of the packaged medication
	Cost []*MedicationKnowledge_Cost `protobuf:"bytes,6,rep,name=cost,proto3" json:"cost,omitempty"`
	// The packaged medication that is being priced
	PackagedProduct *datatypes_go_proto.Reference `protobuf:"bytes,7,opt,name=packaged_product,json=packagedProduct,proto3" json:"packaged_product,omitempty"`
}

func (x *MedicationKnowledge_Packaging) Reset() {
	*x = MedicationKnowledge_Packaging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_Packaging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_Packaging) ProtoMessage() {}

func (x *MedicationKnowledge_Packaging) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_Packaging.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_Packaging) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 7}
}

func (x *MedicationKnowledge_Packaging) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationKnowledge_Packaging) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationKnowledge_Packaging) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationKnowledge_Packaging) GetCost() []*MedicationKnowledge_Cost {
	if x != nil {
		return x.Cost
	}
	return nil
}

func (x *MedicationKnowledge_Packaging) GetPackagedProduct() *datatypes_go_proto.Reference {
	if x != nil {
		return x.PackagedProduct
	}
	return nil
}

// How the medication should be stored
type MedicationKnowledge_StorageGuideline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Reference to additional information
	Reference *datatypes_go_proto.Uri `protobuf:"bytes,4,opt,name=reference,proto3" json:"reference,omitempty"`
	// Additional storage notes
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,5,rep,name=note,proto3" json:"note,omitempty"`
	// Duration remains stable
	StabilityDuration    *datatypes_go_proto.Duration                                 `protobuf:"bytes,6,opt,name=stability_duration,json=stabilityDuration,proto3" json:"stability_duration,omitempty"`
	EnvironmentalSetting []*MedicationKnowledge_StorageGuideline_EnvironmentalSetting `protobuf:"bytes,7,rep,name=environmental_setting,json=environmentalSetting,proto3" json:"environmental_setting,omitempty"`
}

func (x *MedicationKnowledge_StorageGuideline) Reset() {
	*x = MedicationKnowledge_StorageGuideline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_StorageGuideline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_StorageGuideline) ProtoMessage() {}

func (x *MedicationKnowledge_StorageGuideline) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_StorageGuideline.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_StorageGuideline) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 8}
}

func (x *MedicationKnowledge_StorageGuideline) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationKnowledge_StorageGuideline) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationKnowledge_StorageGuideline) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationKnowledge_StorageGuideline) GetReference() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *MedicationKnowledge_StorageGuideline) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *MedicationKnowledge_StorageGuideline) GetStabilityDuration() *datatypes_go_proto.Duration {
	if x != nil {
		return x.StabilityDuration
	}
	return nil
}

func (x *MedicationKnowledge_StorageGuideline) GetEnvironmentalSetting() []*MedicationKnowledge_StorageGuideline_EnvironmentalSetting {
	if x != nil {
		return x.EnvironmentalSetting
	}
	return nil
}

// Regulatory information about a medication
type MedicationKnowledge_Regulatory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Specifies the authority of the regulation
	RegulatoryAuthority *datatypes_go_proto.Reference                  `protobuf:"bytes,4,opt,name=regulatory_authority,json=regulatoryAuthority,proto3" json:"regulatory_authority,omitempty"`
	Substitution        []*MedicationKnowledge_Regulatory_Substitution `protobuf:"bytes,5,rep,name=substitution,proto3" json:"substitution,omitempty"`
	// Specifies the schedule of a medication in jurisdiction
	Schedule    []*datatypes_go_proto.CodeableConcept       `protobuf:"bytes,8,rep,name=schedule,proto3" json:"schedule,omitempty"`
	MaxDispense *MedicationKnowledge_Regulatory_MaxDispense `protobuf:"bytes,7,opt,name=max_dispense,json=maxDispense,proto3" json:"max_dispense,omitempty"`
}

func (x *MedicationKnowledge_Regulatory) Reset() {
	*x = MedicationKnowledge_Regulatory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_Regulatory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_Regulatory) ProtoMessage() {}

func (x *MedicationKnowledge_Regulatory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_Regulatory.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_Regulatory) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 9}
}

func (x *MedicationKnowledge_Regulatory) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationKnowledge_Regulatory) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationKnowledge_Regulatory) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationKnowledge_Regulatory) GetRegulatoryAuthority() *datatypes_go_proto.Reference {
	if x != nil {
		return x.RegulatoryAuthority
	}
	return nil
}

func (x *MedicationKnowledge_Regulatory) GetSubstitution() []*MedicationKnowledge_Regulatory_Substitution {
	if x != nil {
		return x.Substitution
	}
	return nil
}

func (x *MedicationKnowledge_Regulatory) GetSchedule() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *MedicationKnowledge_Regulatory) GetMaxDispense() *MedicationKnowledge_Regulatory_MaxDispense {
	if x != nil {
		return x.MaxDispense
	}
	return nil
}

// Minimal definition information about the medication
type MedicationKnowledge_Definitional struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Definitional resources that provide more information about this
	// medication
	Definition []*datatypes_go_proto.Reference `protobuf:"bytes,4,rep,name=definition,proto3" json:"definition,omitempty"`
	// powder | tablets | capsule +
	DoseForm *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=dose_form,json=doseForm,proto3" json:"dose_form,omitempty"`
	// The intended or approved route of administration
	IntendedRoute      []*datatypes_go_proto.CodeableConcept                  `protobuf:"bytes,6,rep,name=intended_route,json=intendedRoute,proto3" json:"intended_route,omitempty"`
	Ingredient         []*MedicationKnowledge_Definitional_Ingredient         `protobuf:"bytes,7,rep,name=ingredient,proto3" json:"ingredient,omitempty"`
	DrugCharacteristic []*MedicationKnowledge_Definitional_DrugCharacteristic `protobuf:"bytes,8,rep,name=drug_characteristic,json=drugCharacteristic,proto3" json:"drug_characteristic,omitempty"`
}

func (x *MedicationKnowledge_Definitional) Reset() {
	*x = MedicationKnowledge_Definitional{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_Definitional) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_Definitional) ProtoMessage() {}

func (x *MedicationKnowledge_Definitional) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_Definitional.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_Definitional) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 10}
}

func (x *MedicationKnowledge_Definitional) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationKnowledge_Definitional) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationKnowledge_Definitional) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationKnowledge_Definitional) GetDefinition() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Definition
	}
	return nil
}

func (x *MedicationKnowledge_Definitional) GetDoseForm() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DoseForm
	}
	return nil
}

func (x *MedicationKnowledge_Definitional) GetIntendedRoute() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.IntendedRoute
	}
	return nil
}

func (x *MedicationKnowledge_Definitional) GetIngredient() []*MedicationKnowledge_Definitional_Ingredient {
	if x != nil {
		return x.Ingredient
	}
	return nil
}

func (x *MedicationKnowledge_Definitional) GetDrugCharacteristic() []*MedicationKnowledge_Definitional_DrugCharacteristic {
	if x != nil {
		return x.DrugCharacteristic
	}
	return nil
}

// The price or category of the cost of the medication
type MedicationKnowledge_Cost_CostX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*MedicationKnowledge_Cost_CostX_Money
	//	*MedicationKnowledge_Cost_CostX_CodeableConcept
	Choice isMedicationKnowledge_Cost_CostX_Choice `protobuf_oneof:"choice"`
}

func (x *MedicationKnowledge_Cost_CostX) Reset() {
	*x = MedicationKnowledge_Cost_CostX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_Cost_CostX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_Cost_CostX) ProtoMessage() {}

func (x *MedicationKnowledge_Cost_CostX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_Cost_CostX.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_Cost_CostX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (m *MedicationKnowledge_Cost_CostX) GetChoice() isMedicationKnowledge_Cost_CostX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *MedicationKnowledge_Cost_CostX) GetMoney() *datatypes_go_proto.Money {
	if x, ok := x.GetChoice().(*MedicationKnowledge_Cost_CostX_Money); ok {
		return x.Money
	}
	return nil
}

func (x *MedicationKnowledge_Cost_CostX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*MedicationKnowledge_Cost_CostX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

type isMedicationKnowledge_Cost_CostX_Choice interface {
	isMedicationKnowledge_Cost_CostX_Choice()
}

type MedicationKnowledge_Cost_CostX_Money struct {
	Money *datatypes_go_proto.Money `protobuf:"bytes,1,opt,name=money,proto3,oneof"`
}

type MedicationKnowledge_Cost_CostX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

func (*MedicationKnowledge_Cost_CostX_Money) isMedicationKnowledge_Cost_CostX_Choice() {}

func (*MedicationKnowledge_Cost_CostX_CodeableConcept) isMedicationKnowledge_Cost_CostX_Choice() {}

// Guidelines for dosage of the medication
type MedicationKnowledge_IndicationGuideline_DosingGuideline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Intention of the treatment
	TreatmentIntent *datatypes_go_proto.CodeableConcept                               `protobuf:"bytes,4,opt,name=treatment_intent,json=treatmentIntent,proto3" json:"treatment_intent,omitempty"`
	Dosage          []*MedicationKnowledge_IndicationGuideline_DosingGuideline_Dosage `protobuf:"bytes,5,rep,name=dosage,proto3" json:"dosage,omitempty"`
	// Type of treatment the guideline applies to
	AdministrationTreatment *datatypes_go_proto.CodeableConcept                                              `protobuf:"bytes,6,opt,name=administration_treatment,json=administrationTreatment,proto3" json:"administration_treatment,omitempty"`
	PatientCharacteristic   []*MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic `protobuf:"bytes,7,rep,name=patient_characteristic,json=patientCharacteristic,proto3" json:"patient_characteristic,omitempty"`
}

func (x *MedicationKnowledge_IndicationGuideline_DosingGuideline) Reset() {
	*x = MedicationKnowledge_IndicationGuideline_DosingGuideline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_IndicationGuideline_DosingGuideline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_IndicationGuideline_DosingGuideline) ProtoMessage() {}

func (x *MedicationKnowledge_IndicationGuideline_DosingGuideline) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_IndicationGuideline_DosingGuideline.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_IndicationGuideline_DosingGuideline) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 5, 0}
}

func (x *MedicationKnowledge_IndicationGuideline_DosingGuideline) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationKnowledge_IndicationGuideline_DosingGuideline) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationKnowledge_IndicationGuideline_DosingGuideline) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationKnowledge_IndicationGuideline_DosingGuideline) GetTreatmentIntent() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.TreatmentIntent
	}
	return nil
}

func (x *MedicationKnowledge_IndicationGuideline_DosingGuideline) GetDosage() []*MedicationKnowledge_IndicationGuideline_DosingGuideline_Dosage {
	if x != nil {
		return x.Dosage
	}
	return nil
}

func (x *MedicationKnowledge_IndicationGuideline_DosingGuideline) GetAdministrationTreatment() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AdministrationTreatment
	}
	return nil
}

func (x *MedicationKnowledge_IndicationGuideline_DosingGuideline) GetPatientCharacteristic() []*MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic {
	if x != nil {
		return x.PatientCharacteristic
	}
	return nil
}

// Dosage for the medication for the specific guidelines
type MedicationKnowledge_IndicationGuideline_DosingGuideline_Dosage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Category of dosage for a medication
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Dosage for the medication for the specific guidelines
	Dosage []*datatypes_go_proto.Dosage `protobuf:"bytes,5,rep,name=dosage,proto3" json:"dosage,omitempty"`
}

func (x *MedicationKnowledge_IndicationGuideline_DosingGuideline_Dosage) Reset() {
	*x = MedicationKnowledge_IndicationGuideline_DosingGuideline_Dosage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_IndicationGuideline_DosingGuideline_Dosage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_IndicationGuideline_DosingGuideline_Dosage) ProtoMessage() {}

func (x *MedicationKnowledge_IndicationGuideline_DosingGuideline_Dosage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_IndicationGuideline_DosingGuideline_Dosage.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_IndicationGuideline_DosingGuideline_Dosage) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 5, 0, 0}
}

func (x *MedicationKnowledge_IndicationGuideline_DosingGuideline_Dosage) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationKnowledge_IndicationGuideline_DosingGuideline_Dosage) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationKnowledge_IndicationGuideline_DosingGuideline_Dosage) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationKnowledge_IndicationGuideline_DosingGuideline_Dosage) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MedicationKnowledge_IndicationGuideline_DosingGuideline_Dosage) GetDosage() []*datatypes_go_proto.Dosage {
	if x != nil {
		return x.Dosage
	}
	return nil
}

// Characteristics of the patient that are relevant to the administration
// guidelines
type MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Categorization of specific characteristic that is relevant to the
	// administration guideline
	Type  *datatypes_go_proto.CodeableConcept                                                   `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Value *MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic_ValueX `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic) Reset() {
	*x = MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic) ProtoMessage() {
}

func (x *MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 5, 0, 1}
}

func (x *MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic) GetValue() *MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

// The specific characteristic
type MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic_ValueX_CodeableConcept
	//	*MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic_ValueX_Quantity
	//	*MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic_ValueX_Range
	Choice isMedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic_ValueX) Reset() {
	*x = MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic_ValueX) ProtoMessage() {
}

func (x *MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic_ValueX.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 5, 0, 1, 0}
}

func (m *MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic_ValueX) GetChoice() isMedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic_ValueX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic_ValueX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic_ValueX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic_ValueX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic_ValueX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic_ValueX_Range); ok {
		return x.Range
	}
	return nil
}

type isMedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic_ValueX_Choice interface {
	isMedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic_ValueX_Choice()
}

type MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic_ValueX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic_ValueX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,2,opt,name=quantity,proto3,oneof"`
}

type MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic_ValueX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,3,opt,name=range,proto3,oneof"`
}

func (*MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic_ValueX_CodeableConcept) isMedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic_ValueX_Choice() {
}

func (*MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic_ValueX_Quantity) isMedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic_ValueX_Choice() {
}

func (*MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic_ValueX_Range) isMedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic_ValueX_Choice() {
}

// The source of the classification
type MedicationKnowledge_MedicineClassification_SourceX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*MedicationKnowledge_MedicineClassification_SourceX_StringValue
	//	*MedicationKnowledge_MedicineClassification_SourceX_Uri
	Choice isMedicationKnowledge_MedicineClassification_SourceX_Choice `protobuf_oneof:"choice"`
}

func (x *MedicationKnowledge_MedicineClassification_SourceX) Reset() {
	*x = MedicationKnowledge_MedicineClassification_SourceX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_MedicineClassification_SourceX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_MedicineClassification_SourceX) ProtoMessage() {}

func (x *MedicationKnowledge_MedicineClassification_SourceX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_MedicineClassification_SourceX.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_MedicineClassification_SourceX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 6, 0}
}

func (m *MedicationKnowledge_MedicineClassification_SourceX) GetChoice() isMedicationKnowledge_MedicineClassification_SourceX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *MedicationKnowledge_MedicineClassification_SourceX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*MedicationKnowledge_MedicineClassification_SourceX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *MedicationKnowledge_MedicineClassification_SourceX) GetUri() *datatypes_go_proto.Uri {
	if x, ok := x.GetChoice().(*MedicationKnowledge_MedicineClassification_SourceX_Uri); ok {
		return x.Uri
	}
	return nil
}

type isMedicationKnowledge_MedicineClassification_SourceX_Choice interface {
	isMedicationKnowledge_MedicineClassification_SourceX_Choice()
}

type MedicationKnowledge_MedicineClassification_SourceX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=string_value,json=string,proto3,oneof"`
}

type MedicationKnowledge_MedicineClassification_SourceX_Uri struct {
	Uri *datatypes_go_proto.Uri `protobuf:"bytes,2,opt,name=uri,proto3,oneof"`
}

func (*MedicationKnowledge_MedicineClassification_SourceX_StringValue) isMedicationKnowledge_MedicineClassification_SourceX_Choice() {
}

func (*MedicationKnowledge_MedicineClassification_SourceX_Uri) isMedicationKnowledge_MedicineClassification_SourceX_Choice() {
}

// Setting or value of environment for adequate storage
type MedicationKnowledge_StorageGuideline_EnvironmentalSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Categorization of the setting
	Type  *datatypes_go_proto.CodeableConcept                               `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Value *MedicationKnowledge_StorageGuideline_EnvironmentalSetting_ValueX `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MedicationKnowledge_StorageGuideline_EnvironmentalSetting) Reset() {
	*x = MedicationKnowledge_StorageGuideline_EnvironmentalSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_StorageGuideline_EnvironmentalSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_StorageGuideline_EnvironmentalSetting) ProtoMessage() {}

func (x *MedicationKnowledge_StorageGuideline_EnvironmentalSetting) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_StorageGuideline_EnvironmentalSetting.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_StorageGuideline_EnvironmentalSetting) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 8, 0}
}

func (x *MedicationKnowledge_StorageGuideline_EnvironmentalSetting) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationKnowledge_StorageGuideline_EnvironmentalSetting) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationKnowledge_StorageGuideline_EnvironmentalSetting) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationKnowledge_StorageGuideline_EnvironmentalSetting) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MedicationKnowledge_StorageGuideline_EnvironmentalSetting) GetValue() *MedicationKnowledge_StorageGuideline_EnvironmentalSetting_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

// Value of the setting
type MedicationKnowledge_StorageGuideline_EnvironmentalSetting_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*MedicationKnowledge_StorageGuideline_EnvironmentalSetting_ValueX_Quantity
	//	*MedicationKnowledge_StorageGuideline_EnvironmentalSetting_ValueX_Range
	//	*MedicationKnowledge_StorageGuideline_EnvironmentalSetting_ValueX_CodeableConcept
	Choice isMedicationKnowledge_StorageGuideline_EnvironmentalSetting_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *MedicationKnowledge_StorageGuideline_EnvironmentalSetting_ValueX) Reset() {
	*x = MedicationKnowledge_StorageGuideline_EnvironmentalSetting_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_StorageGuideline_EnvironmentalSetting_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_StorageGuideline_EnvironmentalSetting_ValueX) ProtoMessage() {}

func (x *MedicationKnowledge_StorageGuideline_EnvironmentalSetting_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_StorageGuideline_EnvironmentalSetting_ValueX.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_StorageGuideline_EnvironmentalSetting_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 8, 0, 0}
}

func (m *MedicationKnowledge_StorageGuideline_EnvironmentalSetting_ValueX) GetChoice() isMedicationKnowledge_StorageGuideline_EnvironmentalSetting_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *MedicationKnowledge_StorageGuideline_EnvironmentalSetting_ValueX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*MedicationKnowledge_StorageGuideline_EnvironmentalSetting_ValueX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *MedicationKnowledge_StorageGuideline_EnvironmentalSetting_ValueX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*MedicationKnowledge_StorageGuideline_EnvironmentalSetting_ValueX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *MedicationKnowledge_StorageGuideline_EnvironmentalSetting_ValueX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*MedicationKnowledge_StorageGuideline_EnvironmentalSetting_ValueX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

type isMedicationKnowledge_StorageGuideline_EnvironmentalSetting_ValueX_Choice interface {
	isMedicationKnowledge_StorageGuideline_EnvironmentalSetting_ValueX_Choice()
}

type MedicationKnowledge_StorageGuideline_EnvironmentalSetting_ValueX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type MedicationKnowledge_StorageGuideline_EnvironmentalSetting_ValueX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,2,opt,name=range,proto3,oneof"`
}

type MedicationKnowledge_StorageGuideline_EnvironmentalSetting_ValueX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

func (*MedicationKnowledge_StorageGuideline_EnvironmentalSetting_ValueX_Quantity) isMedicationKnowledge_StorageGuideline_EnvironmentalSetting_ValueX_Choice() {
}

func (*MedicationKnowledge_StorageGuideline_EnvironmentalSetting_ValueX_Range) isMedicationKnowledge_StorageGuideline_EnvironmentalSetting_ValueX_Choice() {
}

func (*MedicationKnowledge_StorageGuideline_EnvironmentalSetting_ValueX_CodeableConcept) isMedicationKnowledge_StorageGuideline_EnvironmentalSetting_ValueX_Choice() {
}

// Specifies if changes are allowed when dispensing a medication from a
// regulatory perspective
type MedicationKnowledge_Regulatory_Substitution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Specifies the type of substitution allowed
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Specifies if regulation allows for changes in the medication when
	// dispensing
	Allowed *datatypes_go_proto.Boolean `protobuf:"bytes,5,opt,name=allowed,proto3" json:"allowed,omitempty"`
}

func (x *MedicationKnowledge_Regulatory_Substitution) Reset() {
	*x = MedicationKnowledge_Regulatory_Substitution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_Regulatory_Substitution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_Regulatory_Substitution) ProtoMessage() {}

func (x *MedicationKnowledge_Regulatory_Substitution) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_Regulatory_Substitution.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_Regulatory_Substitution) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 9, 0}
}

func (x *MedicationKnowledge_Regulatory_Substitution) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationKnowledge_Regulatory_Substitution) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationKnowledge_Regulatory_Substitution) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationKnowledge_Regulatory_Substitution) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MedicationKnowledge_Regulatory_Substitution) GetAllowed() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Allowed
	}
	return nil
}

// The maximum number of units of the medication that can be dispensed in a
// period
type MedicationKnowledge_Regulatory_MaxDispense struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The maximum number of units of the medication that can be dispensed
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,4,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// The period that applies to the maximum number of units
	Period *datatypes_go_proto.Duration `protobuf:"bytes,5,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *MedicationKnowledge_Regulatory_MaxDispense) Reset() {
	*x = MedicationKnowledge_Regulatory_MaxDispense{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_Regulatory_MaxDispense) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_Regulatory_MaxDispense) ProtoMessage() {}

func (x *MedicationKnowledge_Regulatory_MaxDispense) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_Regulatory_MaxDispense.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_Regulatory_MaxDispense) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 9, 1}
}

func (x *MedicationKnowledge_Regulatory_MaxDispense) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationKnowledge_Regulatory_MaxDispense) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationKnowledge_Regulatory_MaxDispense) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationKnowledge_Regulatory_MaxDispense) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *MedicationKnowledge_Regulatory_MaxDispense) GetPeriod() *datatypes_go_proto.Duration {
	if x != nil {
		return x.Period
	}
	return nil
}

// Active or inactive ingredient
type MedicationKnowledge_Definitional_Ingredient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Substances contained in the medication
	Item *datatypes_go_proto.CodeableReference `protobuf:"bytes,4,opt,name=item,proto3" json:"item,omitempty"`
	// A code that defines the type of ingredient, active, base, etc
	Type     *datatypes_go_proto.CodeableConcept                    `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Strength *MedicationKnowledge_Definitional_Ingredient_StrengthX `protobuf:"bytes,6,opt,name=strength,proto3" json:"strength,omitempty"`
}

func (x *MedicationKnowledge_Definitional_Ingredient) Reset() {
	*x = MedicationKnowledge_Definitional_Ingredient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_Definitional_Ingredient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_Definitional_Ingredient) ProtoMessage() {}

func (x *MedicationKnowledge_Definitional_Ingredient) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_Definitional_Ingredient.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_Definitional_Ingredient) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 10, 0}
}

func (x *MedicationKnowledge_Definitional_Ingredient) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationKnowledge_Definitional_Ingredient) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationKnowledge_Definitional_Ingredient) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationKnowledge_Definitional_Ingredient) GetItem() *datatypes_go_proto.CodeableReference {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *MedicationKnowledge_Definitional_Ingredient) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MedicationKnowledge_Definitional_Ingredient) GetStrength() *MedicationKnowledge_Definitional_Ingredient_StrengthX {
	if x != nil {
		return x.Strength
	}
	return nil
}

// Specifies descriptive properties of the medicine
type MedicationKnowledge_Definitional_DrugCharacteristic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Code specifying the type of characteristic of medication
	Type  *datatypes_go_proto.CodeableConcept                         `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Value *MedicationKnowledge_Definitional_DrugCharacteristic_ValueX `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MedicationKnowledge_Definitional_DrugCharacteristic) Reset() {
	*x = MedicationKnowledge_Definitional_DrugCharacteristic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_Definitional_DrugCharacteristic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_Definitional_DrugCharacteristic) ProtoMessage() {}

func (x *MedicationKnowledge_Definitional_DrugCharacteristic) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_Definitional_DrugCharacteristic.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_Definitional_DrugCharacteristic) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 10, 1}
}

func (x *MedicationKnowledge_Definitional_DrugCharacteristic) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationKnowledge_Definitional_DrugCharacteristic) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationKnowledge_Definitional_DrugCharacteristic) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationKnowledge_Definitional_DrugCharacteristic) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MedicationKnowledge_Definitional_DrugCharacteristic) GetValue() *MedicationKnowledge_Definitional_DrugCharacteristic_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

// Quantity of ingredient present
type MedicationKnowledge_Definitional_Ingredient_StrengthX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*MedicationKnowledge_Definitional_Ingredient_StrengthX_Ratio
	//	*MedicationKnowledge_Definitional_Ingredient_StrengthX_CodeableConcept
	//	*MedicationKnowledge_Definitional_Ingredient_StrengthX_Quantity
	Choice isMedicationKnowledge_Definitional_Ingredient_StrengthX_Choice `protobuf_oneof:"choice"`
}

func (x *MedicationKnowledge_Definitional_Ingredient_StrengthX) Reset() {
	*x = MedicationKnowledge_Definitional_Ingredient_StrengthX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_Definitional_Ingredient_StrengthX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_Definitional_Ingredient_StrengthX) ProtoMessage() {}

func (x *MedicationKnowledge_Definitional_Ingredient_StrengthX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_Definitional_Ingredient_StrengthX.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_Definitional_Ingredient_StrengthX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 10, 0, 0}
}

func (m *MedicationKnowledge_Definitional_Ingredient_StrengthX) GetChoice() isMedicationKnowledge_Definitional_Ingredient_StrengthX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *MedicationKnowledge_Definitional_Ingredient_StrengthX) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetChoice().(*MedicationKnowledge_Definitional_Ingredient_StrengthX_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *MedicationKnowledge_Definitional_Ingredient_StrengthX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*MedicationKnowledge_Definitional_Ingredient_StrengthX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *MedicationKnowledge_Definitional_Ingredient_StrengthX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*MedicationKnowledge_Definitional_Ingredient_StrengthX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isMedicationKnowledge_Definitional_Ingredient_StrengthX_Choice interface {
	isMedicationKnowledge_Definitional_Ingredient_StrengthX_Choice()
}

type MedicationKnowledge_Definitional_Ingredient_StrengthX_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,1,opt,name=ratio,proto3,oneof"`
}

type MedicationKnowledge_Definitional_Ingredient_StrengthX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type MedicationKnowledge_Definitional_Ingredient_StrengthX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,3,opt,name=quantity,proto3,oneof"`
}

func (*MedicationKnowledge_Definitional_Ingredient_StrengthX_Ratio) isMedicationKnowledge_Definitional_Ingredient_StrengthX_Choice() {
}

func (*MedicationKnowledge_Definitional_Ingredient_StrengthX_CodeableConcept) isMedicationKnowledge_Definitional_Ingredient_StrengthX_Choice() {
}

func (*MedicationKnowledge_Definitional_Ingredient_StrengthX_Quantity) isMedicationKnowledge_Definitional_Ingredient_StrengthX_Choice() {
}

// Description of the characteristic
type MedicationKnowledge_Definitional_DrugCharacteristic_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*MedicationKnowledge_Definitional_DrugCharacteristic_ValueX_CodeableConcept
	//	*MedicationKnowledge_Definitional_DrugCharacteristic_ValueX_StringValue
	//	*MedicationKnowledge_Definitional_DrugCharacteristic_ValueX_Quantity
	//	*MedicationKnowledge_Definitional_DrugCharacteristic_ValueX_Base64Binary
	//	*MedicationKnowledge_Definitional_DrugCharacteristic_ValueX_Attachment
	Choice isMedicationKnowledge_Definitional_DrugCharacteristic_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *MedicationKnowledge_Definitional_DrugCharacteristic_ValueX) Reset() {
	*x = MedicationKnowledge_Definitional_DrugCharacteristic_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_Definitional_DrugCharacteristic_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_Definitional_DrugCharacteristic_ValueX) ProtoMessage() {}

func (x *MedicationKnowledge_Definitional_DrugCharacteristic_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_Definitional_DrugCharacteristic_ValueX.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_Definitional_DrugCharacteristic_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 10, 1, 0}
}

func (m *MedicationKnowledge_Definitional_DrugCharacteristic_ValueX) GetChoice() isMedicationKnowledge_Definitional_DrugCharacteristic_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *MedicationKnowledge_Definitional_DrugCharacteristic_ValueX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*MedicationKnowledge_Definitional_DrugCharacteristic_ValueX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *MedicationKnowledge_Definitional_DrugCharacteristic_ValueX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*MedicationKnowledge_Definitional_DrugCharacteristic_ValueX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *MedicationKnowledge_Definitional_DrugCharacteristic_ValueX) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x, ok := x.GetChoice().(*MedicationKnowledge_Definitional_DrugCharacteristic_ValueX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *MedicationKnowledge_Definitional_DrugCharacteristic_ValueX) GetBase64Binary() *datatypes_go_proto.Base64Binary {
	if x, ok := x.GetChoice().(*MedicationKnowledge_Definitional_DrugCharacteristic_ValueX_Base64Binary); ok {
		return x.Base64Binary
	}
	return nil
}

func (x *MedicationKnowledge_Definitional_DrugCharacteristic_ValueX) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetChoice().(*MedicationKnowledge_Definitional_DrugCharacteristic_ValueX_Attachment); ok {
		return x.Attachment
	}
	return nil
}

type isMedicationKnowledge_Definitional_DrugCharacteristic_ValueX_Choice interface {
	isMedicationKnowledge_Definitional_DrugCharacteristic_ValueX_Choice()
}

type MedicationKnowledge_Definitional_DrugCharacteristic_ValueX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type MedicationKnowledge_Definitional_DrugCharacteristic_ValueX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,2,opt,name=string_value,json=string,proto3,oneof"`
}

type MedicationKnowledge_Definitional_DrugCharacteristic_ValueX_Quantity struct {
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,3,opt,name=quantity,proto3,oneof"`
}

type MedicationKnowledge_Definitional_DrugCharacteristic_ValueX_Base64Binary struct {
	Base64Binary *datatypes_go_proto.Base64Binary `protobuf:"bytes,4,opt,name=base64_binary,json=base64Binary,proto3,oneof"`
}

type MedicationKnowledge_Definitional_DrugCharacteristic_ValueX_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,5,opt,name=attachment,proto3,oneof"`
}

func (*MedicationKnowledge_Definitional_DrugCharacteristic_ValueX_CodeableConcept) isMedicationKnowledge_Definitional_DrugCharacteristic_ValueX_Choice() {
}

func (*MedicationKnowledge_Definitional_DrugCharacteristic_ValueX_StringValue) isMedicationKnowledge_Definitional_DrugCharacteristic_ValueX_Choice() {
}

func (*MedicationKnowledge_Definitional_DrugCharacteristic_ValueX_Quantity) isMedicationKnowledge_Definitional_DrugCharacteristic_ValueX_Choice() {
}

func (*MedicationKnowledge_Definitional_DrugCharacteristic_ValueX_Base64Binary) isMedicationKnowledge_Definitional_DrugCharacteristic_ValueX_Choice() {
}

func (*MedicationKnowledge_Definitional_DrugCharacteristic_ValueX_Attachment) isMedicationKnowledge_Definitional_DrugCharacteristic_ValueX_Choice() {
}

var File_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDesc = []byte{
	0x0a, 0x44, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xe2, 0x5b, 0x0a, 0x13, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12,
	0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72,
	0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x38, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x4a, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x12, 0x59, 0x0a, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x6a, 0x75, 0x72,
	0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4a,
	0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x85, 0x01, 0x0a,
	0x1c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x1a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x12, 0x65, 0x0a, 0x15, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x10, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65,
	0x64, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x09, 0x6d, 0x6f, 0x6e, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x52, 0x09, 0x6d, 0x6f, 0x6e,
	0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x56, 0x0a, 0x17, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x16, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41,
	0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x73,
	0x74, 0x12, 0x69, 0x0a, 0x12, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x11, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x6f, 0x0a, 0x14,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x75, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x13, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x78, 0x0a,
	0x17, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x16, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x18, 0x25, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x09,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x69, 0x0a, 0x12, 0x63, 0x6c, 0x69,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x18,
	0x26, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1b, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x15, 0x43, 0x6c, 0x69,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x10, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x12, 0x66, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x67, 0x75, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x47, 0x75, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x10, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x47, 0x75, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x53, 0x0a, 0x0a,
	0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x59, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x0c,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x1a, 0xbe, 0x02, 0x0a,
	0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x75, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x37, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xf7, 0x02,
	0x0a, 0x1a, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x5d, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1f, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x13, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x09, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0xd0, 0x02, 0x0a, 0x09, 0x4d, 0x6f, 0x6e, 0x6f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x17, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0xef, 0x04, 0x0a, 0x04, 0x43,
	0x6f, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a,
	0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x43, 0x6f, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x1a, 0xa0, 0x01, 0x0a, 0x05, 0x43, 0x6f,
	0x73, 0x74, 0x58, 0x12, 0x32, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x48, 0x00,
	0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8,
	0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xb8, 0x02, 0x0a,
	0x11, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xd5, 0x0f, 0x0a, 0x13, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0a, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x77, 0x0a, 0x10, 0x64, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x75, 0x69, 0x64,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x75, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x44, 0x6f, 0x73, 0x69, 0x6e, 0x67,
	0x47, 0x75, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x0f, 0x64, 0x6f, 0x73, 0x69, 0x6e,
	0x67, 0x47, 0x75, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x1a, 0xc2, 0x0c, 0x0a, 0x0f, 0x44,
	0x6f, 0x73, 0x69, 0x6e, 0x67, 0x47, 0x75, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x10, 0x74, 0x72, 0x65, 0x61,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0f, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x6b, 0x0a, 0x06, 0x64, 0x6f, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x75,
	0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x44, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x47, 0x75,
	0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x44, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x52, 0x06,
	0x64, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5f, 0x0a, 0x18, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x17,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72,
	0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x99, 0x01, 0x0a, 0x16, 0x70, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x62, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x75, 0x69,
	0x64, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x44, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x47, 0x75, 0x69,
	0x64, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x15, 0x70, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x1a, 0xc1, 0x02, 0x0a, 0x06, 0x44, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x64, 0x6f,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x44, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x06, 0x64, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x1a, 0xf5, 0x04, 0x0a, 0x15, 0x50, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x7f, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x69, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x44, 0x6f, 0x73, 0x69, 0x6e,
	0x67, 0x47, 0x75, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xde,
	0x01, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x3b, 0x0a, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x3a, 0x06, 0xa0,
	0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a,
	0xcc, 0x04, 0x0a, 0x16, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x5f, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x58, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x86, 0x01, 0x0a, 0x07, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x58, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2c,
	0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x55, 0x72, 0x69, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x69, 0x3a, 0x06, 0xa0, 0x83,
	0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xf4,
	0x02, 0x0a, 0x09, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x43,
	0x6f, 0x73, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x6a, 0x0a, 0x10, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x1f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x19, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x64, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x1a, 0xf8, 0x08, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x47, 0x75, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72,
	0x69, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x12, 0x4c, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x73, 0x74,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x83, 0x01, 0x0a, 0x15, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x4e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x47, 0x75, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x14, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0xe8, 0x04, 0x0a, 0x14, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x73, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x47, 0x75, 0x69, 0x64, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0xde, 0x01, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x51, 0x0a, 0x10, 0x63,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x06,
	0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x1a, 0xd6, 0x09, 0x0a, 0x0a, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x6b, 0x0a, 0x14, 0x72, 0x65, 0x67,
	0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x18, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x13, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x64, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69,
	0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x08,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x62,
	0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x52,
	0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x4d, 0x61, 0x78, 0x44, 0x69, 0x73,
	0x70, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e,
	0x73, 0x65, 0x1a, 0xca, 0x02, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x3e, 0x0a, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x1a,
	0xc7, 0x02, 0x0a, 0x0b, 0x4d, 0x61, 0x78, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x1a, 0x99, 0x10, 0x0a, 0x0c, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x20, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1a,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x09, 0x64, 0x6f, 0x73, 0x65, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x08, 0x64, 0x6f, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x4b, 0x0a, 0x0e, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x60, 0x0a, 0x0a, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x69, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x79, 0x0a, 0x13, 0x64, 0x72, 0x75, 0x67,
	0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2e, 0x44, 0x72, 0x75,
	0x67, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52,
	0x12, 0x64, 0x72, 0x75, 0x67, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x1a, 0x90, 0x05, 0x0a, 0x0a, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x66, 0x0a, 0x08, 0x73, 0x74,
	0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x58, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x1a, 0xe1, 0x01, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x58,
	0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xec, 0x05, 0x0a, 0x12, 0x44, 0x72, 0x75, 0x67, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x65, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2e, 0x44, 0x72, 0x75, 0x67, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x58, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xfa, 0x02, 0x0a, 0x06, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x58, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34,
	0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x48, 0x00, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x12, 0x41, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0x47, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x3b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x4a, 0x04,
	0x08, 0x07, 0x10, 0x08, 0x42, 0x84, 0x01, 0x98, 0xc6, 0xb0, 0xb5, 0x07, 0x05, 0x0a, 0x17, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x01, 0x5a, 0x61, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescData = file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDesc
)

func file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescData
}

var file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_goTypes = []interface{}{
	(*MedicationKnowledge)(nil),                                                                  // 0: google.fhir.r5.core.MedicationKnowledge
	(*MedicationKnowledge_StatusCode)(nil),                                                       // 1: google.fhir.r5.core.MedicationKnowledge.StatusCode
	(*MedicationKnowledge_RelatedMedicationKnowledge)(nil),                                       // 2: google.fhir.r5.core.MedicationKnowledge.RelatedMedicationKnowledge
	(*MedicationKnowledge_Monograph)(nil),                                                        // 3: google.fhir.r5.core.MedicationKnowledge.Monograph
	(*MedicationKnowledge_Cost)(nil),                                                             // 4: google.fhir.r5.core.MedicationKnowledge.Cost
	(*MedicationKnowledge_MonitoringProgram)(nil),                                                // 5: google.fhir.r5.core.MedicationKnowledge.MonitoringProgram
	(*MedicationKnowledge_IndicationGuideline)(nil),                                              // 6: google.fhir.r5.core.MedicationKnowledge.IndicationGuideline
	(*MedicationKnowledge_MedicineClassification)(nil),                                           // 7: google.fhir.r5.core.MedicationKnowledge.MedicineClassification
	(*MedicationKnowledge_Packaging)(nil),                                                        // 8: google.fhir.r5.core.MedicationKnowledge.Packaging
	(*MedicationKnowledge_StorageGuideline)(nil),                                                 // 9: google.fhir.r5.core.MedicationKnowledge.StorageGuideline
	(*MedicationKnowledge_Regulatory)(nil),                                                       // 10: google.fhir.r5.core.MedicationKnowledge.Regulatory
	(*MedicationKnowledge_Definitional)(nil),                                                     // 11: google.fhir.r5.core.MedicationKnowledge.Definitional
	(*MedicationKnowledge_Cost_CostX)(nil),                                                       // 12: google.fhir.r5.core.MedicationKnowledge.Cost.CostX
	(*MedicationKnowledge_IndicationGuideline_DosingGuideline)(nil),                              // 13: google.fhir.r5.core.MedicationKnowledge.IndicationGuideline.DosingGuideline
	(*MedicationKnowledge_IndicationGuideline_DosingGuideline_Dosage)(nil),                       // 14: google.fhir.r5.core.MedicationKnowledge.IndicationGuideline.DosingGuideline.Dosage
	(*MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic)(nil),        // 15: google.fhir.r5.core.MedicationKnowledge.IndicationGuideline.DosingGuideline.PatientCharacteristic
	(*MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic_ValueX)(nil), // 16: google.fhir.r5.core.MedicationKnowledge.IndicationGuideline.DosingGuideline.PatientCharacteristic.ValueX
	(*MedicationKnowledge_MedicineClassification_SourceX)(nil),                                   // 17: google.fhir.r5.core.MedicationKnowledge.MedicineClassification.SourceX
	(*MedicationKnowledge_StorageGuideline_EnvironmentalSetting)(nil),                            // 18: google.fhir.r5.core.MedicationKnowledge.StorageGuideline.EnvironmentalSetting
	(*MedicationKnowledge_StorageGuideline_EnvironmentalSetting_ValueX)(nil),                     // 19: google.fhir.r5.core.MedicationKnowledge.StorageGuideline.EnvironmentalSetting.ValueX
	(*MedicationKnowledge_Regulatory_Substitution)(nil),                                          // 20: google.fhir.r5.core.MedicationKnowledge.Regulatory.Substitution
	(*MedicationKnowledge_Regulatory_MaxDispense)(nil),                                           // 21: google.fhir.r5.core.MedicationKnowledge.Regulatory.MaxDispense
	(*MedicationKnowledge_Definitional_Ingredient)(nil),                                          // 22: google.fhir.r5.core.MedicationKnowledge.Definitional.Ingredient
	(*MedicationKnowledge_Definitional_DrugCharacteristic)(nil),                                  // 23: google.fhir.r5.core.MedicationKnowledge.Definitional.DrugCharacteristic
	(*MedicationKnowledge_Definitional_Ingredient_StrengthX)(nil),                                // 24: google.fhir.r5.core.MedicationKnowledge.Definitional.Ingredient.StrengthX
	(*MedicationKnowledge_Definitional_DrugCharacteristic_ValueX)(nil),                           // 25: google.fhir.r5.core.MedicationKnowledge.Definitional.DrugCharacteristic.ValueX
	(*datatypes_go_proto.Id)(nil),                                                                // 26: google.fhir.r5.core.Id
	(*datatypes_go_proto.Meta)(nil),                                                              // 27: google.fhir.r5.core.Meta
	(*datatypes_go_proto.Uri)(nil),                                                               // 28: google.fhir.r5.core.Uri
	(*datatypes_go_proto.Code)(nil),                                                              // 29: google.fhir.r5.core.Code
	(*datatypes_go_proto.Narrative)(nil),                                                         // 30: google.fhir.r5.core.Narrative
	(*anypb.Any)(nil),                                                                            // 31: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),                                                         // 32: google.fhir.r5.core.Extension
	(*datatypes_go_proto.Identifier)(nil),                                                        // 33: google.fhir.r5.core.Identifier
	(*datatypes_go_proto.CodeableConcept)(nil),                                                   // 34: google.fhir.r5.core.CodeableConcept
	(*datatypes_go_proto.Reference)(nil),                                                         // 35: google.fhir.r5.core.Reference
	(*datatypes_go_proto.String)(nil),                                                            // 36: google.fhir.r5.core.String
	(*datatypes_go_proto.Markdown)(nil),                                                          // 37: google.fhir.r5.core.Markdown
	(codes_go_proto.MedicationKnowledgeStatusCode_Value)(0),                                      // 38: google.fhir.r5.core.MedicationKnowledgeStatusCode.Value
	(*datatypes_go_proto.Period)(nil),                                                            // 39: google.fhir.r5.core.Period
	(*datatypes_go_proto.CodeableReference)(nil),                                                 // 40: google.fhir.r5.core.CodeableReference
	(*datatypes_go_proto.Annotation)(nil),                                                        // 41: google.fhir.r5.core.Annotation
	(*datatypes_go_proto.Duration)(nil),                                                          // 42: google.fhir.r5.core.Duration
	(*datatypes_go_proto.Money)(nil),                                                             // 43: google.fhir.r5.core.Money
	(*datatypes_go_proto.Dosage)(nil),                                                            // 44: google.fhir.r5.core.Dosage
	(*datatypes_go_proto.Quantity)(nil),                                                          // 45: google.fhir.r5.core.Quantity
	(*datatypes_go_proto.Range)(nil),                                                             // 46: google.fhir.r5.core.Range
	(*datatypes_go_proto.Boolean)(nil),                                                           // 47: google.fhir.r5.core.Boolean
	(*datatypes_go_proto.SimpleQuantity)(nil),                                                    // 48: google.fhir.r5.core.SimpleQuantity
	(*datatypes_go_proto.Ratio)(nil),                                                             // 49: google.fhir.r5.core.Ratio
	(*datatypes_go_proto.Base64Binary)(nil),                                                      // 50: google.fhir.r5.core.Base64Binary
	(*datatypes_go_proto.Attachment)(nil),                                                        // 51: google.fhir.r5.core.Attachment
}
var file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_depIdxs = []int32{
	26,  // 0: google.fhir.r5.core.MedicationKnowledge.id:type_name -> google.fhir.r5.core.Id
	27,  // 1: google.fhir.r5.core.MedicationKnowledge.meta:type_name -> google.fhir.r5.core.Meta
	28,  // 2: google.fhir.r5.core.MedicationKnowledge.implicit_rules:type_name -> google.fhir.r5.core.Uri
	29,  // 3: google.fhir.r5.core.MedicationKnowledge.language:type_name -> google.fhir.r5.core.Code
	30,  // 4: google.fhir.r5.core.MedicationKnowledge.text:type_name -> google.fhir.r5.core.Narrative
	31,  // 5: google.fhir.r5.core.MedicationKnowledge.contained:type_name -> google.protobuf.Any
	32,  // 6: google.fhir.r5.core.MedicationKnowledge.extension:type_name -> google.fhir.r5.core.Extension
	32,  // 7: google.fhir.r5.core.MedicationKnowledge.modifier_extension:type_name -> google.fhir.r5.core.Extension
	33,  // 8: google.fhir.r5.core.MedicationKnowledge.identifier:type_name -> google.fhir.r5.core.Identifier
	34,  // 9: google.fhir.r5.core.MedicationKnowledge.code:type_name -> google.fhir.r5.core.CodeableConcept
	1,   // 10: google.fhir.r5.core.MedicationKnowledge.status:type_name -> google.fhir.r5.core.MedicationKnowledge.StatusCode
	35,  // 11: google.fhir.r5.core.MedicationKnowledge.author:type_name -> google.fhir.r5.core.Reference
	34,  // 12: google.fhir.r5.core.MedicationKnowledge.intended_jurisdiction:type_name -> google.fhir.r5.core.CodeableConcept
	36,  // 13: google.fhir.r5.core.MedicationKnowledge.name:type_name -> google.fhir.r5.core.String
	2,   // 14: google.fhir.r5.core.MedicationKnowledge.related_medication_knowledge:type_name -> google.fhir.r5.core.MedicationKnowledge.RelatedMedicationKnowledge
	35,  // 15: google.fhir.r5.core.MedicationKnowledge.associated_medication:type_name -> google.fhir.r5.core.Reference
	34,  // 16: google.fhir.r5.core.MedicationKnowledge.product_type:type_name -> google.fhir.r5.core.CodeableConcept
	3,   // 17: google.fhir.r5.core.MedicationKnowledge.monograph:type_name -> google.fhir.r5.core.MedicationKnowledge.Monograph
	37,  // 18: google.fhir.r5.core.MedicationKnowledge.preparation_instruction:type_name -> google.fhir.r5.core.Markdown
	4,   // 19: google.fhir.r5.core.MedicationKnowledge.cost:type_name -> google.fhir.r5.core.MedicationKnowledge.Cost
	5,   // 20: google.fhir.r5.core.MedicationKnowledge.monitoring_program:type_name -> google.fhir.r5.core.MedicationKnowledge.MonitoringProgram
	6,   // 21: google.fhir.r5.core.MedicationKnowledge.indication_guideline:type_name -> google.fhir.r5.core.MedicationKnowledge.IndicationGuideline
	7,   // 22: google.fhir.r5.core.MedicationKnowledge.medicine_classification:type_name -> google.fhir.r5.core.MedicationKnowledge.MedicineClassification
	8,   // 23: google.fhir.r5.core.MedicationKnowledge.packaging:type_name -> google.fhir.r5.core.MedicationKnowledge.Packaging
	35,  // 24: google.fhir.r5.core.MedicationKnowledge.clinical_use_issue:type_name -> google.fhir.r5.core.Reference
	9,   // 25: google.fhir.r5.core.MedicationKnowledge.storage_guideline:type_name -> google.fhir.r5.core.MedicationKnowledge.StorageGuideline
	10,  // 26: google.fhir.r5.core.MedicationKnowledge.regulatory:type_name -> google.fhir.r5.core.MedicationKnowledge.Regulatory
	11,  // 27: google.fhir.r5.core.MedicationKnowledge.definitional:type_name -> google.fhir.r5.core.MedicationKnowledge.Definitional
	38,  // 28: google.fhir.r5.core.MedicationKnowledge.StatusCode.value:type_name -> google.fhir.r5.core.MedicationKnowledgeStatusCode.Value
	36,  // 29: google.fhir.r5.core.MedicationKnowledge.StatusCode.id:type_name -> google.fhir.r5.core.String
	32,  // 30: google.fhir.r5.core.MedicationKnowledge.StatusCode.extension:type_name -> google.fhir.r5.core.Extension
	36,  // 31: google.fhir.r5.core.MedicationKnowledge.RelatedMedicationKnowledge.id:type_name -> google.fhir.r5.core.String
	32,  // 32: google.fhir.r5.core.MedicationKnowledge.RelatedMedicationKnowledge.extension:type_name -> google.fhir.r5.core.Extension
	32,  // 33: google.fhir.r5.core.MedicationKnowledge.RelatedMedicationKnowledge.modifier_extension:type_name -> google.fhir.r5.core.Extension
	34,  // 34: google.fhir.r5.core.MedicationKnowledge.RelatedMedicationKnowledge.type:type_name -> google.fhir.r5.core.CodeableConcept
	35,  // 35: google.fhir.r5.core.MedicationKnowledge.RelatedMedicationKnowledge.reference:type_name -> google.fhir.r5.core.Reference
	36,  // 36: google.fhir.r5.core.MedicationKnowledge.Monograph.id:type_name -> google.fhir.r5.core.String
	32,  // 37: google.fhir.r5.core.MedicationKnowledge.Monograph.extension:type_name -> google.fhir.r5.core.Extension
	32,  // 38: google.fhir.r5.core.MedicationKnowledge.Monograph.modifier_extension:type_name -> google.fhir.r5.core.Extension
	34,  // 39: google.fhir.r5.core.MedicationKnowledge.Monograph.type:type_name -> google.fhir.r5.core.CodeableConcept
	35,  // 40: google.fhir.r5.core.MedicationKnowledge.Monograph.source:type_name -> google.fhir.r5.core.Reference
	36,  // 41: google.fhir.r5.core.MedicationKnowledge.Cost.id:type_name -> google.fhir.r5.core.String
	32,  // 42: google.fhir.r5.core.MedicationKnowledge.Cost.extension:type_name -> google.fhir.r5.core.Extension
	32,  // 43: google.fhir.r5.core.MedicationKnowledge.Cost.modifier_extension:type_name -> google.fhir.r5.core.Extension
	39,  // 44: google.fhir.r5.core.MedicationKnowledge.Cost.effective_date:type_name -> google.fhir.r5.core.Period
	34,  // 45: google.fhir.r5.core.MedicationKnowledge.Cost.type:type_name -> google.fhir.r5.core.CodeableConcept
	36,  // 46: google.fhir.r5.core.MedicationKnowledge.Cost.source:type_name -> google.fhir.r5.core.String
	12,  // 47: google.fhir.r5.core.MedicationKnowledge.Cost.cost:type_name -> google.fhir.r5.core.MedicationKnowledge.Cost.CostX
	36,  // 48: google.fhir.r5.core.MedicationKnowledge.MonitoringProgram.id:type_name -> google.fhir.r5.core.String
	32,  // 49: google.fhir.r5.core.MedicationKnowledge.MonitoringProgram.extension:type_name -> google.fhir.r5.core.Extension
	32,  // 50: google.fhir.r5.core.MedicationKnowledge.MonitoringProgram.modifier_extension:type_name -> google.fhir.r5.core.Extension
	34,  // 51: google.fhir.r5.core.MedicationKnowledge.MonitoringProgram.type:type_name -> google.fhir.r5.core.CodeableConcept
	36,  // 52: google.fhir.r5.core.MedicationKnowledge.MonitoringProgram.name:type_name -> google.fhir.r5.core.String
	36,  // 53: google.fhir.r5.core.MedicationKnowledge.IndicationGuideline.id:type_name -> google.fhir.r5.core.String
	32,  // 54: google.fhir.r5.core.MedicationKnowledge.IndicationGuideline.extension:type_name -> google.fhir.r5.core.Extension
	32,  // 55: google.fhir.r5.core.MedicationKnowledge.IndicationGuideline.modifier_extension:type_name -> google.fhir.r5.core.Extension
	40,  // 56: google.fhir.r5.core.MedicationKnowledge.IndicationGuideline.indication:type_name -> google.fhir.r5.core.CodeableReference
	13,  // 57: google.fhir.r5.core.MedicationKnowledge.IndicationGuideline.dosing_guideline:type_name -> google.fhir.r5.core.MedicationKnowledge.IndicationGuideline.DosingGuideline
	36,  // 58: google.fhir.r5.core.MedicationKnowledge.MedicineClassification.id:type_name -> google.fhir.r5.core.String
	32,  // 59: google.fhir.r5.core.MedicationKnowledge.MedicineClassification.extension:type_name -> google.fhir.r5.core.Extension
	32,  // 60: google.fhir.r5.core.MedicationKnowledge.MedicineClassification.modifier_extension:type_name -> google.fhir.r5.core.Extension
	34,  // 61: google.fhir.r5.core.MedicationKnowledge.MedicineClassification.type:type_name -> google.fhir.r5.core.CodeableConcept
	17,  // 62: google.fhir.r5.core.MedicationKnowledge.MedicineClassification.source:type_name -> google.fhir.r5.core.MedicationKnowledge.MedicineClassification.SourceX
	34,  // 63: google.fhir.r5.core.MedicationKnowledge.MedicineClassification.classification:type_name -> google.fhir.r5.core.CodeableConcept
	36,  // 64: google.fhir.r5.core.MedicationKnowledge.Packaging.id:type_name -> google.fhir.r5.core.String
	32,  // 65: google.fhir.r5.core.MedicationKnowledge.Packaging.extension:type_name -> google.fhir.r5.core.Extension
	32,  // 66: google.fhir.r5.core.MedicationKnowledge.Packaging.modifier_extension:type_name -> google.fhir.r5.core.Extension
	4,   // 67: google.fhir.r5.core.MedicationKnowledge.Packaging.cost:type_name -> google.fhir.r5.core.MedicationKnowledge.Cost
	35,  // 68: google.fhir.r5.core.MedicationKnowledge.Packaging.packaged_product:type_name -> google.fhir.r5.core.Reference
	36,  // 69: google.fhir.r5.core.MedicationKnowledge.StorageGuideline.id:type_name -> google.fhir.r5.core.String
	32,  // 70: google.fhir.r5.core.MedicationKnowledge.StorageGuideline.extension:type_name -> google.fhir.r5.core.Extension
	32,  // 71: google.fhir.r5.core.MedicationKnowledge.StorageGuideline.modifier_extension:type_name -> google.fhir.r5.core.Extension
	28,  // 72: google.fhir.r5.core.MedicationKnowledge.StorageGuideline.reference:type_name -> google.fhir.r5.core.Uri
	41,  // 73: google.fhir.r5.core.MedicationKnowledge.StorageGuideline.note:type_name -> google.fhir.r5.core.Annotation
	42,  // 74: google.fhir.r5.core.MedicationKnowledge.StorageGuideline.stability_duration:type_name -> google.fhir.r5.core.Duration
	18,  // 75: google.fhir.r5.core.MedicationKnowledge.StorageGuideline.environmental_setting:type_name -> google.fhir.r5.core.MedicationKnowledge.StorageGuideline.EnvironmentalSetting
	36,  // 76: google.fhir.r5.core.MedicationKnowledge.Regulatory.id:type_name -> google.fhir.r5.core.String
	32,  // 77: google.fhir.r5.core.MedicationKnowledge.Regulatory.extension:type_name -> google.fhir.r5.core.Extension
	32,  // 78: google.fhir.r5.core.MedicationKnowledge.Regulatory.modifier_extension:type_name -> google.fhir.r5.core.Extension
	35,  // 79: google.fhir.r5.core.MedicationKnowledge.Regulatory.regulatory_authority:type_name -> google.fhir.r5.core.Reference
	20,  // 80: google.fhir.r5.core.MedicationKnowledge.Regulatory.substitution:type_name -> google.fhir.r5.core.MedicationKnowledge.Regulatory.Substitution
	34,  // 81: google.fhir.r5.core.MedicationKnowledge.Regulatory.schedule:type_name -> google.fhir.r5.core.CodeableConcept
	21,  // 82: google.fhir.r5.core.MedicationKnowledge.Regulatory.max_dispense:type_name -> google.fhir.r5.core.MedicationKnowledge.Regulatory.MaxDispense
	36,  // 83: google.fhir.r5.core.MedicationKnowledge.Definitional.id:type_name -> google.fhir.r5.core.String
	32,  // 84: google.fhir.r5.core.MedicationKnowledge.Definitional.extension:type_name -> google.fhir.r5.core.Extension
	32,  // 85: google.fhir.r5.core.MedicationKnowledge.Definitional.modifier_extension:type_name -> google.fhir.r5.core.Extension
	35,  // 86: google.fhir.r5.core.MedicationKnowledge.Definitional.definition:type_name -> google.fhir.r5.core.Reference
	34,  // 87: google.fhir.r5.core.MedicationKnowledge.Definitional.dose_form:type_name -> google.fhir.r5.core.CodeableConcept
	34,  // 88: google.fhir.r5.core.MedicationKnowledge.Definitional.intended_route:type_name -> google.fhir.r5.core.CodeableConcept
	22,  // 89: google.fhir.r5.core.MedicationKnowledge.Definitional.ingredient:type_name -> google.fhir.r5.core.MedicationKnowledge.Definitional.Ingredient
	23,  // 90: google.fhir.r5.core.MedicationKnowledge.Definitional.drug_characteristic:type_name -> google.fhir.r5.core.MedicationKnowledge.Definitional.DrugCharacteristic
	43,  // 91: google.fhir.r5.core.MedicationKnowledge.Cost.CostX.money:type_name -> google.fhir.r5.core.Money
	34,  // 92: google.fhir.r5.core.MedicationKnowledge.Cost.CostX.codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	36,  // 93: google.fhir.r5.core.MedicationKnowledge.IndicationGuideline.DosingGuideline.id:type_name -> google.fhir.r5.core.String
	32,  // 94: google.fhir.r5.core.MedicationKnowledge.IndicationGuideline.DosingGuideline.extension:type_name -> google.fhir.r5.core.Extension
	32,  // 95: google.fhir.r5.core.MedicationKnowledge.IndicationGuideline.DosingGuideline.modifier_extension:type_name -> google.fhir.r5.core.Extension
	34,  // 96: google.fhir.r5.core.MedicationKnowledge.IndicationGuideline.DosingGuideline.treatment_intent:type_name -> google.fhir.r5.core.CodeableConcept
	14,  // 97: google.fhir.r5.core.MedicationKnowledge.IndicationGuideline.DosingGuideline.dosage:type_name -> google.fhir.r5.core.MedicationKnowledge.IndicationGuideline.DosingGuideline.Dosage
	34,  // 98: google.fhir.r5.core.MedicationKnowledge.IndicationGuideline.DosingGuideline.administration_treatment:type_name -> google.fhir.r5.core.CodeableConcept
	15,  // 99: google.fhir.r5.core.MedicationKnowledge.IndicationGuideline.DosingGuideline.patient_characteristic:type_name -> google.fhir.r5.core.MedicationKnowledge.IndicationGuideline.DosingGuideline.PatientCharacteristic
	36,  // 100: google.fhir.r5.core.MedicationKnowledge.IndicationGuideline.DosingGuideline.Dosage.id:type_name -> google.fhir.r5.core.String
	32,  // 101: google.fhir.r5.core.MedicationKnowledge.IndicationGuideline.DosingGuideline.Dosage.extension:type_name -> google.fhir.r5.core.Extension
	32,  // 102: google.fhir.r5.core.MedicationKnowledge.IndicationGuideline.DosingGuideline.Dosage.modifier_extension:type_name -> google.fhir.r5.core.Extension
	34,  // 103: google.fhir.r5.core.MedicationKnowledge.IndicationGuideline.DosingGuideline.Dosage.type:type_name -> google.fhir.r5.core.CodeableConcept
	44,  // 104: google.fhir.r5.core.MedicationKnowledge.IndicationGuideline.DosingGuideline.Dosage.dosage:type_name -> google.fhir.r5.core.Dosage
	36,  // 105: google.fhir.r5.core.MedicationKnowledge.IndicationGuideline.DosingGuideline.PatientCharacteristic.id:type_name -> google.fhir.r5.core.String
	32,  // 106: google.fhir.r5.core.MedicationKnowledge.IndicationGuideline.DosingGuideline.PatientCharacteristic.extension:type_name -> google.fhir.r5.core.Extension
	32,  // 107: google.fhir.r5.core.MedicationKnowledge.IndicationGuideline.DosingGuideline.PatientCharacteristic.modifier_extension:type_name -> google.fhir.r5.core.Extension
	34,  // 108: google.fhir.r5.core.MedicationKnowledge.IndicationGuideline.DosingGuideline.PatientCharacteristic.type:type_name -> google.fhir.r5.core.CodeableConcept
	16,  // 109: google.fhir.r5.core.MedicationKnowledge.IndicationGuideline.DosingGuideline.PatientCharacteristic.value:type_name -> google.fhir.r5.core.MedicationKnowledge.IndicationGuideline.DosingGuideline.PatientCharacteristic.ValueX
	34,  // 110: google.fhir.r5.core.MedicationKnowledge.IndicationGuideline.DosingGuideline.PatientCharacteristic.ValueX.codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	45,  // 111: google.fhir.r5.core.MedicationKnowledge.IndicationGuideline.DosingGuideline.PatientCharacteristic.ValueX.quantity:type_name -> google.fhir.r5.core.Quantity
	46,  // 112: google.fhir.r5.core.MedicationKnowledge.IndicationGuideline.DosingGuideline.PatientCharacteristic.ValueX.range:type_name -> google.fhir.r5.core.Range
	36,  // 113: google.fhir.r5.core.MedicationKnowledge.MedicineClassification.SourceX.string_value:type_name -> google.fhir.r5.core.String
	28,  // 114: google.fhir.r5.core.MedicationKnowledge.MedicineClassification.SourceX.uri:type_name -> google.fhir.r5.core.Uri
	36,  // 115: google.fhir.r5.core.MedicationKnowledge.StorageGuideline.EnvironmentalSetting.id:type_name -> google.fhir.r5.core.String
	32,  // 116: google.fhir.r5.core.MedicationKnowledge.StorageGuideline.EnvironmentalSetting.extension:type_name -> google.fhir.r5.core.Extension
	32,  // 117: google.fhir.r5.core.MedicationKnowledge.StorageGuideline.EnvironmentalSetting.modifier_extension:type_name -> google.fhir.r5.core.Extension
	34,  // 118: google.fhir.r5.core.MedicationKnowledge.StorageGuideline.EnvironmentalSetting.type:type_name -> google.fhir.r5.core.CodeableConcept
	19,  // 119: google.fhir.r5.core.MedicationKnowledge.StorageGuideline.EnvironmentalSetting.value:type_name -> google.fhir.r5.core.MedicationKnowledge.StorageGuideline.EnvironmentalSetting.ValueX
	45,  // 120: google.fhir.r5.core.MedicationKnowledge.StorageGuideline.EnvironmentalSetting.ValueX.quantity:type_name -> google.fhir.r5.core.Quantity
	46,  // 121: google.fhir.r5.core.MedicationKnowledge.StorageGuideline.EnvironmentalSetting.ValueX.range:type_name -> google.fhir.r5.core.Range
	34,  // 122: google.fhir.r5.core.MedicationKnowledge.StorageGuideline.EnvironmentalSetting.ValueX.codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	36,  // 123: google.fhir.r5.core.MedicationKnowledge.Regulatory.Substitution.id:type_name -> google.fhir.r5.core.String
	32,  // 124: google.fhir.r5.core.MedicationKnowledge.Regulatory.Substitution.extension:type_name -> google.fhir.r5.core.Extension
	32,  // 125: google.fhir.r5.core.MedicationKnowledge.Regulatory.Substitution.modifier_extension:type_name -> google.fhir.r5.core.Extension
	34,  // 126: google.fhir.r5.core.MedicationKnowledge.Regulatory.Substitution.type:type_name -> google.fhir.r5.core.CodeableConcept
	47,  // 127: google.fhir.r5.core.MedicationKnowledge.Regulatory.Substitution.allowed:type_name -> google.fhir.r5.core.Boolean
	36,  // 128: google.fhir.r5.core.MedicationKnowledge.Regulatory.MaxDispense.id:type_name -> google.fhir.r5.core.String
	32,  // 129: google.fhir.r5.core.MedicationKnowledge.Regulatory.MaxDispense.extension:type_name -> google.fhir.r5.core.Extension
	32,  // 130: google.fhir.r5.core.MedicationKnowledge.Regulatory.MaxDispense.modifier_extension:type_name -> google.fhir.r5.core.Extension
	48,  // 131: google.fhir.r5.core.MedicationKnowledge.Regulatory.MaxDispense.quantity:type_name -> google.fhir.r5.core.SimpleQuantity
	42,  // 132: google.fhir.r5.core.MedicationKnowledge.Regulatory.MaxDispense.period:type_name -> google.fhir.r5.core.Duration
	36,  // 133: google.fhir.r5.core.MedicationKnowledge.Definitional.Ingredient.id:type_name -> google.fhir.r5.core.String
	32,  // 134: google.fhir.r5.core.MedicationKnowledge.Definitional.Ingredient.extension:type_name -> google.fhir.r5.core.Extension
	32,  // 135: google.fhir.r5.core.MedicationKnowledge.Definitional.Ingredient.modifier_extension:type_name -> google.fhir.r5.core.Extension
	40,  // 136: google.fhir.r5.core.MedicationKnowledge.Definitional.Ingredient.item:type_name -> google.fhir.r5.core.CodeableReference
	34,  // 137: google.fhir.r5.core.MedicationKnowledge.Definitional.Ingredient.type:type_name -> google.fhir.r5.core.CodeableConcept
	24,  // 138: google.fhir.r5.core.MedicationKnowledge.Definitional.Ingredient.strength:type_name -> google.fhir.r5.core.MedicationKnowledge.Definitional.Ingredient.StrengthX
	36,  // 139: google.fhir.r5.core.MedicationKnowledge.Definitional.DrugCharacteristic.id:type_name -> google.fhir.r5.core.String
	32,  // 140: google.fhir.r5.core.MedicationKnowledge.Definitional.DrugCharacteristic.extension:type_name -> google.fhir.r5.core.Extension
	32,  // 141: google.fhir.r5.core.MedicationKnowledge.Definitional.DrugCharacteristic.modifier_extension:type_name -> google.fhir.r5.core.Extension
	34,  // 142: google.fhir.r5.core.MedicationKnowledge.Definitional.DrugCharacteristic.type:type_name -> google.fhir.r5.core.CodeableConcept
	25,  // 143: google.fhir.r5.core.MedicationKnowledge.Definitional.DrugCharacteristic.value:type_name -> google.fhir.r5.core.MedicationKnowledge.Definitional.DrugCharacteristic.ValueX
	49,  // 144: google.fhir.r5.core.MedicationKnowledge.Definitional.Ingredient.StrengthX.ratio:type_name -> google.fhir.r5.core.Ratio
	34,  // 145: google.fhir.r5.core.MedicationKnowledge.Definitional.Ingredient.StrengthX.codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	45,  // 146: google.fhir.r5.core.MedicationKnowledge.Definitional.Ingredient.StrengthX.quantity:type_name -> google.fhir.r5.core.Quantity
	34,  // 147: google.fhir.r5.core.MedicationKnowledge.Definitional.DrugCharacteristic.ValueX.codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	36,  // 148: google.fhir.r5.core.MedicationKnowledge.Definitional.DrugCharacteristic.ValueX.string_value:type_name -> google.fhir.r5.core.String
	48,  // 149: google.fhir.r5.core.MedicationKnowledge.Definitional.DrugCharacteristic.ValueX.quantity:type_name -> google.fhir.r5.core.SimpleQuantity
	50,  // 150: google.fhir.r5.core.MedicationKnowledge.Definitional.DrugCharacteristic.ValueX.base64_binary:type_name -> google.fhir.r5.core.Base64Binary
	51,  // 151: google.fhir.r5.core.MedicationKnowledge.Definitional.DrugCharacteristic.ValueX.attachment:type_name -> google.fhir.r5.core.Attachment
	152, // [152:152] is the sub-list for method output_type
	152, // [152:152] is the sub-list for method input_type
	152, // [152:152] is the sub-list for extension type_name
	152, // [152:152] is the sub-list for extension extendee
	0,   // [0:152] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_init() }
func file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_init() {
	if File_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_RelatedMedicationKnowledge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_Monograph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_Cost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_MonitoringProgram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_IndicationGuideline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_MedicineClassification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_Packaging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_StorageGuideline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_Regulatory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_Definitional); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_Cost_CostX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_IndicationGuideline_DosingGuideline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_IndicationGuideline_DosingGuideline_Dosage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_MedicineClassification_SourceX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_StorageGuideline_EnvironmentalSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_StorageGuideline_EnvironmentalSetting_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_Regulatory_Substitution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_Regulatory_MaxDispense); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_Definitional_Ingredient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_Definitional_DrugCharacteristic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_Definitional_Ingredient_StrengthX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_Definitional_DrugCharacteristic_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*MedicationKnowledge_Cost_CostX_Money)(nil),
		(*MedicationKnowledge_Cost_CostX_CodeableConcept)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic_ValueX_CodeableConcept)(nil),
		(*MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic_ValueX_Quantity)(nil),
		(*MedicationKnowledge_IndicationGuideline_DosingGuideline_PatientCharacteristic_ValueX_Range)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*MedicationKnowledge_MedicineClassification_SourceX_StringValue)(nil),
		(*MedicationKnowledge_MedicineClassification_SourceX_Uri)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*MedicationKnowledge_StorageGuideline_EnvironmentalSetting_ValueX_Quantity)(nil),
		(*MedicationKnowledge_StorageGuideline_EnvironmentalSetting_ValueX_Range)(nil),
		(*MedicationKnowledge_StorageGuideline_EnvironmentalSetting_ValueX_CodeableConcept)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*MedicationKnowledge_Definitional_Ingredient_StrengthX_Ratio)(nil),
		(*MedicationKnowledge_Definitional_Ingredient_StrengthX_CodeableConcept)(nil),
		(*MedicationKnowledge_Definitional_Ingredient_StrengthX_Quantity)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*MedicationKnowledge_Definitional_DrugCharacteristic_ValueX_CodeableConcept)(nil),
		(*MedicationKnowledge_Definitional_DrugCharacteristic_ValueX_StringValue)(nil),
		(*MedicationKnowledge_Definitional_DrugCharacteristic_ValueX_Quantity)(nil),
		(*MedicationKnowledge_Definitional_DrugCharacteristic_ValueX_Base64Binary)(nil),
		(*MedicationKnowledge_Definitional_DrugCharacteristic_ValueX_Attachment)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto = out.File
	file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDesc = nil
	file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_goTypes = nil
	file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_depIdxs = nil
}
