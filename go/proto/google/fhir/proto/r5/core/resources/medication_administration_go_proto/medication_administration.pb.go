//    Copyright 2023 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.21.12
// source: proto/google/fhir/proto/r5/core/resources/medication_administration.proto

package medication_administration_go_proto

import (
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	codes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/codes_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for MedicationAdministration.
// Administration of medication to a patient.
// See http://hl7.org/fhir/StructureDefinition/MedicationAdministration
type MedicationAdministration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*anypb.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Plan this is fulfilled by this administration
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,29,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// Part of referenced event
	PartOf []*datatypes_go_proto.Reference      `protobuf:"bytes,12,rep,name=part_of,json=partOf,proto3" json:"part_of,omitempty"`
	Status *MedicationAdministration_StatusCode `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
	// Reason administration not performed
	StatusReason []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,rep,name=status_reason,json=statusReason,proto3" json:"status_reason,omitempty"`
	// Type of medication administration
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,30,rep,name=category,proto3" json:"category,omitempty"`
	// What was administered
	Medication *datatypes_go_proto.CodeableReference `protobuf:"bytes,31,opt,name=medication,proto3" json:"medication,omitempty"`
	// Who received medication
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,17,opt,name=subject,proto3" json:"subject,omitempty"`
	// Encounter administered as part of
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,32,opt,name=encounter,proto3" json:"encounter,omitempty"`
	// Additional information to support administration
	SupportingInformation []*datatypes_go_proto.Reference      `protobuf:"bytes,19,rep,name=supporting_information,json=supportingInformation,proto3" json:"supporting_information,omitempty"`
	Occurence             *MedicationAdministration_OccurenceX `protobuf:"bytes,33,opt,name=occurence,proto3" json:"occurence,omitempty"`
	// When the MedicationAdministration was first captured in the subject's
	// record
	Recorded *datatypes_go_proto.DateTime `protobuf:"bytes,34,opt,name=recorded,proto3" json:"recorded,omitempty"`
	// Full dose was not administered
	IsSubPotent *datatypes_go_proto.Boolean `protobuf:"bytes,35,opt,name=is_sub_potent,json=isSubPotent,proto3" json:"is_sub_potent,omitempty"`
	// Reason full dose was not administered
	SubPotentReason []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,36,rep,name=sub_potent_reason,json=subPotentReason,proto3" json:"sub_potent_reason,omitempty"`
	Performer       []*MedicationAdministration_Performer `protobuf:"bytes,21,rep,name=performer,proto3" json:"performer,omitempty"`
	// Concept, condition or observation that supports why the medication was
	// administered
	Reason []*datatypes_go_proto.CodeableReference `protobuf:"bytes,37,rep,name=reason,proto3" json:"reason,omitempty"`
	// Request administration performed against
	Request *datatypes_go_proto.Reference `protobuf:"bytes,24,opt,name=request,proto3" json:"request,omitempty"`
	// Device used to administer
	Device []*datatypes_go_proto.CodeableReference `protobuf:"bytes,38,rep,name=device,proto3" json:"device,omitempty"`
	// Information about the administration
	Note   []*datatypes_go_proto.Annotation `protobuf:"bytes,26,rep,name=note,proto3" json:"note,omitempty"`
	Dosage *MedicationAdministration_Dosage `protobuf:"bytes,27,opt,name=dosage,proto3" json:"dosage,omitempty"`
	// A list of events of interest in the lifecycle
	EventHistory []*datatypes_go_proto.Reference `protobuf:"bytes,28,rep,name=event_history,json=eventHistory,proto3" json:"event_history,omitempty"`
}

func (x *MedicationAdministration) Reset() {
	*x = MedicationAdministration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationAdministration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationAdministration) ProtoMessage() {}

func (x *MedicationAdministration) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationAdministration.ProtoReflect.Descriptor instead.
func (*MedicationAdministration) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_rawDescGZIP(), []int{0}
}

func (x *MedicationAdministration) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationAdministration) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *MedicationAdministration) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *MedicationAdministration) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *MedicationAdministration) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *MedicationAdministration) GetContained() []*anypb.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *MedicationAdministration) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationAdministration) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationAdministration) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *MedicationAdministration) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *MedicationAdministration) GetPartOf() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.PartOf
	}
	return nil
}

func (x *MedicationAdministration) GetStatus() *MedicationAdministration_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MedicationAdministration) GetStatusReason() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.StatusReason
	}
	return nil
}

func (x *MedicationAdministration) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *MedicationAdministration) GetMedication() *datatypes_go_proto.CodeableReference {
	if x != nil {
		return x.Medication
	}
	return nil
}

func (x *MedicationAdministration) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *MedicationAdministration) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *MedicationAdministration) GetSupportingInformation() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.SupportingInformation
	}
	return nil
}

func (x *MedicationAdministration) GetOccurence() *MedicationAdministration_OccurenceX {
	if x != nil {
		return x.Occurence
	}
	return nil
}

func (x *MedicationAdministration) GetRecorded() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Recorded
	}
	return nil
}

func (x *MedicationAdministration) GetIsSubPotent() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.IsSubPotent
	}
	return nil
}

func (x *MedicationAdministration) GetSubPotentReason() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.SubPotentReason
	}
	return nil
}

func (x *MedicationAdministration) GetPerformer() []*MedicationAdministration_Performer {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *MedicationAdministration) GetReason() []*datatypes_go_proto.CodeableReference {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *MedicationAdministration) GetRequest() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *MedicationAdministration) GetDevice() []*datatypes_go_proto.CodeableReference {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *MedicationAdministration) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *MedicationAdministration) GetDosage() *MedicationAdministration_Dosage {
	if x != nil {
		return x.Dosage
	}
	return nil
}

func (x *MedicationAdministration) GetEventHistory() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.EventHistory
	}
	return nil
}

// in-progress | not-done | on-hold | completed | entered-in-error | stopped |
// unknown
type MedicationAdministration_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.MedicationAdministrationStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.MedicationAdministrationStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                              `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                         `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MedicationAdministration_StatusCode) Reset() {
	*x = MedicationAdministration_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationAdministration_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationAdministration_StatusCode) ProtoMessage() {}

func (x *MedicationAdministration_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationAdministration_StatusCode.ProtoReflect.Descriptor instead.
func (*MedicationAdministration_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_rawDescGZIP(), []int{0, 0}
}

func (x *MedicationAdministration_StatusCode) GetValue() codes_go_proto.MedicationAdministrationStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.MedicationAdministrationStatusCode_Value(0)
}

func (x *MedicationAdministration_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationAdministration_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Specific date/time or interval of time during which the administration took
// place (or did not take place)
type MedicationAdministration_OccurenceX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*MedicationAdministration_OccurenceX_DateTime
	//	*MedicationAdministration_OccurenceX_Period
	//	*MedicationAdministration_OccurenceX_Timing
	Choice isMedicationAdministration_OccurenceX_Choice `protobuf_oneof:"choice"`
}

func (x *MedicationAdministration_OccurenceX) Reset() {
	*x = MedicationAdministration_OccurenceX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationAdministration_OccurenceX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationAdministration_OccurenceX) ProtoMessage() {}

func (x *MedicationAdministration_OccurenceX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationAdministration_OccurenceX.ProtoReflect.Descriptor instead.
func (*MedicationAdministration_OccurenceX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_rawDescGZIP(), []int{0, 1}
}

func (m *MedicationAdministration_OccurenceX) GetChoice() isMedicationAdministration_OccurenceX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *MedicationAdministration_OccurenceX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*MedicationAdministration_OccurenceX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *MedicationAdministration_OccurenceX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*MedicationAdministration_OccurenceX_Period); ok {
		return x.Period
	}
	return nil
}

func (x *MedicationAdministration_OccurenceX) GetTiming() *datatypes_go_proto.Timing {
	if x, ok := x.GetChoice().(*MedicationAdministration_OccurenceX_Timing); ok {
		return x.Timing
	}
	return nil
}

type isMedicationAdministration_OccurenceX_Choice interface {
	isMedicationAdministration_OccurenceX_Choice()
}

type MedicationAdministration_OccurenceX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type MedicationAdministration_OccurenceX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

type MedicationAdministration_OccurenceX_Timing struct {
	Timing *datatypes_go_proto.Timing `protobuf:"bytes,3,opt,name=timing,proto3,oneof"`
}

func (*MedicationAdministration_OccurenceX_DateTime) isMedicationAdministration_OccurenceX_Choice() {}

func (*MedicationAdministration_OccurenceX_Period) isMedicationAdministration_OccurenceX_Choice() {}

func (*MedicationAdministration_OccurenceX_Timing) isMedicationAdministration_OccurenceX_Choice() {}

// Who or what performed the medication administration and what type of
// performance they did
type MedicationAdministration_Performer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of performance
	Function *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=function,proto3" json:"function,omitempty"`
	// Who or what performed the medication administration
	Actor *datatypes_go_proto.CodeableReference `protobuf:"bytes,6,opt,name=actor,proto3" json:"actor,omitempty"`
}

func (x *MedicationAdministration_Performer) Reset() {
	*x = MedicationAdministration_Performer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationAdministration_Performer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationAdministration_Performer) ProtoMessage() {}

func (x *MedicationAdministration_Performer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationAdministration_Performer.ProtoReflect.Descriptor instead.
func (*MedicationAdministration_Performer) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_rawDescGZIP(), []int{0, 2}
}

func (x *MedicationAdministration_Performer) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationAdministration_Performer) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationAdministration_Performer) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationAdministration_Performer) GetFunction() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *MedicationAdministration_Performer) GetActor() *datatypes_go_proto.CodeableReference {
	if x != nil {
		return x.Actor
	}
	return nil
}

// Details of how medication was taken
type MedicationAdministration_Dosage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Free text dosage instructions e.g. SIG
	Text *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	// Body site administered to
	Site *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=site,proto3" json:"site,omitempty"`
	// Path of substance into body
	Route *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=route,proto3" json:"route,omitempty"`
	// How drug was administered
	Method *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=method,proto3" json:"method,omitempty"`
	// Amount of medication per dose
	Dose *datatypes_go_proto.SimpleQuantity     `protobuf:"bytes,8,opt,name=dose,proto3" json:"dose,omitempty"`
	Rate *MedicationAdministration_Dosage_RateX `protobuf:"bytes,9,opt,name=rate,proto3" json:"rate,omitempty"`
}

func (x *MedicationAdministration_Dosage) Reset() {
	*x = MedicationAdministration_Dosage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationAdministration_Dosage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationAdministration_Dosage) ProtoMessage() {}

func (x *MedicationAdministration_Dosage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationAdministration_Dosage.ProtoReflect.Descriptor instead.
func (*MedicationAdministration_Dosage) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_rawDescGZIP(), []int{0, 3}
}

func (x *MedicationAdministration_Dosage) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationAdministration_Dosage) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationAdministration_Dosage) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationAdministration_Dosage) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *MedicationAdministration_Dosage) GetSite() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Site
	}
	return nil
}

func (x *MedicationAdministration_Dosage) GetRoute() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *MedicationAdministration_Dosage) GetMethod() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *MedicationAdministration_Dosage) GetDose() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Dose
	}
	return nil
}

func (x *MedicationAdministration_Dosage) GetRate() *MedicationAdministration_Dosage_RateX {
	if x != nil {
		return x.Rate
	}
	return nil
}

// Dose quantity per unit of time
type MedicationAdministration_Dosage_RateX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*MedicationAdministration_Dosage_RateX_Ratio
	//	*MedicationAdministration_Dosage_RateX_Quantity
	Choice isMedicationAdministration_Dosage_RateX_Choice `protobuf_oneof:"choice"`
}

func (x *MedicationAdministration_Dosage_RateX) Reset() {
	*x = MedicationAdministration_Dosage_RateX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationAdministration_Dosage_RateX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationAdministration_Dosage_RateX) ProtoMessage() {}

func (x *MedicationAdministration_Dosage_RateX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationAdministration_Dosage_RateX.ProtoReflect.Descriptor instead.
func (*MedicationAdministration_Dosage_RateX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (m *MedicationAdministration_Dosage_RateX) GetChoice() isMedicationAdministration_Dosage_RateX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *MedicationAdministration_Dosage_RateX) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetChoice().(*MedicationAdministration_Dosage_RateX_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *MedicationAdministration_Dosage_RateX) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x, ok := x.GetChoice().(*MedicationAdministration_Dosage_RateX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isMedicationAdministration_Dosage_RateX_Choice interface {
	isMedicationAdministration_Dosage_RateX_Choice()
}

type MedicationAdministration_Dosage_RateX_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,1,opt,name=ratio,proto3,oneof"`
}

type MedicationAdministration_Dosage_RateX_Quantity struct {
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,2,opt,name=quantity,proto3,oneof"`
}

func (*MedicationAdministration_Dosage_RateX_Ratio) isMedicationAdministration_Dosage_RateX_Choice() {
}

func (*MedicationAdministration_Dosage_RateX_Quantity) isMedicationAdministration_Dosage_RateX_Choice() {
}

var File_proto_google_fhir_proto_r5_core_resources_medication_administration_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_rawDesc = []byte{
	0x0a, 0x49, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x98, 0x1e, 0x0a, 0x18, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x64,
	0x5f, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x64,
	0x4f, 0x6e, 0x12, 0x7e, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x45, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x18, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x12, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x74,
	0x4f, 0x66, 0x12, 0x58, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x0d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x4e, 0x0a, 0x0a, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0a, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1e, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x4d, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x65, 0x0a, 0x16, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x09, 0x6f, 0x63, 0x63,
	0x75, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x63, 0x63, 0x75,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x09,
	0x6f, 0x63, 0x63, 0x75, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x65, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x70,
	0x6f, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x75, 0x62,
	0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x5f, 0x70, 0x6f,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x24, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x50, 0x6f, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x72, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12,
	0x3e, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x25, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x51, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x17, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x26, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x06, 0x64, 0x6f, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x52, 0x06, 0x64,
	0x6f, 0x73, 0x61, 0x67, 0x65, 0x12, 0x55, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x10, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0a, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0c,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0xc0, 0x02, 0x0a,
	0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x53, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x72, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a,
	0xca, 0x01, 0x0a, 0x0a, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x58, 0x12, 0x3c,
	0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x48, 0x00, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8,
	0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xcd, 0x02, 0x0a,
	0x09, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0xfc, 0x05, 0x0a,
	0x06, 0x44, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x05,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x6f, 0x73, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x04, 0x64, 0x6f, 0x73, 0x65, 0x12,
	0x4e, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x6f, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x58, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x1a,
	0x90, 0x01, 0x0a, 0x05, 0x52, 0x61, 0x74, 0x65, 0x58, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x41, 0x0a,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x3a, 0x37, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x31, 0x28, 0x64, 0x6f, 0x73, 0x65, 0x2e,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x72, 0x61, 0x74, 0x65,
	0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x65, 0x78,
	0x74, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x29, 0x3a, 0x4c, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x40, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x42,
	0x89, 0x01, 0x98, 0xc6, 0xb0, 0xb5, 0x07, 0x05, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x50, 0x01, 0x5a, 0x66, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_rawDescData = file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_rawDesc
)

func file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_rawDescData
}

var file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_goTypes = []interface{}{
	(*MedicationAdministration)(nil),                             // 0: google.fhir.r5.core.MedicationAdministration
	(*MedicationAdministration_StatusCode)(nil),                  // 1: google.fhir.r5.core.MedicationAdministration.StatusCode
	(*MedicationAdministration_OccurenceX)(nil),                  // 2: google.fhir.r5.core.MedicationAdministration.OccurenceX
	(*MedicationAdministration_Performer)(nil),                   // 3: google.fhir.r5.core.MedicationAdministration.Performer
	(*MedicationAdministration_Dosage)(nil),                      // 4: google.fhir.r5.core.MedicationAdministration.Dosage
	(*MedicationAdministration_Dosage_RateX)(nil),                // 5: google.fhir.r5.core.MedicationAdministration.Dosage.RateX
	(*datatypes_go_proto.Id)(nil),                                // 6: google.fhir.r5.core.Id
	(*datatypes_go_proto.Meta)(nil),                              // 7: google.fhir.r5.core.Meta
	(*datatypes_go_proto.Uri)(nil),                               // 8: google.fhir.r5.core.Uri
	(*datatypes_go_proto.Code)(nil),                              // 9: google.fhir.r5.core.Code
	(*datatypes_go_proto.Narrative)(nil),                         // 10: google.fhir.r5.core.Narrative
	(*anypb.Any)(nil),                                            // 11: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),                         // 12: google.fhir.r5.core.Extension
	(*datatypes_go_proto.Identifier)(nil),                        // 13: google.fhir.r5.core.Identifier
	(*datatypes_go_proto.Reference)(nil),                         // 14: google.fhir.r5.core.Reference
	(*datatypes_go_proto.CodeableConcept)(nil),                   // 15: google.fhir.r5.core.CodeableConcept
	(*datatypes_go_proto.CodeableReference)(nil),                 // 16: google.fhir.r5.core.CodeableReference
	(*datatypes_go_proto.DateTime)(nil),                          // 17: google.fhir.r5.core.DateTime
	(*datatypes_go_proto.Boolean)(nil),                           // 18: google.fhir.r5.core.Boolean
	(*datatypes_go_proto.Annotation)(nil),                        // 19: google.fhir.r5.core.Annotation
	(codes_go_proto.MedicationAdministrationStatusCode_Value)(0), // 20: google.fhir.r5.core.MedicationAdministrationStatusCode.Value
	(*datatypes_go_proto.String)(nil),                            // 21: google.fhir.r5.core.String
	(*datatypes_go_proto.Period)(nil),                            // 22: google.fhir.r5.core.Period
	(*datatypes_go_proto.Timing)(nil),                            // 23: google.fhir.r5.core.Timing
	(*datatypes_go_proto.SimpleQuantity)(nil),                    // 24: google.fhir.r5.core.SimpleQuantity
	(*datatypes_go_proto.Ratio)(nil),                             // 25: google.fhir.r5.core.Ratio
}
var file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_depIdxs = []int32{
	6,  // 0: google.fhir.r5.core.MedicationAdministration.id:type_name -> google.fhir.r5.core.Id
	7,  // 1: google.fhir.r5.core.MedicationAdministration.meta:type_name -> google.fhir.r5.core.Meta
	8,  // 2: google.fhir.r5.core.MedicationAdministration.implicit_rules:type_name -> google.fhir.r5.core.Uri
	9,  // 3: google.fhir.r5.core.MedicationAdministration.language:type_name -> google.fhir.r5.core.Code
	10, // 4: google.fhir.r5.core.MedicationAdministration.text:type_name -> google.fhir.r5.core.Narrative
	11, // 5: google.fhir.r5.core.MedicationAdministration.contained:type_name -> google.protobuf.Any
	12, // 6: google.fhir.r5.core.MedicationAdministration.extension:type_name -> google.fhir.r5.core.Extension
	12, // 7: google.fhir.r5.core.MedicationAdministration.modifier_extension:type_name -> google.fhir.r5.core.Extension
	13, // 8: google.fhir.r5.core.MedicationAdministration.identifier:type_name -> google.fhir.r5.core.Identifier
	14, // 9: google.fhir.r5.core.MedicationAdministration.based_on:type_name -> google.fhir.r5.core.Reference
	14, // 10: google.fhir.r5.core.MedicationAdministration.part_of:type_name -> google.fhir.r5.core.Reference
	1,  // 11: google.fhir.r5.core.MedicationAdministration.status:type_name -> google.fhir.r5.core.MedicationAdministration.StatusCode
	15, // 12: google.fhir.r5.core.MedicationAdministration.status_reason:type_name -> google.fhir.r5.core.CodeableConcept
	15, // 13: google.fhir.r5.core.MedicationAdministration.category:type_name -> google.fhir.r5.core.CodeableConcept
	16, // 14: google.fhir.r5.core.MedicationAdministration.medication:type_name -> google.fhir.r5.core.CodeableReference
	14, // 15: google.fhir.r5.core.MedicationAdministration.subject:type_name -> google.fhir.r5.core.Reference
	14, // 16: google.fhir.r5.core.MedicationAdministration.encounter:type_name -> google.fhir.r5.core.Reference
	14, // 17: google.fhir.r5.core.MedicationAdministration.supporting_information:type_name -> google.fhir.r5.core.Reference
	2,  // 18: google.fhir.r5.core.MedicationAdministration.occurence:type_name -> google.fhir.r5.core.MedicationAdministration.OccurenceX
	17, // 19: google.fhir.r5.core.MedicationAdministration.recorded:type_name -> google.fhir.r5.core.DateTime
	18, // 20: google.fhir.r5.core.MedicationAdministration.is_sub_potent:type_name -> google.fhir.r5.core.Boolean
	15, // 21: google.fhir.r5.core.MedicationAdministration.sub_potent_reason:type_name -> google.fhir.r5.core.CodeableConcept
	3,  // 22: google.fhir.r5.core.MedicationAdministration.performer:type_name -> google.fhir.r5.core.MedicationAdministration.Performer
	16, // 23: google.fhir.r5.core.MedicationAdministration.reason:type_name -> google.fhir.r5.core.CodeableReference
	14, // 24: google.fhir.r5.core.MedicationAdministration.request:type_name -> google.fhir.r5.core.Reference
	16, // 25: google.fhir.r5.core.MedicationAdministration.device:type_name -> google.fhir.r5.core.CodeableReference
	19, // 26: google.fhir.r5.core.MedicationAdministration.note:type_name -> google.fhir.r5.core.Annotation
	4,  // 27: google.fhir.r5.core.MedicationAdministration.dosage:type_name -> google.fhir.r5.core.MedicationAdministration.Dosage
	14, // 28: google.fhir.r5.core.MedicationAdministration.event_history:type_name -> google.fhir.r5.core.Reference
	20, // 29: google.fhir.r5.core.MedicationAdministration.StatusCode.value:type_name -> google.fhir.r5.core.MedicationAdministrationStatusCode.Value
	21, // 30: google.fhir.r5.core.MedicationAdministration.StatusCode.id:type_name -> google.fhir.r5.core.String
	12, // 31: google.fhir.r5.core.MedicationAdministration.StatusCode.extension:type_name -> google.fhir.r5.core.Extension
	17, // 32: google.fhir.r5.core.MedicationAdministration.OccurenceX.date_time:type_name -> google.fhir.r5.core.DateTime
	22, // 33: google.fhir.r5.core.MedicationAdministration.OccurenceX.period:type_name -> google.fhir.r5.core.Period
	23, // 34: google.fhir.r5.core.MedicationAdministration.OccurenceX.timing:type_name -> google.fhir.r5.core.Timing
	21, // 35: google.fhir.r5.core.MedicationAdministration.Performer.id:type_name -> google.fhir.r5.core.String
	12, // 36: google.fhir.r5.core.MedicationAdministration.Performer.extension:type_name -> google.fhir.r5.core.Extension
	12, // 37: google.fhir.r5.core.MedicationAdministration.Performer.modifier_extension:type_name -> google.fhir.r5.core.Extension
	15, // 38: google.fhir.r5.core.MedicationAdministration.Performer.function:type_name -> google.fhir.r5.core.CodeableConcept
	16, // 39: google.fhir.r5.core.MedicationAdministration.Performer.actor:type_name -> google.fhir.r5.core.CodeableReference
	21, // 40: google.fhir.r5.core.MedicationAdministration.Dosage.id:type_name -> google.fhir.r5.core.String
	12, // 41: google.fhir.r5.core.MedicationAdministration.Dosage.extension:type_name -> google.fhir.r5.core.Extension
	12, // 42: google.fhir.r5.core.MedicationAdministration.Dosage.modifier_extension:type_name -> google.fhir.r5.core.Extension
	21, // 43: google.fhir.r5.core.MedicationAdministration.Dosage.text:type_name -> google.fhir.r5.core.String
	15, // 44: google.fhir.r5.core.MedicationAdministration.Dosage.site:type_name -> google.fhir.r5.core.CodeableConcept
	15, // 45: google.fhir.r5.core.MedicationAdministration.Dosage.route:type_name -> google.fhir.r5.core.CodeableConcept
	15, // 46: google.fhir.r5.core.MedicationAdministration.Dosage.method:type_name -> google.fhir.r5.core.CodeableConcept
	24, // 47: google.fhir.r5.core.MedicationAdministration.Dosage.dose:type_name -> google.fhir.r5.core.SimpleQuantity
	5,  // 48: google.fhir.r5.core.MedicationAdministration.Dosage.rate:type_name -> google.fhir.r5.core.MedicationAdministration.Dosage.RateX
	25, // 49: google.fhir.r5.core.MedicationAdministration.Dosage.RateX.ratio:type_name -> google.fhir.r5.core.Ratio
	24, // 50: google.fhir.r5.core.MedicationAdministration.Dosage.RateX.quantity:type_name -> google.fhir.r5.core.SimpleQuantity
	51, // [51:51] is the sub-list for method output_type
	51, // [51:51] is the sub-list for method input_type
	51, // [51:51] is the sub-list for extension type_name
	51, // [51:51] is the sub-list for extension extendee
	0,  // [0:51] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_init() }
func file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_init() {
	if File_proto_google_fhir_proto_r5_core_resources_medication_administration_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationAdministration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationAdministration_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationAdministration_OccurenceX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationAdministration_Performer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationAdministration_Dosage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationAdministration_Dosage_RateX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*MedicationAdministration_OccurenceX_DateTime)(nil),
		(*MedicationAdministration_OccurenceX_Period)(nil),
		(*MedicationAdministration_OccurenceX_Timing)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*MedicationAdministration_Dosage_RateX_Ratio)(nil),
		(*MedicationAdministration_Dosage_RateX_Quantity)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r5_core_resources_medication_administration_proto = out.File
	file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_rawDesc = nil
	file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_goTypes = nil
	file_proto_google_fhir_proto_r5_core_resources_medication_administration_proto_depIdxs = nil
}
