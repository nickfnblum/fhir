//    Copyright 2023 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.21.12
// source: proto/google/fhir/proto/r5/core/resources/immunization.proto

package immunization_go_proto

import (
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/datatypes_go_proto"
	valuesets_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/valuesets_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for Immunization.
// Immunization event information.
// See http://hl7.org/fhir/StructureDefinition/Immunization
type Immunization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*anypb.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Authority that the immunization event is based on
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,38,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	Status  *Immunization_StatusCode        `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Reason for current status
	StatusReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,opt,name=status_reason,json=statusReason,proto3" json:"status_reason,omitempty"`
	// Vaccine administered
	VaccineCode *datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,opt,name=vaccine_code,json=vaccineCode,proto3" json:"vaccine_code,omitempty"`
	// Product that was administered
	AdministeredProduct *datatypes_go_proto.CodeableReference `protobuf:"bytes,39,opt,name=administered_product,json=administeredProduct,proto3" json:"administered_product,omitempty"`
	// Vaccine manufacturer
	Manufacturer *datatypes_go_proto.CodeableReference `protobuf:"bytes,40,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	// Vaccine lot number
	LotNumber *datatypes_go_proto.String `protobuf:"bytes,22,opt,name=lot_number,json=lotNumber,proto3" json:"lot_number,omitempty"`
	// Vaccine expiration date
	ExpirationDate *datatypes_go_proto.Date `protobuf:"bytes,23,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	// Who was immunized
	Patient *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=patient,proto3" json:"patient,omitempty"`
	// Encounter immunization was part of
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=encounter,proto3" json:"encounter,omitempty"`
	// Additional information in support of the immunization
	SupportingInformation []*datatypes_go_proto.Reference `protobuf:"bytes,41,rep,name=supporting_information,json=supportingInformation,proto3" json:"supporting_information,omitempty"`
	Occurrence            *Immunization_OccurrenceX       `protobuf:"bytes,16,opt,name=occurrence,proto3" json:"occurrence,omitempty"`
	// Indicates context the data was captured in
	PrimarySource *datatypes_go_proto.Boolean `protobuf:"bytes,18,opt,name=primary_source,json=primarySource,proto3" json:"primary_source,omitempty"`
	// Indicates the source of a  reported record
	InformationSource *datatypes_go_proto.CodeableReference `protobuf:"bytes,42,opt,name=information_source,json=informationSource,proto3" json:"information_source,omitempty"`
	// Where immunization occurred
	Location *datatypes_go_proto.Reference `protobuf:"bytes,20,opt,name=location,proto3" json:"location,omitempty"`
	// Body site vaccine  was administered
	Site *datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,opt,name=site,proto3" json:"site,omitempty"`
	// How vaccine entered body
	Route *datatypes_go_proto.CodeableConcept `protobuf:"bytes,25,opt,name=route,proto3" json:"route,omitempty"`
	// Amount of vaccine administered
	DoseQuantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,26,opt,name=dose_quantity,json=doseQuantity,proto3" json:"dose_quantity,omitempty"`
	Performer    []*Immunization_Performer          `protobuf:"bytes,27,rep,name=performer,proto3" json:"performer,omitempty"`
	// Additional immunization notes
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,28,rep,name=note,proto3" json:"note,omitempty"`
	// Why immunization occurred
	Reason []*datatypes_go_proto.CodeableReference `protobuf:"bytes,43,rep,name=reason,proto3" json:"reason,omitempty"`
	// Dose potency
	IsSubpotent *datatypes_go_proto.Boolean `protobuf:"bytes,31,opt,name=is_subpotent,json=isSubpotent,proto3" json:"is_subpotent,omitempty"`
	// Reason for being subpotent
	SubpotentReason    []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,32,rep,name=subpotent_reason,json=subpotentReason,proto3" json:"subpotent_reason,omitempty"`
	ProgramEligibility []*Immunization_ProgramEligibility    `protobuf:"bytes,44,rep,name=program_eligibility,json=programEligibility,proto3" json:"program_eligibility,omitempty"`
	// Funding source for the vaccine
	FundingSource   *datatypes_go_proto.CodeableConcept `protobuf:"bytes,35,opt,name=funding_source,json=fundingSource,proto3" json:"funding_source,omitempty"`
	Reaction        []*Immunization_Reaction            `protobuf:"bytes,36,rep,name=reaction,proto3" json:"reaction,omitempty"`
	ProtocolApplied []*Immunization_ProtocolApplied     `protobuf:"bytes,37,rep,name=protocol_applied,json=protocolApplied,proto3" json:"protocol_applied,omitempty"`
}

func (x *Immunization) Reset() {
	*x = Immunization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_immunization_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Immunization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Immunization) ProtoMessage() {}

func (x *Immunization) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_immunization_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Immunization.ProtoReflect.Descriptor instead.
func (*Immunization) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_immunization_proto_rawDescGZIP(), []int{0}
}

func (x *Immunization) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Immunization) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Immunization) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Immunization) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Immunization) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Immunization) GetContained() []*anypb.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Immunization) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Immunization) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Immunization) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Immunization) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *Immunization) GetStatus() *Immunization_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Immunization) GetStatusReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.StatusReason
	}
	return nil
}

func (x *Immunization) GetVaccineCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.VaccineCode
	}
	return nil
}

func (x *Immunization) GetAdministeredProduct() *datatypes_go_proto.CodeableReference {
	if x != nil {
		return x.AdministeredProduct
	}
	return nil
}

func (x *Immunization) GetManufacturer() *datatypes_go_proto.CodeableReference {
	if x != nil {
		return x.Manufacturer
	}
	return nil
}

func (x *Immunization) GetLotNumber() *datatypes_go_proto.String {
	if x != nil {
		return x.LotNumber
	}
	return nil
}

func (x *Immunization) GetExpirationDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *Immunization) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *Immunization) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *Immunization) GetSupportingInformation() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.SupportingInformation
	}
	return nil
}

func (x *Immunization) GetOccurrence() *Immunization_OccurrenceX {
	if x != nil {
		return x.Occurrence
	}
	return nil
}

func (x *Immunization) GetPrimarySource() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.PrimarySource
	}
	return nil
}

func (x *Immunization) GetInformationSource() *datatypes_go_proto.CodeableReference {
	if x != nil {
		return x.InformationSource
	}
	return nil
}

func (x *Immunization) GetLocation() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Immunization) GetSite() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Site
	}
	return nil
}

func (x *Immunization) GetRoute() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *Immunization) GetDoseQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.DoseQuantity
	}
	return nil
}

func (x *Immunization) GetPerformer() []*Immunization_Performer {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *Immunization) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *Immunization) GetReason() []*datatypes_go_proto.CodeableReference {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *Immunization) GetIsSubpotent() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.IsSubpotent
	}
	return nil
}

func (x *Immunization) GetSubpotentReason() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.SubpotentReason
	}
	return nil
}

func (x *Immunization) GetProgramEligibility() []*Immunization_ProgramEligibility {
	if x != nil {
		return x.ProgramEligibility
	}
	return nil
}

func (x *Immunization) GetFundingSource() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.FundingSource
	}
	return nil
}

func (x *Immunization) GetReaction() []*Immunization_Reaction {
	if x != nil {
		return x.Reaction
	}
	return nil
}

func (x *Immunization) GetProtocolApplied() []*Immunization_ProtocolApplied {
	if x != nil {
		return x.ProtocolApplied
	}
	return nil
}

// completed | entered-in-error | not-done
type Immunization_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     valuesets_go_proto.ImmunizationStatusCodesValueSet_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.ImmunizationStatusCodesValueSet_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                          `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Immunization_StatusCode) Reset() {
	*x = Immunization_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_immunization_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Immunization_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Immunization_StatusCode) ProtoMessage() {}

func (x *Immunization_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_immunization_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Immunization_StatusCode.ProtoReflect.Descriptor instead.
func (*Immunization_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_immunization_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Immunization_StatusCode) GetValue() valuesets_go_proto.ImmunizationStatusCodesValueSet_Value {
	if x != nil {
		return x.Value
	}
	return valuesets_go_proto.ImmunizationStatusCodesValueSet_Value(0)
}

func (x *Immunization_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Immunization_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Vaccine administration date
type Immunization_OccurrenceX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*Immunization_OccurrenceX_DateTime
	//	*Immunization_OccurrenceX_StringValue
	Choice isImmunization_OccurrenceX_Choice `protobuf_oneof:"choice"`
}

func (x *Immunization_OccurrenceX) Reset() {
	*x = Immunization_OccurrenceX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_immunization_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Immunization_OccurrenceX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Immunization_OccurrenceX) ProtoMessage() {}

func (x *Immunization_OccurrenceX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_immunization_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Immunization_OccurrenceX.ProtoReflect.Descriptor instead.
func (*Immunization_OccurrenceX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_immunization_proto_rawDescGZIP(), []int{0, 1}
}

func (m *Immunization_OccurrenceX) GetChoice() isImmunization_OccurrenceX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Immunization_OccurrenceX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*Immunization_OccurrenceX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *Immunization_OccurrenceX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*Immunization_OccurrenceX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isImmunization_OccurrenceX_Choice interface {
	isImmunization_OccurrenceX_Choice()
}

type Immunization_OccurrenceX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type Immunization_OccurrenceX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,2,opt,name=string_value,json=string,proto3,oneof"`
}

func (*Immunization_OccurrenceX_DateTime) isImmunization_OccurrenceX_Choice() {}

func (*Immunization_OccurrenceX_StringValue) isImmunization_OccurrenceX_Choice() {}

// Who performed event
type Immunization_Performer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// What type of performance was done
	Function *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=function,proto3" json:"function,omitempty"`
	// Individual or organization who was performing
	Actor *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=actor,proto3" json:"actor,omitempty"`
}

func (x *Immunization_Performer) Reset() {
	*x = Immunization_Performer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_immunization_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Immunization_Performer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Immunization_Performer) ProtoMessage() {}

func (x *Immunization_Performer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_immunization_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Immunization_Performer.ProtoReflect.Descriptor instead.
func (*Immunization_Performer) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_immunization_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Immunization_Performer) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Immunization_Performer) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Immunization_Performer) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Immunization_Performer) GetFunction() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *Immunization_Performer) GetActor() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Actor
	}
	return nil
}

// Patient eligibility for a specific vaccination program
type Immunization_ProgramEligibility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The program that eligibility is declared for
	Program *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=program,proto3" json:"program,omitempty"`
	// The patient's eligibility status for the program
	ProgramStatus *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=program_status,json=programStatus,proto3" json:"program_status,omitempty"`
}

func (x *Immunization_ProgramEligibility) Reset() {
	*x = Immunization_ProgramEligibility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_immunization_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Immunization_ProgramEligibility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Immunization_ProgramEligibility) ProtoMessage() {}

func (x *Immunization_ProgramEligibility) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_immunization_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Immunization_ProgramEligibility.ProtoReflect.Descriptor instead.
func (*Immunization_ProgramEligibility) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_immunization_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Immunization_ProgramEligibility) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Immunization_ProgramEligibility) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Immunization_ProgramEligibility) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Immunization_ProgramEligibility) GetProgram() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Program
	}
	return nil
}

func (x *Immunization_ProgramEligibility) GetProgramStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ProgramStatus
	}
	return nil
}

// Details of a reaction that follows immunization
type Immunization_Reaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// When reaction started
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
	// Additional information on reaction
	Manifestation *datatypes_go_proto.CodeableReference `protobuf:"bytes,7,opt,name=manifestation,proto3" json:"manifestation,omitempty"`
	// Indicates self-reported reaction
	Reported *datatypes_go_proto.Boolean `protobuf:"bytes,6,opt,name=reported,proto3" json:"reported,omitempty"`
}

func (x *Immunization_Reaction) Reset() {
	*x = Immunization_Reaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_immunization_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Immunization_Reaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Immunization_Reaction) ProtoMessage() {}

func (x *Immunization_Reaction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_immunization_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Immunization_Reaction.ProtoReflect.Descriptor instead.
func (*Immunization_Reaction) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_immunization_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Immunization_Reaction) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Immunization_Reaction) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Immunization_Reaction) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Immunization_Reaction) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *Immunization_Reaction) GetManifestation() *datatypes_go_proto.CodeableReference {
	if x != nil {
		return x.Manifestation
	}
	return nil
}

func (x *Immunization_Reaction) GetReported() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Reported
	}
	return nil
}

// Protocol followed by the provider
type Immunization_ProtocolApplied struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Name of vaccine series
	Series *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=series,proto3" json:"series,omitempty"`
	// Who is responsible for publishing the recommendations
	Authority *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=authority,proto3" json:"authority,omitempty"`
	// Vaccine preventatable disease being targeted
	TargetDisease []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,rep,name=target_disease,json=targetDisease,proto3" json:"target_disease,omitempty"`
	// Dose number within series
	DoseNumber *datatypes_go_proto.String `protobuf:"bytes,9,opt,name=dose_number,json=doseNumber,proto3" json:"dose_number,omitempty"`
	// Recommended number of doses for immunity
	SeriesDoses *datatypes_go_proto.String `protobuf:"bytes,10,opt,name=series_doses,json=seriesDoses,proto3" json:"series_doses,omitempty"`
}

func (x *Immunization_ProtocolApplied) Reset() {
	*x = Immunization_ProtocolApplied{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_immunization_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Immunization_ProtocolApplied) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Immunization_ProtocolApplied) ProtoMessage() {}

func (x *Immunization_ProtocolApplied) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_immunization_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Immunization_ProtocolApplied.ProtoReflect.Descriptor instead.
func (*Immunization_ProtocolApplied) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_immunization_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Immunization_ProtocolApplied) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Immunization_ProtocolApplied) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Immunization_ProtocolApplied) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Immunization_ProtocolApplied) GetSeries() *datatypes_go_proto.String {
	if x != nil {
		return x.Series
	}
	return nil
}

func (x *Immunization_ProtocolApplied) GetAuthority() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Authority
	}
	return nil
}

func (x *Immunization_ProtocolApplied) GetTargetDisease() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.TargetDisease
	}
	return nil
}

func (x *Immunization_ProtocolApplied) GetDoseNumber() *datatypes_go_proto.String {
	if x != nil {
		return x.DoseNumber
	}
	return nil
}

func (x *Immunization_ProtocolApplied) GetSeriesDoses() *datatypes_go_proto.String {
	if x != nil {
		return x.SeriesDoses
	}
	return nil
}

var File_proto_google_fhir_proto_r5_core_resources_immunization_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r5_core_resources_immunization_proto_rawDesc = []byte{
	0x0a, 0x3c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc8, 0x26, 0x0a, 0x0c,
	0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x94, 0x01, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18,
	0x26, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x59, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72,
	0x65, 0x50, 0x6c, 0x61, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1a, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x4c, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0c, 0x76, 0x61, 0x63, 0x63, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0b, 0x76, 0x61, 0x63, 0x63, 0x69, 0x6e, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x59, 0x0a, 0x14, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x13, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x4a,
	0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x6d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0a, 0x6c, 0x6f,
	0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x6c, 0x6f, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x70, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x09, 0x65, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65,
	0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x65, 0x0a, 0x16, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x29, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x55, 0x0a, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0a, 0x6f, 0x63, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0d, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x12, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x11, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x4a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38,
	0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x05, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x64, 0x6f, 0x73, 0x65, 0x5f, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x0c, 0x64, 0x6f, 0x73, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x49,
	0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x1b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x52, 0x09,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x3e,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x2b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x3f,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x75, 0x62, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x4f, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x0f, 0x73, 0x75, 0x62, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x65, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x65, 0x6c, 0x69, 0x67,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x45, 0x6c, 0x69, 0x67,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x0e, 0x66, 0x75, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0d, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x10,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x18, 0x25, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x1a, 0xb9, 0x02, 0x0a, 0x0a, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6e, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x30, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x69, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x9a, 0x01, 0x0a, 0x0b, 0x4f, 0x63, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x58, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x1a, 0xa0, 0x03, 0x0a, 0x09, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x72, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x08, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x96, 0x01,
	0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x60, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52,
	0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0xeb, 0x02, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12,
	0x53, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x1a, 0xff, 0x02, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x4c,
	0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x6d,
	0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x08,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x08, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x1a, 0xa5, 0x04, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x09, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x0e, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x64, 0x6f, 0x73, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x0a, 0x64, 0x6f, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3e,
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x64, 0x6f, 0x73, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x6f, 0x73, 0x65, 0x73, 0x3a, 0x40,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x34, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x42, 0x7c, 0x98, 0xc6, 0xb0, 0xb5, 0x07, 0x05, 0x0a, 0x17,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x01, 0x5a, 0x59, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x6f, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r5_core_resources_immunization_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r5_core_resources_immunization_proto_rawDescData = file_proto_google_fhir_proto_r5_core_resources_immunization_proto_rawDesc
)

func file_proto_google_fhir_proto_r5_core_resources_immunization_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r5_core_resources_immunization_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r5_core_resources_immunization_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r5_core_resources_immunization_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r5_core_resources_immunization_proto_rawDescData
}

var file_proto_google_fhir_proto_r5_core_resources_immunization_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_proto_google_fhir_proto_r5_core_resources_immunization_proto_goTypes = []interface{}{
	(*Immunization)(nil),                                          // 0: google.fhir.r5.core.Immunization
	(*Immunization_StatusCode)(nil),                               // 1: google.fhir.r5.core.Immunization.StatusCode
	(*Immunization_OccurrenceX)(nil),                              // 2: google.fhir.r5.core.Immunization.OccurrenceX
	(*Immunization_Performer)(nil),                                // 3: google.fhir.r5.core.Immunization.Performer
	(*Immunization_ProgramEligibility)(nil),                       // 4: google.fhir.r5.core.Immunization.ProgramEligibility
	(*Immunization_Reaction)(nil),                                 // 5: google.fhir.r5.core.Immunization.Reaction
	(*Immunization_ProtocolApplied)(nil),                          // 6: google.fhir.r5.core.Immunization.ProtocolApplied
	(*datatypes_go_proto.Id)(nil),                                 // 7: google.fhir.r5.core.Id
	(*datatypes_go_proto.Meta)(nil),                               // 8: google.fhir.r5.core.Meta
	(*datatypes_go_proto.Uri)(nil),                                // 9: google.fhir.r5.core.Uri
	(*datatypes_go_proto.Code)(nil),                               // 10: google.fhir.r5.core.Code
	(*datatypes_go_proto.Narrative)(nil),                          // 11: google.fhir.r5.core.Narrative
	(*anypb.Any)(nil),                                             // 12: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),                          // 13: google.fhir.r5.core.Extension
	(*datatypes_go_proto.Identifier)(nil),                         // 14: google.fhir.r5.core.Identifier
	(*datatypes_go_proto.Reference)(nil),                          // 15: google.fhir.r5.core.Reference
	(*datatypes_go_proto.CodeableConcept)(nil),                    // 16: google.fhir.r5.core.CodeableConcept
	(*datatypes_go_proto.CodeableReference)(nil),                  // 17: google.fhir.r5.core.CodeableReference
	(*datatypes_go_proto.String)(nil),                             // 18: google.fhir.r5.core.String
	(*datatypes_go_proto.Date)(nil),                               // 19: google.fhir.r5.core.Date
	(*datatypes_go_proto.Boolean)(nil),                            // 20: google.fhir.r5.core.Boolean
	(*datatypes_go_proto.SimpleQuantity)(nil),                     // 21: google.fhir.r5.core.SimpleQuantity
	(*datatypes_go_proto.Annotation)(nil),                         // 22: google.fhir.r5.core.Annotation
	(valuesets_go_proto.ImmunizationStatusCodesValueSet_Value)(0), // 23: google.fhir.r5.core.ImmunizationStatusCodesValueSet.Value
	(*datatypes_go_proto.DateTime)(nil),                           // 24: google.fhir.r5.core.DateTime
}
var file_proto_google_fhir_proto_r5_core_resources_immunization_proto_depIdxs = []int32{
	7,  // 0: google.fhir.r5.core.Immunization.id:type_name -> google.fhir.r5.core.Id
	8,  // 1: google.fhir.r5.core.Immunization.meta:type_name -> google.fhir.r5.core.Meta
	9,  // 2: google.fhir.r5.core.Immunization.implicit_rules:type_name -> google.fhir.r5.core.Uri
	10, // 3: google.fhir.r5.core.Immunization.language:type_name -> google.fhir.r5.core.Code
	11, // 4: google.fhir.r5.core.Immunization.text:type_name -> google.fhir.r5.core.Narrative
	12, // 5: google.fhir.r5.core.Immunization.contained:type_name -> google.protobuf.Any
	13, // 6: google.fhir.r5.core.Immunization.extension:type_name -> google.fhir.r5.core.Extension
	13, // 7: google.fhir.r5.core.Immunization.modifier_extension:type_name -> google.fhir.r5.core.Extension
	14, // 8: google.fhir.r5.core.Immunization.identifier:type_name -> google.fhir.r5.core.Identifier
	15, // 9: google.fhir.r5.core.Immunization.based_on:type_name -> google.fhir.r5.core.Reference
	1,  // 10: google.fhir.r5.core.Immunization.status:type_name -> google.fhir.r5.core.Immunization.StatusCode
	16, // 11: google.fhir.r5.core.Immunization.status_reason:type_name -> google.fhir.r5.core.CodeableConcept
	16, // 12: google.fhir.r5.core.Immunization.vaccine_code:type_name -> google.fhir.r5.core.CodeableConcept
	17, // 13: google.fhir.r5.core.Immunization.administered_product:type_name -> google.fhir.r5.core.CodeableReference
	17, // 14: google.fhir.r5.core.Immunization.manufacturer:type_name -> google.fhir.r5.core.CodeableReference
	18, // 15: google.fhir.r5.core.Immunization.lot_number:type_name -> google.fhir.r5.core.String
	19, // 16: google.fhir.r5.core.Immunization.expiration_date:type_name -> google.fhir.r5.core.Date
	15, // 17: google.fhir.r5.core.Immunization.patient:type_name -> google.fhir.r5.core.Reference
	15, // 18: google.fhir.r5.core.Immunization.encounter:type_name -> google.fhir.r5.core.Reference
	15, // 19: google.fhir.r5.core.Immunization.supporting_information:type_name -> google.fhir.r5.core.Reference
	2,  // 20: google.fhir.r5.core.Immunization.occurrence:type_name -> google.fhir.r5.core.Immunization.OccurrenceX
	20, // 21: google.fhir.r5.core.Immunization.primary_source:type_name -> google.fhir.r5.core.Boolean
	17, // 22: google.fhir.r5.core.Immunization.information_source:type_name -> google.fhir.r5.core.CodeableReference
	15, // 23: google.fhir.r5.core.Immunization.location:type_name -> google.fhir.r5.core.Reference
	16, // 24: google.fhir.r5.core.Immunization.site:type_name -> google.fhir.r5.core.CodeableConcept
	16, // 25: google.fhir.r5.core.Immunization.route:type_name -> google.fhir.r5.core.CodeableConcept
	21, // 26: google.fhir.r5.core.Immunization.dose_quantity:type_name -> google.fhir.r5.core.SimpleQuantity
	3,  // 27: google.fhir.r5.core.Immunization.performer:type_name -> google.fhir.r5.core.Immunization.Performer
	22, // 28: google.fhir.r5.core.Immunization.note:type_name -> google.fhir.r5.core.Annotation
	17, // 29: google.fhir.r5.core.Immunization.reason:type_name -> google.fhir.r5.core.CodeableReference
	20, // 30: google.fhir.r5.core.Immunization.is_subpotent:type_name -> google.fhir.r5.core.Boolean
	16, // 31: google.fhir.r5.core.Immunization.subpotent_reason:type_name -> google.fhir.r5.core.CodeableConcept
	4,  // 32: google.fhir.r5.core.Immunization.program_eligibility:type_name -> google.fhir.r5.core.Immunization.ProgramEligibility
	16, // 33: google.fhir.r5.core.Immunization.funding_source:type_name -> google.fhir.r5.core.CodeableConcept
	5,  // 34: google.fhir.r5.core.Immunization.reaction:type_name -> google.fhir.r5.core.Immunization.Reaction
	6,  // 35: google.fhir.r5.core.Immunization.protocol_applied:type_name -> google.fhir.r5.core.Immunization.ProtocolApplied
	23, // 36: google.fhir.r5.core.Immunization.StatusCode.value:type_name -> google.fhir.r5.core.ImmunizationStatusCodesValueSet.Value
	18, // 37: google.fhir.r5.core.Immunization.StatusCode.id:type_name -> google.fhir.r5.core.String
	13, // 38: google.fhir.r5.core.Immunization.StatusCode.extension:type_name -> google.fhir.r5.core.Extension
	24, // 39: google.fhir.r5.core.Immunization.OccurrenceX.date_time:type_name -> google.fhir.r5.core.DateTime
	18, // 40: google.fhir.r5.core.Immunization.OccurrenceX.string_value:type_name -> google.fhir.r5.core.String
	18, // 41: google.fhir.r5.core.Immunization.Performer.id:type_name -> google.fhir.r5.core.String
	13, // 42: google.fhir.r5.core.Immunization.Performer.extension:type_name -> google.fhir.r5.core.Extension
	13, // 43: google.fhir.r5.core.Immunization.Performer.modifier_extension:type_name -> google.fhir.r5.core.Extension
	16, // 44: google.fhir.r5.core.Immunization.Performer.function:type_name -> google.fhir.r5.core.CodeableConcept
	15, // 45: google.fhir.r5.core.Immunization.Performer.actor:type_name -> google.fhir.r5.core.Reference
	18, // 46: google.fhir.r5.core.Immunization.ProgramEligibility.id:type_name -> google.fhir.r5.core.String
	13, // 47: google.fhir.r5.core.Immunization.ProgramEligibility.extension:type_name -> google.fhir.r5.core.Extension
	13, // 48: google.fhir.r5.core.Immunization.ProgramEligibility.modifier_extension:type_name -> google.fhir.r5.core.Extension
	16, // 49: google.fhir.r5.core.Immunization.ProgramEligibility.program:type_name -> google.fhir.r5.core.CodeableConcept
	16, // 50: google.fhir.r5.core.Immunization.ProgramEligibility.program_status:type_name -> google.fhir.r5.core.CodeableConcept
	18, // 51: google.fhir.r5.core.Immunization.Reaction.id:type_name -> google.fhir.r5.core.String
	13, // 52: google.fhir.r5.core.Immunization.Reaction.extension:type_name -> google.fhir.r5.core.Extension
	13, // 53: google.fhir.r5.core.Immunization.Reaction.modifier_extension:type_name -> google.fhir.r5.core.Extension
	24, // 54: google.fhir.r5.core.Immunization.Reaction.date:type_name -> google.fhir.r5.core.DateTime
	17, // 55: google.fhir.r5.core.Immunization.Reaction.manifestation:type_name -> google.fhir.r5.core.CodeableReference
	20, // 56: google.fhir.r5.core.Immunization.Reaction.reported:type_name -> google.fhir.r5.core.Boolean
	18, // 57: google.fhir.r5.core.Immunization.ProtocolApplied.id:type_name -> google.fhir.r5.core.String
	13, // 58: google.fhir.r5.core.Immunization.ProtocolApplied.extension:type_name -> google.fhir.r5.core.Extension
	13, // 59: google.fhir.r5.core.Immunization.ProtocolApplied.modifier_extension:type_name -> google.fhir.r5.core.Extension
	18, // 60: google.fhir.r5.core.Immunization.ProtocolApplied.series:type_name -> google.fhir.r5.core.String
	15, // 61: google.fhir.r5.core.Immunization.ProtocolApplied.authority:type_name -> google.fhir.r5.core.Reference
	16, // 62: google.fhir.r5.core.Immunization.ProtocolApplied.target_disease:type_name -> google.fhir.r5.core.CodeableConcept
	18, // 63: google.fhir.r5.core.Immunization.ProtocolApplied.dose_number:type_name -> google.fhir.r5.core.String
	18, // 64: google.fhir.r5.core.Immunization.ProtocolApplied.series_doses:type_name -> google.fhir.r5.core.String
	65, // [65:65] is the sub-list for method output_type
	65, // [65:65] is the sub-list for method input_type
	65, // [65:65] is the sub-list for extension type_name
	65, // [65:65] is the sub-list for extension extendee
	0,  // [0:65] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r5_core_resources_immunization_proto_init() }
func file_proto_google_fhir_proto_r5_core_resources_immunization_proto_init() {
	if File_proto_google_fhir_proto_r5_core_resources_immunization_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r5_core_resources_immunization_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Immunization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_immunization_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Immunization_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_immunization_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Immunization_OccurrenceX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_immunization_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Immunization_Performer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_immunization_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Immunization_ProgramEligibility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_immunization_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Immunization_Reaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_immunization_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Immunization_ProtocolApplied); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_r5_core_resources_immunization_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Immunization_OccurrenceX_DateTime)(nil),
		(*Immunization_OccurrenceX_StringValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r5_core_resources_immunization_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r5_core_resources_immunization_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r5_core_resources_immunization_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r5_core_resources_immunization_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r5_core_resources_immunization_proto = out.File
	file_proto_google_fhir_proto_r5_core_resources_immunization_proto_rawDesc = nil
	file_proto_google_fhir_proto_r5_core_resources_immunization_proto_goTypes = nil
	file_proto_google_fhir_proto_r5_core_resources_immunization_proto_depIdxs = nil
}
