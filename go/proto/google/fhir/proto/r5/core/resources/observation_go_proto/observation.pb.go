//    Copyright 2023 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.21.12
// source: proto/google/fhir/proto/r5/core/resources/observation.proto

package observation_go_proto

import (
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	codes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/codes_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for Observation.
// Measurements and simple assertions.
// See http://hl7.org/fhir/StructureDefinition/Observation
type Observation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*anypb.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business Identifier for observation
	Identifier   []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	Instantiates *Observation_InstantiatesX       `protobuf:"bytes,34,opt,name=instantiates,proto3" json:"instantiates,omitempty"`
	// Fulfills plan, proposal or order
	BasedOn     []*datatypes_go_proto.Reference `protobuf:"bytes,11,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	TriggeredBy []*Observation_TriggeredBy      `protobuf:"bytes,35,rep,name=triggered_by,json=triggeredBy,proto3" json:"triggered_by,omitempty"`
	// Part of referenced event
	PartOf []*datatypes_go_proto.Reference `protobuf:"bytes,12,rep,name=part_of,json=partOf,proto3" json:"part_of,omitempty"`
	Status *Observation_StatusCode         `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
	// Classification of  type of observation
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,rep,name=category,proto3" json:"category,omitempty"`
	// Type of observation (code / type)
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,15,opt,name=code,proto3" json:"code,omitempty"`
	// Who and/or what the observation is about
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,16,opt,name=subject,proto3" json:"subject,omitempty"`
	// What the observation is about, when it is not about the subject of record
	Focus []*datatypes_go_proto.Reference `protobuf:"bytes,17,rep,name=focus,proto3" json:"focus,omitempty"`
	// Healthcare event during which this observation is made
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,18,opt,name=encounter,proto3" json:"encounter,omitempty"`
	Effective *Observation_EffectiveX       `protobuf:"bytes,19,opt,name=effective,proto3" json:"effective,omitempty"`
	// Date/Time this version was made available
	Issued *datatypes_go_proto.Instant `protobuf:"bytes,20,opt,name=issued,proto3" json:"issued,omitempty"`
	// Who is responsible for the observation
	Performer []*datatypes_go_proto.Reference `protobuf:"bytes,21,rep,name=performer,proto3" json:"performer,omitempty"`
	Value     *Observation_ValueX             `protobuf:"bytes,22,opt,name=value,proto3" json:"value,omitempty"`
	// Why the result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,23,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc
	Interpretation []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,rep,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Comments about the observation
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,25,rep,name=note,proto3" json:"note,omitempty"`
	// Observed body part
	BodySite *datatypes_go_proto.CodeableConcept `protobuf:"bytes,26,opt,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	// Observed body structure
	BodyStructure *datatypes_go_proto.Reference `protobuf:"bytes,36,opt,name=body_structure,json=bodyStructure,proto3" json:"body_structure,omitempty"`
	// How it was done
	Method *datatypes_go_proto.CodeableConcept `protobuf:"bytes,27,opt,name=method,proto3" json:"method,omitempty"`
	// Specimen used for this observation
	Specimen *datatypes_go_proto.Reference `protobuf:"bytes,28,opt,name=specimen,proto3" json:"specimen,omitempty"`
	// A reference to the device that generates the measurements or the device
	// settings for the device
	Device         *datatypes_go_proto.Reference `protobuf:"bytes,29,opt,name=device,proto3" json:"device,omitempty"`
	ReferenceRange []*Observation_ReferenceRange `protobuf:"bytes,30,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
	// Related resource that belongs to the Observation group
	HasMember []*datatypes_go_proto.Reference `protobuf:"bytes,31,rep,name=has_member,json=hasMember,proto3" json:"has_member,omitempty"`
	// Related resource from which the observation is made
	DerivedFrom []*datatypes_go_proto.Reference `protobuf:"bytes,32,rep,name=derived_from,json=derivedFrom,proto3" json:"derived_from,omitempty"`
	Component   []*Observation_Component        `protobuf:"bytes,33,rep,name=component,proto3" json:"component,omitempty"`
}

func (x *Observation) Reset() {
	*x = Observation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_observation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Observation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Observation) ProtoMessage() {}

func (x *Observation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_observation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Observation.ProtoReflect.Descriptor instead.
func (*Observation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_observation_proto_rawDescGZIP(), []int{0}
}

func (x *Observation) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Observation) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Observation) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Observation) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Observation) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Observation) GetContained() []*anypb.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Observation) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Observation) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Observation) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Observation) GetInstantiates() *Observation_InstantiatesX {
	if x != nil {
		return x.Instantiates
	}
	return nil
}

func (x *Observation) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *Observation) GetTriggeredBy() []*Observation_TriggeredBy {
	if x != nil {
		return x.TriggeredBy
	}
	return nil
}

func (x *Observation) GetPartOf() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.PartOf
	}
	return nil
}

func (x *Observation) GetStatus() *Observation_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Observation) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Observation) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Observation) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Observation) GetFocus() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Focus
	}
	return nil
}

func (x *Observation) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *Observation) GetEffective() *Observation_EffectiveX {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *Observation) GetIssued() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *Observation) GetPerformer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *Observation) GetValue() *Observation_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Observation) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *Observation) GetInterpretation() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *Observation) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *Observation) GetBodySite() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *Observation) GetBodyStructure() *datatypes_go_proto.Reference {
	if x != nil {
		return x.BodyStructure
	}
	return nil
}

func (x *Observation) GetMethod() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *Observation) GetSpecimen() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *Observation) GetDevice() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *Observation) GetReferenceRange() []*Observation_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

func (x *Observation) GetHasMember() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.HasMember
	}
	return nil
}

func (x *Observation) GetDerivedFrom() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.DerivedFrom
	}
	return nil
}

func (x *Observation) GetComponent() []*Observation_Component {
	if x != nil {
		return x.Component
	}
	return nil
}

// Instantiates FHIR ObservationDefinition
type Observation_InstantiatesX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*Observation_InstantiatesX_Canonical
	//	*Observation_InstantiatesX_Reference
	Choice isObservation_InstantiatesX_Choice `protobuf_oneof:"choice"`
}

func (x *Observation_InstantiatesX) Reset() {
	*x = Observation_InstantiatesX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_observation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Observation_InstantiatesX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Observation_InstantiatesX) ProtoMessage() {}

func (x *Observation_InstantiatesX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_observation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Observation_InstantiatesX.ProtoReflect.Descriptor instead.
func (*Observation_InstantiatesX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_observation_proto_rawDescGZIP(), []int{0, 0}
}

func (m *Observation_InstantiatesX) GetChoice() isObservation_InstantiatesX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Observation_InstantiatesX) GetCanonical() *datatypes_go_proto.Canonical {
	if x, ok := x.GetChoice().(*Observation_InstantiatesX_Canonical); ok {
		return x.Canonical
	}
	return nil
}

func (x *Observation_InstantiatesX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*Observation_InstantiatesX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isObservation_InstantiatesX_Choice interface {
	isObservation_InstantiatesX_Choice()
}

type Observation_InstantiatesX_Canonical struct {
	Canonical *datatypes_go_proto.Canonical `protobuf:"bytes,1,opt,name=canonical,proto3,oneof"`
}

type Observation_InstantiatesX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*Observation_InstantiatesX_Canonical) isObservation_InstantiatesX_Choice() {}

func (*Observation_InstantiatesX_Reference) isObservation_InstantiatesX_Choice() {}

// Triggering observation(s)
type Observation_TriggeredBy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Triggering observation
	Observation *datatypes_go_proto.Reference     `protobuf:"bytes,4,opt,name=observation,proto3" json:"observation,omitempty"`
	Type        *Observation_TriggeredBy_TypeCode `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// Reason that the observation was triggered
	Reason *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *Observation_TriggeredBy) Reset() {
	*x = Observation_TriggeredBy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_observation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Observation_TriggeredBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Observation_TriggeredBy) ProtoMessage() {}

func (x *Observation_TriggeredBy) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_observation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Observation_TriggeredBy.ProtoReflect.Descriptor instead.
func (*Observation_TriggeredBy) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_observation_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Observation_TriggeredBy) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Observation_TriggeredBy) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Observation_TriggeredBy) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Observation_TriggeredBy) GetObservation() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Observation
	}
	return nil
}

func (x *Observation_TriggeredBy) GetType() *Observation_TriggeredBy_TypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Observation_TriggeredBy) GetReason() *datatypes_go_proto.String {
	if x != nil {
		return x.Reason
	}
	return nil
}

// registered | preliminary | final | amended +
type Observation_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.ObservationStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.ObservationStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension            `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Observation_StatusCode) Reset() {
	*x = Observation_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_observation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Observation_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Observation_StatusCode) ProtoMessage() {}

func (x *Observation_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_observation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Observation_StatusCode.ProtoReflect.Descriptor instead.
func (*Observation_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_observation_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Observation_StatusCode) GetValue() codes_go_proto.ObservationStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.ObservationStatusCode_Value(0)
}

func (x *Observation_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Observation_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Clinically relevant time/time-period for observation
type Observation_EffectiveX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*Observation_EffectiveX_DateTime
	//	*Observation_EffectiveX_Period
	//	*Observation_EffectiveX_Timing
	//	*Observation_EffectiveX_Instant
	Choice isObservation_EffectiveX_Choice `protobuf_oneof:"choice"`
}

func (x *Observation_EffectiveX) Reset() {
	*x = Observation_EffectiveX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_observation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Observation_EffectiveX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Observation_EffectiveX) ProtoMessage() {}

func (x *Observation_EffectiveX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_observation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Observation_EffectiveX.ProtoReflect.Descriptor instead.
func (*Observation_EffectiveX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_observation_proto_rawDescGZIP(), []int{0, 3}
}

func (m *Observation_EffectiveX) GetChoice() isObservation_EffectiveX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Observation_EffectiveX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*Observation_EffectiveX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *Observation_EffectiveX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*Observation_EffectiveX_Period); ok {
		return x.Period
	}
	return nil
}

func (x *Observation_EffectiveX) GetTiming() *datatypes_go_proto.Timing {
	if x, ok := x.GetChoice().(*Observation_EffectiveX_Timing); ok {
		return x.Timing
	}
	return nil
}

func (x *Observation_EffectiveX) GetInstant() *datatypes_go_proto.Instant {
	if x, ok := x.GetChoice().(*Observation_EffectiveX_Instant); ok {
		return x.Instant
	}
	return nil
}

type isObservation_EffectiveX_Choice interface {
	isObservation_EffectiveX_Choice()
}

type Observation_EffectiveX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type Observation_EffectiveX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

type Observation_EffectiveX_Timing struct {
	Timing *datatypes_go_proto.Timing `protobuf:"bytes,3,opt,name=timing,proto3,oneof"`
}

type Observation_EffectiveX_Instant struct {
	Instant *datatypes_go_proto.Instant `protobuf:"bytes,4,opt,name=instant,proto3,oneof"`
}

func (*Observation_EffectiveX_DateTime) isObservation_EffectiveX_Choice() {}

func (*Observation_EffectiveX_Period) isObservation_EffectiveX_Choice() {}

func (*Observation_EffectiveX_Timing) isObservation_EffectiveX_Choice() {}

func (*Observation_EffectiveX_Instant) isObservation_EffectiveX_Choice() {}

// Actual result
type Observation_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*Observation_ValueX_Quantity
	//	*Observation_ValueX_CodeableConcept
	//	*Observation_ValueX_StringValue
	//	*Observation_ValueX_Boolean
	//	*Observation_ValueX_Integer
	//	*Observation_ValueX_Range
	//	*Observation_ValueX_Ratio
	//	*Observation_ValueX_SampledData
	//	*Observation_ValueX_Time
	//	*Observation_ValueX_DateTime
	//	*Observation_ValueX_Period
	//	*Observation_ValueX_Attachment
	//	*Observation_ValueX_Reference
	Choice isObservation_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *Observation_ValueX) Reset() {
	*x = Observation_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_observation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Observation_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Observation_ValueX) ProtoMessage() {}

func (x *Observation_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_observation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Observation_ValueX.ProtoReflect.Descriptor instead.
func (*Observation_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_observation_proto_rawDescGZIP(), []int{0, 4}
}

func (m *Observation_ValueX) GetChoice() isObservation_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Observation_ValueX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*Observation_ValueX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *Observation_ValueX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*Observation_ValueX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *Observation_ValueX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*Observation_ValueX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *Observation_ValueX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*Observation_ValueX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *Observation_ValueX) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetChoice().(*Observation_ValueX_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *Observation_ValueX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*Observation_ValueX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *Observation_ValueX) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetChoice().(*Observation_ValueX_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *Observation_ValueX) GetSampledData() *datatypes_go_proto.SampledData {
	if x, ok := x.GetChoice().(*Observation_ValueX_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (x *Observation_ValueX) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetChoice().(*Observation_ValueX_Time); ok {
		return x.Time
	}
	return nil
}

func (x *Observation_ValueX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*Observation_ValueX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *Observation_ValueX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*Observation_ValueX_Period); ok {
		return x.Period
	}
	return nil
}

func (x *Observation_ValueX) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetChoice().(*Observation_ValueX_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *Observation_ValueX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*Observation_ValueX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isObservation_ValueX_Choice interface {
	isObservation_ValueX_Choice()
}

type Observation_ValueX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type Observation_ValueX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type Observation_ValueX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=string_value,json=string,proto3,oneof"`
}

type Observation_ValueX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,4,opt,name=boolean,proto3,oneof"`
}

type Observation_ValueX_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,5,opt,name=integer,proto3,oneof"`
}

type Observation_ValueX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,6,opt,name=range,proto3,oneof"`
}

type Observation_ValueX_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,7,opt,name=ratio,proto3,oneof"`
}

type Observation_ValueX_SampledData struct {
	SampledData *datatypes_go_proto.SampledData `protobuf:"bytes,8,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type Observation_ValueX_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,9,opt,name=time,proto3,oneof"`
}

type Observation_ValueX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,10,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type Observation_ValueX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,11,opt,name=period,proto3,oneof"`
}

type Observation_ValueX_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,12,opt,name=attachment,proto3,oneof"`
}

type Observation_ValueX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,13,opt,name=reference,proto3,oneof"`
}

func (*Observation_ValueX_Quantity) isObservation_ValueX_Choice() {}

func (*Observation_ValueX_CodeableConcept) isObservation_ValueX_Choice() {}

func (*Observation_ValueX_StringValue) isObservation_ValueX_Choice() {}

func (*Observation_ValueX_Boolean) isObservation_ValueX_Choice() {}

func (*Observation_ValueX_Integer) isObservation_ValueX_Choice() {}

func (*Observation_ValueX_Range) isObservation_ValueX_Choice() {}

func (*Observation_ValueX_Ratio) isObservation_ValueX_Choice() {}

func (*Observation_ValueX_SampledData) isObservation_ValueX_Choice() {}

func (*Observation_ValueX_Time) isObservation_ValueX_Choice() {}

func (*Observation_ValueX_DateTime) isObservation_ValueX_Choice() {}

func (*Observation_ValueX_Period) isObservation_ValueX_Choice() {}

func (*Observation_ValueX_Attachment) isObservation_ValueX_Choice() {}

func (*Observation_ValueX_Reference) isObservation_ValueX_Choice() {}

// Provides guide for interpretation
type Observation_ReferenceRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Low Range, if relevant
	Low *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,4,opt,name=low,proto3" json:"low,omitempty"`
	// High Range, if relevant
	High *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,5,opt,name=high,proto3" json:"high,omitempty"`
	// Normal value, if relevant
	NormalValue *datatypes_go_proto.CodeableConcept `protobuf:"bytes,10,opt,name=normal_value,json=normalValue,proto3" json:"normal_value,omitempty"`
	// Reference range qualifier
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	// Reference range population
	AppliesTo []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,rep,name=applies_to,json=appliesTo,proto3" json:"applies_to,omitempty"`
	// Applicable age range, if relevant
	Age *datatypes_go_proto.Range `protobuf:"bytes,8,opt,name=age,proto3" json:"age,omitempty"`
	// Text based reference range in an observation
	Text *datatypes_go_proto.Markdown `protobuf:"bytes,11,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Observation_ReferenceRange) Reset() {
	*x = Observation_ReferenceRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_observation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Observation_ReferenceRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Observation_ReferenceRange) ProtoMessage() {}

func (x *Observation_ReferenceRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_observation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Observation_ReferenceRange.ProtoReflect.Descriptor instead.
func (*Observation_ReferenceRange) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_observation_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Observation_ReferenceRange) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Observation_ReferenceRange) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Observation_ReferenceRange) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Observation_ReferenceRange) GetLow() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *Observation_ReferenceRange) GetHigh() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *Observation_ReferenceRange) GetNormalValue() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.NormalValue
	}
	return nil
}

func (x *Observation_ReferenceRange) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Observation_ReferenceRange) GetAppliesTo() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AppliesTo
	}
	return nil
}

func (x *Observation_ReferenceRange) GetAge() *datatypes_go_proto.Range {
	if x != nil {
		return x.Age
	}
	return nil
}

func (x *Observation_ReferenceRange) GetText() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Text
	}
	return nil
}

// Component results
type Observation_Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of component observation (code / type)
	Code  *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Value *Observation_Component_ValueX       `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	// Why the component result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc
	Interpretation []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,rep,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Provides guide for interpretation of component result
	ReferenceRange []*Observation_ReferenceRange `protobuf:"bytes,8,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
}

func (x *Observation_Component) Reset() {
	*x = Observation_Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_observation_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Observation_Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Observation_Component) ProtoMessage() {}

func (x *Observation_Component) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_observation_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Observation_Component.ProtoReflect.Descriptor instead.
func (*Observation_Component) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_observation_proto_rawDescGZIP(), []int{0, 6}
}

func (x *Observation_Component) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Observation_Component) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Observation_Component) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Observation_Component) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Observation_Component) GetValue() *Observation_Component_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Observation_Component) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *Observation_Component) GetInterpretation() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *Observation_Component) GetReferenceRange() []*Observation_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

// reflex | repeat | re-run
type Observation_TriggeredBy_TypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.TriggeredBytypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.TriggeredBytypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension          `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Observation_TriggeredBy_TypeCode) Reset() {
	*x = Observation_TriggeredBy_TypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_observation_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Observation_TriggeredBy_TypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Observation_TriggeredBy_TypeCode) ProtoMessage() {}

func (x *Observation_TriggeredBy_TypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_observation_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Observation_TriggeredBy_TypeCode.ProtoReflect.Descriptor instead.
func (*Observation_TriggeredBy_TypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_observation_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *Observation_TriggeredBy_TypeCode) GetValue() codes_go_proto.TriggeredBytypeCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.TriggeredBytypeCode_Value(0)
}

func (x *Observation_TriggeredBy_TypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Observation_TriggeredBy_TypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Actual component result
type Observation_Component_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*Observation_Component_ValueX_Quantity
	//	*Observation_Component_ValueX_CodeableConcept
	//	*Observation_Component_ValueX_StringValue
	//	*Observation_Component_ValueX_Boolean
	//	*Observation_Component_ValueX_Integer
	//	*Observation_Component_ValueX_Range
	//	*Observation_Component_ValueX_Ratio
	//	*Observation_Component_ValueX_SampledData
	//	*Observation_Component_ValueX_Time
	//	*Observation_Component_ValueX_DateTime
	//	*Observation_Component_ValueX_Period
	//	*Observation_Component_ValueX_Attachment
	//	*Observation_Component_ValueX_Reference
	Choice isObservation_Component_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *Observation_Component_ValueX) Reset() {
	*x = Observation_Component_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_observation_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Observation_Component_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Observation_Component_ValueX) ProtoMessage() {}

func (x *Observation_Component_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_observation_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Observation_Component_ValueX.ProtoReflect.Descriptor instead.
func (*Observation_Component_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_observation_proto_rawDescGZIP(), []int{0, 6, 0}
}

func (m *Observation_Component_ValueX) GetChoice() isObservation_Component_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Observation_Component_ValueX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*Observation_Component_ValueX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *Observation_Component_ValueX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*Observation_Component_ValueX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *Observation_Component_ValueX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*Observation_Component_ValueX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *Observation_Component_ValueX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*Observation_Component_ValueX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *Observation_Component_ValueX) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetChoice().(*Observation_Component_ValueX_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *Observation_Component_ValueX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*Observation_Component_ValueX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *Observation_Component_ValueX) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetChoice().(*Observation_Component_ValueX_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *Observation_Component_ValueX) GetSampledData() *datatypes_go_proto.SampledData {
	if x, ok := x.GetChoice().(*Observation_Component_ValueX_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (x *Observation_Component_ValueX) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetChoice().(*Observation_Component_ValueX_Time); ok {
		return x.Time
	}
	return nil
}

func (x *Observation_Component_ValueX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*Observation_Component_ValueX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *Observation_Component_ValueX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*Observation_Component_ValueX_Period); ok {
		return x.Period
	}
	return nil
}

func (x *Observation_Component_ValueX) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetChoice().(*Observation_Component_ValueX_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *Observation_Component_ValueX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*Observation_Component_ValueX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isObservation_Component_ValueX_Choice interface {
	isObservation_Component_ValueX_Choice()
}

type Observation_Component_ValueX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type Observation_Component_ValueX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type Observation_Component_ValueX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=string_value,json=string,proto3,oneof"`
}

type Observation_Component_ValueX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,4,opt,name=boolean,proto3,oneof"`
}

type Observation_Component_ValueX_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,5,opt,name=integer,proto3,oneof"`
}

type Observation_Component_ValueX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,6,opt,name=range,proto3,oneof"`
}

type Observation_Component_ValueX_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,7,opt,name=ratio,proto3,oneof"`
}

type Observation_Component_ValueX_SampledData struct {
	SampledData *datatypes_go_proto.SampledData `protobuf:"bytes,8,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type Observation_Component_ValueX_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,9,opt,name=time,proto3,oneof"`
}

type Observation_Component_ValueX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,10,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type Observation_Component_ValueX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,11,opt,name=period,proto3,oneof"`
}

type Observation_Component_ValueX_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,12,opt,name=attachment,proto3,oneof"`
}

type Observation_Component_ValueX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,13,opt,name=reference,proto3,oneof"`
}

func (*Observation_Component_ValueX_Quantity) isObservation_Component_ValueX_Choice() {}

func (*Observation_Component_ValueX_CodeableConcept) isObservation_Component_ValueX_Choice() {}

func (*Observation_Component_ValueX_StringValue) isObservation_Component_ValueX_Choice() {}

func (*Observation_Component_ValueX_Boolean) isObservation_Component_ValueX_Choice() {}

func (*Observation_Component_ValueX_Integer) isObservation_Component_ValueX_Choice() {}

func (*Observation_Component_ValueX_Range) isObservation_Component_ValueX_Choice() {}

func (*Observation_Component_ValueX_Ratio) isObservation_Component_ValueX_Choice() {}

func (*Observation_Component_ValueX_SampledData) isObservation_Component_ValueX_Choice() {}

func (*Observation_Component_ValueX_Time) isObservation_Component_ValueX_Choice() {}

func (*Observation_Component_ValueX_DateTime) isObservation_Component_ValueX_Choice() {}

func (*Observation_Component_ValueX_Period) isObservation_Component_ValueX_Choice() {}

func (*Observation_Component_ValueX_Attachment) isObservation_Component_ValueX_Choice() {}

func (*Observation_Component_ValueX_Reference) isObservation_Component_ValueX_Choice() {}

var File_proto_google_fhir_proto_r5_core_resources_observation_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r5_core_resources_observation_proto_rawDesc = []byte{
	0x0a, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72,
	0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xff, 0x3e, 0x0a, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f,
	0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69,
	0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x0c,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65,
	0x73, 0x58, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73,
	0x12, 0xbc, 0x01, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x80, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1a, 0x49, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12,
	0x4f, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65,
	0x64, 0x42, 0x79, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x42, 0x79,
	0x12, 0xce, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x94, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x18, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x12, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x13, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x79, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x47, 0x65, 0x6e,
	0x6f, 0x6d, 0x69, 0x63, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x74, 0x4f,
	0x66, 0x12, 0x4b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x40, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0xf5, 0x01, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0xba, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c,
	0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x09, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x1a, 0x42, 0x69, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x44, 0x65, 0x72,
	0x69, 0x76, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x10, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x44, 0x0a, 0x05, 0x66, 0x6f,
	0x63, 0x75, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x05, 0x66, 0x6f, 0x63, 0x75, 0x73,
	0x12, 0x4d, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12,
	0x49, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x58, 0x52,
	0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64,
	0x12, 0xa6, 0x01, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x15,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x68, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x09,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x58, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x52, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61,
	0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12,
	0x41, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x53, 0x69,
	0x74, 0x65, 0x12, 0x5a, 0x0a, 0x0e, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0d, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x0d, 0x62, 0x6f, 0x64, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3c,
	0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0xe7, 0x01, 0x0a,
	0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0xaa, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xf2, 0xbe, 0xc0, 0xa4, 0x07,
	0x8a, 0x01, 0x28, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x28, 0x29, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x28, 0x29, 0x20, 0x69, 0x73, 0x20, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x29, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x28, 0x29, 0x2e, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x28, 0x29, 0x2e, 0x61, 0x6c, 0x6c, 0x28, 0x24, 0x74, 0x68, 0x69, 0x73, 0x20,
	0x69, 0x73, 0x20, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x29, 0x52, 0x08, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x56, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58,
	0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x0a, 0x68, 0x61, 0x73,
	0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x43, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x15, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61,
	0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x11, 0x4d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x09, 0x68, 0x61, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0xd8, 0x01,
	0x0a, 0x0c, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x20,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x94, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x79,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x15, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61,
	0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x47,
	0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x0b, 0x64, 0x65, 0x72,
	0x69, 0x76, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x1a, 0xbe, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61,
	0x74, 0x65, 0x73, 0x58, 0x12, 0x3e, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x61,
	0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x6f, 0x6e,
	0x69, 0x63, 0x61, 0x6c, 0x12, 0x5b, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1b, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x15, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x1a, 0xe0, 0x05, 0x0a, 0x0b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a,
	0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x17, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x65, 0x64, 0x42, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x1a, 0xb3, 0x02, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x42, 0x79, 0x74, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x76,
	0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x62, 0x79, 0x74, 0x79, 0x70, 0x65, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xae, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6d, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2f,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x84, 0x02, 0x0a, 0x0a, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x58, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x74,
	0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x12, 0x38, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x3a, 0x06, 0xa0, 0x83,
	0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xcc,
	0x06, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x12, 0x38, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x32,
	0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x12, 0x45, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12,
	0x41, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x57, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x17, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x6f, 0x6c,
	0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00,
	0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83,
	0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0x99, 0x05,
	0x0a, 0x0e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x03, 0x6c, 0x6f,
	0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x03, 0x6c, 0x6f,
	0x77, 0x12, 0x37, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x47, 0x0a, 0x0c, 0x6e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a,
	0x0a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73,
	0x54, 0x6f, 0x12, 0x2c, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x03, 0x61, 0x67, 0x65,
	0x12, 0x31, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x3a, 0x34, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x2e, 0x6c, 0x6f, 0x77, 0x2e, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x68, 0x69, 0x67, 0x68, 0x2e,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x65, 0x78, 0x74,
	0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x1a, 0x9b, 0x0b, 0x0a, 0x09, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x40, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x58, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x52, 0x0a, 0x12,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x10,
	0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x4c, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58,
	0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0xcc, 0x06, 0x0a, 0x06, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x58, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x38, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48,
	0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x45, 0x0a, 0x0c,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48,
	0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x41, 0x0a, 0x0a, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x57, 0x0a, 0x09,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x17, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0x88, 0x02, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x29, 0x64,
	0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x77, 0x68,
	0x65, 0x72, 0x65, 0x28, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x65, 0x63, 0x74, 0x28, 0x25, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x29, 0x2e, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x28, 0x29, 0x29, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x9a, 0x86, 0x93,
	0xa0, 0x08, 0x2f, 0x62, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x28, 0x29, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x20, 0x62, 0x6f, 0x64,
	0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x28, 0x29, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x42, 0x7b, 0x98, 0xc6, 0xb0, 0xb5, 0x07, 0x05,
	0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x01, 0x5a, 0x58, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72,
	0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x6f, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r5_core_resources_observation_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r5_core_resources_observation_proto_rawDescData = file_proto_google_fhir_proto_r5_core_resources_observation_proto_rawDesc
)

func file_proto_google_fhir_proto_r5_core_resources_observation_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r5_core_resources_observation_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r5_core_resources_observation_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r5_core_resources_observation_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r5_core_resources_observation_proto_rawDescData
}

var file_proto_google_fhir_proto_r5_core_resources_observation_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_proto_google_fhir_proto_r5_core_resources_observation_proto_goTypes = []interface{}{
	(*Observation)(nil),                             // 0: google.fhir.r5.core.Observation
	(*Observation_InstantiatesX)(nil),               // 1: google.fhir.r5.core.Observation.InstantiatesX
	(*Observation_TriggeredBy)(nil),                 // 2: google.fhir.r5.core.Observation.TriggeredBy
	(*Observation_StatusCode)(nil),                  // 3: google.fhir.r5.core.Observation.StatusCode
	(*Observation_EffectiveX)(nil),                  // 4: google.fhir.r5.core.Observation.EffectiveX
	(*Observation_ValueX)(nil),                      // 5: google.fhir.r5.core.Observation.ValueX
	(*Observation_ReferenceRange)(nil),              // 6: google.fhir.r5.core.Observation.ReferenceRange
	(*Observation_Component)(nil),                   // 7: google.fhir.r5.core.Observation.Component
	(*Observation_TriggeredBy_TypeCode)(nil),        // 8: google.fhir.r5.core.Observation.TriggeredBy.TypeCode
	(*Observation_Component_ValueX)(nil),            // 9: google.fhir.r5.core.Observation.Component.ValueX
	(*datatypes_go_proto.Id)(nil),                   // 10: google.fhir.r5.core.Id
	(*datatypes_go_proto.Meta)(nil),                 // 11: google.fhir.r5.core.Meta
	(*datatypes_go_proto.Uri)(nil),                  // 12: google.fhir.r5.core.Uri
	(*datatypes_go_proto.Code)(nil),                 // 13: google.fhir.r5.core.Code
	(*datatypes_go_proto.Narrative)(nil),            // 14: google.fhir.r5.core.Narrative
	(*anypb.Any)(nil),                               // 15: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),            // 16: google.fhir.r5.core.Extension
	(*datatypes_go_proto.Identifier)(nil),           // 17: google.fhir.r5.core.Identifier
	(*datatypes_go_proto.Reference)(nil),            // 18: google.fhir.r5.core.Reference
	(*datatypes_go_proto.CodeableConcept)(nil),      // 19: google.fhir.r5.core.CodeableConcept
	(*datatypes_go_proto.Instant)(nil),              // 20: google.fhir.r5.core.Instant
	(*datatypes_go_proto.Annotation)(nil),           // 21: google.fhir.r5.core.Annotation
	(*datatypes_go_proto.Canonical)(nil),            // 22: google.fhir.r5.core.Canonical
	(*datatypes_go_proto.String)(nil),               // 23: google.fhir.r5.core.String
	(codes_go_proto.ObservationStatusCode_Value)(0), // 24: google.fhir.r5.core.ObservationStatusCode.Value
	(*datatypes_go_proto.DateTime)(nil),             // 25: google.fhir.r5.core.DateTime
	(*datatypes_go_proto.Period)(nil),               // 26: google.fhir.r5.core.Period
	(*datatypes_go_proto.Timing)(nil),               // 27: google.fhir.r5.core.Timing
	(*datatypes_go_proto.Quantity)(nil),             // 28: google.fhir.r5.core.Quantity
	(*datatypes_go_proto.Boolean)(nil),              // 29: google.fhir.r5.core.Boolean
	(*datatypes_go_proto.Integer)(nil),              // 30: google.fhir.r5.core.Integer
	(*datatypes_go_proto.Range)(nil),                // 31: google.fhir.r5.core.Range
	(*datatypes_go_proto.Ratio)(nil),                // 32: google.fhir.r5.core.Ratio
	(*datatypes_go_proto.SampledData)(nil),          // 33: google.fhir.r5.core.SampledData
	(*datatypes_go_proto.Time)(nil),                 // 34: google.fhir.r5.core.Time
	(*datatypes_go_proto.Attachment)(nil),           // 35: google.fhir.r5.core.Attachment
	(*datatypes_go_proto.SimpleQuantity)(nil),       // 36: google.fhir.r5.core.SimpleQuantity
	(*datatypes_go_proto.Markdown)(nil),             // 37: google.fhir.r5.core.Markdown
	(codes_go_proto.TriggeredBytypeCode_Value)(0),   // 38: google.fhir.r5.core.TriggeredBytypeCode.Value
}
var file_proto_google_fhir_proto_r5_core_resources_observation_proto_depIdxs = []int32{
	10, // 0: google.fhir.r5.core.Observation.id:type_name -> google.fhir.r5.core.Id
	11, // 1: google.fhir.r5.core.Observation.meta:type_name -> google.fhir.r5.core.Meta
	12, // 2: google.fhir.r5.core.Observation.implicit_rules:type_name -> google.fhir.r5.core.Uri
	13, // 3: google.fhir.r5.core.Observation.language:type_name -> google.fhir.r5.core.Code
	14, // 4: google.fhir.r5.core.Observation.text:type_name -> google.fhir.r5.core.Narrative
	15, // 5: google.fhir.r5.core.Observation.contained:type_name -> google.protobuf.Any
	16, // 6: google.fhir.r5.core.Observation.extension:type_name -> google.fhir.r5.core.Extension
	16, // 7: google.fhir.r5.core.Observation.modifier_extension:type_name -> google.fhir.r5.core.Extension
	17, // 8: google.fhir.r5.core.Observation.identifier:type_name -> google.fhir.r5.core.Identifier
	1,  // 9: google.fhir.r5.core.Observation.instantiates:type_name -> google.fhir.r5.core.Observation.InstantiatesX
	18, // 10: google.fhir.r5.core.Observation.based_on:type_name -> google.fhir.r5.core.Reference
	2,  // 11: google.fhir.r5.core.Observation.triggered_by:type_name -> google.fhir.r5.core.Observation.TriggeredBy
	18, // 12: google.fhir.r5.core.Observation.part_of:type_name -> google.fhir.r5.core.Reference
	3,  // 13: google.fhir.r5.core.Observation.status:type_name -> google.fhir.r5.core.Observation.StatusCode
	19, // 14: google.fhir.r5.core.Observation.category:type_name -> google.fhir.r5.core.CodeableConcept
	19, // 15: google.fhir.r5.core.Observation.code:type_name -> google.fhir.r5.core.CodeableConcept
	18, // 16: google.fhir.r5.core.Observation.subject:type_name -> google.fhir.r5.core.Reference
	18, // 17: google.fhir.r5.core.Observation.focus:type_name -> google.fhir.r5.core.Reference
	18, // 18: google.fhir.r5.core.Observation.encounter:type_name -> google.fhir.r5.core.Reference
	4,  // 19: google.fhir.r5.core.Observation.effective:type_name -> google.fhir.r5.core.Observation.EffectiveX
	20, // 20: google.fhir.r5.core.Observation.issued:type_name -> google.fhir.r5.core.Instant
	18, // 21: google.fhir.r5.core.Observation.performer:type_name -> google.fhir.r5.core.Reference
	5,  // 22: google.fhir.r5.core.Observation.value:type_name -> google.fhir.r5.core.Observation.ValueX
	19, // 23: google.fhir.r5.core.Observation.data_absent_reason:type_name -> google.fhir.r5.core.CodeableConcept
	19, // 24: google.fhir.r5.core.Observation.interpretation:type_name -> google.fhir.r5.core.CodeableConcept
	21, // 25: google.fhir.r5.core.Observation.note:type_name -> google.fhir.r5.core.Annotation
	19, // 26: google.fhir.r5.core.Observation.body_site:type_name -> google.fhir.r5.core.CodeableConcept
	18, // 27: google.fhir.r5.core.Observation.body_structure:type_name -> google.fhir.r5.core.Reference
	19, // 28: google.fhir.r5.core.Observation.method:type_name -> google.fhir.r5.core.CodeableConcept
	18, // 29: google.fhir.r5.core.Observation.specimen:type_name -> google.fhir.r5.core.Reference
	18, // 30: google.fhir.r5.core.Observation.device:type_name -> google.fhir.r5.core.Reference
	6,  // 31: google.fhir.r5.core.Observation.reference_range:type_name -> google.fhir.r5.core.Observation.ReferenceRange
	18, // 32: google.fhir.r5.core.Observation.has_member:type_name -> google.fhir.r5.core.Reference
	18, // 33: google.fhir.r5.core.Observation.derived_from:type_name -> google.fhir.r5.core.Reference
	7,  // 34: google.fhir.r5.core.Observation.component:type_name -> google.fhir.r5.core.Observation.Component
	22, // 35: google.fhir.r5.core.Observation.InstantiatesX.canonical:type_name -> google.fhir.r5.core.Canonical
	18, // 36: google.fhir.r5.core.Observation.InstantiatesX.reference:type_name -> google.fhir.r5.core.Reference
	23, // 37: google.fhir.r5.core.Observation.TriggeredBy.id:type_name -> google.fhir.r5.core.String
	16, // 38: google.fhir.r5.core.Observation.TriggeredBy.extension:type_name -> google.fhir.r5.core.Extension
	16, // 39: google.fhir.r5.core.Observation.TriggeredBy.modifier_extension:type_name -> google.fhir.r5.core.Extension
	18, // 40: google.fhir.r5.core.Observation.TriggeredBy.observation:type_name -> google.fhir.r5.core.Reference
	8,  // 41: google.fhir.r5.core.Observation.TriggeredBy.type:type_name -> google.fhir.r5.core.Observation.TriggeredBy.TypeCode
	23, // 42: google.fhir.r5.core.Observation.TriggeredBy.reason:type_name -> google.fhir.r5.core.String
	24, // 43: google.fhir.r5.core.Observation.StatusCode.value:type_name -> google.fhir.r5.core.ObservationStatusCode.Value
	23, // 44: google.fhir.r5.core.Observation.StatusCode.id:type_name -> google.fhir.r5.core.String
	16, // 45: google.fhir.r5.core.Observation.StatusCode.extension:type_name -> google.fhir.r5.core.Extension
	25, // 46: google.fhir.r5.core.Observation.EffectiveX.date_time:type_name -> google.fhir.r5.core.DateTime
	26, // 47: google.fhir.r5.core.Observation.EffectiveX.period:type_name -> google.fhir.r5.core.Period
	27, // 48: google.fhir.r5.core.Observation.EffectiveX.timing:type_name -> google.fhir.r5.core.Timing
	20, // 49: google.fhir.r5.core.Observation.EffectiveX.instant:type_name -> google.fhir.r5.core.Instant
	28, // 50: google.fhir.r5.core.Observation.ValueX.quantity:type_name -> google.fhir.r5.core.Quantity
	19, // 51: google.fhir.r5.core.Observation.ValueX.codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	23, // 52: google.fhir.r5.core.Observation.ValueX.string_value:type_name -> google.fhir.r5.core.String
	29, // 53: google.fhir.r5.core.Observation.ValueX.boolean:type_name -> google.fhir.r5.core.Boolean
	30, // 54: google.fhir.r5.core.Observation.ValueX.integer:type_name -> google.fhir.r5.core.Integer
	31, // 55: google.fhir.r5.core.Observation.ValueX.range:type_name -> google.fhir.r5.core.Range
	32, // 56: google.fhir.r5.core.Observation.ValueX.ratio:type_name -> google.fhir.r5.core.Ratio
	33, // 57: google.fhir.r5.core.Observation.ValueX.sampled_data:type_name -> google.fhir.r5.core.SampledData
	34, // 58: google.fhir.r5.core.Observation.ValueX.time:type_name -> google.fhir.r5.core.Time
	25, // 59: google.fhir.r5.core.Observation.ValueX.date_time:type_name -> google.fhir.r5.core.DateTime
	26, // 60: google.fhir.r5.core.Observation.ValueX.period:type_name -> google.fhir.r5.core.Period
	35, // 61: google.fhir.r5.core.Observation.ValueX.attachment:type_name -> google.fhir.r5.core.Attachment
	18, // 62: google.fhir.r5.core.Observation.ValueX.reference:type_name -> google.fhir.r5.core.Reference
	23, // 63: google.fhir.r5.core.Observation.ReferenceRange.id:type_name -> google.fhir.r5.core.String
	16, // 64: google.fhir.r5.core.Observation.ReferenceRange.extension:type_name -> google.fhir.r5.core.Extension
	16, // 65: google.fhir.r5.core.Observation.ReferenceRange.modifier_extension:type_name -> google.fhir.r5.core.Extension
	36, // 66: google.fhir.r5.core.Observation.ReferenceRange.low:type_name -> google.fhir.r5.core.SimpleQuantity
	36, // 67: google.fhir.r5.core.Observation.ReferenceRange.high:type_name -> google.fhir.r5.core.SimpleQuantity
	19, // 68: google.fhir.r5.core.Observation.ReferenceRange.normal_value:type_name -> google.fhir.r5.core.CodeableConcept
	19, // 69: google.fhir.r5.core.Observation.ReferenceRange.type:type_name -> google.fhir.r5.core.CodeableConcept
	19, // 70: google.fhir.r5.core.Observation.ReferenceRange.applies_to:type_name -> google.fhir.r5.core.CodeableConcept
	31, // 71: google.fhir.r5.core.Observation.ReferenceRange.age:type_name -> google.fhir.r5.core.Range
	37, // 72: google.fhir.r5.core.Observation.ReferenceRange.text:type_name -> google.fhir.r5.core.Markdown
	23, // 73: google.fhir.r5.core.Observation.Component.id:type_name -> google.fhir.r5.core.String
	16, // 74: google.fhir.r5.core.Observation.Component.extension:type_name -> google.fhir.r5.core.Extension
	16, // 75: google.fhir.r5.core.Observation.Component.modifier_extension:type_name -> google.fhir.r5.core.Extension
	19, // 76: google.fhir.r5.core.Observation.Component.code:type_name -> google.fhir.r5.core.CodeableConcept
	9,  // 77: google.fhir.r5.core.Observation.Component.value:type_name -> google.fhir.r5.core.Observation.Component.ValueX
	19, // 78: google.fhir.r5.core.Observation.Component.data_absent_reason:type_name -> google.fhir.r5.core.CodeableConcept
	19, // 79: google.fhir.r5.core.Observation.Component.interpretation:type_name -> google.fhir.r5.core.CodeableConcept
	6,  // 80: google.fhir.r5.core.Observation.Component.reference_range:type_name -> google.fhir.r5.core.Observation.ReferenceRange
	38, // 81: google.fhir.r5.core.Observation.TriggeredBy.TypeCode.value:type_name -> google.fhir.r5.core.TriggeredBytypeCode.Value
	23, // 82: google.fhir.r5.core.Observation.TriggeredBy.TypeCode.id:type_name -> google.fhir.r5.core.String
	16, // 83: google.fhir.r5.core.Observation.TriggeredBy.TypeCode.extension:type_name -> google.fhir.r5.core.Extension
	28, // 84: google.fhir.r5.core.Observation.Component.ValueX.quantity:type_name -> google.fhir.r5.core.Quantity
	19, // 85: google.fhir.r5.core.Observation.Component.ValueX.codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	23, // 86: google.fhir.r5.core.Observation.Component.ValueX.string_value:type_name -> google.fhir.r5.core.String
	29, // 87: google.fhir.r5.core.Observation.Component.ValueX.boolean:type_name -> google.fhir.r5.core.Boolean
	30, // 88: google.fhir.r5.core.Observation.Component.ValueX.integer:type_name -> google.fhir.r5.core.Integer
	31, // 89: google.fhir.r5.core.Observation.Component.ValueX.range:type_name -> google.fhir.r5.core.Range
	32, // 90: google.fhir.r5.core.Observation.Component.ValueX.ratio:type_name -> google.fhir.r5.core.Ratio
	33, // 91: google.fhir.r5.core.Observation.Component.ValueX.sampled_data:type_name -> google.fhir.r5.core.SampledData
	34, // 92: google.fhir.r5.core.Observation.Component.ValueX.time:type_name -> google.fhir.r5.core.Time
	25, // 93: google.fhir.r5.core.Observation.Component.ValueX.date_time:type_name -> google.fhir.r5.core.DateTime
	26, // 94: google.fhir.r5.core.Observation.Component.ValueX.period:type_name -> google.fhir.r5.core.Period
	35, // 95: google.fhir.r5.core.Observation.Component.ValueX.attachment:type_name -> google.fhir.r5.core.Attachment
	18, // 96: google.fhir.r5.core.Observation.Component.ValueX.reference:type_name -> google.fhir.r5.core.Reference
	97, // [97:97] is the sub-list for method output_type
	97, // [97:97] is the sub-list for method input_type
	97, // [97:97] is the sub-list for extension type_name
	97, // [97:97] is the sub-list for extension extendee
	0,  // [0:97] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r5_core_resources_observation_proto_init() }
func file_proto_google_fhir_proto_r5_core_resources_observation_proto_init() {
	if File_proto_google_fhir_proto_r5_core_resources_observation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r5_core_resources_observation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Observation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_observation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Observation_InstantiatesX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_observation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Observation_TriggeredBy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_observation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Observation_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_observation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Observation_EffectiveX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_observation_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Observation_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_observation_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Observation_ReferenceRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_observation_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Observation_Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_observation_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Observation_TriggeredBy_TypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_observation_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Observation_Component_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_r5_core_resources_observation_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Observation_InstantiatesX_Canonical)(nil),
		(*Observation_InstantiatesX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_observation_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Observation_EffectiveX_DateTime)(nil),
		(*Observation_EffectiveX_Period)(nil),
		(*Observation_EffectiveX_Timing)(nil),
		(*Observation_EffectiveX_Instant)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_observation_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Observation_ValueX_Quantity)(nil),
		(*Observation_ValueX_CodeableConcept)(nil),
		(*Observation_ValueX_StringValue)(nil),
		(*Observation_ValueX_Boolean)(nil),
		(*Observation_ValueX_Integer)(nil),
		(*Observation_ValueX_Range)(nil),
		(*Observation_ValueX_Ratio)(nil),
		(*Observation_ValueX_SampledData)(nil),
		(*Observation_ValueX_Time)(nil),
		(*Observation_ValueX_DateTime)(nil),
		(*Observation_ValueX_Period)(nil),
		(*Observation_ValueX_Attachment)(nil),
		(*Observation_ValueX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_observation_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*Observation_Component_ValueX_Quantity)(nil),
		(*Observation_Component_ValueX_CodeableConcept)(nil),
		(*Observation_Component_ValueX_StringValue)(nil),
		(*Observation_Component_ValueX_Boolean)(nil),
		(*Observation_Component_ValueX_Integer)(nil),
		(*Observation_Component_ValueX_Range)(nil),
		(*Observation_Component_ValueX_Ratio)(nil),
		(*Observation_Component_ValueX_SampledData)(nil),
		(*Observation_Component_ValueX_Time)(nil),
		(*Observation_Component_ValueX_DateTime)(nil),
		(*Observation_Component_ValueX_Period)(nil),
		(*Observation_Component_ValueX_Attachment)(nil),
		(*Observation_Component_ValueX_Reference)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r5_core_resources_observation_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r5_core_resources_observation_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r5_core_resources_observation_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r5_core_resources_observation_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r5_core_resources_observation_proto = out.File
	file_proto_google_fhir_proto_r5_core_resources_observation_proto_rawDesc = nil
	file_proto_google_fhir_proto_r5_core_resources_observation_proto_goTypes = nil
	file_proto_google_fhir_proto_r5_core_resources_observation_proto_depIdxs = nil
}
