//    Copyright 2023 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.21.12
// source: proto/google/fhir/proto/r5/core/resources/device.proto

package device_go_proto

import (
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	codes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/codes_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for Device.
// Item used in healthcare.
// See http://hl7.org/fhir/StructureDefinition/Device
type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*anypb.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Instance identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// The name used to display by default when the device is referenced
	DisplayName *datatypes_go_proto.String `protobuf:"bytes,36,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The reference to the definition for the device
	Definition *datatypes_go_proto.CodeableReference `protobuf:"bytes,37,opt,name=definition,proto3" json:"definition,omitempty"`
	UdiCarrier []*Device_UdiCarrier                  `protobuf:"bytes,12,rep,name=udi_carrier,json=udiCarrier,proto3" json:"udi_carrier,omitempty"`
	Status     *Device_StatusCode                    `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
	// lost | damaged | destroyed | available
	AvailabilityStatus *datatypes_go_proto.CodeableConcept `protobuf:"bytes,38,opt,name=availability_status,json=availabilityStatus,proto3" json:"availability_status,omitempty"`
	// An identifier that supports traceability to the event during which material
	// in this product from one or more biological entities was obtained or pooled
	BiologicalSourceEvent *datatypes_go_proto.Identifier `protobuf:"bytes,39,opt,name=biological_source_event,json=biologicalSourceEvent,proto3" json:"biological_source_event,omitempty"`
	// Name of device manufacturer
	Manufacturer *datatypes_go_proto.String `protobuf:"bytes,16,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	// Date when the device was made
	ManufactureDate *datatypes_go_proto.DateTime `protobuf:"bytes,17,opt,name=manufacture_date,json=manufactureDate,proto3" json:"manufacture_date,omitempty"`
	// Date and time of expiry of this device (if applicable)
	ExpirationDate *datatypes_go_proto.DateTime `protobuf:"bytes,18,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	// Lot number of manufacture
	LotNumber *datatypes_go_proto.String `protobuf:"bytes,19,opt,name=lot_number,json=lotNumber,proto3" json:"lot_number,omitempty"`
	// Serial number assigned by the manufacturer
	SerialNumber *datatypes_go_proto.String `protobuf:"bytes,20,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	Name         []*Device_Name             `protobuf:"bytes,40,rep,name=name,proto3" json:"name,omitempty"`
	// The manufacturer's model number for the device
	ModelNumber *datatypes_go_proto.String `protobuf:"bytes,22,opt,name=model_number,json=modelNumber,proto3" json:"model_number,omitempty"`
	// The part number or catalog number of the device
	PartNumber *datatypes_go_proto.String `protobuf:"bytes,23,opt,name=part_number,json=partNumber,proto3" json:"part_number,omitempty"`
	// Indicates a high-level grouping of the device
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,41,rep,name=category,proto3" json:"category,omitempty"`
	// The kind or type of device
	Type       []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,42,rep,name=type,proto3" json:"type,omitempty"`
	Version    []*Device_Version                     `protobuf:"bytes,26,rep,name=version,proto3" json:"version,omitempty"`
	ConformsTo []*Device_ConformsTo                  `protobuf:"bytes,43,rep,name=conforms_to,json=conformsTo,proto3" json:"conforms_to,omitempty"`
	Property   []*Device_Property                    `protobuf:"bytes,27,rep,name=property,proto3" json:"property,omitempty"`
	// The designated condition for performing a task
	Mode *datatypes_go_proto.CodeableConcept `protobuf:"bytes,44,opt,name=mode,proto3" json:"mode,omitempty"`
	// The series of occurrences that repeats during the operation of the device
	Cycle *datatypes_go_proto.Count `protobuf:"bytes,45,opt,name=cycle,proto3" json:"cycle,omitempty"`
	// A measurement of time during the device's operation (e.g., days, hours,
	// mins, etc.)
	Duration *datatypes_go_proto.Duration `protobuf:"bytes,46,opt,name=duration,proto3" json:"duration,omitempty"`
	// Organization responsible for device
	Owner *datatypes_go_proto.Reference `protobuf:"bytes,29,opt,name=owner,proto3" json:"owner,omitempty"`
	// Details for human/organization for support
	Contact []*datatypes_go_proto.ContactPoint `protobuf:"bytes,30,rep,name=contact,proto3" json:"contact,omitempty"`
	// Where the device is found
	Location *datatypes_go_proto.Reference `protobuf:"bytes,31,opt,name=location,proto3" json:"location,omitempty"`
	// Network address to contact device
	Url *datatypes_go_proto.Uri `protobuf:"bytes,32,opt,name=url,proto3" json:"url,omitempty"`
	// Technical endpoints providing access to electronic services provided by the
	// device
	Endpoint []*datatypes_go_proto.Reference `protobuf:"bytes,47,rep,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Linked device acting as a communication/data collector, translator or
	// controller
	Gateway []*datatypes_go_proto.CodeableReference `protobuf:"bytes,48,rep,name=gateway,proto3" json:"gateway,omitempty"`
	// Device notes and comments
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,33,rep,name=note,proto3" json:"note,omitempty"`
	// Safety Characteristics of Device
	Safety []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,34,rep,name=safety,proto3" json:"safety,omitempty"`
	// The higher level or encompassing device that this device is a logical part
	// of
	Parent *datatypes_go_proto.Reference `protobuf:"bytes,35,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_device_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_device_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_device_proto_rawDescGZIP(), []int{0}
}

func (x *Device) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Device) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Device) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Device) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Device) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Device) GetContained() []*anypb.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Device) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Device) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Device) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Device) GetDisplayName() *datatypes_go_proto.String {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

func (x *Device) GetDefinition() *datatypes_go_proto.CodeableReference {
	if x != nil {
		return x.Definition
	}
	return nil
}

func (x *Device) GetUdiCarrier() []*Device_UdiCarrier {
	if x != nil {
		return x.UdiCarrier
	}
	return nil
}

func (x *Device) GetStatus() *Device_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Device) GetAvailabilityStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AvailabilityStatus
	}
	return nil
}

func (x *Device) GetBiologicalSourceEvent() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.BiologicalSourceEvent
	}
	return nil
}

func (x *Device) GetManufacturer() *datatypes_go_proto.String {
	if x != nil {
		return x.Manufacturer
	}
	return nil
}

func (x *Device) GetManufactureDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.ManufactureDate
	}
	return nil
}

func (x *Device) GetExpirationDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *Device) GetLotNumber() *datatypes_go_proto.String {
	if x != nil {
		return x.LotNumber
	}
	return nil
}

func (x *Device) GetSerialNumber() *datatypes_go_proto.String {
	if x != nil {
		return x.SerialNumber
	}
	return nil
}

func (x *Device) GetName() []*Device_Name {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Device) GetModelNumber() *datatypes_go_proto.String {
	if x != nil {
		return x.ModelNumber
	}
	return nil
}

func (x *Device) GetPartNumber() *datatypes_go_proto.String {
	if x != nil {
		return x.PartNumber
	}
	return nil
}

func (x *Device) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Device) GetType() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Device) GetVersion() []*Device_Version {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *Device) GetConformsTo() []*Device_ConformsTo {
	if x != nil {
		return x.ConformsTo
	}
	return nil
}

func (x *Device) GetProperty() []*Device_Property {
	if x != nil {
		return x.Property
	}
	return nil
}

func (x *Device) GetMode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *Device) GetCycle() *datatypes_go_proto.Count {
	if x != nil {
		return x.Cycle
	}
	return nil
}

func (x *Device) GetDuration() *datatypes_go_proto.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *Device) GetOwner() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Device) GetContact() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *Device) GetLocation() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Device) GetUrl() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *Device) GetEndpoint() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *Device) GetGateway() []*datatypes_go_proto.CodeableReference {
	if x != nil {
		return x.Gateway
	}
	return nil
}

func (x *Device) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *Device) GetSafety() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Safety
	}
	return nil
}

func (x *Device) GetParent() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Parent
	}
	return nil
}

// Unique Device Identifier (UDI) Barcode string
type Device_UdiCarrier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Mandatory fixed portion of UDI
	DeviceIdentifier *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=device_identifier,json=deviceIdentifier,proto3" json:"device_identifier,omitempty"`
	// UDI Issuing Organization
	Issuer *datatypes_go_proto.Uri `protobuf:"bytes,5,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// Regional UDI authority
	Jurisdiction *datatypes_go_proto.Uri `protobuf:"bytes,6,opt,name=jurisdiction,proto3" json:"jurisdiction,omitempty"`
	// UDI Machine Readable Barcode String
	CarrierAidc *datatypes_go_proto.Base64Binary `protobuf:"bytes,7,opt,name=carrier_aidc,json=carrierAIDC,proto3" json:"carrier_aidc,omitempty"`
	// UDI Human Readable Barcode String
	CarrierHrf *datatypes_go_proto.String       `protobuf:"bytes,8,opt,name=carrier_hrf,json=carrierHRF,proto3" json:"carrier_hrf,omitempty"`
	EntryType  *Device_UdiCarrier_EntryTypeCode `protobuf:"bytes,9,opt,name=entry_type,json=entryType,proto3" json:"entry_type,omitempty"`
}

func (x *Device_UdiCarrier) Reset() {
	*x = Device_UdiCarrier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_device_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device_UdiCarrier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device_UdiCarrier) ProtoMessage() {}

func (x *Device_UdiCarrier) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_device_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device_UdiCarrier.ProtoReflect.Descriptor instead.
func (*Device_UdiCarrier) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_device_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Device_UdiCarrier) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Device_UdiCarrier) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Device_UdiCarrier) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Device_UdiCarrier) GetDeviceIdentifier() *datatypes_go_proto.String {
	if x != nil {
		return x.DeviceIdentifier
	}
	return nil
}

func (x *Device_UdiCarrier) GetIssuer() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Issuer
	}
	return nil
}

func (x *Device_UdiCarrier) GetJurisdiction() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Jurisdiction
	}
	return nil
}

func (x *Device_UdiCarrier) GetCarrierAidc() *datatypes_go_proto.Base64Binary {
	if x != nil {
		return x.CarrierAidc
	}
	return nil
}

func (x *Device_UdiCarrier) GetCarrierHrf() *datatypes_go_proto.String {
	if x != nil {
		return x.CarrierHrf
	}
	return nil
}

func (x *Device_UdiCarrier) GetEntryType() *Device_UdiCarrier_EntryTypeCode {
	if x != nil {
		return x.EntryType
	}
	return nil
}

// active | inactive | entered-in-error
type Device_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.FHIRDeviceStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.FHIRDeviceStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension           `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Device_StatusCode) Reset() {
	*x = Device_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_device_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device_StatusCode) ProtoMessage() {}

func (x *Device_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_device_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device_StatusCode.ProtoReflect.Descriptor instead.
func (*Device_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_device_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Device_StatusCode) GetValue() codes_go_proto.FHIRDeviceStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.FHIRDeviceStatusCode_Value(0)
}

func (x *Device_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Device_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The name or names of the device as known to the manufacturer and/or patient
type Device_Name struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The term that names the device
	Value *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Type  *Device_Name_TypeCode      `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// The preferred device name
	Display *datatypes_go_proto.Boolean `protobuf:"bytes,6,opt,name=display,proto3" json:"display,omitempty"`
}

func (x *Device_Name) Reset() {
	*x = Device_Name{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_device_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device_Name) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device_Name) ProtoMessage() {}

func (x *Device_Name) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_device_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device_Name.ProtoReflect.Descriptor instead.
func (*Device_Name) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_device_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Device_Name) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Device_Name) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Device_Name) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Device_Name) GetValue() *datatypes_go_proto.String {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Device_Name) GetType() *Device_Name_TypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Device_Name) GetDisplay() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Display
	}
	return nil
}

// The actual design of the device or software version running on the device
type Device_Version struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The type of the device version, e.g. manufacturer, approved, internal
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// The hardware or software module of the device to which the version
	// applies
	Component *datatypes_go_proto.Identifier `protobuf:"bytes,5,opt,name=component,proto3" json:"component,omitempty"`
	// The date the version was installed on the device
	InstallDate *datatypes_go_proto.DateTime `protobuf:"bytes,7,opt,name=install_date,json=installDate,proto3" json:"install_date,omitempty"`
	// The version text
	Value *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Device_Version) Reset() {
	*x = Device_Version{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_device_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device_Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device_Version) ProtoMessage() {}

func (x *Device_Version) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_device_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device_Version.ProtoReflect.Descriptor instead.
func (*Device_Version) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_device_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Device_Version) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Device_Version) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Device_Version) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Device_Version) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Device_Version) GetComponent() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Component
	}
	return nil
}

func (x *Device_Version) GetInstallDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.InstallDate
	}
	return nil
}

func (x *Device_Version) GetValue() *datatypes_go_proto.String {
	if x != nil {
		return x.Value
	}
	return nil
}

// Identifies the standards, specifications, or formal guidances for the
// capabilities supported by the device
type Device_ConformsTo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Describes the common type of the standard, specification, or formal
	// guidance.  communication | performance | measurement
	Category *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
	// Identifies the standard, specification, or formal guidance that the
	// device adheres to
	Specification *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=specification,proto3" json:"specification,omitempty"`
	// Specific form or variant of the standard
	Version *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Device_ConformsTo) Reset() {
	*x = Device_ConformsTo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_device_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device_ConformsTo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device_ConformsTo) ProtoMessage() {}

func (x *Device_ConformsTo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_device_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device_ConformsTo.ProtoReflect.Descriptor instead.
func (*Device_ConformsTo) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_device_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Device_ConformsTo) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Device_ConformsTo) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Device_ConformsTo) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Device_ConformsTo) GetCategory() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Device_ConformsTo) GetSpecification() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Specification
	}
	return nil
}

func (x *Device_ConformsTo) GetVersion() *datatypes_go_proto.String {
	if x != nil {
		return x.Version
	}
	return nil
}

// Inherent, essentially fixed, characteristics of the device.  e.g., time
// properties, size, material, etc.
type Device_Property struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Code that specifies the property being represented
	Type  *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Value *Device_Property_ValueX             `protobuf:"bytes,7,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Device_Property) Reset() {
	*x = Device_Property{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_device_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device_Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device_Property) ProtoMessage() {}

func (x *Device_Property) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_device_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device_Property.ProtoReflect.Descriptor instead.
func (*Device_Property) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_device_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Device_Property) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Device_Property) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Device_Property) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Device_Property) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Device_Property) GetValue() *Device_Property_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

// barcode | rfid | manual | card | self-reported | electronic-transmission
// | unknown
type Device_UdiCarrier_EntryTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.UDIEntryTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.UDIEntryTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension       `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Device_UdiCarrier_EntryTypeCode) Reset() {
	*x = Device_UdiCarrier_EntryTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_device_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device_UdiCarrier_EntryTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device_UdiCarrier_EntryTypeCode) ProtoMessage() {}

func (x *Device_UdiCarrier_EntryTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_device_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device_UdiCarrier_EntryTypeCode.ProtoReflect.Descriptor instead.
func (*Device_UdiCarrier_EntryTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_device_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Device_UdiCarrier_EntryTypeCode) GetValue() codes_go_proto.UDIEntryTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.UDIEntryTypeCode_Value(0)
}

func (x *Device_UdiCarrier_EntryTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Device_UdiCarrier_EntryTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// registered-name | user-friendly-name | patient-reported-name
type Device_Name_TypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.DeviceNameTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.DeviceNameTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String              `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension         `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Device_Name_TypeCode) Reset() {
	*x = Device_Name_TypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_device_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device_Name_TypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device_Name_TypeCode) ProtoMessage() {}

func (x *Device_Name_TypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_device_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device_Name_TypeCode.ProtoReflect.Descriptor instead.
func (*Device_Name_TypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_device_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *Device_Name_TypeCode) GetValue() codes_go_proto.DeviceNameTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.DeviceNameTypeCode_Value(0)
}

func (x *Device_Name_TypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Device_Name_TypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Value of the property
type Device_Property_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*Device_Property_ValueX_Quantity
	//	*Device_Property_ValueX_CodeableConcept
	//	*Device_Property_ValueX_StringValue
	//	*Device_Property_ValueX_Boolean
	//	*Device_Property_ValueX_Integer
	//	*Device_Property_ValueX_Range
	//	*Device_Property_ValueX_Attachment
	Choice isDevice_Property_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *Device_Property_ValueX) Reset() {
	*x = Device_Property_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_device_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device_Property_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device_Property_ValueX) ProtoMessage() {}

func (x *Device_Property_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_device_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device_Property_ValueX.ProtoReflect.Descriptor instead.
func (*Device_Property_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_device_proto_rawDescGZIP(), []int{0, 5, 0}
}

func (m *Device_Property_ValueX) GetChoice() isDevice_Property_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Device_Property_ValueX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*Device_Property_ValueX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *Device_Property_ValueX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*Device_Property_ValueX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *Device_Property_ValueX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*Device_Property_ValueX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *Device_Property_ValueX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*Device_Property_ValueX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *Device_Property_ValueX) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetChoice().(*Device_Property_ValueX_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *Device_Property_ValueX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*Device_Property_ValueX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *Device_Property_ValueX) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetChoice().(*Device_Property_ValueX_Attachment); ok {
		return x.Attachment
	}
	return nil
}

type isDevice_Property_ValueX_Choice interface {
	isDevice_Property_ValueX_Choice()
}

type Device_Property_ValueX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type Device_Property_ValueX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type Device_Property_ValueX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=string_value,json=string,proto3,oneof"`
}

type Device_Property_ValueX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,4,opt,name=boolean,proto3,oneof"`
}

type Device_Property_ValueX_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,5,opt,name=integer,proto3,oneof"`
}

type Device_Property_ValueX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,6,opt,name=range,proto3,oneof"`
}

type Device_Property_ValueX_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,7,opt,name=attachment,proto3,oneof"`
}

func (*Device_Property_ValueX_Quantity) isDevice_Property_ValueX_Choice() {}

func (*Device_Property_ValueX_CodeableConcept) isDevice_Property_ValueX_Choice() {}

func (*Device_Property_ValueX_StringValue) isDevice_Property_ValueX_Choice() {}

func (*Device_Property_ValueX_Boolean) isDevice_Property_ValueX_Choice() {}

func (*Device_Property_ValueX_Integer) isDevice_Property_ValueX_Choice() {}

func (*Device_Property_ValueX_Range) isDevice_Property_ValueX_Choice() {}

func (*Device_Property_ValueX_Attachment) isDevice_Property_ValueX_Choice() {}

var File_proto_google_fhir_proto_r5_core_resources_device_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r5_core_resources_device_proto_rawDesc = []byte{
	0x0a, 0x36, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x19, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61,
	0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xd7, 0x30, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0b, 0x75, 0x64,
	0x69, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x64, 0x69,
	0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x75, 0x64, 0x69, 0x43, 0x61, 0x72, 0x72,
	0x69, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x55, 0x0a, 0x13, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x57, 0x0a, 0x17, 0x62, 0x69,
	0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x15, 0x62, 0x69,
	0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x10, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0f, 0x6d,
	0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x46,
	0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x6c, 0x6f, 0x74, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x6c, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0b, 0x70, 0x61,
	0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x70, 0x61,
	0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x29, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x5f,
	0x74, 0x6f, 0x18, 0x2b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x54, 0x6f,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x54, 0x6f, 0x12, 0x40, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x38,
	0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x05, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x3b, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x4a, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x4a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x2f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x40, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x30, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x61, 0x66, 0x65, 0x74,
	0x79, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x73,
	0x61, 0x66, 0x65, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0c, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x1a, 0x94, 0x07, 0x0a, 0x0a,
	0x55, 0x64, 0x69, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x12, 0x3c, 0x0a, 0x0c, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69,
	0x52, 0x0c, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44,
	0x0a, 0x0c, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x61, 0x69, 0x64, 0x63, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x36,
	0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72,
	0x41, 0x49, 0x44, 0x43, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f,
	0x68, 0x72, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x48,
	0x52, 0x46, 0x12, 0x53, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x55, 0x64, 0x69, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x2e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xa8, 0x02, 0x0a, 0x0d, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55,
	0x44, 0x49, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x69, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2b, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x75, 0x64, 0x69, 0x2d,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x2d, 0x74, 0x79, 0x70, 0x65, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01,
	0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x64, 0x65, 0x1a, 0xa8, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x48, 0x49, 0x52, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x3a, 0x68, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2a, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xa3, 0x05,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x1a, 0xa6, 0x02, 0x0a, 0x08, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6a, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2c, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63,
	0x6f, 0x64, 0x65, 0x1a, 0xb9, 0x03, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x93, 0x03, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x54, 0x6f, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x52, 0x0a, 0x0d, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xa6, 0x06, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x49,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xd2, 0x03, 0x0a, 0x06, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x58, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x06, 0xa0, 0x83,
	0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0x65,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2e, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x25,
	0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x77, 0x68, 0x65, 0x72, 0x65, 0x28, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x3d, 0x74, 0x72, 0x75, 0x65, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29,
	0x20, 0x3c, 0x3d, 0x20, 0x31, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x42, 0x76, 0x98, 0xc6, 0xb0,
	0xb5, 0x07, 0x05, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x01, 0x5a, 0x53,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r5_core_resources_device_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r5_core_resources_device_proto_rawDescData = file_proto_google_fhir_proto_r5_core_resources_device_proto_rawDesc
)

func file_proto_google_fhir_proto_r5_core_resources_device_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r5_core_resources_device_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r5_core_resources_device_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r5_core_resources_device_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r5_core_resources_device_proto_rawDescData
}

var file_proto_google_fhir_proto_r5_core_resources_device_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_proto_google_fhir_proto_r5_core_resources_device_proto_goTypes = []interface{}{
	(*Device)(nil),                                 // 0: google.fhir.r5.core.Device
	(*Device_UdiCarrier)(nil),                      // 1: google.fhir.r5.core.Device.UdiCarrier
	(*Device_StatusCode)(nil),                      // 2: google.fhir.r5.core.Device.StatusCode
	(*Device_Name)(nil),                            // 3: google.fhir.r5.core.Device.Name
	(*Device_Version)(nil),                         // 4: google.fhir.r5.core.Device.Version
	(*Device_ConformsTo)(nil),                      // 5: google.fhir.r5.core.Device.ConformsTo
	(*Device_Property)(nil),                        // 6: google.fhir.r5.core.Device.Property
	(*Device_UdiCarrier_EntryTypeCode)(nil),        // 7: google.fhir.r5.core.Device.UdiCarrier.EntryTypeCode
	(*Device_Name_TypeCode)(nil),                   // 8: google.fhir.r5.core.Device.Name.TypeCode
	(*Device_Property_ValueX)(nil),                 // 9: google.fhir.r5.core.Device.Property.ValueX
	(*datatypes_go_proto.Id)(nil),                  // 10: google.fhir.r5.core.Id
	(*datatypes_go_proto.Meta)(nil),                // 11: google.fhir.r5.core.Meta
	(*datatypes_go_proto.Uri)(nil),                 // 12: google.fhir.r5.core.Uri
	(*datatypes_go_proto.Code)(nil),                // 13: google.fhir.r5.core.Code
	(*datatypes_go_proto.Narrative)(nil),           // 14: google.fhir.r5.core.Narrative
	(*anypb.Any)(nil),                              // 15: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),           // 16: google.fhir.r5.core.Extension
	(*datatypes_go_proto.Identifier)(nil),          // 17: google.fhir.r5.core.Identifier
	(*datatypes_go_proto.String)(nil),              // 18: google.fhir.r5.core.String
	(*datatypes_go_proto.CodeableReference)(nil),   // 19: google.fhir.r5.core.CodeableReference
	(*datatypes_go_proto.CodeableConcept)(nil),     // 20: google.fhir.r5.core.CodeableConcept
	(*datatypes_go_proto.DateTime)(nil),            // 21: google.fhir.r5.core.DateTime
	(*datatypes_go_proto.Count)(nil),               // 22: google.fhir.r5.core.Count
	(*datatypes_go_proto.Duration)(nil),            // 23: google.fhir.r5.core.Duration
	(*datatypes_go_proto.Reference)(nil),           // 24: google.fhir.r5.core.Reference
	(*datatypes_go_proto.ContactPoint)(nil),        // 25: google.fhir.r5.core.ContactPoint
	(*datatypes_go_proto.Annotation)(nil),          // 26: google.fhir.r5.core.Annotation
	(*datatypes_go_proto.Base64Binary)(nil),        // 27: google.fhir.r5.core.Base64Binary
	(codes_go_proto.FHIRDeviceStatusCode_Value)(0), // 28: google.fhir.r5.core.FHIRDeviceStatusCode.Value
	(*datatypes_go_proto.Boolean)(nil),             // 29: google.fhir.r5.core.Boolean
	(codes_go_proto.UDIEntryTypeCode_Value)(0),     // 30: google.fhir.r5.core.UDIEntryTypeCode.Value
	(codes_go_proto.DeviceNameTypeCode_Value)(0),   // 31: google.fhir.r5.core.DeviceNameTypeCode.Value
	(*datatypes_go_proto.Quantity)(nil),            // 32: google.fhir.r5.core.Quantity
	(*datatypes_go_proto.Integer)(nil),             // 33: google.fhir.r5.core.Integer
	(*datatypes_go_proto.Range)(nil),               // 34: google.fhir.r5.core.Range
	(*datatypes_go_proto.Attachment)(nil),          // 35: google.fhir.r5.core.Attachment
}
var file_proto_google_fhir_proto_r5_core_resources_device_proto_depIdxs = []int32{
	10, // 0: google.fhir.r5.core.Device.id:type_name -> google.fhir.r5.core.Id
	11, // 1: google.fhir.r5.core.Device.meta:type_name -> google.fhir.r5.core.Meta
	12, // 2: google.fhir.r5.core.Device.implicit_rules:type_name -> google.fhir.r5.core.Uri
	13, // 3: google.fhir.r5.core.Device.language:type_name -> google.fhir.r5.core.Code
	14, // 4: google.fhir.r5.core.Device.text:type_name -> google.fhir.r5.core.Narrative
	15, // 5: google.fhir.r5.core.Device.contained:type_name -> google.protobuf.Any
	16, // 6: google.fhir.r5.core.Device.extension:type_name -> google.fhir.r5.core.Extension
	16, // 7: google.fhir.r5.core.Device.modifier_extension:type_name -> google.fhir.r5.core.Extension
	17, // 8: google.fhir.r5.core.Device.identifier:type_name -> google.fhir.r5.core.Identifier
	18, // 9: google.fhir.r5.core.Device.display_name:type_name -> google.fhir.r5.core.String
	19, // 10: google.fhir.r5.core.Device.definition:type_name -> google.fhir.r5.core.CodeableReference
	1,  // 11: google.fhir.r5.core.Device.udi_carrier:type_name -> google.fhir.r5.core.Device.UdiCarrier
	2,  // 12: google.fhir.r5.core.Device.status:type_name -> google.fhir.r5.core.Device.StatusCode
	20, // 13: google.fhir.r5.core.Device.availability_status:type_name -> google.fhir.r5.core.CodeableConcept
	17, // 14: google.fhir.r5.core.Device.biological_source_event:type_name -> google.fhir.r5.core.Identifier
	18, // 15: google.fhir.r5.core.Device.manufacturer:type_name -> google.fhir.r5.core.String
	21, // 16: google.fhir.r5.core.Device.manufacture_date:type_name -> google.fhir.r5.core.DateTime
	21, // 17: google.fhir.r5.core.Device.expiration_date:type_name -> google.fhir.r5.core.DateTime
	18, // 18: google.fhir.r5.core.Device.lot_number:type_name -> google.fhir.r5.core.String
	18, // 19: google.fhir.r5.core.Device.serial_number:type_name -> google.fhir.r5.core.String
	3,  // 20: google.fhir.r5.core.Device.name:type_name -> google.fhir.r5.core.Device.Name
	18, // 21: google.fhir.r5.core.Device.model_number:type_name -> google.fhir.r5.core.String
	18, // 22: google.fhir.r5.core.Device.part_number:type_name -> google.fhir.r5.core.String
	20, // 23: google.fhir.r5.core.Device.category:type_name -> google.fhir.r5.core.CodeableConcept
	20, // 24: google.fhir.r5.core.Device.type:type_name -> google.fhir.r5.core.CodeableConcept
	4,  // 25: google.fhir.r5.core.Device.version:type_name -> google.fhir.r5.core.Device.Version
	5,  // 26: google.fhir.r5.core.Device.conforms_to:type_name -> google.fhir.r5.core.Device.ConformsTo
	6,  // 27: google.fhir.r5.core.Device.property:type_name -> google.fhir.r5.core.Device.Property
	20, // 28: google.fhir.r5.core.Device.mode:type_name -> google.fhir.r5.core.CodeableConcept
	22, // 29: google.fhir.r5.core.Device.cycle:type_name -> google.fhir.r5.core.Count
	23, // 30: google.fhir.r5.core.Device.duration:type_name -> google.fhir.r5.core.Duration
	24, // 31: google.fhir.r5.core.Device.owner:type_name -> google.fhir.r5.core.Reference
	25, // 32: google.fhir.r5.core.Device.contact:type_name -> google.fhir.r5.core.ContactPoint
	24, // 33: google.fhir.r5.core.Device.location:type_name -> google.fhir.r5.core.Reference
	12, // 34: google.fhir.r5.core.Device.url:type_name -> google.fhir.r5.core.Uri
	24, // 35: google.fhir.r5.core.Device.endpoint:type_name -> google.fhir.r5.core.Reference
	19, // 36: google.fhir.r5.core.Device.gateway:type_name -> google.fhir.r5.core.CodeableReference
	26, // 37: google.fhir.r5.core.Device.note:type_name -> google.fhir.r5.core.Annotation
	20, // 38: google.fhir.r5.core.Device.safety:type_name -> google.fhir.r5.core.CodeableConcept
	24, // 39: google.fhir.r5.core.Device.parent:type_name -> google.fhir.r5.core.Reference
	18, // 40: google.fhir.r5.core.Device.UdiCarrier.id:type_name -> google.fhir.r5.core.String
	16, // 41: google.fhir.r5.core.Device.UdiCarrier.extension:type_name -> google.fhir.r5.core.Extension
	16, // 42: google.fhir.r5.core.Device.UdiCarrier.modifier_extension:type_name -> google.fhir.r5.core.Extension
	18, // 43: google.fhir.r5.core.Device.UdiCarrier.device_identifier:type_name -> google.fhir.r5.core.String
	12, // 44: google.fhir.r5.core.Device.UdiCarrier.issuer:type_name -> google.fhir.r5.core.Uri
	12, // 45: google.fhir.r5.core.Device.UdiCarrier.jurisdiction:type_name -> google.fhir.r5.core.Uri
	27, // 46: google.fhir.r5.core.Device.UdiCarrier.carrier_aidc:type_name -> google.fhir.r5.core.Base64Binary
	18, // 47: google.fhir.r5.core.Device.UdiCarrier.carrier_hrf:type_name -> google.fhir.r5.core.String
	7,  // 48: google.fhir.r5.core.Device.UdiCarrier.entry_type:type_name -> google.fhir.r5.core.Device.UdiCarrier.EntryTypeCode
	28, // 49: google.fhir.r5.core.Device.StatusCode.value:type_name -> google.fhir.r5.core.FHIRDeviceStatusCode.Value
	18, // 50: google.fhir.r5.core.Device.StatusCode.id:type_name -> google.fhir.r5.core.String
	16, // 51: google.fhir.r5.core.Device.StatusCode.extension:type_name -> google.fhir.r5.core.Extension
	18, // 52: google.fhir.r5.core.Device.Name.id:type_name -> google.fhir.r5.core.String
	16, // 53: google.fhir.r5.core.Device.Name.extension:type_name -> google.fhir.r5.core.Extension
	16, // 54: google.fhir.r5.core.Device.Name.modifier_extension:type_name -> google.fhir.r5.core.Extension
	18, // 55: google.fhir.r5.core.Device.Name.value:type_name -> google.fhir.r5.core.String
	8,  // 56: google.fhir.r5.core.Device.Name.type:type_name -> google.fhir.r5.core.Device.Name.TypeCode
	29, // 57: google.fhir.r5.core.Device.Name.display:type_name -> google.fhir.r5.core.Boolean
	18, // 58: google.fhir.r5.core.Device.Version.id:type_name -> google.fhir.r5.core.String
	16, // 59: google.fhir.r5.core.Device.Version.extension:type_name -> google.fhir.r5.core.Extension
	16, // 60: google.fhir.r5.core.Device.Version.modifier_extension:type_name -> google.fhir.r5.core.Extension
	20, // 61: google.fhir.r5.core.Device.Version.type:type_name -> google.fhir.r5.core.CodeableConcept
	17, // 62: google.fhir.r5.core.Device.Version.component:type_name -> google.fhir.r5.core.Identifier
	21, // 63: google.fhir.r5.core.Device.Version.install_date:type_name -> google.fhir.r5.core.DateTime
	18, // 64: google.fhir.r5.core.Device.Version.value:type_name -> google.fhir.r5.core.String
	18, // 65: google.fhir.r5.core.Device.ConformsTo.id:type_name -> google.fhir.r5.core.String
	16, // 66: google.fhir.r5.core.Device.ConformsTo.extension:type_name -> google.fhir.r5.core.Extension
	16, // 67: google.fhir.r5.core.Device.ConformsTo.modifier_extension:type_name -> google.fhir.r5.core.Extension
	20, // 68: google.fhir.r5.core.Device.ConformsTo.category:type_name -> google.fhir.r5.core.CodeableConcept
	20, // 69: google.fhir.r5.core.Device.ConformsTo.specification:type_name -> google.fhir.r5.core.CodeableConcept
	18, // 70: google.fhir.r5.core.Device.ConformsTo.version:type_name -> google.fhir.r5.core.String
	18, // 71: google.fhir.r5.core.Device.Property.id:type_name -> google.fhir.r5.core.String
	16, // 72: google.fhir.r5.core.Device.Property.extension:type_name -> google.fhir.r5.core.Extension
	16, // 73: google.fhir.r5.core.Device.Property.modifier_extension:type_name -> google.fhir.r5.core.Extension
	20, // 74: google.fhir.r5.core.Device.Property.type:type_name -> google.fhir.r5.core.CodeableConcept
	9,  // 75: google.fhir.r5.core.Device.Property.value:type_name -> google.fhir.r5.core.Device.Property.ValueX
	30, // 76: google.fhir.r5.core.Device.UdiCarrier.EntryTypeCode.value:type_name -> google.fhir.r5.core.UDIEntryTypeCode.Value
	18, // 77: google.fhir.r5.core.Device.UdiCarrier.EntryTypeCode.id:type_name -> google.fhir.r5.core.String
	16, // 78: google.fhir.r5.core.Device.UdiCarrier.EntryTypeCode.extension:type_name -> google.fhir.r5.core.Extension
	31, // 79: google.fhir.r5.core.Device.Name.TypeCode.value:type_name -> google.fhir.r5.core.DeviceNameTypeCode.Value
	18, // 80: google.fhir.r5.core.Device.Name.TypeCode.id:type_name -> google.fhir.r5.core.String
	16, // 81: google.fhir.r5.core.Device.Name.TypeCode.extension:type_name -> google.fhir.r5.core.Extension
	32, // 82: google.fhir.r5.core.Device.Property.ValueX.quantity:type_name -> google.fhir.r5.core.Quantity
	20, // 83: google.fhir.r5.core.Device.Property.ValueX.codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	18, // 84: google.fhir.r5.core.Device.Property.ValueX.string_value:type_name -> google.fhir.r5.core.String
	29, // 85: google.fhir.r5.core.Device.Property.ValueX.boolean:type_name -> google.fhir.r5.core.Boolean
	33, // 86: google.fhir.r5.core.Device.Property.ValueX.integer:type_name -> google.fhir.r5.core.Integer
	34, // 87: google.fhir.r5.core.Device.Property.ValueX.range:type_name -> google.fhir.r5.core.Range
	35, // 88: google.fhir.r5.core.Device.Property.ValueX.attachment:type_name -> google.fhir.r5.core.Attachment
	89, // [89:89] is the sub-list for method output_type
	89, // [89:89] is the sub-list for method input_type
	89, // [89:89] is the sub-list for extension type_name
	89, // [89:89] is the sub-list for extension extendee
	0,  // [0:89] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r5_core_resources_device_proto_init() }
func file_proto_google_fhir_proto_r5_core_resources_device_proto_init() {
	if File_proto_google_fhir_proto_r5_core_resources_device_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r5_core_resources_device_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_device_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_UdiCarrier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_device_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_device_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Name); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_device_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Version); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_device_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_ConformsTo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_device_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Property); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_device_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_UdiCarrier_EntryTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_device_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Name_TypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_device_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Property_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_r5_core_resources_device_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*Device_Property_ValueX_Quantity)(nil),
		(*Device_Property_ValueX_CodeableConcept)(nil),
		(*Device_Property_ValueX_StringValue)(nil),
		(*Device_Property_ValueX_Boolean)(nil),
		(*Device_Property_ValueX_Integer)(nil),
		(*Device_Property_ValueX_Range)(nil),
		(*Device_Property_ValueX_Attachment)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r5_core_resources_device_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r5_core_resources_device_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r5_core_resources_device_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r5_core_resources_device_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r5_core_resources_device_proto = out.File
	file_proto_google_fhir_proto_r5_core_resources_device_proto_rawDesc = nil
	file_proto_google_fhir_proto_r5_core_resources_device_proto_goTypes = nil
	file_proto_google_fhir_proto_r5_core_resources_device_proto_depIdxs = nil
}
