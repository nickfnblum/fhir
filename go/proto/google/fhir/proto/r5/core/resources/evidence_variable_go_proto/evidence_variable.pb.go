//    Copyright 2023 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.21.12
// source: proto/google/fhir/proto/r5/core/resources/evidence_variable.proto

package evidence_variable_go_proto

import (
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	codes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/codes_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for EvidenceVariable.
// A definition of an exposure, outcome, or other variable.
// See http://hl7.org/fhir/StructureDefinition/EvidenceVariable
type EvidenceVariable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*anypb.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Canonical identifier for this evidence variable, represented as a URI
	// (globally unique)
	Url *datatypes_go_proto.Uri `protobuf:"bytes,10,opt,name=url,proto3" json:"url,omitempty"`
	// Additional identifier for the evidence variable
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,11,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Business version of the evidence variable
	Version          *datatypes_go_proto.String          `protobuf:"bytes,12,opt,name=version,proto3" json:"version,omitempty"`
	VersionAlgorithm *EvidenceVariable_VersionAlgorithmX `protobuf:"bytes,37,opt,name=version_algorithm,json=versionAlgorithm,proto3" json:"version_algorithm,omitempty"`
	// Name for this evidence variable (computer friendly)
	Name *datatypes_go_proto.String `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	// Name for this evidence variable (human friendly)
	Title *datatypes_go_proto.String `protobuf:"bytes,14,opt,name=title,proto3" json:"title,omitempty"`
	// Title for use in informal contexts
	ShortTitle *datatypes_go_proto.String   `protobuf:"bytes,15,opt,name=short_title,json=shortTitle,proto3" json:"short_title,omitempty"`
	Status     *EvidenceVariable_StatusCode `protobuf:"bytes,17,opt,name=status,proto3" json:"status,omitempty"`
	// For testing purposes, not real usage
	Experimental *datatypes_go_proto.Boolean `protobuf:"bytes,38,opt,name=experimental,proto3" json:"experimental,omitempty"`
	// Date last changed
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,18,opt,name=date,proto3" json:"date,omitempty"`
	// Name of the publisher/steward (organization or individual)
	Publisher *datatypes_go_proto.String `protobuf:"bytes,19,opt,name=publisher,proto3" json:"publisher,omitempty"`
	// Contact details for the publisher
	Contact []*datatypes_go_proto.ContactDetail `protobuf:"bytes,20,rep,name=contact,proto3" json:"contact,omitempty"`
	// Natural language description of the evidence variable
	Description *datatypes_go_proto.Markdown `protobuf:"bytes,21,opt,name=description,proto3" json:"description,omitempty"`
	// Used for footnotes or explanatory notes
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,22,rep,name=note,proto3" json:"note,omitempty"`
	// The context that the content is intended to support
	UseContext []*datatypes_go_proto.UsageContext `protobuf:"bytes,23,rep,name=use_context,json=useContext,proto3" json:"use_context,omitempty"`
	// Why this EvidenceVariable is defined
	Purpose *datatypes_go_proto.Markdown `protobuf:"bytes,39,opt,name=purpose,proto3" json:"purpose,omitempty"`
	// Use and/or publishing restrictions
	Copyright *datatypes_go_proto.Markdown `protobuf:"bytes,25,opt,name=copyright,proto3" json:"copyright,omitempty"`
	// Copyright holder and year(s)
	CopyrightLabel *datatypes_go_proto.String `protobuf:"bytes,40,opt,name=copyright_label,json=copyrightLabel,proto3" json:"copyright_label,omitempty"`
	// When the resource was approved by publisher
	ApprovalDate *datatypes_go_proto.Date `protobuf:"bytes,26,opt,name=approval_date,json=approvalDate,proto3" json:"approval_date,omitempty"`
	// When the resource was last reviewed by the publisher
	LastReviewDate *datatypes_go_proto.Date `protobuf:"bytes,27,opt,name=last_review_date,json=lastReviewDate,proto3" json:"last_review_date,omitempty"`
	// When the resource is expected to be used
	EffectivePeriod *datatypes_go_proto.Period `protobuf:"bytes,28,opt,name=effective_period,json=effectivePeriod,proto3" json:"effective_period,omitempty"`
	// Who authored the content
	Author []*datatypes_go_proto.ContactDetail `protobuf:"bytes,30,rep,name=author,proto3" json:"author,omitempty"`
	// Who edited the content
	Editor []*datatypes_go_proto.ContactDetail `protobuf:"bytes,31,rep,name=editor,proto3" json:"editor,omitempty"`
	// Who reviewed the content
	Reviewer []*datatypes_go_proto.ContactDetail `protobuf:"bytes,32,rep,name=reviewer,proto3" json:"reviewer,omitempty"`
	// Who endorsed the content
	Endorser []*datatypes_go_proto.ContactDetail `protobuf:"bytes,33,rep,name=endorser,proto3" json:"endorser,omitempty"`
	// Additional documentation, citations, etc
	RelatedArtifact []*datatypes_go_proto.RelatedArtifact `protobuf:"bytes,34,rep,name=related_artifact,json=relatedArtifact,proto3" json:"related_artifact,omitempty"`
	// Actual or conceptual
	Actual         *datatypes_go_proto.Boolean        `protobuf:"bytes,41,opt,name=actual,proto3" json:"actual,omitempty"`
	Characteristic []*EvidenceVariable_Characteristic `protobuf:"bytes,36,rep,name=characteristic,proto3" json:"characteristic,omitempty"`
	Handling       *EvidenceVariable_HandlingCode     `protobuf:"bytes,42,opt,name=handling,proto3" json:"handling,omitempty"`
	Category       []*EvidenceVariable_Category       `protobuf:"bytes,43,rep,name=category,proto3" json:"category,omitempty"`
}

func (x *EvidenceVariable) Reset() {
	*x = EvidenceVariable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvidenceVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvidenceVariable) ProtoMessage() {}

func (x *EvidenceVariable) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvidenceVariable.ProtoReflect.Descriptor instead.
func (*EvidenceVariable) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_rawDescGZIP(), []int{0}
}

func (x *EvidenceVariable) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EvidenceVariable) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *EvidenceVariable) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *EvidenceVariable) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *EvidenceVariable) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *EvidenceVariable) GetContained() []*anypb.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *EvidenceVariable) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *EvidenceVariable) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *EvidenceVariable) GetUrl() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *EvidenceVariable) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *EvidenceVariable) GetVersion() *datatypes_go_proto.String {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *EvidenceVariable) GetVersionAlgorithm() *EvidenceVariable_VersionAlgorithmX {
	if x != nil {
		return x.VersionAlgorithm
	}
	return nil
}

func (x *EvidenceVariable) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *EvidenceVariable) GetTitle() *datatypes_go_proto.String {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *EvidenceVariable) GetShortTitle() *datatypes_go_proto.String {
	if x != nil {
		return x.ShortTitle
	}
	return nil
}

func (x *EvidenceVariable) GetStatus() *EvidenceVariable_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *EvidenceVariable) GetExperimental() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Experimental
	}
	return nil
}

func (x *EvidenceVariable) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *EvidenceVariable) GetPublisher() *datatypes_go_proto.String {
	if x != nil {
		return x.Publisher
	}
	return nil
}

func (x *EvidenceVariable) GetContact() []*datatypes_go_proto.ContactDetail {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *EvidenceVariable) GetDescription() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *EvidenceVariable) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *EvidenceVariable) GetUseContext() []*datatypes_go_proto.UsageContext {
	if x != nil {
		return x.UseContext
	}
	return nil
}

func (x *EvidenceVariable) GetPurpose() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Purpose
	}
	return nil
}

func (x *EvidenceVariable) GetCopyright() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Copyright
	}
	return nil
}

func (x *EvidenceVariable) GetCopyrightLabel() *datatypes_go_proto.String {
	if x != nil {
		return x.CopyrightLabel
	}
	return nil
}

func (x *EvidenceVariable) GetApprovalDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.ApprovalDate
	}
	return nil
}

func (x *EvidenceVariable) GetLastReviewDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.LastReviewDate
	}
	return nil
}

func (x *EvidenceVariable) GetEffectivePeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.EffectivePeriod
	}
	return nil
}

func (x *EvidenceVariable) GetAuthor() []*datatypes_go_proto.ContactDetail {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *EvidenceVariable) GetEditor() []*datatypes_go_proto.ContactDetail {
	if x != nil {
		return x.Editor
	}
	return nil
}

func (x *EvidenceVariable) GetReviewer() []*datatypes_go_proto.ContactDetail {
	if x != nil {
		return x.Reviewer
	}
	return nil
}

func (x *EvidenceVariable) GetEndorser() []*datatypes_go_proto.ContactDetail {
	if x != nil {
		return x.Endorser
	}
	return nil
}

func (x *EvidenceVariable) GetRelatedArtifact() []*datatypes_go_proto.RelatedArtifact {
	if x != nil {
		return x.RelatedArtifact
	}
	return nil
}

func (x *EvidenceVariable) GetActual() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Actual
	}
	return nil
}

func (x *EvidenceVariable) GetCharacteristic() []*EvidenceVariable_Characteristic {
	if x != nil {
		return x.Characteristic
	}
	return nil
}

func (x *EvidenceVariable) GetHandling() *EvidenceVariable_HandlingCode {
	if x != nil {
		return x.Handling
	}
	return nil
}

func (x *EvidenceVariable) GetCategory() []*EvidenceVariable_Category {
	if x != nil {
		return x.Category
	}
	return nil
}

// How to compare versions
type EvidenceVariable_VersionAlgorithmX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*EvidenceVariable_VersionAlgorithmX_StringValue
	//	*EvidenceVariable_VersionAlgorithmX_Coding
	Choice isEvidenceVariable_VersionAlgorithmX_Choice `protobuf_oneof:"choice"`
}

func (x *EvidenceVariable_VersionAlgorithmX) Reset() {
	*x = EvidenceVariable_VersionAlgorithmX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvidenceVariable_VersionAlgorithmX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvidenceVariable_VersionAlgorithmX) ProtoMessage() {}

func (x *EvidenceVariable_VersionAlgorithmX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvidenceVariable_VersionAlgorithmX.ProtoReflect.Descriptor instead.
func (*EvidenceVariable_VersionAlgorithmX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_rawDescGZIP(), []int{0, 0}
}

func (m *EvidenceVariable_VersionAlgorithmX) GetChoice() isEvidenceVariable_VersionAlgorithmX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *EvidenceVariable_VersionAlgorithmX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*EvidenceVariable_VersionAlgorithmX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *EvidenceVariable_VersionAlgorithmX) GetCoding() *datatypes_go_proto.Coding {
	if x, ok := x.GetChoice().(*EvidenceVariable_VersionAlgorithmX_Coding); ok {
		return x.Coding
	}
	return nil
}

type isEvidenceVariable_VersionAlgorithmX_Choice interface {
	isEvidenceVariable_VersionAlgorithmX_Choice()
}

type EvidenceVariable_VersionAlgorithmX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=string_value,json=string,proto3,oneof"`
}

type EvidenceVariable_VersionAlgorithmX_Coding struct {
	Coding *datatypes_go_proto.Coding `protobuf:"bytes,2,opt,name=coding,proto3,oneof"`
}

func (*EvidenceVariable_VersionAlgorithmX_StringValue) isEvidenceVariable_VersionAlgorithmX_Choice() {
}

func (*EvidenceVariable_VersionAlgorithmX_Coding) isEvidenceVariable_VersionAlgorithmX_Choice() {}

// draft | active | retired | unknown
type EvidenceVariable_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.PublicationStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.PublicationStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension            `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *EvidenceVariable_StatusCode) Reset() {
	*x = EvidenceVariable_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvidenceVariable_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvidenceVariable_StatusCode) ProtoMessage() {}

func (x *EvidenceVariable_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvidenceVariable_StatusCode.ProtoReflect.Descriptor instead.
func (*EvidenceVariable_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_rawDescGZIP(), []int{0, 1}
}

func (x *EvidenceVariable_StatusCode) GetValue() codes_go_proto.PublicationStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.PublicationStatusCode_Value(0)
}

func (x *EvidenceVariable_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EvidenceVariable_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// A defining factor of the EvidenceVariable
type EvidenceVariable_Characteristic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Label for internal linking
	LinkId *datatypes_go_proto.Id `protobuf:"bytes,11,opt,name=link_id,json=linkId,proto3" json:"link_id,omitempty"`
	// Natural language description of the characteristic
	Description *datatypes_go_proto.Markdown `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
	// Used for footnotes or explanatory notes
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,13,rep,name=note,proto3" json:"note,omitempty"`
	// Whether the characteristic is an inclusion criterion or exclusion
	// criterion
	Exclude *datatypes_go_proto.Boolean `protobuf:"bytes,7,opt,name=exclude,proto3" json:"exclude,omitempty"`
	// Defines the characteristic (without using type and value) by a Reference
	DefinitionReference *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=definition_reference,json=definitionReference,proto3" json:"definition_reference,omitempty"`
	// Defines the characteristic (without using type and value) by a Canonical
	DefinitionCanonical *datatypes_go_proto.Canonical `protobuf:"bytes,15,opt,name=definition_canonical,json=definitionCanonical,proto3" json:"definition_canonical,omitempty"`
	// Defines the characteristic (without using type and value) by a
	// CodeableConcept
	DefinitionCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,16,opt,name=definition_codeable_concept,json=definitionCodeableConcept,proto3" json:"definition_codeable_concept,omitempty"`
	// Defines the characteristic (without using type and value) by an
	// expression
	DefinitionExpression *datatypes_go_proto.Expression `protobuf:"bytes,17,opt,name=definition_expression,json=definitionExpression,proto3" json:"definition_expression,omitempty"`
	// Defines the characteristic (without using type and value) by an id
	DefinitionId             *datatypes_go_proto.Id                                    `protobuf:"bytes,18,opt,name=definition_id,json=definitionId,proto3" json:"definition_id,omitempty"`
	DefinitionByTypeAndValue *EvidenceVariable_Characteristic_DefinitionByTypeAndValue `protobuf:"bytes,19,opt,name=definition_by_type_and_value,json=definitionByTypeAndValue,proto3" json:"definition_by_type_and_value,omitempty"`
	DefinitionByCombination  *EvidenceVariable_Characteristic_DefinitionByCombination  `protobuf:"bytes,20,opt,name=definition_by_combination,json=definitionByCombination,proto3" json:"definition_by_combination,omitempty"`
	Instances                *EvidenceVariable_Characteristic_InstancesX               `protobuf:"bytes,21,opt,name=instances,proto3" json:"instances,omitempty"`
	Duration                 *EvidenceVariable_Characteristic_DurationX                `protobuf:"bytes,22,opt,name=duration,proto3" json:"duration,omitempty"`
	TimeFromEvent            []*EvidenceVariable_Characteristic_TimeFromEvent          `protobuf:"bytes,23,rep,name=time_from_event,json=timeFromEvent,proto3" json:"time_from_event,omitempty"`
}

func (x *EvidenceVariable_Characteristic) Reset() {
	*x = EvidenceVariable_Characteristic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvidenceVariable_Characteristic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvidenceVariable_Characteristic) ProtoMessage() {}

func (x *EvidenceVariable_Characteristic) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvidenceVariable_Characteristic.ProtoReflect.Descriptor instead.
func (*EvidenceVariable_Characteristic) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_rawDescGZIP(), []int{0, 2}
}

func (x *EvidenceVariable_Characteristic) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EvidenceVariable_Characteristic) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *EvidenceVariable_Characteristic) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *EvidenceVariable_Characteristic) GetLinkId() *datatypes_go_proto.Id {
	if x != nil {
		return x.LinkId
	}
	return nil
}

func (x *EvidenceVariable_Characteristic) GetDescription() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *EvidenceVariable_Characteristic) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *EvidenceVariable_Characteristic) GetExclude() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Exclude
	}
	return nil
}

func (x *EvidenceVariable_Characteristic) GetDefinitionReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.DefinitionReference
	}
	return nil
}

func (x *EvidenceVariable_Characteristic) GetDefinitionCanonical() *datatypes_go_proto.Canonical {
	if x != nil {
		return x.DefinitionCanonical
	}
	return nil
}

func (x *EvidenceVariable_Characteristic) GetDefinitionCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DefinitionCodeableConcept
	}
	return nil
}

func (x *EvidenceVariable_Characteristic) GetDefinitionExpression() *datatypes_go_proto.Expression {
	if x != nil {
		return x.DefinitionExpression
	}
	return nil
}

func (x *EvidenceVariable_Characteristic) GetDefinitionId() *datatypes_go_proto.Id {
	if x != nil {
		return x.DefinitionId
	}
	return nil
}

func (x *EvidenceVariable_Characteristic) GetDefinitionByTypeAndValue() *EvidenceVariable_Characteristic_DefinitionByTypeAndValue {
	if x != nil {
		return x.DefinitionByTypeAndValue
	}
	return nil
}

func (x *EvidenceVariable_Characteristic) GetDefinitionByCombination() *EvidenceVariable_Characteristic_DefinitionByCombination {
	if x != nil {
		return x.DefinitionByCombination
	}
	return nil
}

func (x *EvidenceVariable_Characteristic) GetInstances() *EvidenceVariable_Characteristic_InstancesX {
	if x != nil {
		return x.Instances
	}
	return nil
}

func (x *EvidenceVariable_Characteristic) GetDuration() *EvidenceVariable_Characteristic_DurationX {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *EvidenceVariable_Characteristic) GetTimeFromEvent() []*EvidenceVariable_Characteristic_TimeFromEvent {
	if x != nil {
		return x.TimeFromEvent
	}
	return nil
}

// continuous | dichotomous | ordinal | polychotomous
type EvidenceVariable_HandlingCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.EvidenceVariableHandlingCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.EvidenceVariableHandlingCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                   `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *EvidenceVariable_HandlingCode) Reset() {
	*x = EvidenceVariable_HandlingCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvidenceVariable_HandlingCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvidenceVariable_HandlingCode) ProtoMessage() {}

func (x *EvidenceVariable_HandlingCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvidenceVariable_HandlingCode.ProtoReflect.Descriptor instead.
func (*EvidenceVariable_HandlingCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_rawDescGZIP(), []int{0, 3}
}

func (x *EvidenceVariable_HandlingCode) GetValue() codes_go_proto.EvidenceVariableHandlingCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.EvidenceVariableHandlingCode_Value(0)
}

func (x *EvidenceVariable_HandlingCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EvidenceVariable_HandlingCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// A grouping for ordinal or polychotomous variables
type EvidenceVariable_Category struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Description of the grouping
	Name  *datatypes_go_proto.String        `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Value *EvidenceVariable_Category_ValueX `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EvidenceVariable_Category) Reset() {
	*x = EvidenceVariable_Category{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvidenceVariable_Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvidenceVariable_Category) ProtoMessage() {}

func (x *EvidenceVariable_Category) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvidenceVariable_Category.ProtoReflect.Descriptor instead.
func (*EvidenceVariable_Category) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_rawDescGZIP(), []int{0, 4}
}

func (x *EvidenceVariable_Category) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EvidenceVariable_Category) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *EvidenceVariable_Category) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *EvidenceVariable_Category) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *EvidenceVariable_Category) GetValue() *EvidenceVariable_Category_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

// Defines the characteristic using type and value
type EvidenceVariable_Characteristic_DefinitionByTypeAndValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Expresses the type of characteristic
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Method for how the characteristic value was determined
	Method []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,rep,name=method,proto3" json:"method,omitempty"`
	// Device used for determining characteristic
	Device *datatypes_go_proto.Reference                                    `protobuf:"bytes,6,opt,name=device,proto3" json:"device,omitempty"`
	Value  *EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX `protobuf:"bytes,7,opt,name=value,proto3" json:"value,omitempty"`
	// Reference point for valueQuantity or valueRange
	Offset *datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *EvidenceVariable_Characteristic_DefinitionByTypeAndValue) Reset() {
	*x = EvidenceVariable_Characteristic_DefinitionByTypeAndValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvidenceVariable_Characteristic_DefinitionByTypeAndValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvidenceVariable_Characteristic_DefinitionByTypeAndValue) ProtoMessage() {}

func (x *EvidenceVariable_Characteristic_DefinitionByTypeAndValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvidenceVariable_Characteristic_DefinitionByTypeAndValue.ProtoReflect.Descriptor instead.
func (*EvidenceVariable_Characteristic_DefinitionByTypeAndValue) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *EvidenceVariable_Characteristic_DefinitionByTypeAndValue) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EvidenceVariable_Characteristic_DefinitionByTypeAndValue) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *EvidenceVariable_Characteristic_DefinitionByTypeAndValue) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *EvidenceVariable_Characteristic_DefinitionByTypeAndValue) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *EvidenceVariable_Characteristic_DefinitionByTypeAndValue) GetMethod() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *EvidenceVariable_Characteristic_DefinitionByTypeAndValue) GetDevice() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *EvidenceVariable_Characteristic_DefinitionByTypeAndValue) GetValue() *EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *EvidenceVariable_Characteristic_DefinitionByTypeAndValue) GetOffset() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Offset
	}
	return nil
}

// Used to specify how two or more characteristics are combined
type EvidenceVariable_Characteristic_DefinitionByCombination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension                                   `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Code              *EvidenceVariable_Characteristic_DefinitionByCombination_CodeType `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// Provides the value of "n" when "at-least" or "at-most" codes are used
	Threshold *datatypes_go_proto.PositiveInt `protobuf:"bytes,5,opt,name=threshold,proto3" json:"threshold,omitempty"`
	// A defining factor of the characteristic
	Characteristic []*EvidenceVariable_Characteristic `protobuf:"bytes,6,rep,name=characteristic,proto3" json:"characteristic,omitempty"`
}

func (x *EvidenceVariable_Characteristic_DefinitionByCombination) Reset() {
	*x = EvidenceVariable_Characteristic_DefinitionByCombination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvidenceVariable_Characteristic_DefinitionByCombination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvidenceVariable_Characteristic_DefinitionByCombination) ProtoMessage() {}

func (x *EvidenceVariable_Characteristic_DefinitionByCombination) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvidenceVariable_Characteristic_DefinitionByCombination.ProtoReflect.Descriptor instead.
func (*EvidenceVariable_Characteristic_DefinitionByCombination) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_rawDescGZIP(), []int{0, 2, 1}
}

func (x *EvidenceVariable_Characteristic_DefinitionByCombination) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EvidenceVariable_Characteristic_DefinitionByCombination) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *EvidenceVariable_Characteristic_DefinitionByCombination) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *EvidenceVariable_Characteristic_DefinitionByCombination) GetCode() *EvidenceVariable_Characteristic_DefinitionByCombination_CodeType {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *EvidenceVariable_Characteristic_DefinitionByCombination) GetThreshold() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.Threshold
	}
	return nil
}

func (x *EvidenceVariable_Characteristic_DefinitionByCombination) GetCharacteristic() []*EvidenceVariable_Characteristic {
	if x != nil {
		return x.Characteristic
	}
	return nil
}

// Number of occurrences meeting the characteristic
type EvidenceVariable_Characteristic_InstancesX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*EvidenceVariable_Characteristic_InstancesX_Quantity
	//	*EvidenceVariable_Characteristic_InstancesX_Range
	Choice isEvidenceVariable_Characteristic_InstancesX_Choice `protobuf_oneof:"choice"`
}

func (x *EvidenceVariable_Characteristic_InstancesX) Reset() {
	*x = EvidenceVariable_Characteristic_InstancesX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvidenceVariable_Characteristic_InstancesX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvidenceVariable_Characteristic_InstancesX) ProtoMessage() {}

func (x *EvidenceVariable_Characteristic_InstancesX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvidenceVariable_Characteristic_InstancesX.ProtoReflect.Descriptor instead.
func (*EvidenceVariable_Characteristic_InstancesX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_rawDescGZIP(), []int{0, 2, 2}
}

func (m *EvidenceVariable_Characteristic_InstancesX) GetChoice() isEvidenceVariable_Characteristic_InstancesX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *EvidenceVariable_Characteristic_InstancesX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*EvidenceVariable_Characteristic_InstancesX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *EvidenceVariable_Characteristic_InstancesX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*EvidenceVariable_Characteristic_InstancesX_Range); ok {
		return x.Range
	}
	return nil
}

type isEvidenceVariable_Characteristic_InstancesX_Choice interface {
	isEvidenceVariable_Characteristic_InstancesX_Choice()
}

type EvidenceVariable_Characteristic_InstancesX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type EvidenceVariable_Characteristic_InstancesX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,2,opt,name=range,proto3,oneof"`
}

func (*EvidenceVariable_Characteristic_InstancesX_Quantity) isEvidenceVariable_Characteristic_InstancesX_Choice() {
}

func (*EvidenceVariable_Characteristic_InstancesX_Range) isEvidenceVariable_Characteristic_InstancesX_Choice() {
}

// Length of time in which the characteristic is met
type EvidenceVariable_Characteristic_DurationX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*EvidenceVariable_Characteristic_DurationX_Quantity
	//	*EvidenceVariable_Characteristic_DurationX_Range
	Choice isEvidenceVariable_Characteristic_DurationX_Choice `protobuf_oneof:"choice"`
}

func (x *EvidenceVariable_Characteristic_DurationX) Reset() {
	*x = EvidenceVariable_Characteristic_DurationX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvidenceVariable_Characteristic_DurationX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvidenceVariable_Characteristic_DurationX) ProtoMessage() {}

func (x *EvidenceVariable_Characteristic_DurationX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvidenceVariable_Characteristic_DurationX.ProtoReflect.Descriptor instead.
func (*EvidenceVariable_Characteristic_DurationX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_rawDescGZIP(), []int{0, 2, 3}
}

func (m *EvidenceVariable_Characteristic_DurationX) GetChoice() isEvidenceVariable_Characteristic_DurationX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *EvidenceVariable_Characteristic_DurationX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*EvidenceVariable_Characteristic_DurationX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *EvidenceVariable_Characteristic_DurationX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*EvidenceVariable_Characteristic_DurationX_Range); ok {
		return x.Range
	}
	return nil
}

type isEvidenceVariable_Characteristic_DurationX_Choice interface {
	isEvidenceVariable_Characteristic_DurationX_Choice()
}

type EvidenceVariable_Characteristic_DurationX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type EvidenceVariable_Characteristic_DurationX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,2,opt,name=range,proto3,oneof"`
}

func (*EvidenceVariable_Characteristic_DurationX_Quantity) isEvidenceVariable_Characteristic_DurationX_Choice() {
}

func (*EvidenceVariable_Characteristic_DurationX_Range) isEvidenceVariable_Characteristic_DurationX_Choice() {
}

// Timing in which the characteristic is determined
type EvidenceVariable_Characteristic_TimeFromEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Human readable description
	Description *datatypes_go_proto.Markdown `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Used for footnotes or explanatory notes
	Note  []*datatypes_go_proto.Annotation                      `protobuf:"bytes,5,rep,name=note,proto3" json:"note,omitempty"`
	Event *EvidenceVariable_Characteristic_TimeFromEvent_EventX `protobuf:"bytes,6,opt,name=event,proto3" json:"event,omitempty"`
	// Used to express the observation at a defined amount of time before or
	// after the event
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,7,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Used to express the observation within a period before and/or after the
	// event
	Range *datatypes_go_proto.Range `protobuf:"bytes,8,opt,name=range,proto3" json:"range,omitempty"`
}

func (x *EvidenceVariable_Characteristic_TimeFromEvent) Reset() {
	*x = EvidenceVariable_Characteristic_TimeFromEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvidenceVariable_Characteristic_TimeFromEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvidenceVariable_Characteristic_TimeFromEvent) ProtoMessage() {}

func (x *EvidenceVariable_Characteristic_TimeFromEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvidenceVariable_Characteristic_TimeFromEvent.ProtoReflect.Descriptor instead.
func (*EvidenceVariable_Characteristic_TimeFromEvent) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_rawDescGZIP(), []int{0, 2, 4}
}

func (x *EvidenceVariable_Characteristic_TimeFromEvent) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EvidenceVariable_Characteristic_TimeFromEvent) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *EvidenceVariable_Characteristic_TimeFromEvent) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *EvidenceVariable_Characteristic_TimeFromEvent) GetDescription() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *EvidenceVariable_Characteristic_TimeFromEvent) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *EvidenceVariable_Characteristic_TimeFromEvent) GetEvent() *EvidenceVariable_Characteristic_TimeFromEvent_EventX {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *EvidenceVariable_Characteristic_TimeFromEvent) GetQuantity() *datatypes_go_proto.Quantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *EvidenceVariable_Characteristic_TimeFromEvent) GetRange() *datatypes_go_proto.Range {
	if x != nil {
		return x.Range
	}
	return nil
}

// Defines the characteristic when coupled with characteristic.type
type EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX_CodeableConcept
	//	*EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX_Boolean
	//	*EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX_Quantity
	//	*EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX_Range
	//	*EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX_Reference
	//	*EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX_Id
	Choice isEvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX) Reset() {
	*x = EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX) ProtoMessage() {}

func (x *EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX.ProtoReflect.Descriptor instead.
func (*EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_rawDescGZIP(), []int{0, 2, 0, 0}
}

func (m *EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX) GetChoice() isEvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX) GetId() *datatypes_go_proto.Id {
	if x, ok := x.GetChoice().(*EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX_Id); ok {
		return x.Id
	}
	return nil
}

type isEvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX_Choice interface {
	isEvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX_Choice()
}

type EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,2,opt,name=boolean,proto3,oneof"`
}

type EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,3,opt,name=quantity,proto3,oneof"`
}

type EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,4,opt,name=range,proto3,oneof"`
}

type EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=reference,proto3,oneof"`
}

type EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX_Id struct {
	Id *datatypes_go_proto.Id `protobuf:"bytes,6,opt,name=id,proto3,oneof"`
}

func (*EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX_CodeableConcept) isEvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX_Choice() {
}

func (*EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX_Boolean) isEvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX_Choice() {
}

func (*EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX_Quantity) isEvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX_Choice() {
}

func (*EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX_Range) isEvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX_Choice() {
}

func (*EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX_Reference) isEvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX_Choice() {
}

func (*EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX_Id) isEvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX_Choice() {
}

// all-of | any-of | at-least | at-most | statistical | net-effect |
// dataset
type EvidenceVariable_Characteristic_DefinitionByCombination_CodeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.CharacteristicCombinationCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.CharacteristicCombinationCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                         `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                    `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *EvidenceVariable_Characteristic_DefinitionByCombination_CodeType) Reset() {
	*x = EvidenceVariable_Characteristic_DefinitionByCombination_CodeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvidenceVariable_Characteristic_DefinitionByCombination_CodeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvidenceVariable_Characteristic_DefinitionByCombination_CodeType) ProtoMessage() {}

func (x *EvidenceVariable_Characteristic_DefinitionByCombination_CodeType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvidenceVariable_Characteristic_DefinitionByCombination_CodeType.ProtoReflect.Descriptor instead.
func (*EvidenceVariable_Characteristic_DefinitionByCombination_CodeType) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_rawDescGZIP(), []int{0, 2, 1, 0}
}

func (x *EvidenceVariable_Characteristic_DefinitionByCombination_CodeType) GetValue() codes_go_proto.CharacteristicCombinationCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.CharacteristicCombinationCode_Value(0)
}

func (x *EvidenceVariable_Characteristic_DefinitionByCombination_CodeType) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EvidenceVariable_Characteristic_DefinitionByCombination_CodeType) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The event used as a base point (reference point) in time
type EvidenceVariable_Characteristic_TimeFromEvent_EventX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*EvidenceVariable_Characteristic_TimeFromEvent_EventX_CodeableConcept
	//	*EvidenceVariable_Characteristic_TimeFromEvent_EventX_Reference
	//	*EvidenceVariable_Characteristic_TimeFromEvent_EventX_DateTime
	//	*EvidenceVariable_Characteristic_TimeFromEvent_EventX_Id
	Choice isEvidenceVariable_Characteristic_TimeFromEvent_EventX_Choice `protobuf_oneof:"choice"`
}

func (x *EvidenceVariable_Characteristic_TimeFromEvent_EventX) Reset() {
	*x = EvidenceVariable_Characteristic_TimeFromEvent_EventX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvidenceVariable_Characteristic_TimeFromEvent_EventX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvidenceVariable_Characteristic_TimeFromEvent_EventX) ProtoMessage() {}

func (x *EvidenceVariable_Characteristic_TimeFromEvent_EventX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvidenceVariable_Characteristic_TimeFromEvent_EventX.ProtoReflect.Descriptor instead.
func (*EvidenceVariable_Characteristic_TimeFromEvent_EventX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_rawDescGZIP(), []int{0, 2, 4, 0}
}

func (m *EvidenceVariable_Characteristic_TimeFromEvent_EventX) GetChoice() isEvidenceVariable_Characteristic_TimeFromEvent_EventX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *EvidenceVariable_Characteristic_TimeFromEvent_EventX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*EvidenceVariable_Characteristic_TimeFromEvent_EventX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *EvidenceVariable_Characteristic_TimeFromEvent_EventX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*EvidenceVariable_Characteristic_TimeFromEvent_EventX_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *EvidenceVariable_Characteristic_TimeFromEvent_EventX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*EvidenceVariable_Characteristic_TimeFromEvent_EventX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *EvidenceVariable_Characteristic_TimeFromEvent_EventX) GetId() *datatypes_go_proto.Id {
	if x, ok := x.GetChoice().(*EvidenceVariable_Characteristic_TimeFromEvent_EventX_Id); ok {
		return x.Id
	}
	return nil
}

type isEvidenceVariable_Characteristic_TimeFromEvent_EventX_Choice interface {
	isEvidenceVariable_Characteristic_TimeFromEvent_EventX_Choice()
}

type EvidenceVariable_Characteristic_TimeFromEvent_EventX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type EvidenceVariable_Characteristic_TimeFromEvent_EventX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

type EvidenceVariable_Characteristic_TimeFromEvent_EventX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,3,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type EvidenceVariable_Characteristic_TimeFromEvent_EventX_Id struct {
	Id *datatypes_go_proto.Id `protobuf:"bytes,4,opt,name=id,proto3,oneof"`
}

func (*EvidenceVariable_Characteristic_TimeFromEvent_EventX_CodeableConcept) isEvidenceVariable_Characteristic_TimeFromEvent_EventX_Choice() {
}

func (*EvidenceVariable_Characteristic_TimeFromEvent_EventX_Reference) isEvidenceVariable_Characteristic_TimeFromEvent_EventX_Choice() {
}

func (*EvidenceVariable_Characteristic_TimeFromEvent_EventX_DateTime) isEvidenceVariable_Characteristic_TimeFromEvent_EventX_Choice() {
}

func (*EvidenceVariable_Characteristic_TimeFromEvent_EventX_Id) isEvidenceVariable_Characteristic_TimeFromEvent_EventX_Choice() {
}

// Definition of the grouping
type EvidenceVariable_Category_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*EvidenceVariable_Category_ValueX_CodeableConcept
	//	*EvidenceVariable_Category_ValueX_Quantity
	//	*EvidenceVariable_Category_ValueX_Range
	Choice isEvidenceVariable_Category_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *EvidenceVariable_Category_ValueX) Reset() {
	*x = EvidenceVariable_Category_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvidenceVariable_Category_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvidenceVariable_Category_ValueX) ProtoMessage() {}

func (x *EvidenceVariable_Category_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvidenceVariable_Category_ValueX.ProtoReflect.Descriptor instead.
func (*EvidenceVariable_Category_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (m *EvidenceVariable_Category_ValueX) GetChoice() isEvidenceVariable_Category_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *EvidenceVariable_Category_ValueX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*EvidenceVariable_Category_ValueX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *EvidenceVariable_Category_ValueX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*EvidenceVariable_Category_ValueX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *EvidenceVariable_Category_ValueX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*EvidenceVariable_Category_ValueX_Range); ok {
		return x.Range
	}
	return nil
}

type isEvidenceVariable_Category_ValueX_Choice interface {
	isEvidenceVariable_Category_ValueX_Choice()
}

type EvidenceVariable_Category_ValueX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type EvidenceVariable_Category_ValueX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,2,opt,name=quantity,proto3,oneof"`
}

type EvidenceVariable_Category_ValueX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,3,opt,name=range,proto3,oneof"`
}

func (*EvidenceVariable_Category_ValueX_CodeableConcept) isEvidenceVariable_Category_ValueX_Choice() {
}

func (*EvidenceVariable_Category_ValueX_Quantity) isEvidenceVariable_Category_ValueX_Choice() {}

func (*EvidenceVariable_Category_ValueX_Range) isEvidenceVariable_Category_ValueX_Choice() {}

var File_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_rawDesc = []byte{
	0x0a, 0x41, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x65, 0x76, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd9, 0x42, 0x0a,
	0x10, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x42, 0x2b, 0xf2,
	0xb9, 0xe4, 0xa3, 0x0b, 0x25, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x69, 0x6d,
	0x70, 0x6c, 0x69, 0x65, 0x73, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e,
	0x5b, 0x5e, 0x7c, 0x23, 0x20, 0x5d, 0x2b, 0x24, 0x27, 0x29, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x35, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x11, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x58, 0x52, 0x10, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x2f, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x50, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x40, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x72, 0x12, 0x3c, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x14, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12,
	0x3f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64,
	0x6f, 0x77, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0a, 0x75,
	0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x37, 0x0a, 0x07, 0x70, 0x75, 0x72,
	0x70, 0x6f, 0x73, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f,
	0x73, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b,
	0x64, 0x6f, 0x77, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x44, 0x0a, 0x0f, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x3e, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x52, 0x0f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x3a, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x1e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x3a,
	0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x08, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x73, 0x65, 0x72, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x08, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x10, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x22,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x12, 0x5c, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52,
	0x0e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12,
	0x4e, 0x0a, 0x08, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x12,
	0x4a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x2b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x1a, 0x99, 0x01, 0x0a, 0x11,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x58, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x35,
	0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xae, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6d, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xe9, 0x23, 0x0a, 0x0e, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52,
	0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x36, 0x0a,
	0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x07, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x2f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x45, 0x76, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x45, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x13, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x14, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63,
	0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x13, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x64, 0x0a,
	0x1b, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x19, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x12, 0x54, 0x0a, 0x15, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x14, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0d, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x8d, 0x01, 0x0a, 0x1c, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x61,
	0x6e, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x18, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x41,
	0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x19, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x43, 0x6f,
	0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x76, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x58, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0x5a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x58, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6a, 0x0a,
	0x0f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0xe4, 0x07, 0x0a, 0x18, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x41, 0x6e,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x56, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x1e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x72, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x76,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x41, 0x6e,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a, 0x83, 0x03, 0x0a, 0x06, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x58, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x32, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x06,
	0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x1a, 0xab, 0x06, 0x0a, 0x17, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x79, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x71, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x76, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x52, 0x09,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x64, 0x0a, 0x0e, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x0e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x1a,
	0xbc, 0x02, 0x0a, 0x08, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x75, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x37, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2d, 0x63, 0x6f, 0x6d, 0x62, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93,
	0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x8f,
	0x01, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x58, 0x12, 0x3b, 0x0a,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00,
	0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x3a, 0x06,
	0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x1a, 0x8e, 0x01, 0x0a, 0x09, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x12, 0x3b,
	0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x3a,
	0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x1a, 0xa6, 0x06, 0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77,
	0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33,
	0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e,
	0x6f, 0x74, 0x65, 0x12, 0x5f, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x49, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x58, 0x52, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x30, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x1a, 0x96, 0x02, 0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x58, 0x12, 0x51, 0x0a, 0x10,
	0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f,
	0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12,
	0x3e, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0xc7, 0x01, 0x9a, 0x86, 0x93,
	0xa0, 0x08, 0xc0, 0x01, 0x28, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29,
	0x20, 0x2b, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e,
	0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x2b,
	0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x28, 0x29, 0x20, 0x2b, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x2b, 0x20, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x41, 0x6e, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x2b, 0x20, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x62, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x20,
	0x20, 0x3c, 0x20, 0x32, 0x1a, 0xb6, 0x02, 0x0a, 0x0c, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x76, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a,
	0x6c, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x65, 0x74, 0x2f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x69, 0x6e, 0x67, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xa3, 0x04,
	0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x76, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0xde, 0x01, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x12, 0x51, 0x0a,
	0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52,
	0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a,
	0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x3a, 0x8c, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x9a, 0xaf, 0xae, 0xa4, 0x0b, 0x42,
	0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x69, 0x6d,
	0x70, 0x6c, 0x69, 0x65, 0x73, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x28, 0x27, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x28, 0x5b, 0x41, 0x2d, 0x5a, 0x61,
	0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5f, 0x5d, 0x29, 0x7b, 0x31, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24,
	0x27, 0x29, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x42, 0x81, 0x01, 0x98, 0xc6, 0xb0, 0xb5, 0x07,
	0x05, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x01, 0x5a, 0x5e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2f, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_rawDescData = file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_rawDesc
)

func file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_rawDescData
}

var file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_goTypes = []interface{}{
	(*EvidenceVariable)(nil),                                                 // 0: google.fhir.r5.core.EvidenceVariable
	(*EvidenceVariable_VersionAlgorithmX)(nil),                               // 1: google.fhir.r5.core.EvidenceVariable.VersionAlgorithmX
	(*EvidenceVariable_StatusCode)(nil),                                      // 2: google.fhir.r5.core.EvidenceVariable.StatusCode
	(*EvidenceVariable_Characteristic)(nil),                                  // 3: google.fhir.r5.core.EvidenceVariable.Characteristic
	(*EvidenceVariable_HandlingCode)(nil),                                    // 4: google.fhir.r5.core.EvidenceVariable.HandlingCode
	(*EvidenceVariable_Category)(nil),                                        // 5: google.fhir.r5.core.EvidenceVariable.Category
	(*EvidenceVariable_Characteristic_DefinitionByTypeAndValue)(nil),         // 6: google.fhir.r5.core.EvidenceVariable.Characteristic.DefinitionByTypeAndValue
	(*EvidenceVariable_Characteristic_DefinitionByCombination)(nil),          // 7: google.fhir.r5.core.EvidenceVariable.Characteristic.DefinitionByCombination
	(*EvidenceVariable_Characteristic_InstancesX)(nil),                       // 8: google.fhir.r5.core.EvidenceVariable.Characteristic.InstancesX
	(*EvidenceVariable_Characteristic_DurationX)(nil),                        // 9: google.fhir.r5.core.EvidenceVariable.Characteristic.DurationX
	(*EvidenceVariable_Characteristic_TimeFromEvent)(nil),                    // 10: google.fhir.r5.core.EvidenceVariable.Characteristic.TimeFromEvent
	(*EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX)(nil),  // 11: google.fhir.r5.core.EvidenceVariable.Characteristic.DefinitionByTypeAndValue.ValueX
	(*EvidenceVariable_Characteristic_DefinitionByCombination_CodeType)(nil), // 12: google.fhir.r5.core.EvidenceVariable.Characteristic.DefinitionByCombination.CodeType
	(*EvidenceVariable_Characteristic_TimeFromEvent_EventX)(nil),             // 13: google.fhir.r5.core.EvidenceVariable.Characteristic.TimeFromEvent.EventX
	(*EvidenceVariable_Category_ValueX)(nil),                                 // 14: google.fhir.r5.core.EvidenceVariable.Category.ValueX
	(*datatypes_go_proto.Id)(nil),                                            // 15: google.fhir.r5.core.Id
	(*datatypes_go_proto.Meta)(nil),                                          // 16: google.fhir.r5.core.Meta
	(*datatypes_go_proto.Uri)(nil),                                           // 17: google.fhir.r5.core.Uri
	(*datatypes_go_proto.Code)(nil),                                          // 18: google.fhir.r5.core.Code
	(*datatypes_go_proto.Narrative)(nil),                                     // 19: google.fhir.r5.core.Narrative
	(*anypb.Any)(nil),                                                        // 20: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),                                     // 21: google.fhir.r5.core.Extension
	(*datatypes_go_proto.Identifier)(nil),                                    // 22: google.fhir.r5.core.Identifier
	(*datatypes_go_proto.String)(nil),                                        // 23: google.fhir.r5.core.String
	(*datatypes_go_proto.Boolean)(nil),                                       // 24: google.fhir.r5.core.Boolean
	(*datatypes_go_proto.DateTime)(nil),                                      // 25: google.fhir.r5.core.DateTime
	(*datatypes_go_proto.ContactDetail)(nil),                                 // 26: google.fhir.r5.core.ContactDetail
	(*datatypes_go_proto.Markdown)(nil),                                      // 27: google.fhir.r5.core.Markdown
	(*datatypes_go_proto.Annotation)(nil),                                    // 28: google.fhir.r5.core.Annotation
	(*datatypes_go_proto.UsageContext)(nil),                                  // 29: google.fhir.r5.core.UsageContext
	(*datatypes_go_proto.Date)(nil),                                          // 30: google.fhir.r5.core.Date
	(*datatypes_go_proto.Period)(nil),                                        // 31: google.fhir.r5.core.Period
	(*datatypes_go_proto.RelatedArtifact)(nil),                               // 32: google.fhir.r5.core.RelatedArtifact
	(*datatypes_go_proto.Coding)(nil),                                        // 33: google.fhir.r5.core.Coding
	(codes_go_proto.PublicationStatusCode_Value)(0),                          // 34: google.fhir.r5.core.PublicationStatusCode.Value
	(*datatypes_go_proto.Reference)(nil),                                     // 35: google.fhir.r5.core.Reference
	(*datatypes_go_proto.Canonical)(nil),                                     // 36: google.fhir.r5.core.Canonical
	(*datatypes_go_proto.CodeableConcept)(nil),                               // 37: google.fhir.r5.core.CodeableConcept
	(*datatypes_go_proto.Expression)(nil),                                    // 38: google.fhir.r5.core.Expression
	(codes_go_proto.EvidenceVariableHandlingCode_Value)(0),                   // 39: google.fhir.r5.core.EvidenceVariableHandlingCode.Value
	(*datatypes_go_proto.PositiveInt)(nil),                                   // 40: google.fhir.r5.core.PositiveInt
	(*datatypes_go_proto.Quantity)(nil),                                      // 41: google.fhir.r5.core.Quantity
	(*datatypes_go_proto.Range)(nil),                                         // 42: google.fhir.r5.core.Range
	(codes_go_proto.CharacteristicCombinationCode_Value)(0),                  // 43: google.fhir.r5.core.CharacteristicCombinationCode.Value
}
var file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_depIdxs = []int32{
	15,  // 0: google.fhir.r5.core.EvidenceVariable.id:type_name -> google.fhir.r5.core.Id
	16,  // 1: google.fhir.r5.core.EvidenceVariable.meta:type_name -> google.fhir.r5.core.Meta
	17,  // 2: google.fhir.r5.core.EvidenceVariable.implicit_rules:type_name -> google.fhir.r5.core.Uri
	18,  // 3: google.fhir.r5.core.EvidenceVariable.language:type_name -> google.fhir.r5.core.Code
	19,  // 4: google.fhir.r5.core.EvidenceVariable.text:type_name -> google.fhir.r5.core.Narrative
	20,  // 5: google.fhir.r5.core.EvidenceVariable.contained:type_name -> google.protobuf.Any
	21,  // 6: google.fhir.r5.core.EvidenceVariable.extension:type_name -> google.fhir.r5.core.Extension
	21,  // 7: google.fhir.r5.core.EvidenceVariable.modifier_extension:type_name -> google.fhir.r5.core.Extension
	17,  // 8: google.fhir.r5.core.EvidenceVariable.url:type_name -> google.fhir.r5.core.Uri
	22,  // 9: google.fhir.r5.core.EvidenceVariable.identifier:type_name -> google.fhir.r5.core.Identifier
	23,  // 10: google.fhir.r5.core.EvidenceVariable.version:type_name -> google.fhir.r5.core.String
	1,   // 11: google.fhir.r5.core.EvidenceVariable.version_algorithm:type_name -> google.fhir.r5.core.EvidenceVariable.VersionAlgorithmX
	23,  // 12: google.fhir.r5.core.EvidenceVariable.name:type_name -> google.fhir.r5.core.String
	23,  // 13: google.fhir.r5.core.EvidenceVariable.title:type_name -> google.fhir.r5.core.String
	23,  // 14: google.fhir.r5.core.EvidenceVariable.short_title:type_name -> google.fhir.r5.core.String
	2,   // 15: google.fhir.r5.core.EvidenceVariable.status:type_name -> google.fhir.r5.core.EvidenceVariable.StatusCode
	24,  // 16: google.fhir.r5.core.EvidenceVariable.experimental:type_name -> google.fhir.r5.core.Boolean
	25,  // 17: google.fhir.r5.core.EvidenceVariable.date:type_name -> google.fhir.r5.core.DateTime
	23,  // 18: google.fhir.r5.core.EvidenceVariable.publisher:type_name -> google.fhir.r5.core.String
	26,  // 19: google.fhir.r5.core.EvidenceVariable.contact:type_name -> google.fhir.r5.core.ContactDetail
	27,  // 20: google.fhir.r5.core.EvidenceVariable.description:type_name -> google.fhir.r5.core.Markdown
	28,  // 21: google.fhir.r5.core.EvidenceVariable.note:type_name -> google.fhir.r5.core.Annotation
	29,  // 22: google.fhir.r5.core.EvidenceVariable.use_context:type_name -> google.fhir.r5.core.UsageContext
	27,  // 23: google.fhir.r5.core.EvidenceVariable.purpose:type_name -> google.fhir.r5.core.Markdown
	27,  // 24: google.fhir.r5.core.EvidenceVariable.copyright:type_name -> google.fhir.r5.core.Markdown
	23,  // 25: google.fhir.r5.core.EvidenceVariable.copyright_label:type_name -> google.fhir.r5.core.String
	30,  // 26: google.fhir.r5.core.EvidenceVariable.approval_date:type_name -> google.fhir.r5.core.Date
	30,  // 27: google.fhir.r5.core.EvidenceVariable.last_review_date:type_name -> google.fhir.r5.core.Date
	31,  // 28: google.fhir.r5.core.EvidenceVariable.effective_period:type_name -> google.fhir.r5.core.Period
	26,  // 29: google.fhir.r5.core.EvidenceVariable.author:type_name -> google.fhir.r5.core.ContactDetail
	26,  // 30: google.fhir.r5.core.EvidenceVariable.editor:type_name -> google.fhir.r5.core.ContactDetail
	26,  // 31: google.fhir.r5.core.EvidenceVariable.reviewer:type_name -> google.fhir.r5.core.ContactDetail
	26,  // 32: google.fhir.r5.core.EvidenceVariable.endorser:type_name -> google.fhir.r5.core.ContactDetail
	32,  // 33: google.fhir.r5.core.EvidenceVariable.related_artifact:type_name -> google.fhir.r5.core.RelatedArtifact
	24,  // 34: google.fhir.r5.core.EvidenceVariable.actual:type_name -> google.fhir.r5.core.Boolean
	3,   // 35: google.fhir.r5.core.EvidenceVariable.characteristic:type_name -> google.fhir.r5.core.EvidenceVariable.Characteristic
	4,   // 36: google.fhir.r5.core.EvidenceVariable.handling:type_name -> google.fhir.r5.core.EvidenceVariable.HandlingCode
	5,   // 37: google.fhir.r5.core.EvidenceVariable.category:type_name -> google.fhir.r5.core.EvidenceVariable.Category
	23,  // 38: google.fhir.r5.core.EvidenceVariable.VersionAlgorithmX.string_value:type_name -> google.fhir.r5.core.String
	33,  // 39: google.fhir.r5.core.EvidenceVariable.VersionAlgorithmX.coding:type_name -> google.fhir.r5.core.Coding
	34,  // 40: google.fhir.r5.core.EvidenceVariable.StatusCode.value:type_name -> google.fhir.r5.core.PublicationStatusCode.Value
	23,  // 41: google.fhir.r5.core.EvidenceVariable.StatusCode.id:type_name -> google.fhir.r5.core.String
	21,  // 42: google.fhir.r5.core.EvidenceVariable.StatusCode.extension:type_name -> google.fhir.r5.core.Extension
	23,  // 43: google.fhir.r5.core.EvidenceVariable.Characteristic.id:type_name -> google.fhir.r5.core.String
	21,  // 44: google.fhir.r5.core.EvidenceVariable.Characteristic.extension:type_name -> google.fhir.r5.core.Extension
	21,  // 45: google.fhir.r5.core.EvidenceVariable.Characteristic.modifier_extension:type_name -> google.fhir.r5.core.Extension
	15,  // 46: google.fhir.r5.core.EvidenceVariable.Characteristic.link_id:type_name -> google.fhir.r5.core.Id
	27,  // 47: google.fhir.r5.core.EvidenceVariable.Characteristic.description:type_name -> google.fhir.r5.core.Markdown
	28,  // 48: google.fhir.r5.core.EvidenceVariable.Characteristic.note:type_name -> google.fhir.r5.core.Annotation
	24,  // 49: google.fhir.r5.core.EvidenceVariable.Characteristic.exclude:type_name -> google.fhir.r5.core.Boolean
	35,  // 50: google.fhir.r5.core.EvidenceVariable.Characteristic.definition_reference:type_name -> google.fhir.r5.core.Reference
	36,  // 51: google.fhir.r5.core.EvidenceVariable.Characteristic.definition_canonical:type_name -> google.fhir.r5.core.Canonical
	37,  // 52: google.fhir.r5.core.EvidenceVariable.Characteristic.definition_codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	38,  // 53: google.fhir.r5.core.EvidenceVariable.Characteristic.definition_expression:type_name -> google.fhir.r5.core.Expression
	15,  // 54: google.fhir.r5.core.EvidenceVariable.Characteristic.definition_id:type_name -> google.fhir.r5.core.Id
	6,   // 55: google.fhir.r5.core.EvidenceVariable.Characteristic.definition_by_type_and_value:type_name -> google.fhir.r5.core.EvidenceVariable.Characteristic.DefinitionByTypeAndValue
	7,   // 56: google.fhir.r5.core.EvidenceVariable.Characteristic.definition_by_combination:type_name -> google.fhir.r5.core.EvidenceVariable.Characteristic.DefinitionByCombination
	8,   // 57: google.fhir.r5.core.EvidenceVariable.Characteristic.instances:type_name -> google.fhir.r5.core.EvidenceVariable.Characteristic.InstancesX
	9,   // 58: google.fhir.r5.core.EvidenceVariable.Characteristic.duration:type_name -> google.fhir.r5.core.EvidenceVariable.Characteristic.DurationX
	10,  // 59: google.fhir.r5.core.EvidenceVariable.Characteristic.time_from_event:type_name -> google.fhir.r5.core.EvidenceVariable.Characteristic.TimeFromEvent
	39,  // 60: google.fhir.r5.core.EvidenceVariable.HandlingCode.value:type_name -> google.fhir.r5.core.EvidenceVariableHandlingCode.Value
	23,  // 61: google.fhir.r5.core.EvidenceVariable.HandlingCode.id:type_name -> google.fhir.r5.core.String
	21,  // 62: google.fhir.r5.core.EvidenceVariable.HandlingCode.extension:type_name -> google.fhir.r5.core.Extension
	23,  // 63: google.fhir.r5.core.EvidenceVariable.Category.id:type_name -> google.fhir.r5.core.String
	21,  // 64: google.fhir.r5.core.EvidenceVariable.Category.extension:type_name -> google.fhir.r5.core.Extension
	21,  // 65: google.fhir.r5.core.EvidenceVariable.Category.modifier_extension:type_name -> google.fhir.r5.core.Extension
	23,  // 66: google.fhir.r5.core.EvidenceVariable.Category.name:type_name -> google.fhir.r5.core.String
	14,  // 67: google.fhir.r5.core.EvidenceVariable.Category.value:type_name -> google.fhir.r5.core.EvidenceVariable.Category.ValueX
	23,  // 68: google.fhir.r5.core.EvidenceVariable.Characteristic.DefinitionByTypeAndValue.id:type_name -> google.fhir.r5.core.String
	21,  // 69: google.fhir.r5.core.EvidenceVariable.Characteristic.DefinitionByTypeAndValue.extension:type_name -> google.fhir.r5.core.Extension
	21,  // 70: google.fhir.r5.core.EvidenceVariable.Characteristic.DefinitionByTypeAndValue.modifier_extension:type_name -> google.fhir.r5.core.Extension
	37,  // 71: google.fhir.r5.core.EvidenceVariable.Characteristic.DefinitionByTypeAndValue.type:type_name -> google.fhir.r5.core.CodeableConcept
	37,  // 72: google.fhir.r5.core.EvidenceVariable.Characteristic.DefinitionByTypeAndValue.method:type_name -> google.fhir.r5.core.CodeableConcept
	35,  // 73: google.fhir.r5.core.EvidenceVariable.Characteristic.DefinitionByTypeAndValue.device:type_name -> google.fhir.r5.core.Reference
	11,  // 74: google.fhir.r5.core.EvidenceVariable.Characteristic.DefinitionByTypeAndValue.value:type_name -> google.fhir.r5.core.EvidenceVariable.Characteristic.DefinitionByTypeAndValue.ValueX
	37,  // 75: google.fhir.r5.core.EvidenceVariable.Characteristic.DefinitionByTypeAndValue.offset:type_name -> google.fhir.r5.core.CodeableConcept
	23,  // 76: google.fhir.r5.core.EvidenceVariable.Characteristic.DefinitionByCombination.id:type_name -> google.fhir.r5.core.String
	21,  // 77: google.fhir.r5.core.EvidenceVariable.Characteristic.DefinitionByCombination.extension:type_name -> google.fhir.r5.core.Extension
	21,  // 78: google.fhir.r5.core.EvidenceVariable.Characteristic.DefinitionByCombination.modifier_extension:type_name -> google.fhir.r5.core.Extension
	12,  // 79: google.fhir.r5.core.EvidenceVariable.Characteristic.DefinitionByCombination.code:type_name -> google.fhir.r5.core.EvidenceVariable.Characteristic.DefinitionByCombination.CodeType
	40,  // 80: google.fhir.r5.core.EvidenceVariable.Characteristic.DefinitionByCombination.threshold:type_name -> google.fhir.r5.core.PositiveInt
	3,   // 81: google.fhir.r5.core.EvidenceVariable.Characteristic.DefinitionByCombination.characteristic:type_name -> google.fhir.r5.core.EvidenceVariable.Characteristic
	41,  // 82: google.fhir.r5.core.EvidenceVariable.Characteristic.InstancesX.quantity:type_name -> google.fhir.r5.core.Quantity
	42,  // 83: google.fhir.r5.core.EvidenceVariable.Characteristic.InstancesX.range:type_name -> google.fhir.r5.core.Range
	41,  // 84: google.fhir.r5.core.EvidenceVariable.Characteristic.DurationX.quantity:type_name -> google.fhir.r5.core.Quantity
	42,  // 85: google.fhir.r5.core.EvidenceVariable.Characteristic.DurationX.range:type_name -> google.fhir.r5.core.Range
	23,  // 86: google.fhir.r5.core.EvidenceVariable.Characteristic.TimeFromEvent.id:type_name -> google.fhir.r5.core.String
	21,  // 87: google.fhir.r5.core.EvidenceVariable.Characteristic.TimeFromEvent.extension:type_name -> google.fhir.r5.core.Extension
	21,  // 88: google.fhir.r5.core.EvidenceVariable.Characteristic.TimeFromEvent.modifier_extension:type_name -> google.fhir.r5.core.Extension
	27,  // 89: google.fhir.r5.core.EvidenceVariable.Characteristic.TimeFromEvent.description:type_name -> google.fhir.r5.core.Markdown
	28,  // 90: google.fhir.r5.core.EvidenceVariable.Characteristic.TimeFromEvent.note:type_name -> google.fhir.r5.core.Annotation
	13,  // 91: google.fhir.r5.core.EvidenceVariable.Characteristic.TimeFromEvent.event:type_name -> google.fhir.r5.core.EvidenceVariable.Characteristic.TimeFromEvent.EventX
	41,  // 92: google.fhir.r5.core.EvidenceVariable.Characteristic.TimeFromEvent.quantity:type_name -> google.fhir.r5.core.Quantity
	42,  // 93: google.fhir.r5.core.EvidenceVariable.Characteristic.TimeFromEvent.range:type_name -> google.fhir.r5.core.Range
	37,  // 94: google.fhir.r5.core.EvidenceVariable.Characteristic.DefinitionByTypeAndValue.ValueX.codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	24,  // 95: google.fhir.r5.core.EvidenceVariable.Characteristic.DefinitionByTypeAndValue.ValueX.boolean:type_name -> google.fhir.r5.core.Boolean
	41,  // 96: google.fhir.r5.core.EvidenceVariable.Characteristic.DefinitionByTypeAndValue.ValueX.quantity:type_name -> google.fhir.r5.core.Quantity
	42,  // 97: google.fhir.r5.core.EvidenceVariable.Characteristic.DefinitionByTypeAndValue.ValueX.range:type_name -> google.fhir.r5.core.Range
	35,  // 98: google.fhir.r5.core.EvidenceVariable.Characteristic.DefinitionByTypeAndValue.ValueX.reference:type_name -> google.fhir.r5.core.Reference
	15,  // 99: google.fhir.r5.core.EvidenceVariable.Characteristic.DefinitionByTypeAndValue.ValueX.id:type_name -> google.fhir.r5.core.Id
	43,  // 100: google.fhir.r5.core.EvidenceVariable.Characteristic.DefinitionByCombination.CodeType.value:type_name -> google.fhir.r5.core.CharacteristicCombinationCode.Value
	23,  // 101: google.fhir.r5.core.EvidenceVariable.Characteristic.DefinitionByCombination.CodeType.id:type_name -> google.fhir.r5.core.String
	21,  // 102: google.fhir.r5.core.EvidenceVariable.Characteristic.DefinitionByCombination.CodeType.extension:type_name -> google.fhir.r5.core.Extension
	37,  // 103: google.fhir.r5.core.EvidenceVariable.Characteristic.TimeFromEvent.EventX.codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	35,  // 104: google.fhir.r5.core.EvidenceVariable.Characteristic.TimeFromEvent.EventX.reference:type_name -> google.fhir.r5.core.Reference
	25,  // 105: google.fhir.r5.core.EvidenceVariable.Characteristic.TimeFromEvent.EventX.date_time:type_name -> google.fhir.r5.core.DateTime
	15,  // 106: google.fhir.r5.core.EvidenceVariable.Characteristic.TimeFromEvent.EventX.id:type_name -> google.fhir.r5.core.Id
	37,  // 107: google.fhir.r5.core.EvidenceVariable.Category.ValueX.codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	41,  // 108: google.fhir.r5.core.EvidenceVariable.Category.ValueX.quantity:type_name -> google.fhir.r5.core.Quantity
	42,  // 109: google.fhir.r5.core.EvidenceVariable.Category.ValueX.range:type_name -> google.fhir.r5.core.Range
	110, // [110:110] is the sub-list for method output_type
	110, // [110:110] is the sub-list for method input_type
	110, // [110:110] is the sub-list for extension type_name
	110, // [110:110] is the sub-list for extension extendee
	0,   // [0:110] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_init() }
func file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_init() {
	if File_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvidenceVariable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvidenceVariable_VersionAlgorithmX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvidenceVariable_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvidenceVariable_Characteristic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvidenceVariable_HandlingCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvidenceVariable_Category); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvidenceVariable_Characteristic_DefinitionByTypeAndValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvidenceVariable_Characteristic_DefinitionByCombination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvidenceVariable_Characteristic_InstancesX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvidenceVariable_Characteristic_DurationX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvidenceVariable_Characteristic_TimeFromEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvidenceVariable_Characteristic_DefinitionByCombination_CodeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvidenceVariable_Characteristic_TimeFromEvent_EventX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvidenceVariable_Category_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*EvidenceVariable_VersionAlgorithmX_StringValue)(nil),
		(*EvidenceVariable_VersionAlgorithmX_Coding)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*EvidenceVariable_Characteristic_InstancesX_Quantity)(nil),
		(*EvidenceVariable_Characteristic_InstancesX_Range)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*EvidenceVariable_Characteristic_DurationX_Quantity)(nil),
		(*EvidenceVariable_Characteristic_DurationX_Range)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX_CodeableConcept)(nil),
		(*EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX_Boolean)(nil),
		(*EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX_Quantity)(nil),
		(*EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX_Range)(nil),
		(*EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX_Reference)(nil),
		(*EvidenceVariable_Characteristic_DefinitionByTypeAndValue_ValueX_Id)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*EvidenceVariable_Characteristic_TimeFromEvent_EventX_CodeableConcept)(nil),
		(*EvidenceVariable_Characteristic_TimeFromEvent_EventX_Reference)(nil),
		(*EvidenceVariable_Characteristic_TimeFromEvent_EventX_DateTime)(nil),
		(*EvidenceVariable_Characteristic_TimeFromEvent_EventX_Id)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*EvidenceVariable_Category_ValueX_CodeableConcept)(nil),
		(*EvidenceVariable_Category_ValueX_Quantity)(nil),
		(*EvidenceVariable_Category_ValueX_Range)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto = out.File
	file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_rawDesc = nil
	file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_goTypes = nil
	file_proto_google_fhir_proto_r5_core_resources_evidence_variable_proto_depIdxs = nil
}
