//    Copyright 2023 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.21.12
// source: proto/google/fhir/proto/r5/core/resources/device_definition.proto

package device_definition_go_proto

import (
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	codes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/codes_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for DeviceDefinition.
// An instance of a medical-related component of a medical device.
// See http://hl7.org/fhir/StructureDefinition/DeviceDefinition
type DeviceDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*anypb.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Additional information to describe the device
	Description *datatypes_go_proto.Markdown `protobuf:"bytes,32,opt,name=description,proto3" json:"description,omitempty"`
	// Instance identifier
	Identifier           []*datatypes_go_proto.Identifier         `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	UdiDeviceIdentifier  []*DeviceDefinition_UdiDeviceIdentifier  `protobuf:"bytes,11,rep,name=udi_device_identifier,json=udiDeviceIdentifier,proto3" json:"udi_device_identifier,omitempty"`
	RegulatoryIdentifier []*DeviceDefinition_RegulatoryIdentifier `protobuf:"bytes,33,rep,name=regulatory_identifier,json=regulatoryIdentifier,proto3" json:"regulatory_identifier,omitempty"`
	// The part number or catalog number of the device
	PartNumber *datatypes_go_proto.String `protobuf:"bytes,34,opt,name=part_number,json=partNumber,proto3" json:"part_number,omitempty"`
	// Name of device manufacturer
	Manufacturer *datatypes_go_proto.Reference  `protobuf:"bytes,35,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	DeviceName   []*DeviceDefinition_DeviceName `protobuf:"bytes,13,rep,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	// The catalog or model number for the device for example as defined by the
	// manufacturer
	ModelNumber    *datatypes_go_proto.String         `protobuf:"bytes,14,opt,name=model_number,json=modelNumber,proto3" json:"model_number,omitempty"`
	Classification []*DeviceDefinition_Classification `protobuf:"bytes,36,rep,name=classification,proto3" json:"classification,omitempty"`
	ConformsTo     []*DeviceDefinition_ConformsTo     `protobuf:"bytes,37,rep,name=conforms_to,json=conformsTo,proto3" json:"conforms_to,omitempty"`
	HasPart        []*DeviceDefinition_HasPart        `protobuf:"bytes,38,rep,name=has_part,json=hasPart,proto3" json:"has_part,omitempty"`
	Packaging      []*DeviceDefinition_Packaging      `protobuf:"bytes,39,rep,name=packaging,proto3" json:"packaging,omitempty"`
	Version        []*DeviceDefinition_Version        `protobuf:"bytes,40,rep,name=version,proto3" json:"version,omitempty"`
	// Safety characteristics of the device
	Safety []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,18,rep,name=safety,proto3" json:"safety,omitempty"`
	// Shelf Life and storage information
	ShelfLifeStorage []*datatypes_go_proto.ProductShelfLife `protobuf:"bytes,19,rep,name=shelf_life_storage,json=shelfLifeStorage,proto3" json:"shelf_life_storage,omitempty"`
	// Language code for the human-readable text strings produced by the device
	// (all supported)
	LanguageCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,21,rep,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
	Property     []*DeviceDefinition_Property          `protobuf:"bytes,23,rep,name=property,proto3" json:"property,omitempty"`
	// Organization responsible for device
	Owner *datatypes_go_proto.Reference `protobuf:"bytes,24,opt,name=owner,proto3" json:"owner,omitempty"`
	// Details for human/organization for support
	Contact []*datatypes_go_proto.ContactPoint `protobuf:"bytes,25,rep,name=contact,proto3" json:"contact,omitempty"`
	Link    []*DeviceDefinition_Link           `protobuf:"bytes,41,rep,name=link,proto3" json:"link,omitempty"`
	// Device notes and comments
	Note                      []*datatypes_go_proto.Annotation                  `protobuf:"bytes,28,rep,name=note,proto3" json:"note,omitempty"`
	Material                  []*DeviceDefinition_Material                      `protobuf:"bytes,31,rep,name=material,proto3" json:"material,omitempty"`
	ProductionIdentifierInUdi []*DeviceDefinition_ProductionIdentifierInUDICode `protobuf:"bytes,42,rep,name=production_identifier_in_udi,json=productionIdentifierInUDI,proto3" json:"production_identifier_in_udi,omitempty"`
	Guideline                 *DeviceDefinition_Guideline                       `protobuf:"bytes,43,opt,name=guideline,proto3" json:"guideline,omitempty"`
	CorrectiveAction          *DeviceDefinition_CorrectiveAction                `protobuf:"bytes,44,opt,name=corrective_action,json=correctiveAction,proto3" json:"corrective_action,omitempty"`
	ChargeItem                []*DeviceDefinition_ChargeItem                    `protobuf:"bytes,45,rep,name=charge_item,json=chargeItem,proto3" json:"charge_item,omitempty"`
}

func (x *DeviceDefinition) Reset() {
	*x = DeviceDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceDefinition) ProtoMessage() {}

func (x *DeviceDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceDefinition.ProtoReflect.Descriptor instead.
func (*DeviceDefinition) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_rawDescGZIP(), []int{0}
}

func (x *DeviceDefinition) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceDefinition) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *DeviceDefinition) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *DeviceDefinition) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *DeviceDefinition) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *DeviceDefinition) GetContained() []*anypb.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *DeviceDefinition) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DeviceDefinition) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *DeviceDefinition) GetDescription() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *DeviceDefinition) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *DeviceDefinition) GetUdiDeviceIdentifier() []*DeviceDefinition_UdiDeviceIdentifier {
	if x != nil {
		return x.UdiDeviceIdentifier
	}
	return nil
}

func (x *DeviceDefinition) GetRegulatoryIdentifier() []*DeviceDefinition_RegulatoryIdentifier {
	if x != nil {
		return x.RegulatoryIdentifier
	}
	return nil
}

func (x *DeviceDefinition) GetPartNumber() *datatypes_go_proto.String {
	if x != nil {
		return x.PartNumber
	}
	return nil
}

func (x *DeviceDefinition) GetManufacturer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Manufacturer
	}
	return nil
}

func (x *DeviceDefinition) GetDeviceName() []*DeviceDefinition_DeviceName {
	if x != nil {
		return x.DeviceName
	}
	return nil
}

func (x *DeviceDefinition) GetModelNumber() *datatypes_go_proto.String {
	if x != nil {
		return x.ModelNumber
	}
	return nil
}

func (x *DeviceDefinition) GetClassification() []*DeviceDefinition_Classification {
	if x != nil {
		return x.Classification
	}
	return nil
}

func (x *DeviceDefinition) GetConformsTo() []*DeviceDefinition_ConformsTo {
	if x != nil {
		return x.ConformsTo
	}
	return nil
}

func (x *DeviceDefinition) GetHasPart() []*DeviceDefinition_HasPart {
	if x != nil {
		return x.HasPart
	}
	return nil
}

func (x *DeviceDefinition) GetPackaging() []*DeviceDefinition_Packaging {
	if x != nil {
		return x.Packaging
	}
	return nil
}

func (x *DeviceDefinition) GetVersion() []*DeviceDefinition_Version {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *DeviceDefinition) GetSafety() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Safety
	}
	return nil
}

func (x *DeviceDefinition) GetShelfLifeStorage() []*datatypes_go_proto.ProductShelfLife {
	if x != nil {
		return x.ShelfLifeStorage
	}
	return nil
}

func (x *DeviceDefinition) GetLanguageCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.LanguageCode
	}
	return nil
}

func (x *DeviceDefinition) GetProperty() []*DeviceDefinition_Property {
	if x != nil {
		return x.Property
	}
	return nil
}

func (x *DeviceDefinition) GetOwner() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *DeviceDefinition) GetContact() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *DeviceDefinition) GetLink() []*DeviceDefinition_Link {
	if x != nil {
		return x.Link
	}
	return nil
}

func (x *DeviceDefinition) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *DeviceDefinition) GetMaterial() []*DeviceDefinition_Material {
	if x != nil {
		return x.Material
	}
	return nil
}

func (x *DeviceDefinition) GetProductionIdentifierInUdi() []*DeviceDefinition_ProductionIdentifierInUDICode {
	if x != nil {
		return x.ProductionIdentifierInUdi
	}
	return nil
}

func (x *DeviceDefinition) GetGuideline() *DeviceDefinition_Guideline {
	if x != nil {
		return x.Guideline
	}
	return nil
}

func (x *DeviceDefinition) GetCorrectiveAction() *DeviceDefinition_CorrectiveAction {
	if x != nil {
		return x.CorrectiveAction
	}
	return nil
}

func (x *DeviceDefinition) GetChargeItem() []*DeviceDefinition_ChargeItem {
	if x != nil {
		return x.ChargeItem
	}
	return nil
}

// Unique Device Identifier (UDI) Barcode string
type DeviceDefinition_UdiDeviceIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The identifier that is to be associated with every Device that references
	// this DeviceDefintiion for the issuer and jurisdiction provided in the
	// DeviceDefinition.udiDeviceIdentifier
	DeviceIdentifier *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=device_identifier,json=deviceIdentifier,proto3" json:"device_identifier,omitempty"`
	// The organization that assigns the identifier algorithm
	Issuer *datatypes_go_proto.Uri `protobuf:"bytes,5,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// The jurisdiction to which the deviceIdentifier applies
	Jurisdiction       *datatypes_go_proto.Uri                                                       `protobuf:"bytes,6,opt,name=jurisdiction,proto3" json:"jurisdiction,omitempty"`
	MarketDistribution []*DeviceDefinition_UdiDeviceIdentifier_UdiDeviceIdentifierMarketDistribution `protobuf:"bytes,7,rep,name=market_distribution,json=marketDistribution,proto3" json:"market_distribution,omitempty"`
}

func (x *DeviceDefinition_UdiDeviceIdentifier) Reset() {
	*x = DeviceDefinition_UdiDeviceIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceDefinition_UdiDeviceIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceDefinition_UdiDeviceIdentifier) ProtoMessage() {}

func (x *DeviceDefinition_UdiDeviceIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceDefinition_UdiDeviceIdentifier.ProtoReflect.Descriptor instead.
func (*DeviceDefinition_UdiDeviceIdentifier) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_rawDescGZIP(), []int{0, 0}
}

func (x *DeviceDefinition_UdiDeviceIdentifier) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceDefinition_UdiDeviceIdentifier) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DeviceDefinition_UdiDeviceIdentifier) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *DeviceDefinition_UdiDeviceIdentifier) GetDeviceIdentifier() *datatypes_go_proto.String {
	if x != nil {
		return x.DeviceIdentifier
	}
	return nil
}

func (x *DeviceDefinition_UdiDeviceIdentifier) GetIssuer() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Issuer
	}
	return nil
}

func (x *DeviceDefinition_UdiDeviceIdentifier) GetJurisdiction() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Jurisdiction
	}
	return nil
}

func (x *DeviceDefinition_UdiDeviceIdentifier) GetMarketDistribution() []*DeviceDefinition_UdiDeviceIdentifier_UdiDeviceIdentifierMarketDistribution {
	if x != nil {
		return x.MarketDistribution
	}
	return nil
}

// Regulatory identifier(s) associated with this device
type DeviceDefinition_RegulatoryIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension                 `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Type              *DeviceDefinition_RegulatoryIdentifier_TypeCode `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// The identifier itself
	DeviceIdentifier *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=device_identifier,json=deviceIdentifier,proto3" json:"device_identifier,omitempty"`
	// The organization that issued this identifier
	Issuer *datatypes_go_proto.Uri `protobuf:"bytes,6,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// The jurisdiction to which the deviceIdentifier applies
	Jurisdiction *datatypes_go_proto.Uri `protobuf:"bytes,7,opt,name=jurisdiction,proto3" json:"jurisdiction,omitempty"`
}

func (x *DeviceDefinition_RegulatoryIdentifier) Reset() {
	*x = DeviceDefinition_RegulatoryIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceDefinition_RegulatoryIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceDefinition_RegulatoryIdentifier) ProtoMessage() {}

func (x *DeviceDefinition_RegulatoryIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceDefinition_RegulatoryIdentifier.ProtoReflect.Descriptor instead.
func (*DeviceDefinition_RegulatoryIdentifier) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_rawDescGZIP(), []int{0, 1}
}

func (x *DeviceDefinition_RegulatoryIdentifier) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceDefinition_RegulatoryIdentifier) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DeviceDefinition_RegulatoryIdentifier) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *DeviceDefinition_RegulatoryIdentifier) GetType() *DeviceDefinition_RegulatoryIdentifier_TypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *DeviceDefinition_RegulatoryIdentifier) GetDeviceIdentifier() *datatypes_go_proto.String {
	if x != nil {
		return x.DeviceIdentifier
	}
	return nil
}

func (x *DeviceDefinition_RegulatoryIdentifier) GetIssuer() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Issuer
	}
	return nil
}

func (x *DeviceDefinition_RegulatoryIdentifier) GetJurisdiction() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Jurisdiction
	}
	return nil
}

// The name or names of the device as given by the manufacturer
type DeviceDefinition_DeviceName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// A name that is used to refer to the device
	Name *datatypes_go_proto.String            `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Type *DeviceDefinition_DeviceName_TypeCode `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *DeviceDefinition_DeviceName) Reset() {
	*x = DeviceDefinition_DeviceName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceDefinition_DeviceName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceDefinition_DeviceName) ProtoMessage() {}

func (x *DeviceDefinition_DeviceName) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceDefinition_DeviceName.ProtoReflect.Descriptor instead.
func (*DeviceDefinition_DeviceName) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_rawDescGZIP(), []int{0, 2}
}

func (x *DeviceDefinition_DeviceName) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceDefinition_DeviceName) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DeviceDefinition_DeviceName) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *DeviceDefinition_DeviceName) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *DeviceDefinition_DeviceName) GetType() *DeviceDefinition_DeviceName_TypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

// What kind of device or device system this is
type DeviceDefinition_Classification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// A classification or risk class of the device model
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Further information qualifying this classification of the device model
	Justification []*datatypes_go_proto.RelatedArtifact `protobuf:"bytes,5,rep,name=justification,proto3" json:"justification,omitempty"`
}

func (x *DeviceDefinition_Classification) Reset() {
	*x = DeviceDefinition_Classification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceDefinition_Classification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceDefinition_Classification) ProtoMessage() {}

func (x *DeviceDefinition_Classification) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceDefinition_Classification.ProtoReflect.Descriptor instead.
func (*DeviceDefinition_Classification) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_rawDescGZIP(), []int{0, 3}
}

func (x *DeviceDefinition_Classification) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceDefinition_Classification) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DeviceDefinition_Classification) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *DeviceDefinition_Classification) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *DeviceDefinition_Classification) GetJustification() []*datatypes_go_proto.RelatedArtifact {
	if x != nil {
		return x.Justification
	}
	return nil
}

// Identifies the standards, specifications, or formal guidances for the
// capabilities supported by the device
type DeviceDefinition_ConformsTo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Describes the common type of the standard, specification, or formal
	// guidance
	Category *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
	// Identifies the standard, specification, or formal guidance that the
	// device adheres to the Device Specification type
	Specification *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=specification,proto3" json:"specification,omitempty"`
	// The specific form or variant of the standard, specification or formal
	// guidance
	Version []*datatypes_go_proto.String `protobuf:"bytes,6,rep,name=version,proto3" json:"version,omitempty"`
	// Standard, regulation, certification, or guidance website, document, or
	// other publication, or similar, supporting the conformance
	Source []*datatypes_go_proto.RelatedArtifact `protobuf:"bytes,7,rep,name=source,proto3" json:"source,omitempty"`
}

func (x *DeviceDefinition_ConformsTo) Reset() {
	*x = DeviceDefinition_ConformsTo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceDefinition_ConformsTo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceDefinition_ConformsTo) ProtoMessage() {}

func (x *DeviceDefinition_ConformsTo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceDefinition_ConformsTo.ProtoReflect.Descriptor instead.
func (*DeviceDefinition_ConformsTo) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_rawDescGZIP(), []int{0, 4}
}

func (x *DeviceDefinition_ConformsTo) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceDefinition_ConformsTo) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DeviceDefinition_ConformsTo) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *DeviceDefinition_ConformsTo) GetCategory() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *DeviceDefinition_ConformsTo) GetSpecification() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Specification
	}
	return nil
}

func (x *DeviceDefinition_ConformsTo) GetVersion() []*datatypes_go_proto.String {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *DeviceDefinition_ConformsTo) GetSource() []*datatypes_go_proto.RelatedArtifact {
	if x != nil {
		return x.Source
	}
	return nil
}

// A device, part of the current one
type DeviceDefinition_HasPart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Reference to the part
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,4,opt,name=reference,proto3" json:"reference,omitempty"`
	// Number of occurrences of the part
	Count *datatypes_go_proto.Integer `protobuf:"bytes,5,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *DeviceDefinition_HasPart) Reset() {
	*x = DeviceDefinition_HasPart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceDefinition_HasPart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceDefinition_HasPart) ProtoMessage() {}

func (x *DeviceDefinition_HasPart) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceDefinition_HasPart.ProtoReflect.Descriptor instead.
func (*DeviceDefinition_HasPart) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_rawDescGZIP(), []int{0, 5}
}

func (x *DeviceDefinition_HasPart) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceDefinition_HasPart) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DeviceDefinition_HasPart) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *DeviceDefinition_HasPart) GetReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *DeviceDefinition_HasPart) GetCount() *datatypes_go_proto.Integer {
	if x != nil {
		return x.Count
	}
	return nil
}

// Information about the packaging of the device, i.e. how the device is
// packaged
type DeviceDefinition_Packaging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business identifier of the packaged medication
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,4,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// A code that defines the specific type of packaging
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// The number of items contained in the package (devices or sub-packages)
	Count       *datatypes_go_proto.Integer                        `protobuf:"bytes,6,opt,name=count,proto3" json:"count,omitempty"`
	Distributor []*DeviceDefinition_Packaging_PackagingDistributor `protobuf:"bytes,7,rep,name=distributor,proto3" json:"distributor,omitempty"`
	// Unique Device Identifier (UDI) Barcode string on the packaging
	UdiDeviceIdentifier []*DeviceDefinition_UdiDeviceIdentifier `protobuf:"bytes,8,rep,name=udi_device_identifier,json=udiDeviceIdentifier,proto3" json:"udi_device_identifier,omitempty"`
	// Allows packages within packages
	Packaging []*DeviceDefinition_Packaging `protobuf:"bytes,9,rep,name=packaging,proto3" json:"packaging,omitempty"`
}

func (x *DeviceDefinition_Packaging) Reset() {
	*x = DeviceDefinition_Packaging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceDefinition_Packaging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceDefinition_Packaging) ProtoMessage() {}

func (x *DeviceDefinition_Packaging) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceDefinition_Packaging.ProtoReflect.Descriptor instead.
func (*DeviceDefinition_Packaging) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_rawDescGZIP(), []int{0, 6}
}

func (x *DeviceDefinition_Packaging) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceDefinition_Packaging) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DeviceDefinition_Packaging) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *DeviceDefinition_Packaging) GetIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *DeviceDefinition_Packaging) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *DeviceDefinition_Packaging) GetCount() *datatypes_go_proto.Integer {
	if x != nil {
		return x.Count
	}
	return nil
}

func (x *DeviceDefinition_Packaging) GetDistributor() []*DeviceDefinition_Packaging_PackagingDistributor {
	if x != nil {
		return x.Distributor
	}
	return nil
}

func (x *DeviceDefinition_Packaging) GetUdiDeviceIdentifier() []*DeviceDefinition_UdiDeviceIdentifier {
	if x != nil {
		return x.UdiDeviceIdentifier
	}
	return nil
}

func (x *DeviceDefinition_Packaging) GetPackaging() []*DeviceDefinition_Packaging {
	if x != nil {
		return x.Packaging
	}
	return nil
}

// The version of the device or software
type DeviceDefinition_Version struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The type of the device version, e.g. manufacturer, approved, internal
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// The hardware or software module of the device to which the version
	// applies
	Component *datatypes_go_proto.Identifier `protobuf:"bytes,5,opt,name=component,proto3" json:"component,omitempty"`
	// The version text
	Value *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DeviceDefinition_Version) Reset() {
	*x = DeviceDefinition_Version{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceDefinition_Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceDefinition_Version) ProtoMessage() {}

func (x *DeviceDefinition_Version) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceDefinition_Version.ProtoReflect.Descriptor instead.
func (*DeviceDefinition_Version) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_rawDescGZIP(), []int{0, 7}
}

func (x *DeviceDefinition_Version) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceDefinition_Version) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DeviceDefinition_Version) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *DeviceDefinition_Version) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *DeviceDefinition_Version) GetComponent() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Component
	}
	return nil
}

func (x *DeviceDefinition_Version) GetValue() *datatypes_go_proto.String {
	if x != nil {
		return x.Value
	}
	return nil
}

// Inherent, essentially fixed, characteristics of this kind of device, e.g.,
// time properties, size, etc
type DeviceDefinition_Property struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Code that specifies the property being represented
	Type  *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Value *DeviceDefinition_Property_ValueX   `protobuf:"bytes,7,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DeviceDefinition_Property) Reset() {
	*x = DeviceDefinition_Property{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceDefinition_Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceDefinition_Property) ProtoMessage() {}

func (x *DeviceDefinition_Property) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceDefinition_Property.ProtoReflect.Descriptor instead.
func (*DeviceDefinition_Property) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_rawDescGZIP(), []int{0, 8}
}

func (x *DeviceDefinition_Property) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceDefinition_Property) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DeviceDefinition_Property) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *DeviceDefinition_Property) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *DeviceDefinition_Property) GetValue() *DeviceDefinition_Property_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

// An associated device, attached to, used with, communicating with or linking
// a previous or new device model to the focal device
type DeviceDefinition_Link struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The type indicates the relationship of the related device to the device
	// instance
	Relation *datatypes_go_proto.Coding `protobuf:"bytes,4,opt,name=relation,proto3" json:"relation,omitempty"`
	// A reference to the linked device
	RelatedDevice *datatypes_go_proto.CodeableReference `protobuf:"bytes,5,opt,name=related_device,json=relatedDevice,proto3" json:"related_device,omitempty"`
}

func (x *DeviceDefinition_Link) Reset() {
	*x = DeviceDefinition_Link{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceDefinition_Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceDefinition_Link) ProtoMessage() {}

func (x *DeviceDefinition_Link) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceDefinition_Link.ProtoReflect.Descriptor instead.
func (*DeviceDefinition_Link) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_rawDescGZIP(), []int{0, 9}
}

func (x *DeviceDefinition_Link) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceDefinition_Link) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DeviceDefinition_Link) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *DeviceDefinition_Link) GetRelation() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Relation
	}
	return nil
}

func (x *DeviceDefinition_Link) GetRelatedDevice() *datatypes_go_proto.CodeableReference {
	if x != nil {
		return x.RelatedDevice
	}
	return nil
}

// A substance used to create the material(s) of which the device is made
type DeviceDefinition_Material struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// A relevant substance that the device contains, may contain, or is made of
	Substance *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=substance,proto3" json:"substance,omitempty"`
	// Indicates an alternative material of the device
	Alternate *datatypes_go_proto.Boolean `protobuf:"bytes,5,opt,name=alternate,proto3" json:"alternate,omitempty"`
	// Whether the substance is a known or suspected allergen
	AllergenicIndicator *datatypes_go_proto.Boolean `protobuf:"bytes,6,opt,name=allergenic_indicator,json=allergenicIndicator,proto3" json:"allergenic_indicator,omitempty"`
}

func (x *DeviceDefinition_Material) Reset() {
	*x = DeviceDefinition_Material{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceDefinition_Material) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceDefinition_Material) ProtoMessage() {}

func (x *DeviceDefinition_Material) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceDefinition_Material.ProtoReflect.Descriptor instead.
func (*DeviceDefinition_Material) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_rawDescGZIP(), []int{0, 10}
}

func (x *DeviceDefinition_Material) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceDefinition_Material) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DeviceDefinition_Material) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *DeviceDefinition_Material) GetSubstance() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Substance
	}
	return nil
}

func (x *DeviceDefinition_Material) GetAlternate() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Alternate
	}
	return nil
}

func (x *DeviceDefinition_Material) GetAllergenicIndicator() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.AllergenicIndicator
	}
	return nil
}

// lot-number | manufactured-date | serial-number | expiration-date |
// biological-source | software-version
type DeviceDefinition_ProductionIdentifierInUDICode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.DeviceProductionIdentifierInUDICode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.DeviceProductionIdentifierInUDICode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                          `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DeviceDefinition_ProductionIdentifierInUDICode) Reset() {
	*x = DeviceDefinition_ProductionIdentifierInUDICode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceDefinition_ProductionIdentifierInUDICode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceDefinition_ProductionIdentifierInUDICode) ProtoMessage() {}

func (x *DeviceDefinition_ProductionIdentifierInUDICode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceDefinition_ProductionIdentifierInUDICode.ProtoReflect.Descriptor instead.
func (*DeviceDefinition_ProductionIdentifierInUDICode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_rawDescGZIP(), []int{0, 11}
}

func (x *DeviceDefinition_ProductionIdentifierInUDICode) GetValue() codes_go_proto.DeviceProductionIdentifierInUDICode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.DeviceProductionIdentifierInUDICode_Value(0)
}

func (x *DeviceDefinition_ProductionIdentifierInUDICode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceDefinition_ProductionIdentifierInUDICode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Information aimed at providing directions for the usage of this model of
// device
type DeviceDefinition_Guideline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The circumstances that form the setting for using the device
	UseContext []*datatypes_go_proto.UsageContext `protobuf:"bytes,4,rep,name=use_context,json=useContext,proto3" json:"use_context,omitempty"`
	// Detailed written and visual directions for the user on how to use the
	// device
	UsageInstruction *datatypes_go_proto.Markdown `protobuf:"bytes,5,opt,name=usage_instruction,json=usageInstruction,proto3" json:"usage_instruction,omitempty"`
	// A source of information or reference for this guideline
	RelatedArtifact []*datatypes_go_proto.RelatedArtifact `protobuf:"bytes,6,rep,name=related_artifact,json=relatedArtifact,proto3" json:"related_artifact,omitempty"`
	// A clinical condition for which the device was designed to be used
	Indication []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,rep,name=indication,proto3" json:"indication,omitempty"`
	// A specific situation when a device should not be used because it may
	// cause harm
	Contraindication []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,rep,name=contraindication,proto3" json:"contraindication,omitempty"`
	// Specific hazard alert information that a user needs to know before using
	// the device
	Warning []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,9,rep,name=warning,proto3" json:"warning,omitempty"`
	// A description of the general purpose or medical use of the device or its
	// function
	IntendedUse *datatypes_go_proto.String `protobuf:"bytes,10,opt,name=intended_use,json=intendedUse,proto3" json:"intended_use,omitempty"`
}

func (x *DeviceDefinition_Guideline) Reset() {
	*x = DeviceDefinition_Guideline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceDefinition_Guideline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceDefinition_Guideline) ProtoMessage() {}

func (x *DeviceDefinition_Guideline) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceDefinition_Guideline.ProtoReflect.Descriptor instead.
func (*DeviceDefinition_Guideline) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_rawDescGZIP(), []int{0, 12}
}

func (x *DeviceDefinition_Guideline) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceDefinition_Guideline) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DeviceDefinition_Guideline) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *DeviceDefinition_Guideline) GetUseContext() []*datatypes_go_proto.UsageContext {
	if x != nil {
		return x.UseContext
	}
	return nil
}

func (x *DeviceDefinition_Guideline) GetUsageInstruction() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.UsageInstruction
	}
	return nil
}

func (x *DeviceDefinition_Guideline) GetRelatedArtifact() []*datatypes_go_proto.RelatedArtifact {
	if x != nil {
		return x.RelatedArtifact
	}
	return nil
}

func (x *DeviceDefinition_Guideline) GetIndication() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Indication
	}
	return nil
}

func (x *DeviceDefinition_Guideline) GetContraindication() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Contraindication
	}
	return nil
}

func (x *DeviceDefinition_Guideline) GetWarning() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Warning
	}
	return nil
}

func (x *DeviceDefinition_Guideline) GetIntendedUse() *datatypes_go_proto.String {
	if x != nil {
		return x.IntendedUse
	}
	return nil
}

// Tracking of latest field safety corrective action
type DeviceDefinition_CorrectiveAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Whether the corrective action was a recall
	Recall *datatypes_go_proto.Boolean                  `protobuf:"bytes,4,opt,name=recall,proto3" json:"recall,omitempty"`
	Scope  *DeviceDefinition_CorrectiveAction_ScopeCode `protobuf:"bytes,5,opt,name=scope,proto3" json:"scope,omitempty"`
	// Start and end dates of the  corrective action
	Period *datatypes_go_proto.Period `protobuf:"bytes,6,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *DeviceDefinition_CorrectiveAction) Reset() {
	*x = DeviceDefinition_CorrectiveAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceDefinition_CorrectiveAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceDefinition_CorrectiveAction) ProtoMessage() {}

func (x *DeviceDefinition_CorrectiveAction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceDefinition_CorrectiveAction.ProtoReflect.Descriptor instead.
func (*DeviceDefinition_CorrectiveAction) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_rawDescGZIP(), []int{0, 13}
}

func (x *DeviceDefinition_CorrectiveAction) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceDefinition_CorrectiveAction) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DeviceDefinition_CorrectiveAction) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *DeviceDefinition_CorrectiveAction) GetRecall() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Recall
	}
	return nil
}

func (x *DeviceDefinition_CorrectiveAction) GetScope() *DeviceDefinition_CorrectiveAction_ScopeCode {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *DeviceDefinition_CorrectiveAction) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

// Billing code or reference associated with the device
type DeviceDefinition_ChargeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The code or reference for the charge item
	ChargeItemCode *datatypes_go_proto.CodeableReference `protobuf:"bytes,4,opt,name=charge_item_code,json=chargeItemCode,proto3" json:"charge_item_code,omitempty"`
	// Coefficient applicable to the billing code
	Count *datatypes_go_proto.Quantity `protobuf:"bytes,5,opt,name=count,proto3" json:"count,omitempty"`
	// A specific time period in which this charge item applies
	EffectivePeriod *datatypes_go_proto.Period `protobuf:"bytes,6,opt,name=effective_period,json=effectivePeriod,proto3" json:"effective_period,omitempty"`
	// The context to which this charge item applies
	UseContext []*datatypes_go_proto.UsageContext `protobuf:"bytes,7,rep,name=use_context,json=useContext,proto3" json:"use_context,omitempty"`
}

func (x *DeviceDefinition_ChargeItem) Reset() {
	*x = DeviceDefinition_ChargeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceDefinition_ChargeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceDefinition_ChargeItem) ProtoMessage() {}

func (x *DeviceDefinition_ChargeItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceDefinition_ChargeItem.ProtoReflect.Descriptor instead.
func (*DeviceDefinition_ChargeItem) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_rawDescGZIP(), []int{0, 14}
}

func (x *DeviceDefinition_ChargeItem) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceDefinition_ChargeItem) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DeviceDefinition_ChargeItem) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *DeviceDefinition_ChargeItem) GetChargeItemCode() *datatypes_go_proto.CodeableReference {
	if x != nil {
		return x.ChargeItemCode
	}
	return nil
}

func (x *DeviceDefinition_ChargeItem) GetCount() *datatypes_go_proto.Quantity {
	if x != nil {
		return x.Count
	}
	return nil
}

func (x *DeviceDefinition_ChargeItem) GetEffectivePeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.EffectivePeriod
	}
	return nil
}

func (x *DeviceDefinition_ChargeItem) GetUseContext() []*datatypes_go_proto.UsageContext {
	if x != nil {
		return x.UseContext
	}
	return nil
}

// Indicates whether and when the device is available on the market
type DeviceDefinition_UdiDeviceIdentifier_UdiDeviceIdentifierMarketDistribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Begin and end dates for the commercial distribution of the device
	MarketPeriod *datatypes_go_proto.Period `protobuf:"bytes,4,opt,name=market_period,json=marketPeriod,proto3" json:"market_period,omitempty"`
	// National state or territory where the device is commercialized
	SubJurisdiction *datatypes_go_proto.Uri `protobuf:"bytes,5,opt,name=sub_jurisdiction,json=subJurisdiction,proto3" json:"sub_jurisdiction,omitempty"`
}

func (x *DeviceDefinition_UdiDeviceIdentifier_UdiDeviceIdentifierMarketDistribution) Reset() {
	*x = DeviceDefinition_UdiDeviceIdentifier_UdiDeviceIdentifierMarketDistribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceDefinition_UdiDeviceIdentifier_UdiDeviceIdentifierMarketDistribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceDefinition_UdiDeviceIdentifier_UdiDeviceIdentifierMarketDistribution) ProtoMessage() {}

func (x *DeviceDefinition_UdiDeviceIdentifier_UdiDeviceIdentifierMarketDistribution) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceDefinition_UdiDeviceIdentifier_UdiDeviceIdentifierMarketDistribution.ProtoReflect.Descriptor instead.
func (*DeviceDefinition_UdiDeviceIdentifier_UdiDeviceIdentifierMarketDistribution) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *DeviceDefinition_UdiDeviceIdentifier_UdiDeviceIdentifierMarketDistribution) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceDefinition_UdiDeviceIdentifier_UdiDeviceIdentifierMarketDistribution) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DeviceDefinition_UdiDeviceIdentifier_UdiDeviceIdentifierMarketDistribution) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *DeviceDefinition_UdiDeviceIdentifier_UdiDeviceIdentifierMarketDistribution) GetMarketPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.MarketPeriod
	}
	return nil
}

func (x *DeviceDefinition_UdiDeviceIdentifier_UdiDeviceIdentifierMarketDistribution) GetSubJurisdiction() *datatypes_go_proto.Uri {
	if x != nil {
		return x.SubJurisdiction
	}
	return nil
}

// basic | master | license
type DeviceDefinition_RegulatoryIdentifier_TypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.DeviceRegulatoryIdentifierTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.DeviceRegulatoryIdentifierTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                              `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                         `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DeviceDefinition_RegulatoryIdentifier_TypeCode) Reset() {
	*x = DeviceDefinition_RegulatoryIdentifier_TypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceDefinition_RegulatoryIdentifier_TypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceDefinition_RegulatoryIdentifier_TypeCode) ProtoMessage() {}

func (x *DeviceDefinition_RegulatoryIdentifier_TypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceDefinition_RegulatoryIdentifier_TypeCode.ProtoReflect.Descriptor instead.
func (*DeviceDefinition_RegulatoryIdentifier_TypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *DeviceDefinition_RegulatoryIdentifier_TypeCode) GetValue() codes_go_proto.DeviceRegulatoryIdentifierTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.DeviceRegulatoryIdentifierTypeCode_Value(0)
}

func (x *DeviceDefinition_RegulatoryIdentifier_TypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceDefinition_RegulatoryIdentifier_TypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// registered-name | user-friendly-name | patient-reported-name
type DeviceDefinition_DeviceName_TypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.DeviceNameTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.DeviceNameTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String              `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension         `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DeviceDefinition_DeviceName_TypeCode) Reset() {
	*x = DeviceDefinition_DeviceName_TypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceDefinition_DeviceName_TypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceDefinition_DeviceName_TypeCode) ProtoMessage() {}

func (x *DeviceDefinition_DeviceName_TypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceDefinition_DeviceName_TypeCode.ProtoReflect.Descriptor instead.
func (*DeviceDefinition_DeviceName_TypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *DeviceDefinition_DeviceName_TypeCode) GetValue() codes_go_proto.DeviceNameTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.DeviceNameTypeCode_Value(0)
}

func (x *DeviceDefinition_DeviceName_TypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceDefinition_DeviceName_TypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// An organization that distributes the packaged device
type DeviceDefinition_Packaging_PackagingDistributor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Distributor's human-readable name
	Name *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Distributor as an Organization resource
	OrganizationReference []*datatypes_go_proto.Reference `protobuf:"bytes,5,rep,name=organization_reference,json=organizationReference,proto3" json:"organization_reference,omitempty"`
}

func (x *DeviceDefinition_Packaging_PackagingDistributor) Reset() {
	*x = DeviceDefinition_Packaging_PackagingDistributor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceDefinition_Packaging_PackagingDistributor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceDefinition_Packaging_PackagingDistributor) ProtoMessage() {}

func (x *DeviceDefinition_Packaging_PackagingDistributor) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceDefinition_Packaging_PackagingDistributor.ProtoReflect.Descriptor instead.
func (*DeviceDefinition_Packaging_PackagingDistributor) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_rawDescGZIP(), []int{0, 6, 0}
}

func (x *DeviceDefinition_Packaging_PackagingDistributor) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceDefinition_Packaging_PackagingDistributor) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DeviceDefinition_Packaging_PackagingDistributor) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *DeviceDefinition_Packaging_PackagingDistributor) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *DeviceDefinition_Packaging_PackagingDistributor) GetOrganizationReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.OrganizationReference
	}
	return nil
}

// Value of the property
type DeviceDefinition_Property_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*DeviceDefinition_Property_ValueX_Quantity
	//	*DeviceDefinition_Property_ValueX_CodeableConcept
	//	*DeviceDefinition_Property_ValueX_StringValue
	//	*DeviceDefinition_Property_ValueX_Boolean
	//	*DeviceDefinition_Property_ValueX_Integer
	//	*DeviceDefinition_Property_ValueX_Range
	//	*DeviceDefinition_Property_ValueX_Attachment
	Choice isDeviceDefinition_Property_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *DeviceDefinition_Property_ValueX) Reset() {
	*x = DeviceDefinition_Property_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceDefinition_Property_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceDefinition_Property_ValueX) ProtoMessage() {}

func (x *DeviceDefinition_Property_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceDefinition_Property_ValueX.ProtoReflect.Descriptor instead.
func (*DeviceDefinition_Property_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_rawDescGZIP(), []int{0, 8, 0}
}

func (m *DeviceDefinition_Property_ValueX) GetChoice() isDeviceDefinition_Property_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *DeviceDefinition_Property_ValueX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*DeviceDefinition_Property_ValueX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *DeviceDefinition_Property_ValueX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*DeviceDefinition_Property_ValueX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *DeviceDefinition_Property_ValueX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*DeviceDefinition_Property_ValueX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *DeviceDefinition_Property_ValueX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*DeviceDefinition_Property_ValueX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *DeviceDefinition_Property_ValueX) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetChoice().(*DeviceDefinition_Property_ValueX_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *DeviceDefinition_Property_ValueX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*DeviceDefinition_Property_ValueX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *DeviceDefinition_Property_ValueX) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetChoice().(*DeviceDefinition_Property_ValueX_Attachment); ok {
		return x.Attachment
	}
	return nil
}

type isDeviceDefinition_Property_ValueX_Choice interface {
	isDeviceDefinition_Property_ValueX_Choice()
}

type DeviceDefinition_Property_ValueX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type DeviceDefinition_Property_ValueX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type DeviceDefinition_Property_ValueX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=string_value,json=string,proto3,oneof"`
}

type DeviceDefinition_Property_ValueX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,4,opt,name=boolean,proto3,oneof"`
}

type DeviceDefinition_Property_ValueX_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,5,opt,name=integer,proto3,oneof"`
}

type DeviceDefinition_Property_ValueX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,6,opt,name=range,proto3,oneof"`
}

type DeviceDefinition_Property_ValueX_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,7,opt,name=attachment,proto3,oneof"`
}

func (*DeviceDefinition_Property_ValueX_Quantity) isDeviceDefinition_Property_ValueX_Choice() {}

func (*DeviceDefinition_Property_ValueX_CodeableConcept) isDeviceDefinition_Property_ValueX_Choice() {
}

func (*DeviceDefinition_Property_ValueX_StringValue) isDeviceDefinition_Property_ValueX_Choice() {}

func (*DeviceDefinition_Property_ValueX_Boolean) isDeviceDefinition_Property_ValueX_Choice() {}

func (*DeviceDefinition_Property_ValueX_Integer) isDeviceDefinition_Property_ValueX_Choice() {}

func (*DeviceDefinition_Property_ValueX_Range) isDeviceDefinition_Property_ValueX_Choice() {}

func (*DeviceDefinition_Property_ValueX_Attachment) isDeviceDefinition_Property_ValueX_Choice() {}

// model | lot-numbers | serial-numbers
type DeviceDefinition_CorrectiveAction_ScopeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.DeviceCorrectiveActionScopeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.DeviceCorrectiveActionScopeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                           `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                      `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DeviceDefinition_CorrectiveAction_ScopeCode) Reset() {
	*x = DeviceDefinition_CorrectiveAction_ScopeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceDefinition_CorrectiveAction_ScopeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceDefinition_CorrectiveAction_ScopeCode) ProtoMessage() {}

func (x *DeviceDefinition_CorrectiveAction_ScopeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceDefinition_CorrectiveAction_ScopeCode.ProtoReflect.Descriptor instead.
func (*DeviceDefinition_CorrectiveAction_ScopeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_rawDescGZIP(), []int{0, 13, 0}
}

func (x *DeviceDefinition_CorrectiveAction_ScopeCode) GetValue() codes_go_proto.DeviceCorrectiveActionScopeCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.DeviceCorrectiveActionScopeCode_Value(0)
}

func (x *DeviceDefinition_CorrectiveAction_ScopeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceDefinition_CorrectiveAction_ScopeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

var File_proto_google_fhir_proto_r5_core_resources_device_definition_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_rawDesc = []byte{
	0x0a, 0x41, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfa, 0x59, 0x0a,
	0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x6d, 0x0a, 0x15, 0x75, 0x64, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55,
	0x64, 0x69, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x13, 0x75, 0x64, 0x69, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x6f, 0x0a, 0x15, 0x72, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x14, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x51,
	0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x5c, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x51, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x5f, 0x74, 0x6f, 0x18, 0x25,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x73, 0x54, 0x6f, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x73,
	0x54, 0x6f, 0x12, 0x48, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x18, 0x26,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x61, 0x73, 0x50,
	0x61, 0x72, 0x74, 0x52, 0x07, 0x68, 0x61, 0x73, 0x50, 0x61, 0x72, 0x74, 0x12, 0x4d, 0x0a, 0x09,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x47, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x18, 0x12,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x73, 0x61, 0x66, 0x65,
	0x74, 0x79, 0x12, 0x53, 0x0a, 0x12, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x5f, 0x6c, 0x69, 0x66, 0x65,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x68, 0x65, 0x6c,
	0x66, 0x4c, 0x69, 0x66, 0x65, 0x52, 0x10, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x4c, 0x69, 0x66, 0x65,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x49, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x4a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x17,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x48,
	0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x29, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52,
	0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x1c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x08, 0x6d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x08, 0x6d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x84, 0x01, 0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x5f, 0x75, 0x64, 0x69, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x49, 0x6e, 0x55, 0x44, 0x49, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x19, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x49, 0x6e, 0x55, 0x44, 0x49, 0x12, 0x4d, 0x0a,
	0x09, 0x67, 0x75, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x09, 0x67, 0x75, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x63, 0x0a, 0x11,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x10, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x51, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x18, 0x2d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x1a, 0xaf, 0x07, 0x0a, 0x13, 0x55, 0x64, 0x69, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55,
	0x72, 0x69, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x72, 0x12, 0x44, 0x0a, 0x0c, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55,
	0x72, 0x69, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0c, 0x6a, 0x75, 0x72, 0x69,
	0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x90, 0x01, 0x0a, 0x13, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x64,
	0x69, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2e, 0x55, 0x64, 0x69, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xf8, 0x02, 0x0a, 0x25,
	0x55, 0x64, 0x69, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x48, 0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0c, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x4b, 0x0a, 0x10, 0x73, 0x75, 0x62,
	0x5f, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x4a, 0x75, 0x72, 0x69, 0x73, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xd9, 0x06, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x10, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x06,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0c, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0c,
	0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xd3, 0x02, 0x0a,
	0x08, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x53, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x86, 0x01, 0x8a, 0xf9, 0x83, 0xb2,
	0x05, 0x48, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x2d, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01,
	0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x64, 0x65, 0x1a, 0xff, 0x04, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xa6, 0x02, 0x0a, 0x08,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6a, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2c,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x63, 0x6f, 0x64, 0x65, 0x1a, 0xd8, 0x02, 0x0a, 0x0e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x6a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x52, 0x0d, 0x6a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0xd1, 0x03, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x54, 0x6f, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x52, 0x0a, 0x0d, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x1a, 0xd3, 0x02, 0x0a, 0x07, 0x48, 0x61, 0x73, 0x50, 0x61, 0x72, 0x74, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1c, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x89, 0x08, 0x0a, 0x09, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x66, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x12, 0x6d, 0x0a, 0x15, 0x75, 0x64, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55,
	0x64, 0x69, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x13, 0x75, 0x64, 0x69, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x1a, 0xec, 0x02, 0x0a, 0x14, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x69, 0x0a, 0x16, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0xf7, 0x02, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0xb0, 0x06, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x53, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xd2, 0x03,
	0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12,
	0x38, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x41, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x1a, 0xd8, 0x02, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0d,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x9d, 0x03,
	0x0a, 0x08, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x3a, 0x0a, 0x09, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x52, 0x09, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x14,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x13, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67,
	0x65, 0x6e, 0x69, 0x63, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0xda, 0x02,
	0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x49, 0x6e, 0x55, 0x44, 0x49, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x54, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x49,
	0x6e, 0x55, 0x44, 0x49, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x3a, 0x78, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x69, 0x6e, 0x75,
	0x64, 0x69, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xbe, 0x05, 0x0a, 0x09, 0x47,
	0x75, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4a, 0x0a, 0x11, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e,
	0x52, 0x10, 0x75, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x12, 0x44, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0a, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x10, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x07, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x0c, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x1a, 0xe3, 0x05, 0x0a, 0x10,
	0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x06, 0x72, 0x65,
	0x63, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x06, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x56, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x12, 0x3b, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x1a, 0xc1, 0x02,
	0x0a, 0x09, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x77, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x39,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x63, 0x6f, 0x70, 0x65, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64,
	0x65, 0x1a, 0xe9, 0x03, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x10, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x46, 0x0a, 0x10, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x0f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x42, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x3a, 0x44, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x42, 0x81, 0x01, 0x98, 0xc6, 0xb0, 0xb5,
	0x07, 0x05, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x01, 0x5a, 0x5e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_rawDescData = file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_rawDesc
)

func file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_rawDescData
}

var file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_goTypes = []interface{}{
	(*DeviceDefinition)(nil),                                                           // 0: google.fhir.r5.core.DeviceDefinition
	(*DeviceDefinition_UdiDeviceIdentifier)(nil),                                       // 1: google.fhir.r5.core.DeviceDefinition.UdiDeviceIdentifier
	(*DeviceDefinition_RegulatoryIdentifier)(nil),                                      // 2: google.fhir.r5.core.DeviceDefinition.RegulatoryIdentifier
	(*DeviceDefinition_DeviceName)(nil),                                                // 3: google.fhir.r5.core.DeviceDefinition.DeviceName
	(*DeviceDefinition_Classification)(nil),                                            // 4: google.fhir.r5.core.DeviceDefinition.Classification
	(*DeviceDefinition_ConformsTo)(nil),                                                // 5: google.fhir.r5.core.DeviceDefinition.ConformsTo
	(*DeviceDefinition_HasPart)(nil),                                                   // 6: google.fhir.r5.core.DeviceDefinition.HasPart
	(*DeviceDefinition_Packaging)(nil),                                                 // 7: google.fhir.r5.core.DeviceDefinition.Packaging
	(*DeviceDefinition_Version)(nil),                                                   // 8: google.fhir.r5.core.DeviceDefinition.Version
	(*DeviceDefinition_Property)(nil),                                                  // 9: google.fhir.r5.core.DeviceDefinition.Property
	(*DeviceDefinition_Link)(nil),                                                      // 10: google.fhir.r5.core.DeviceDefinition.Link
	(*DeviceDefinition_Material)(nil),                                                  // 11: google.fhir.r5.core.DeviceDefinition.Material
	(*DeviceDefinition_ProductionIdentifierInUDICode)(nil),                             // 12: google.fhir.r5.core.DeviceDefinition.ProductionIdentifierInUDICode
	(*DeviceDefinition_Guideline)(nil),                                                 // 13: google.fhir.r5.core.DeviceDefinition.Guideline
	(*DeviceDefinition_CorrectiveAction)(nil),                                          // 14: google.fhir.r5.core.DeviceDefinition.CorrectiveAction
	(*DeviceDefinition_ChargeItem)(nil),                                                // 15: google.fhir.r5.core.DeviceDefinition.ChargeItem
	(*DeviceDefinition_UdiDeviceIdentifier_UdiDeviceIdentifierMarketDistribution)(nil), // 16: google.fhir.r5.core.DeviceDefinition.UdiDeviceIdentifier.UdiDeviceIdentifierMarketDistribution
	(*DeviceDefinition_RegulatoryIdentifier_TypeCode)(nil),                             // 17: google.fhir.r5.core.DeviceDefinition.RegulatoryIdentifier.TypeCode
	(*DeviceDefinition_DeviceName_TypeCode)(nil),                                       // 18: google.fhir.r5.core.DeviceDefinition.DeviceName.TypeCode
	(*DeviceDefinition_Packaging_PackagingDistributor)(nil),                            // 19: google.fhir.r5.core.DeviceDefinition.Packaging.PackagingDistributor
	(*DeviceDefinition_Property_ValueX)(nil),                                           // 20: google.fhir.r5.core.DeviceDefinition.Property.ValueX
	(*DeviceDefinition_CorrectiveAction_ScopeCode)(nil),                                // 21: google.fhir.r5.core.DeviceDefinition.CorrectiveAction.ScopeCode
	(*datatypes_go_proto.Id)(nil),                                                      // 22: google.fhir.r5.core.Id
	(*datatypes_go_proto.Meta)(nil),                                                    // 23: google.fhir.r5.core.Meta
	(*datatypes_go_proto.Uri)(nil),                                                     // 24: google.fhir.r5.core.Uri
	(*datatypes_go_proto.Code)(nil),                                                    // 25: google.fhir.r5.core.Code
	(*datatypes_go_proto.Narrative)(nil),                                               // 26: google.fhir.r5.core.Narrative
	(*anypb.Any)(nil),                                                                  // 27: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),                                               // 28: google.fhir.r5.core.Extension
	(*datatypes_go_proto.Markdown)(nil),                                                // 29: google.fhir.r5.core.Markdown
	(*datatypes_go_proto.Identifier)(nil),                                              // 30: google.fhir.r5.core.Identifier
	(*datatypes_go_proto.String)(nil),                                                  // 31: google.fhir.r5.core.String
	(*datatypes_go_proto.Reference)(nil),                                               // 32: google.fhir.r5.core.Reference
	(*datatypes_go_proto.CodeableConcept)(nil),                                         // 33: google.fhir.r5.core.CodeableConcept
	(*datatypes_go_proto.ProductShelfLife)(nil),                                        // 34: google.fhir.r5.core.ProductShelfLife
	(*datatypes_go_proto.ContactPoint)(nil),                                            // 35: google.fhir.r5.core.ContactPoint
	(*datatypes_go_proto.Annotation)(nil),                                              // 36: google.fhir.r5.core.Annotation
	(*datatypes_go_proto.RelatedArtifact)(nil),                                         // 37: google.fhir.r5.core.RelatedArtifact
	(*datatypes_go_proto.Integer)(nil),                                                 // 38: google.fhir.r5.core.Integer
	(*datatypes_go_proto.Coding)(nil),                                                  // 39: google.fhir.r5.core.Coding
	(*datatypes_go_proto.CodeableReference)(nil),                                       // 40: google.fhir.r5.core.CodeableReference
	(*datatypes_go_proto.Boolean)(nil),                                                 // 41: google.fhir.r5.core.Boolean
	(codes_go_proto.DeviceProductionIdentifierInUDICode_Value)(0),                      // 42: google.fhir.r5.core.DeviceProductionIdentifierInUDICode.Value
	(*datatypes_go_proto.UsageContext)(nil),                                            // 43: google.fhir.r5.core.UsageContext
	(*datatypes_go_proto.Period)(nil),                                                  // 44: google.fhir.r5.core.Period
	(*datatypes_go_proto.Quantity)(nil),                                                // 45: google.fhir.r5.core.Quantity
	(codes_go_proto.DeviceRegulatoryIdentifierTypeCode_Value)(0),                       // 46: google.fhir.r5.core.DeviceRegulatoryIdentifierTypeCode.Value
	(codes_go_proto.DeviceNameTypeCode_Value)(0),                                       // 47: google.fhir.r5.core.DeviceNameTypeCode.Value
	(*datatypes_go_proto.Range)(nil),                                                   // 48: google.fhir.r5.core.Range
	(*datatypes_go_proto.Attachment)(nil),                                              // 49: google.fhir.r5.core.Attachment
	(codes_go_proto.DeviceCorrectiveActionScopeCode_Value)(0),                          // 50: google.fhir.r5.core.DeviceCorrectiveActionScopeCode.Value
}
var file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_depIdxs = []int32{
	22,  // 0: google.fhir.r5.core.DeviceDefinition.id:type_name -> google.fhir.r5.core.Id
	23,  // 1: google.fhir.r5.core.DeviceDefinition.meta:type_name -> google.fhir.r5.core.Meta
	24,  // 2: google.fhir.r5.core.DeviceDefinition.implicit_rules:type_name -> google.fhir.r5.core.Uri
	25,  // 3: google.fhir.r5.core.DeviceDefinition.language:type_name -> google.fhir.r5.core.Code
	26,  // 4: google.fhir.r5.core.DeviceDefinition.text:type_name -> google.fhir.r5.core.Narrative
	27,  // 5: google.fhir.r5.core.DeviceDefinition.contained:type_name -> google.protobuf.Any
	28,  // 6: google.fhir.r5.core.DeviceDefinition.extension:type_name -> google.fhir.r5.core.Extension
	28,  // 7: google.fhir.r5.core.DeviceDefinition.modifier_extension:type_name -> google.fhir.r5.core.Extension
	29,  // 8: google.fhir.r5.core.DeviceDefinition.description:type_name -> google.fhir.r5.core.Markdown
	30,  // 9: google.fhir.r5.core.DeviceDefinition.identifier:type_name -> google.fhir.r5.core.Identifier
	1,   // 10: google.fhir.r5.core.DeviceDefinition.udi_device_identifier:type_name -> google.fhir.r5.core.DeviceDefinition.UdiDeviceIdentifier
	2,   // 11: google.fhir.r5.core.DeviceDefinition.regulatory_identifier:type_name -> google.fhir.r5.core.DeviceDefinition.RegulatoryIdentifier
	31,  // 12: google.fhir.r5.core.DeviceDefinition.part_number:type_name -> google.fhir.r5.core.String
	32,  // 13: google.fhir.r5.core.DeviceDefinition.manufacturer:type_name -> google.fhir.r5.core.Reference
	3,   // 14: google.fhir.r5.core.DeviceDefinition.device_name:type_name -> google.fhir.r5.core.DeviceDefinition.DeviceName
	31,  // 15: google.fhir.r5.core.DeviceDefinition.model_number:type_name -> google.fhir.r5.core.String
	4,   // 16: google.fhir.r5.core.DeviceDefinition.classification:type_name -> google.fhir.r5.core.DeviceDefinition.Classification
	5,   // 17: google.fhir.r5.core.DeviceDefinition.conforms_to:type_name -> google.fhir.r5.core.DeviceDefinition.ConformsTo
	6,   // 18: google.fhir.r5.core.DeviceDefinition.has_part:type_name -> google.fhir.r5.core.DeviceDefinition.HasPart
	7,   // 19: google.fhir.r5.core.DeviceDefinition.packaging:type_name -> google.fhir.r5.core.DeviceDefinition.Packaging
	8,   // 20: google.fhir.r5.core.DeviceDefinition.version:type_name -> google.fhir.r5.core.DeviceDefinition.Version
	33,  // 21: google.fhir.r5.core.DeviceDefinition.safety:type_name -> google.fhir.r5.core.CodeableConcept
	34,  // 22: google.fhir.r5.core.DeviceDefinition.shelf_life_storage:type_name -> google.fhir.r5.core.ProductShelfLife
	33,  // 23: google.fhir.r5.core.DeviceDefinition.language_code:type_name -> google.fhir.r5.core.CodeableConcept
	9,   // 24: google.fhir.r5.core.DeviceDefinition.property:type_name -> google.fhir.r5.core.DeviceDefinition.Property
	32,  // 25: google.fhir.r5.core.DeviceDefinition.owner:type_name -> google.fhir.r5.core.Reference
	35,  // 26: google.fhir.r5.core.DeviceDefinition.contact:type_name -> google.fhir.r5.core.ContactPoint
	10,  // 27: google.fhir.r5.core.DeviceDefinition.link:type_name -> google.fhir.r5.core.DeviceDefinition.Link
	36,  // 28: google.fhir.r5.core.DeviceDefinition.note:type_name -> google.fhir.r5.core.Annotation
	11,  // 29: google.fhir.r5.core.DeviceDefinition.material:type_name -> google.fhir.r5.core.DeviceDefinition.Material
	12,  // 30: google.fhir.r5.core.DeviceDefinition.production_identifier_in_udi:type_name -> google.fhir.r5.core.DeviceDefinition.ProductionIdentifierInUDICode
	13,  // 31: google.fhir.r5.core.DeviceDefinition.guideline:type_name -> google.fhir.r5.core.DeviceDefinition.Guideline
	14,  // 32: google.fhir.r5.core.DeviceDefinition.corrective_action:type_name -> google.fhir.r5.core.DeviceDefinition.CorrectiveAction
	15,  // 33: google.fhir.r5.core.DeviceDefinition.charge_item:type_name -> google.fhir.r5.core.DeviceDefinition.ChargeItem
	31,  // 34: google.fhir.r5.core.DeviceDefinition.UdiDeviceIdentifier.id:type_name -> google.fhir.r5.core.String
	28,  // 35: google.fhir.r5.core.DeviceDefinition.UdiDeviceIdentifier.extension:type_name -> google.fhir.r5.core.Extension
	28,  // 36: google.fhir.r5.core.DeviceDefinition.UdiDeviceIdentifier.modifier_extension:type_name -> google.fhir.r5.core.Extension
	31,  // 37: google.fhir.r5.core.DeviceDefinition.UdiDeviceIdentifier.device_identifier:type_name -> google.fhir.r5.core.String
	24,  // 38: google.fhir.r5.core.DeviceDefinition.UdiDeviceIdentifier.issuer:type_name -> google.fhir.r5.core.Uri
	24,  // 39: google.fhir.r5.core.DeviceDefinition.UdiDeviceIdentifier.jurisdiction:type_name -> google.fhir.r5.core.Uri
	16,  // 40: google.fhir.r5.core.DeviceDefinition.UdiDeviceIdentifier.market_distribution:type_name -> google.fhir.r5.core.DeviceDefinition.UdiDeviceIdentifier.UdiDeviceIdentifierMarketDistribution
	31,  // 41: google.fhir.r5.core.DeviceDefinition.RegulatoryIdentifier.id:type_name -> google.fhir.r5.core.String
	28,  // 42: google.fhir.r5.core.DeviceDefinition.RegulatoryIdentifier.extension:type_name -> google.fhir.r5.core.Extension
	28,  // 43: google.fhir.r5.core.DeviceDefinition.RegulatoryIdentifier.modifier_extension:type_name -> google.fhir.r5.core.Extension
	17,  // 44: google.fhir.r5.core.DeviceDefinition.RegulatoryIdentifier.type:type_name -> google.fhir.r5.core.DeviceDefinition.RegulatoryIdentifier.TypeCode
	31,  // 45: google.fhir.r5.core.DeviceDefinition.RegulatoryIdentifier.device_identifier:type_name -> google.fhir.r5.core.String
	24,  // 46: google.fhir.r5.core.DeviceDefinition.RegulatoryIdentifier.issuer:type_name -> google.fhir.r5.core.Uri
	24,  // 47: google.fhir.r5.core.DeviceDefinition.RegulatoryIdentifier.jurisdiction:type_name -> google.fhir.r5.core.Uri
	31,  // 48: google.fhir.r5.core.DeviceDefinition.DeviceName.id:type_name -> google.fhir.r5.core.String
	28,  // 49: google.fhir.r5.core.DeviceDefinition.DeviceName.extension:type_name -> google.fhir.r5.core.Extension
	28,  // 50: google.fhir.r5.core.DeviceDefinition.DeviceName.modifier_extension:type_name -> google.fhir.r5.core.Extension
	31,  // 51: google.fhir.r5.core.DeviceDefinition.DeviceName.name:type_name -> google.fhir.r5.core.String
	18,  // 52: google.fhir.r5.core.DeviceDefinition.DeviceName.type:type_name -> google.fhir.r5.core.DeviceDefinition.DeviceName.TypeCode
	31,  // 53: google.fhir.r5.core.DeviceDefinition.Classification.id:type_name -> google.fhir.r5.core.String
	28,  // 54: google.fhir.r5.core.DeviceDefinition.Classification.extension:type_name -> google.fhir.r5.core.Extension
	28,  // 55: google.fhir.r5.core.DeviceDefinition.Classification.modifier_extension:type_name -> google.fhir.r5.core.Extension
	33,  // 56: google.fhir.r5.core.DeviceDefinition.Classification.type:type_name -> google.fhir.r5.core.CodeableConcept
	37,  // 57: google.fhir.r5.core.DeviceDefinition.Classification.justification:type_name -> google.fhir.r5.core.RelatedArtifact
	31,  // 58: google.fhir.r5.core.DeviceDefinition.ConformsTo.id:type_name -> google.fhir.r5.core.String
	28,  // 59: google.fhir.r5.core.DeviceDefinition.ConformsTo.extension:type_name -> google.fhir.r5.core.Extension
	28,  // 60: google.fhir.r5.core.DeviceDefinition.ConformsTo.modifier_extension:type_name -> google.fhir.r5.core.Extension
	33,  // 61: google.fhir.r5.core.DeviceDefinition.ConformsTo.category:type_name -> google.fhir.r5.core.CodeableConcept
	33,  // 62: google.fhir.r5.core.DeviceDefinition.ConformsTo.specification:type_name -> google.fhir.r5.core.CodeableConcept
	31,  // 63: google.fhir.r5.core.DeviceDefinition.ConformsTo.version:type_name -> google.fhir.r5.core.String
	37,  // 64: google.fhir.r5.core.DeviceDefinition.ConformsTo.source:type_name -> google.fhir.r5.core.RelatedArtifact
	31,  // 65: google.fhir.r5.core.DeviceDefinition.HasPart.id:type_name -> google.fhir.r5.core.String
	28,  // 66: google.fhir.r5.core.DeviceDefinition.HasPart.extension:type_name -> google.fhir.r5.core.Extension
	28,  // 67: google.fhir.r5.core.DeviceDefinition.HasPart.modifier_extension:type_name -> google.fhir.r5.core.Extension
	32,  // 68: google.fhir.r5.core.DeviceDefinition.HasPart.reference:type_name -> google.fhir.r5.core.Reference
	38,  // 69: google.fhir.r5.core.DeviceDefinition.HasPart.count:type_name -> google.fhir.r5.core.Integer
	31,  // 70: google.fhir.r5.core.DeviceDefinition.Packaging.id:type_name -> google.fhir.r5.core.String
	28,  // 71: google.fhir.r5.core.DeviceDefinition.Packaging.extension:type_name -> google.fhir.r5.core.Extension
	28,  // 72: google.fhir.r5.core.DeviceDefinition.Packaging.modifier_extension:type_name -> google.fhir.r5.core.Extension
	30,  // 73: google.fhir.r5.core.DeviceDefinition.Packaging.identifier:type_name -> google.fhir.r5.core.Identifier
	33,  // 74: google.fhir.r5.core.DeviceDefinition.Packaging.type:type_name -> google.fhir.r5.core.CodeableConcept
	38,  // 75: google.fhir.r5.core.DeviceDefinition.Packaging.count:type_name -> google.fhir.r5.core.Integer
	19,  // 76: google.fhir.r5.core.DeviceDefinition.Packaging.distributor:type_name -> google.fhir.r5.core.DeviceDefinition.Packaging.PackagingDistributor
	1,   // 77: google.fhir.r5.core.DeviceDefinition.Packaging.udi_device_identifier:type_name -> google.fhir.r5.core.DeviceDefinition.UdiDeviceIdentifier
	7,   // 78: google.fhir.r5.core.DeviceDefinition.Packaging.packaging:type_name -> google.fhir.r5.core.DeviceDefinition.Packaging
	31,  // 79: google.fhir.r5.core.DeviceDefinition.Version.id:type_name -> google.fhir.r5.core.String
	28,  // 80: google.fhir.r5.core.DeviceDefinition.Version.extension:type_name -> google.fhir.r5.core.Extension
	28,  // 81: google.fhir.r5.core.DeviceDefinition.Version.modifier_extension:type_name -> google.fhir.r5.core.Extension
	33,  // 82: google.fhir.r5.core.DeviceDefinition.Version.type:type_name -> google.fhir.r5.core.CodeableConcept
	30,  // 83: google.fhir.r5.core.DeviceDefinition.Version.component:type_name -> google.fhir.r5.core.Identifier
	31,  // 84: google.fhir.r5.core.DeviceDefinition.Version.value:type_name -> google.fhir.r5.core.String
	31,  // 85: google.fhir.r5.core.DeviceDefinition.Property.id:type_name -> google.fhir.r5.core.String
	28,  // 86: google.fhir.r5.core.DeviceDefinition.Property.extension:type_name -> google.fhir.r5.core.Extension
	28,  // 87: google.fhir.r5.core.DeviceDefinition.Property.modifier_extension:type_name -> google.fhir.r5.core.Extension
	33,  // 88: google.fhir.r5.core.DeviceDefinition.Property.type:type_name -> google.fhir.r5.core.CodeableConcept
	20,  // 89: google.fhir.r5.core.DeviceDefinition.Property.value:type_name -> google.fhir.r5.core.DeviceDefinition.Property.ValueX
	31,  // 90: google.fhir.r5.core.DeviceDefinition.Link.id:type_name -> google.fhir.r5.core.String
	28,  // 91: google.fhir.r5.core.DeviceDefinition.Link.extension:type_name -> google.fhir.r5.core.Extension
	28,  // 92: google.fhir.r5.core.DeviceDefinition.Link.modifier_extension:type_name -> google.fhir.r5.core.Extension
	39,  // 93: google.fhir.r5.core.DeviceDefinition.Link.relation:type_name -> google.fhir.r5.core.Coding
	40,  // 94: google.fhir.r5.core.DeviceDefinition.Link.related_device:type_name -> google.fhir.r5.core.CodeableReference
	31,  // 95: google.fhir.r5.core.DeviceDefinition.Material.id:type_name -> google.fhir.r5.core.String
	28,  // 96: google.fhir.r5.core.DeviceDefinition.Material.extension:type_name -> google.fhir.r5.core.Extension
	28,  // 97: google.fhir.r5.core.DeviceDefinition.Material.modifier_extension:type_name -> google.fhir.r5.core.Extension
	33,  // 98: google.fhir.r5.core.DeviceDefinition.Material.substance:type_name -> google.fhir.r5.core.CodeableConcept
	41,  // 99: google.fhir.r5.core.DeviceDefinition.Material.alternate:type_name -> google.fhir.r5.core.Boolean
	41,  // 100: google.fhir.r5.core.DeviceDefinition.Material.allergenic_indicator:type_name -> google.fhir.r5.core.Boolean
	42,  // 101: google.fhir.r5.core.DeviceDefinition.ProductionIdentifierInUDICode.value:type_name -> google.fhir.r5.core.DeviceProductionIdentifierInUDICode.Value
	31,  // 102: google.fhir.r5.core.DeviceDefinition.ProductionIdentifierInUDICode.id:type_name -> google.fhir.r5.core.String
	28,  // 103: google.fhir.r5.core.DeviceDefinition.ProductionIdentifierInUDICode.extension:type_name -> google.fhir.r5.core.Extension
	31,  // 104: google.fhir.r5.core.DeviceDefinition.Guideline.id:type_name -> google.fhir.r5.core.String
	28,  // 105: google.fhir.r5.core.DeviceDefinition.Guideline.extension:type_name -> google.fhir.r5.core.Extension
	28,  // 106: google.fhir.r5.core.DeviceDefinition.Guideline.modifier_extension:type_name -> google.fhir.r5.core.Extension
	43,  // 107: google.fhir.r5.core.DeviceDefinition.Guideline.use_context:type_name -> google.fhir.r5.core.UsageContext
	29,  // 108: google.fhir.r5.core.DeviceDefinition.Guideline.usage_instruction:type_name -> google.fhir.r5.core.Markdown
	37,  // 109: google.fhir.r5.core.DeviceDefinition.Guideline.related_artifact:type_name -> google.fhir.r5.core.RelatedArtifact
	33,  // 110: google.fhir.r5.core.DeviceDefinition.Guideline.indication:type_name -> google.fhir.r5.core.CodeableConcept
	33,  // 111: google.fhir.r5.core.DeviceDefinition.Guideline.contraindication:type_name -> google.fhir.r5.core.CodeableConcept
	33,  // 112: google.fhir.r5.core.DeviceDefinition.Guideline.warning:type_name -> google.fhir.r5.core.CodeableConcept
	31,  // 113: google.fhir.r5.core.DeviceDefinition.Guideline.intended_use:type_name -> google.fhir.r5.core.String
	31,  // 114: google.fhir.r5.core.DeviceDefinition.CorrectiveAction.id:type_name -> google.fhir.r5.core.String
	28,  // 115: google.fhir.r5.core.DeviceDefinition.CorrectiveAction.extension:type_name -> google.fhir.r5.core.Extension
	28,  // 116: google.fhir.r5.core.DeviceDefinition.CorrectiveAction.modifier_extension:type_name -> google.fhir.r5.core.Extension
	41,  // 117: google.fhir.r5.core.DeviceDefinition.CorrectiveAction.recall:type_name -> google.fhir.r5.core.Boolean
	21,  // 118: google.fhir.r5.core.DeviceDefinition.CorrectiveAction.scope:type_name -> google.fhir.r5.core.DeviceDefinition.CorrectiveAction.ScopeCode
	44,  // 119: google.fhir.r5.core.DeviceDefinition.CorrectiveAction.period:type_name -> google.fhir.r5.core.Period
	31,  // 120: google.fhir.r5.core.DeviceDefinition.ChargeItem.id:type_name -> google.fhir.r5.core.String
	28,  // 121: google.fhir.r5.core.DeviceDefinition.ChargeItem.extension:type_name -> google.fhir.r5.core.Extension
	28,  // 122: google.fhir.r5.core.DeviceDefinition.ChargeItem.modifier_extension:type_name -> google.fhir.r5.core.Extension
	40,  // 123: google.fhir.r5.core.DeviceDefinition.ChargeItem.charge_item_code:type_name -> google.fhir.r5.core.CodeableReference
	45,  // 124: google.fhir.r5.core.DeviceDefinition.ChargeItem.count:type_name -> google.fhir.r5.core.Quantity
	44,  // 125: google.fhir.r5.core.DeviceDefinition.ChargeItem.effective_period:type_name -> google.fhir.r5.core.Period
	43,  // 126: google.fhir.r5.core.DeviceDefinition.ChargeItem.use_context:type_name -> google.fhir.r5.core.UsageContext
	31,  // 127: google.fhir.r5.core.DeviceDefinition.UdiDeviceIdentifier.UdiDeviceIdentifierMarketDistribution.id:type_name -> google.fhir.r5.core.String
	28,  // 128: google.fhir.r5.core.DeviceDefinition.UdiDeviceIdentifier.UdiDeviceIdentifierMarketDistribution.extension:type_name -> google.fhir.r5.core.Extension
	28,  // 129: google.fhir.r5.core.DeviceDefinition.UdiDeviceIdentifier.UdiDeviceIdentifierMarketDistribution.modifier_extension:type_name -> google.fhir.r5.core.Extension
	44,  // 130: google.fhir.r5.core.DeviceDefinition.UdiDeviceIdentifier.UdiDeviceIdentifierMarketDistribution.market_period:type_name -> google.fhir.r5.core.Period
	24,  // 131: google.fhir.r5.core.DeviceDefinition.UdiDeviceIdentifier.UdiDeviceIdentifierMarketDistribution.sub_jurisdiction:type_name -> google.fhir.r5.core.Uri
	46,  // 132: google.fhir.r5.core.DeviceDefinition.RegulatoryIdentifier.TypeCode.value:type_name -> google.fhir.r5.core.DeviceRegulatoryIdentifierTypeCode.Value
	31,  // 133: google.fhir.r5.core.DeviceDefinition.RegulatoryIdentifier.TypeCode.id:type_name -> google.fhir.r5.core.String
	28,  // 134: google.fhir.r5.core.DeviceDefinition.RegulatoryIdentifier.TypeCode.extension:type_name -> google.fhir.r5.core.Extension
	47,  // 135: google.fhir.r5.core.DeviceDefinition.DeviceName.TypeCode.value:type_name -> google.fhir.r5.core.DeviceNameTypeCode.Value
	31,  // 136: google.fhir.r5.core.DeviceDefinition.DeviceName.TypeCode.id:type_name -> google.fhir.r5.core.String
	28,  // 137: google.fhir.r5.core.DeviceDefinition.DeviceName.TypeCode.extension:type_name -> google.fhir.r5.core.Extension
	31,  // 138: google.fhir.r5.core.DeviceDefinition.Packaging.PackagingDistributor.id:type_name -> google.fhir.r5.core.String
	28,  // 139: google.fhir.r5.core.DeviceDefinition.Packaging.PackagingDistributor.extension:type_name -> google.fhir.r5.core.Extension
	28,  // 140: google.fhir.r5.core.DeviceDefinition.Packaging.PackagingDistributor.modifier_extension:type_name -> google.fhir.r5.core.Extension
	31,  // 141: google.fhir.r5.core.DeviceDefinition.Packaging.PackagingDistributor.name:type_name -> google.fhir.r5.core.String
	32,  // 142: google.fhir.r5.core.DeviceDefinition.Packaging.PackagingDistributor.organization_reference:type_name -> google.fhir.r5.core.Reference
	45,  // 143: google.fhir.r5.core.DeviceDefinition.Property.ValueX.quantity:type_name -> google.fhir.r5.core.Quantity
	33,  // 144: google.fhir.r5.core.DeviceDefinition.Property.ValueX.codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	31,  // 145: google.fhir.r5.core.DeviceDefinition.Property.ValueX.string_value:type_name -> google.fhir.r5.core.String
	41,  // 146: google.fhir.r5.core.DeviceDefinition.Property.ValueX.boolean:type_name -> google.fhir.r5.core.Boolean
	38,  // 147: google.fhir.r5.core.DeviceDefinition.Property.ValueX.integer:type_name -> google.fhir.r5.core.Integer
	48,  // 148: google.fhir.r5.core.DeviceDefinition.Property.ValueX.range:type_name -> google.fhir.r5.core.Range
	49,  // 149: google.fhir.r5.core.DeviceDefinition.Property.ValueX.attachment:type_name -> google.fhir.r5.core.Attachment
	50,  // 150: google.fhir.r5.core.DeviceDefinition.CorrectiveAction.ScopeCode.value:type_name -> google.fhir.r5.core.DeviceCorrectiveActionScopeCode.Value
	31,  // 151: google.fhir.r5.core.DeviceDefinition.CorrectiveAction.ScopeCode.id:type_name -> google.fhir.r5.core.String
	28,  // 152: google.fhir.r5.core.DeviceDefinition.CorrectiveAction.ScopeCode.extension:type_name -> google.fhir.r5.core.Extension
	153, // [153:153] is the sub-list for method output_type
	153, // [153:153] is the sub-list for method input_type
	153, // [153:153] is the sub-list for extension type_name
	153, // [153:153] is the sub-list for extension extendee
	0,   // [0:153] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_init() }
func file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_init() {
	if File_proto_google_fhir_proto_r5_core_resources_device_definition_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceDefinition_UdiDeviceIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceDefinition_RegulatoryIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceDefinition_DeviceName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceDefinition_Classification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceDefinition_ConformsTo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceDefinition_HasPart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceDefinition_Packaging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceDefinition_Version); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceDefinition_Property); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceDefinition_Link); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceDefinition_Material); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceDefinition_ProductionIdentifierInUDICode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceDefinition_Guideline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceDefinition_CorrectiveAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceDefinition_ChargeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceDefinition_UdiDeviceIdentifier_UdiDeviceIdentifierMarketDistribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceDefinition_RegulatoryIdentifier_TypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceDefinition_DeviceName_TypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceDefinition_Packaging_PackagingDistributor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceDefinition_Property_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceDefinition_CorrectiveAction_ScopeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*DeviceDefinition_Property_ValueX_Quantity)(nil),
		(*DeviceDefinition_Property_ValueX_CodeableConcept)(nil),
		(*DeviceDefinition_Property_ValueX_StringValue)(nil),
		(*DeviceDefinition_Property_ValueX_Boolean)(nil),
		(*DeviceDefinition_Property_ValueX_Integer)(nil),
		(*DeviceDefinition_Property_ValueX_Range)(nil),
		(*DeviceDefinition_Property_ValueX_Attachment)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r5_core_resources_device_definition_proto = out.File
	file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_rawDesc = nil
	file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_goTypes = nil
	file_proto_google_fhir_proto_r5_core_resources_device_definition_proto_depIdxs = nil
}
