//    Copyright 2023 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.21.12
// source: proto/google/fhir/proto/r5/core/resources/measure_report.proto

package measure_report_go_proto

import (
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	codes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/codes_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for MeasureReport.
// Results of a measure evaluation.
// See http://hl7.org/fhir/StructureDefinition/MeasureReport
type MeasureReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*anypb.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Additional identifier for the MeasureReport
	Identifier     []*datatypes_go_proto.Identifier  `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	Status         *MeasureReport_StatusCode         `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	Type           *MeasureReport_TypeCode           `protobuf:"bytes,12,opt,name=type,proto3" json:"type,omitempty"`
	DataUpdateType *MeasureReport_DataUpdateTypeCode `protobuf:"bytes,21,opt,name=data_update_type,json=dataUpdateType,proto3" json:"data_update_type,omitempty"`
	// What measure was calculated
	Measure *datatypes_go_proto.Canonical `protobuf:"bytes,13,opt,name=measure,proto3" json:"measure,omitempty"`
	// What individual(s) the report is for
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=subject,proto3" json:"subject,omitempty"`
	// When the measure was calculated
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,15,opt,name=date,proto3" json:"date,omitempty"`
	// Who is reporting the data
	Reporter *datatypes_go_proto.Reference `protobuf:"bytes,16,opt,name=reporter,proto3" json:"reporter,omitempty"`
	// What vendor prepared the data
	ReportingVendor *datatypes_go_proto.Reference `protobuf:"bytes,22,opt,name=reporting_vendor,json=reportingVendor,proto3" json:"reporting_vendor,omitempty"`
	// Where the reported data is from
	Location *datatypes_go_proto.Reference `protobuf:"bytes,23,opt,name=location,proto3" json:"location,omitempty"`
	// What period the report covers
	Period *datatypes_go_proto.Period `protobuf:"bytes,17,opt,name=period,proto3" json:"period,omitempty"`
	// What parameters were provided to the report
	InputParameters *datatypes_go_proto.Reference `protobuf:"bytes,24,opt,name=input_parameters,json=inputParameters,proto3" json:"input_parameters,omitempty"`
	// What scoring method (e.g. proportion, ratio, continuous-variable)
	Scoring *datatypes_go_proto.CodeableConcept `protobuf:"bytes,25,opt,name=scoring,proto3" json:"scoring,omitempty"`
	// increase | decrease
	ImprovementNotation *datatypes_go_proto.CodeableConcept `protobuf:"bytes,18,opt,name=improvement_notation,json=improvementNotation,proto3" json:"improvement_notation,omitempty"`
	Group               []*MeasureReport_Group              `protobuf:"bytes,19,rep,name=group,proto3" json:"group,omitempty"`
	// Additional information collected for the report
	SupplementalData []*datatypes_go_proto.Reference `protobuf:"bytes,26,rep,name=supplemental_data,json=supplementalData,proto3" json:"supplemental_data,omitempty"`
	// What data was used to calculate the measure score
	EvaluatedResource []*datatypes_go_proto.Reference `protobuf:"bytes,20,rep,name=evaluated_resource,json=evaluatedResource,proto3" json:"evaluated_resource,omitempty"`
}

func (x *MeasureReport) Reset() {
	*x = MeasureReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasureReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasureReport) ProtoMessage() {}

func (x *MeasureReport) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasureReport.ProtoReflect.Descriptor instead.
func (*MeasureReport) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_rawDescGZIP(), []int{0}
}

func (x *MeasureReport) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MeasureReport) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *MeasureReport) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *MeasureReport) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *MeasureReport) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *MeasureReport) GetContained() []*anypb.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *MeasureReport) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MeasureReport) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MeasureReport) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *MeasureReport) GetStatus() *MeasureReport_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MeasureReport) GetType() *MeasureReport_TypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MeasureReport) GetDataUpdateType() *MeasureReport_DataUpdateTypeCode {
	if x != nil {
		return x.DataUpdateType
	}
	return nil
}

func (x *MeasureReport) GetMeasure() *datatypes_go_proto.Canonical {
	if x != nil {
		return x.Measure
	}
	return nil
}

func (x *MeasureReport) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *MeasureReport) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *MeasureReport) GetReporter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Reporter
	}
	return nil
}

func (x *MeasureReport) GetReportingVendor() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ReportingVendor
	}
	return nil
}

func (x *MeasureReport) GetLocation() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *MeasureReport) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *MeasureReport) GetInputParameters() *datatypes_go_proto.Reference {
	if x != nil {
		return x.InputParameters
	}
	return nil
}

func (x *MeasureReport) GetScoring() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Scoring
	}
	return nil
}

func (x *MeasureReport) GetImprovementNotation() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ImprovementNotation
	}
	return nil
}

func (x *MeasureReport) GetGroup() []*MeasureReport_Group {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *MeasureReport) GetSupplementalData() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.SupplementalData
	}
	return nil
}

func (x *MeasureReport) GetEvaluatedResource() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.EvaluatedResource
	}
	return nil
}

// complete | pending | error
type MeasureReport_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.MeasureReportStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.MeasureReportStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension              `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MeasureReport_StatusCode) Reset() {
	*x = MeasureReport_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasureReport_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasureReport_StatusCode) ProtoMessage() {}

func (x *MeasureReport_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasureReport_StatusCode.ProtoReflect.Descriptor instead.
func (*MeasureReport_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_rawDescGZIP(), []int{0, 0}
}

func (x *MeasureReport_StatusCode) GetValue() codes_go_proto.MeasureReportStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.MeasureReportStatusCode_Value(0)
}

func (x *MeasureReport_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MeasureReport_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// individual | subject-list | summary | data-exchange
type MeasureReport_TypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.MeasureReportTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.MeasureReportTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension            `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MeasureReport_TypeCode) Reset() {
	*x = MeasureReport_TypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasureReport_TypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasureReport_TypeCode) ProtoMessage() {}

func (x *MeasureReport_TypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasureReport_TypeCode.ProtoReflect.Descriptor instead.
func (*MeasureReport_TypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_rawDescGZIP(), []int{0, 1}
}

func (x *MeasureReport_TypeCode) GetValue() codes_go_proto.MeasureReportTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.MeasureReportTypeCode_Value(0)
}

func (x *MeasureReport_TypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MeasureReport_TypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// incremental | snapshot
type MeasureReport_DataUpdateTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.SubmitDataUpdateTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.SubmitDataUpdateTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension               `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MeasureReport_DataUpdateTypeCode) Reset() {
	*x = MeasureReport_DataUpdateTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasureReport_DataUpdateTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasureReport_DataUpdateTypeCode) ProtoMessage() {}

func (x *MeasureReport_DataUpdateTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasureReport_DataUpdateTypeCode.ProtoReflect.Descriptor instead.
func (*MeasureReport_DataUpdateTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_rawDescGZIP(), []int{0, 2}
}

func (x *MeasureReport_DataUpdateTypeCode) GetValue() codes_go_proto.SubmitDataUpdateTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.SubmitDataUpdateTypeCode_Value(0)
}

func (x *MeasureReport_DataUpdateTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MeasureReport_DataUpdateTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Measure results for each group
type MeasureReport_Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Pointer to specific group from Measure
	LinkId *datatypes_go_proto.String `protobuf:"bytes,8,opt,name=link_id,json=linkId,proto3" json:"link_id,omitempty"`
	// Meaning of the group
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// What individual(s) the report is for
	Subject      *datatypes_go_proto.Reference      `protobuf:"bytes,9,opt,name=subject,proto3" json:"subject,omitempty"`
	Population   []*MeasureReport_Group_Population  `protobuf:"bytes,5,rep,name=population,proto3" json:"population,omitempty"`
	MeasureScore *MeasureReport_Group_MeasureScoreX `protobuf:"bytes,10,opt,name=measure_score,json=measureScore,proto3" json:"measure_score,omitempty"`
	Stratifier   []*MeasureReport_Group_Stratifier  `protobuf:"bytes,7,rep,name=stratifier,proto3" json:"stratifier,omitempty"`
}

func (x *MeasureReport_Group) Reset() {
	*x = MeasureReport_Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasureReport_Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasureReport_Group) ProtoMessage() {}

func (x *MeasureReport_Group) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasureReport_Group.ProtoReflect.Descriptor instead.
func (*MeasureReport_Group) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_rawDescGZIP(), []int{0, 3}
}

func (x *MeasureReport_Group) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MeasureReport_Group) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MeasureReport_Group) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MeasureReport_Group) GetLinkId() *datatypes_go_proto.String {
	if x != nil {
		return x.LinkId
	}
	return nil
}

func (x *MeasureReport_Group) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *MeasureReport_Group) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *MeasureReport_Group) GetPopulation() []*MeasureReport_Group_Population {
	if x != nil {
		return x.Population
	}
	return nil
}

func (x *MeasureReport_Group) GetMeasureScore() *MeasureReport_Group_MeasureScoreX {
	if x != nil {
		return x.MeasureScore
	}
	return nil
}

func (x *MeasureReport_Group) GetStratifier() []*MeasureReport_Group_Stratifier {
	if x != nil {
		return x.Stratifier
	}
	return nil
}

// The populations in the group
type MeasureReport_Group_Population struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Pointer to specific population from Measure
	LinkId *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=link_id,json=linkId,proto3" json:"link_id,omitempty"`
	// initial-population | numerator | numerator-exclusion | denominator |
	// denominator-exclusion | denominator-exception | measure-population |
	// measure-population-exclusion | measure-observation
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// Size of the population
	Count *datatypes_go_proto.Integer `protobuf:"bytes,5,opt,name=count,proto3" json:"count,omitempty"`
	// For subject-list reports, the subject results in this population
	SubjectResults *datatypes_go_proto.Reference `protobuf:"bytes,6,opt,name=subject_results,json=subjectResults,proto3" json:"subject_results,omitempty"`
	// For subject-list reports, a subject result in this population
	SubjectReport []*datatypes_go_proto.Reference `protobuf:"bytes,8,rep,name=subject_report,json=subjectReport,proto3" json:"subject_report,omitempty"`
	// What individual(s) in the population
	Subjects *datatypes_go_proto.Reference `protobuf:"bytes,9,opt,name=subjects,proto3" json:"subjects,omitempty"`
}

func (x *MeasureReport_Group_Population) Reset() {
	*x = MeasureReport_Group_Population{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasureReport_Group_Population) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasureReport_Group_Population) ProtoMessage() {}

func (x *MeasureReport_Group_Population) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasureReport_Group_Population.ProtoReflect.Descriptor instead.
func (*MeasureReport_Group_Population) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *MeasureReport_Group_Population) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MeasureReport_Group_Population) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MeasureReport_Group_Population) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MeasureReport_Group_Population) GetLinkId() *datatypes_go_proto.String {
	if x != nil {
		return x.LinkId
	}
	return nil
}

func (x *MeasureReport_Group_Population) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *MeasureReport_Group_Population) GetCount() *datatypes_go_proto.Integer {
	if x != nil {
		return x.Count
	}
	return nil
}

func (x *MeasureReport_Group_Population) GetSubjectResults() *datatypes_go_proto.Reference {
	if x != nil {
		return x.SubjectResults
	}
	return nil
}

func (x *MeasureReport_Group_Population) GetSubjectReport() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.SubjectReport
	}
	return nil
}

func (x *MeasureReport_Group_Population) GetSubjects() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subjects
	}
	return nil
}

// What score this group achieved
type MeasureReport_Group_MeasureScoreX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*MeasureReport_Group_MeasureScoreX_Quantity
	//	*MeasureReport_Group_MeasureScoreX_DateTime
	//	*MeasureReport_Group_MeasureScoreX_CodeableConcept
	//	*MeasureReport_Group_MeasureScoreX_Period
	//	*MeasureReport_Group_MeasureScoreX_Range
	//	*MeasureReport_Group_MeasureScoreX_Duration
	Choice isMeasureReport_Group_MeasureScoreX_Choice `protobuf_oneof:"choice"`
}

func (x *MeasureReport_Group_MeasureScoreX) Reset() {
	*x = MeasureReport_Group_MeasureScoreX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasureReport_Group_MeasureScoreX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasureReport_Group_MeasureScoreX) ProtoMessage() {}

func (x *MeasureReport_Group_MeasureScoreX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasureReport_Group_MeasureScoreX.ProtoReflect.Descriptor instead.
func (*MeasureReport_Group_MeasureScoreX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_rawDescGZIP(), []int{0, 3, 1}
}

func (m *MeasureReport_Group_MeasureScoreX) GetChoice() isMeasureReport_Group_MeasureScoreX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *MeasureReport_Group_MeasureScoreX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*MeasureReport_Group_MeasureScoreX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *MeasureReport_Group_MeasureScoreX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*MeasureReport_Group_MeasureScoreX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *MeasureReport_Group_MeasureScoreX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*MeasureReport_Group_MeasureScoreX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *MeasureReport_Group_MeasureScoreX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*MeasureReport_Group_MeasureScoreX_Period); ok {
		return x.Period
	}
	return nil
}

func (x *MeasureReport_Group_MeasureScoreX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*MeasureReport_Group_MeasureScoreX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *MeasureReport_Group_MeasureScoreX) GetDuration() *datatypes_go_proto.Duration {
	if x, ok := x.GetChoice().(*MeasureReport_Group_MeasureScoreX_Duration); ok {
		return x.Duration
	}
	return nil
}

type isMeasureReport_Group_MeasureScoreX_Choice interface {
	isMeasureReport_Group_MeasureScoreX_Choice()
}

type MeasureReport_Group_MeasureScoreX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type MeasureReport_Group_MeasureScoreX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,2,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type MeasureReport_Group_MeasureScoreX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type MeasureReport_Group_MeasureScoreX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,4,opt,name=period,proto3,oneof"`
}

type MeasureReport_Group_MeasureScoreX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,5,opt,name=range,proto3,oneof"`
}

type MeasureReport_Group_MeasureScoreX_Duration struct {
	Duration *datatypes_go_proto.Duration `protobuf:"bytes,6,opt,name=duration,proto3,oneof"`
}

func (*MeasureReport_Group_MeasureScoreX_Quantity) isMeasureReport_Group_MeasureScoreX_Choice() {}

func (*MeasureReport_Group_MeasureScoreX_DateTime) isMeasureReport_Group_MeasureScoreX_Choice() {}

func (*MeasureReport_Group_MeasureScoreX_CodeableConcept) isMeasureReport_Group_MeasureScoreX_Choice() {
}

func (*MeasureReport_Group_MeasureScoreX_Period) isMeasureReport_Group_MeasureScoreX_Choice() {}

func (*MeasureReport_Group_MeasureScoreX_Range) isMeasureReport_Group_MeasureScoreX_Choice() {}

func (*MeasureReport_Group_MeasureScoreX_Duration) isMeasureReport_Group_MeasureScoreX_Choice() {}

// Stratification results
type MeasureReport_Group_Stratifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Pointer to specific stratifier from Measure
	LinkId *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=link_id,json=linkId,proto3" json:"link_id,omitempty"`
	// What stratifier of the group
	Code    *datatypes_go_proto.CodeableConcept               `protobuf:"bytes,7,opt,name=code,proto3" json:"code,omitempty"`
	Stratum []*MeasureReport_Group_Stratifier_StratifierGroup `protobuf:"bytes,5,rep,name=stratum,proto3" json:"stratum,omitempty"`
}

func (x *MeasureReport_Group_Stratifier) Reset() {
	*x = MeasureReport_Group_Stratifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasureReport_Group_Stratifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasureReport_Group_Stratifier) ProtoMessage() {}

func (x *MeasureReport_Group_Stratifier) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasureReport_Group_Stratifier.ProtoReflect.Descriptor instead.
func (*MeasureReport_Group_Stratifier) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_rawDescGZIP(), []int{0, 3, 2}
}

func (x *MeasureReport_Group_Stratifier) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MeasureReport_Group_Stratifier) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MeasureReport_Group_Stratifier) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MeasureReport_Group_Stratifier) GetLinkId() *datatypes_go_proto.String {
	if x != nil {
		return x.LinkId
	}
	return nil
}

func (x *MeasureReport_Group_Stratifier) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *MeasureReport_Group_Stratifier) GetStratum() []*MeasureReport_Group_Stratifier_StratifierGroup {
	if x != nil {
		return x.Stratum
	}
	return nil
}

// Stratum results, one for each unique value, or set of values, in the
// stratifier, or stratifier components
type MeasureReport_Group_Stratifier_StratifierGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension                                             `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Value             *MeasureReport_Group_Stratifier_StratifierGroup_ValueX                      `protobuf:"bytes,8,opt,name=value,proto3" json:"value,omitempty"`
	Component         []*MeasureReport_Group_Stratifier_StratifierGroup_Component                 `protobuf:"bytes,5,rep,name=component,proto3" json:"component,omitempty"`
	Population        []*MeasureReport_Group_Stratifier_StratifierGroup_StratifierGroupPopulation `protobuf:"bytes,6,rep,name=population,proto3" json:"population,omitempty"`
	MeasureScore      *MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX               `protobuf:"bytes,9,opt,name=measure_score,json=measureScore,proto3" json:"measure_score,omitempty"`
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup) Reset() {
	*x = MeasureReport_Group_Stratifier_StratifierGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasureReport_Group_Stratifier_StratifierGroup) ProtoMessage() {}

func (x *MeasureReport_Group_Stratifier_StratifierGroup) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasureReport_Group_Stratifier_StratifierGroup.ProtoReflect.Descriptor instead.
func (*MeasureReport_Group_Stratifier_StratifierGroup) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_rawDescGZIP(), []int{0, 3, 2, 0}
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup) GetValue() *MeasureReport_Group_Stratifier_StratifierGroup_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup) GetComponent() []*MeasureReport_Group_Stratifier_StratifierGroup_Component {
	if x != nil {
		return x.Component
	}
	return nil
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup) GetPopulation() []*MeasureReport_Group_Stratifier_StratifierGroup_StratifierGroupPopulation {
	if x != nil {
		return x.Population
	}
	return nil
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup) GetMeasureScore() *MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX {
	if x != nil {
		return x.MeasureScore
	}
	return nil
}

// The stratum value, e.g. male
type MeasureReport_Group_Stratifier_StratifierGroup_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*MeasureReport_Group_Stratifier_StratifierGroup_ValueX_CodeableConcept
	//	*MeasureReport_Group_Stratifier_StratifierGroup_ValueX_Boolean
	//	*MeasureReport_Group_Stratifier_StratifierGroup_ValueX_Quantity
	//	*MeasureReport_Group_Stratifier_StratifierGroup_ValueX_Range
	//	*MeasureReport_Group_Stratifier_StratifierGroup_ValueX_Reference
	Choice isMeasureReport_Group_Stratifier_StratifierGroup_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_ValueX) Reset() {
	*x = MeasureReport_Group_Stratifier_StratifierGroup_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasureReport_Group_Stratifier_StratifierGroup_ValueX) ProtoMessage() {}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasureReport_Group_Stratifier_StratifierGroup_ValueX.ProtoReflect.Descriptor instead.
func (*MeasureReport_Group_Stratifier_StratifierGroup_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_rawDescGZIP(), []int{0, 3, 2, 0, 0}
}

func (m *MeasureReport_Group_Stratifier_StratifierGroup_ValueX) GetChoice() isMeasureReport_Group_Stratifier_StratifierGroup_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_ValueX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*MeasureReport_Group_Stratifier_StratifierGroup_ValueX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_ValueX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*MeasureReport_Group_Stratifier_StratifierGroup_ValueX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_ValueX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*MeasureReport_Group_Stratifier_StratifierGroup_ValueX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_ValueX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*MeasureReport_Group_Stratifier_StratifierGroup_ValueX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_ValueX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*MeasureReport_Group_Stratifier_StratifierGroup_ValueX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isMeasureReport_Group_Stratifier_StratifierGroup_ValueX_Choice interface {
	isMeasureReport_Group_Stratifier_StratifierGroup_ValueX_Choice()
}

type MeasureReport_Group_Stratifier_StratifierGroup_ValueX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type MeasureReport_Group_Stratifier_StratifierGroup_ValueX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,2,opt,name=boolean,proto3,oneof"`
}

type MeasureReport_Group_Stratifier_StratifierGroup_ValueX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,3,opt,name=quantity,proto3,oneof"`
}

type MeasureReport_Group_Stratifier_StratifierGroup_ValueX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,4,opt,name=range,proto3,oneof"`
}

type MeasureReport_Group_Stratifier_StratifierGroup_ValueX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=reference,proto3,oneof"`
}

func (*MeasureReport_Group_Stratifier_StratifierGroup_ValueX_CodeableConcept) isMeasureReport_Group_Stratifier_StratifierGroup_ValueX_Choice() {
}

func (*MeasureReport_Group_Stratifier_StratifierGroup_ValueX_Boolean) isMeasureReport_Group_Stratifier_StratifierGroup_ValueX_Choice() {
}

func (*MeasureReport_Group_Stratifier_StratifierGroup_ValueX_Quantity) isMeasureReport_Group_Stratifier_StratifierGroup_ValueX_Choice() {
}

func (*MeasureReport_Group_Stratifier_StratifierGroup_ValueX_Range) isMeasureReport_Group_Stratifier_StratifierGroup_ValueX_Choice() {
}

func (*MeasureReport_Group_Stratifier_StratifierGroup_ValueX_Reference) isMeasureReport_Group_Stratifier_StratifierGroup_ValueX_Choice() {
}

// Stratifier component values
type MeasureReport_Group_Stratifier_StratifierGroup_Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Pointer to specific stratifier component from Measure
	LinkId *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=link_id,json=linkId,proto3" json:"link_id,omitempty"`
	// What stratifier component of the group
	Code  *datatypes_go_proto.CodeableConcept                              `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Value *MeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX `protobuf:"bytes,7,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_Component) Reset() {
	*x = MeasureReport_Group_Stratifier_StratifierGroup_Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasureReport_Group_Stratifier_StratifierGroup_Component) ProtoMessage() {}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_Component) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasureReport_Group_Stratifier_StratifierGroup_Component.ProtoReflect.Descriptor instead.
func (*MeasureReport_Group_Stratifier_StratifierGroup_Component) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_rawDescGZIP(), []int{0, 3, 2, 0, 1}
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_Component) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_Component) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_Component) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_Component) GetLinkId() *datatypes_go_proto.String {
	if x != nil {
		return x.LinkId
	}
	return nil
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_Component) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_Component) GetValue() *MeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

// Population results in this stratum
type MeasureReport_Group_Stratifier_StratifierGroup_StratifierGroupPopulation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Pointer to specific population from Measure
	LinkId *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=link_id,json=linkId,proto3" json:"link_id,omitempty"`
	// initial-population | numerator | numerator-exclusion | denominator
	// | denominator-exclusion | denominator-exception |
	// measure-population | measure-population-exclusion |
	// measure-observation
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// Size of the population
	Count *datatypes_go_proto.Integer `protobuf:"bytes,5,opt,name=count,proto3" json:"count,omitempty"`
	// For subject-list reports, the subject results in this population
	SubjectResults *datatypes_go_proto.Reference `protobuf:"bytes,6,opt,name=subject_results,json=subjectResults,proto3" json:"subject_results,omitempty"`
	// For subject-list reports, a subject result in this population
	SubjectReport []*datatypes_go_proto.Reference `protobuf:"bytes,8,rep,name=subject_report,json=subjectReport,proto3" json:"subject_report,omitempty"`
	// What individual(s) in the population
	Subjects *datatypes_go_proto.Reference `protobuf:"bytes,9,opt,name=subjects,proto3" json:"subjects,omitempty"`
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_StratifierGroupPopulation) Reset() {
	*x = MeasureReport_Group_Stratifier_StratifierGroup_StratifierGroupPopulation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_StratifierGroupPopulation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasureReport_Group_Stratifier_StratifierGroup_StratifierGroupPopulation) ProtoMessage() {}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_StratifierGroupPopulation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasureReport_Group_Stratifier_StratifierGroup_StratifierGroupPopulation.ProtoReflect.Descriptor instead.
func (*MeasureReport_Group_Stratifier_StratifierGroup_StratifierGroupPopulation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_rawDescGZIP(), []int{0, 3, 2, 0, 2}
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_StratifierGroupPopulation) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_StratifierGroupPopulation) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_StratifierGroupPopulation) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_StratifierGroupPopulation) GetLinkId() *datatypes_go_proto.String {
	if x != nil {
		return x.LinkId
	}
	return nil
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_StratifierGroupPopulation) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_StratifierGroupPopulation) GetCount() *datatypes_go_proto.Integer {
	if x != nil {
		return x.Count
	}
	return nil
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_StratifierGroupPopulation) GetSubjectResults() *datatypes_go_proto.Reference {
	if x != nil {
		return x.SubjectResults
	}
	return nil
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_StratifierGroupPopulation) GetSubjectReport() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.SubjectReport
	}
	return nil
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_StratifierGroupPopulation) GetSubjects() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subjects
	}
	return nil
}

// What score this stratum achieved
type MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX_Quantity
	//	*MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX_DateTime
	//	*MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX_CodeableConcept
	//	*MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX_Period
	//	*MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX_Range
	//	*MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX_Duration
	Choice isMeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX_Choice `protobuf_oneof:"choice"`
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX) Reset() {
	*x = MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX) ProtoMessage() {}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX.ProtoReflect.Descriptor instead.
func (*MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_rawDescGZIP(), []int{0, 3, 2, 0, 3}
}

func (m *MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX) GetChoice() isMeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX_Period); ok {
		return x.Period
	}
	return nil
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX) GetDuration() *datatypes_go_proto.Duration {
	if x, ok := x.GetChoice().(*MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX_Duration); ok {
		return x.Duration
	}
	return nil
}

type isMeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX_Choice interface {
	isMeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX_Choice()
}

type MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,2,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,4,opt,name=period,proto3,oneof"`
}

type MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,5,opt,name=range,proto3,oneof"`
}

type MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX_Duration struct {
	Duration *datatypes_go_proto.Duration `protobuf:"bytes,6,opt,name=duration,proto3,oneof"`
}

func (*MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX_Quantity) isMeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX_Choice() {
}

func (*MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX_DateTime) isMeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX_Choice() {
}

func (*MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX_CodeableConcept) isMeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX_Choice() {
}

func (*MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX_Period) isMeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX_Choice() {
}

func (*MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX_Range) isMeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX_Choice() {
}

func (*MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX_Duration) isMeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX_Choice() {
}

// The stratum component value, e.g. male
type MeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*MeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX_CodeableConcept
	//	*MeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX_Boolean
	//	*MeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX_Quantity
	//	*MeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX_Range
	//	*MeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX_Reference
	Choice isMeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX) Reset() {
	*x = MeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX) ProtoMessage() {}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX.ProtoReflect.Descriptor instead.
func (*MeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_rawDescGZIP(), []int{0, 3, 2, 0, 1, 0}
}

func (m *MeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX) GetChoice() isMeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*MeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*MeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*MeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*MeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *MeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*MeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isMeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX_Choice interface {
	isMeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX_Choice()
}

type MeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type MeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,2,opt,name=boolean,proto3,oneof"`
}

type MeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,3,opt,name=quantity,proto3,oneof"`
}

type MeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,4,opt,name=range,proto3,oneof"`
}

type MeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=reference,proto3,oneof"`
}

func (*MeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX_CodeableConcept) isMeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX_Choice() {
}

func (*MeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX_Boolean) isMeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX_Choice() {
}

func (*MeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX_Quantity) isMeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX_Choice() {
}

func (*MeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX_Range) isMeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX_Choice() {
}

func (*MeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX_Reference) isMeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX_Choice() {
}

var File_proto_google_fhir_proto_r5_core_resources_measure_report_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_rawDesc = []byte{
	0x0a, 0x3e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x13, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x64,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf0, 0x3f, 0x0a, 0x0d, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x27, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x47, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x5f, 0x0a, 0x10, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x6d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x07, 0x6d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x12, 0xdf, 0x01, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0xa4, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43,
	0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x11, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x61, 0x72, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x08, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x45, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x5d, 0x0a,
	0x10, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x4a, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x5b, 0x0a, 0x10, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x10, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x57, 0x0a, 0x14, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x13, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x5b, 0x0a, 0x11, 0x73,
	0x75, 0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5d, 0x0a, 0x12, 0x65, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x11, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0xb3, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x70, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xad, 0x02,
	0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6e, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xbe, 0x02,
	0x0a, 0x12, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x72, 0x8a, 0xf9, 0x83, 0xb2,
	0x05, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93,
	0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xc1,
	0x27, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0xdf, 0x01, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0xa4, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72,
	0x65, 0x54, 0x65, 0x61, 0x6d, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x11, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x61, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x53, 0x0a, 0x0a, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70,
	0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x0d, 0x6d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x58, 0x52, 0x0c, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x53, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x0a, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0xe4, 0x04, 0x0a, 0x0a,
	0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x53, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x0a, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0e, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x5a, 0x0a,
	0x0e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x47, 0x0a, 0x08, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0b, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x1a, 0x97, 0x03, 0x0a, 0x0d, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x58, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48,
	0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48,
	0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3b, 0x0a,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8,
	0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xa3, 0x19, 0x0a,
	0x0a, 0x53, 0x74, 0x72, 0x61, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x5d, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x07, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x75, 0x6d, 0x1a, 0x8b, 0x16, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x61, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x6b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x12, 0x7d, 0x0a, 0x0a, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x76, 0x0a, 0x0d, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x58, 0x52, 0x0c, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0xd8, 0x02, 0x0a, 0x06, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x58, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a,
	0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x3e, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x1a, 0x8c, 0x06, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x49,
	0x64, 0x12, 0x40, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x72, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x54, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xd8, 0x02, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x58, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12,
	0x3b, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x05,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x3e, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x1a, 0xf3, 0x04, 0x0a, 0x19, 0x53, 0x74, 0x72, 0x61, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64,
	0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x53,
	0x0a, 0x0f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0a, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x04, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x5a, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0d, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x0d, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x47, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x0b, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x08,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x1a, 0x97, 0x03, 0x0a, 0x0d, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x58, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12,
	0x32, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x3a, 0xc1, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06,
	0x35, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x31, 0x28, 0x74, 0x79, 0x70,
	0x65, 0x20, 0x21, 0x3d, 0x20, 0x27, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x27, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x2e, 0x6e, 0x6f, 0x74, 0x28, 0x29, 0x9a, 0x86, 0x93,
	0xa0, 0x08, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x61, 0x6c, 0x6c, 0x28,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x78,
	0x6f, 0x72, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x28, 0x29, 0x29, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x42, 0x7e, 0x98, 0xc6,
	0xb0, 0xb5, 0x07, 0x05, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x01, 0x5a,
	0x5b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_rawDescData = file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_rawDesc
)

func file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_rawDescData
}

var file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_goTypes = []interface{}{
	(*MeasureReport)(nil),                                                            // 0: google.fhir.r5.core.MeasureReport
	(*MeasureReport_StatusCode)(nil),                                                 // 1: google.fhir.r5.core.MeasureReport.StatusCode
	(*MeasureReport_TypeCode)(nil),                                                   // 2: google.fhir.r5.core.MeasureReport.TypeCode
	(*MeasureReport_DataUpdateTypeCode)(nil),                                         // 3: google.fhir.r5.core.MeasureReport.DataUpdateTypeCode
	(*MeasureReport_Group)(nil),                                                      // 4: google.fhir.r5.core.MeasureReport.Group
	(*MeasureReport_Group_Population)(nil),                                           // 5: google.fhir.r5.core.MeasureReport.Group.Population
	(*MeasureReport_Group_MeasureScoreX)(nil),                                        // 6: google.fhir.r5.core.MeasureReport.Group.MeasureScoreX
	(*MeasureReport_Group_Stratifier)(nil),                                           // 7: google.fhir.r5.core.MeasureReport.Group.Stratifier
	(*MeasureReport_Group_Stratifier_StratifierGroup)(nil),                           // 8: google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup
	(*MeasureReport_Group_Stratifier_StratifierGroup_ValueX)(nil),                    // 9: google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.ValueX
	(*MeasureReport_Group_Stratifier_StratifierGroup_Component)(nil),                 // 10: google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.Component
	(*MeasureReport_Group_Stratifier_StratifierGroup_StratifierGroupPopulation)(nil), // 11: google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.StratifierGroupPopulation
	(*MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX)(nil),             // 12: google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.MeasureScoreX
	(*MeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX)(nil),          // 13: google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.Component.ValueX
	(*datatypes_go_proto.Id)(nil),                                                    // 14: google.fhir.r5.core.Id
	(*datatypes_go_proto.Meta)(nil),                                                  // 15: google.fhir.r5.core.Meta
	(*datatypes_go_proto.Uri)(nil),                                                   // 16: google.fhir.r5.core.Uri
	(*datatypes_go_proto.Code)(nil),                                                  // 17: google.fhir.r5.core.Code
	(*datatypes_go_proto.Narrative)(nil),                                             // 18: google.fhir.r5.core.Narrative
	(*anypb.Any)(nil),                                                                // 19: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),                                             // 20: google.fhir.r5.core.Extension
	(*datatypes_go_proto.Identifier)(nil),                                            // 21: google.fhir.r5.core.Identifier
	(*datatypes_go_proto.Canonical)(nil),                                             // 22: google.fhir.r5.core.Canonical
	(*datatypes_go_proto.Reference)(nil),                                             // 23: google.fhir.r5.core.Reference
	(*datatypes_go_proto.DateTime)(nil),                                              // 24: google.fhir.r5.core.DateTime
	(*datatypes_go_proto.Period)(nil),                                                // 25: google.fhir.r5.core.Period
	(*datatypes_go_proto.CodeableConcept)(nil),                                       // 26: google.fhir.r5.core.CodeableConcept
	(codes_go_proto.MeasureReportStatusCode_Value)(0),                                // 27: google.fhir.r5.core.MeasureReportStatusCode.Value
	(*datatypes_go_proto.String)(nil),                                                // 28: google.fhir.r5.core.String
	(codes_go_proto.MeasureReportTypeCode_Value)(0),                                  // 29: google.fhir.r5.core.MeasureReportTypeCode.Value
	(codes_go_proto.SubmitDataUpdateTypeCode_Value)(0),                               // 30: google.fhir.r5.core.SubmitDataUpdateTypeCode.Value
	(*datatypes_go_proto.Integer)(nil),                                               // 31: google.fhir.r5.core.Integer
	(*datatypes_go_proto.Quantity)(nil),                                              // 32: google.fhir.r5.core.Quantity
	(*datatypes_go_proto.Range)(nil),                                                 // 33: google.fhir.r5.core.Range
	(*datatypes_go_proto.Duration)(nil),                                              // 34: google.fhir.r5.core.Duration
	(*datatypes_go_proto.Boolean)(nil),                                               // 35: google.fhir.r5.core.Boolean
}
var file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_depIdxs = []int32{
	14,  // 0: google.fhir.r5.core.MeasureReport.id:type_name -> google.fhir.r5.core.Id
	15,  // 1: google.fhir.r5.core.MeasureReport.meta:type_name -> google.fhir.r5.core.Meta
	16,  // 2: google.fhir.r5.core.MeasureReport.implicit_rules:type_name -> google.fhir.r5.core.Uri
	17,  // 3: google.fhir.r5.core.MeasureReport.language:type_name -> google.fhir.r5.core.Code
	18,  // 4: google.fhir.r5.core.MeasureReport.text:type_name -> google.fhir.r5.core.Narrative
	19,  // 5: google.fhir.r5.core.MeasureReport.contained:type_name -> google.protobuf.Any
	20,  // 6: google.fhir.r5.core.MeasureReport.extension:type_name -> google.fhir.r5.core.Extension
	20,  // 7: google.fhir.r5.core.MeasureReport.modifier_extension:type_name -> google.fhir.r5.core.Extension
	21,  // 8: google.fhir.r5.core.MeasureReport.identifier:type_name -> google.fhir.r5.core.Identifier
	1,   // 9: google.fhir.r5.core.MeasureReport.status:type_name -> google.fhir.r5.core.MeasureReport.StatusCode
	2,   // 10: google.fhir.r5.core.MeasureReport.type:type_name -> google.fhir.r5.core.MeasureReport.TypeCode
	3,   // 11: google.fhir.r5.core.MeasureReport.data_update_type:type_name -> google.fhir.r5.core.MeasureReport.DataUpdateTypeCode
	22,  // 12: google.fhir.r5.core.MeasureReport.measure:type_name -> google.fhir.r5.core.Canonical
	23,  // 13: google.fhir.r5.core.MeasureReport.subject:type_name -> google.fhir.r5.core.Reference
	24,  // 14: google.fhir.r5.core.MeasureReport.date:type_name -> google.fhir.r5.core.DateTime
	23,  // 15: google.fhir.r5.core.MeasureReport.reporter:type_name -> google.fhir.r5.core.Reference
	23,  // 16: google.fhir.r5.core.MeasureReport.reporting_vendor:type_name -> google.fhir.r5.core.Reference
	23,  // 17: google.fhir.r5.core.MeasureReport.location:type_name -> google.fhir.r5.core.Reference
	25,  // 18: google.fhir.r5.core.MeasureReport.period:type_name -> google.fhir.r5.core.Period
	23,  // 19: google.fhir.r5.core.MeasureReport.input_parameters:type_name -> google.fhir.r5.core.Reference
	26,  // 20: google.fhir.r5.core.MeasureReport.scoring:type_name -> google.fhir.r5.core.CodeableConcept
	26,  // 21: google.fhir.r5.core.MeasureReport.improvement_notation:type_name -> google.fhir.r5.core.CodeableConcept
	4,   // 22: google.fhir.r5.core.MeasureReport.group:type_name -> google.fhir.r5.core.MeasureReport.Group
	23,  // 23: google.fhir.r5.core.MeasureReport.supplemental_data:type_name -> google.fhir.r5.core.Reference
	23,  // 24: google.fhir.r5.core.MeasureReport.evaluated_resource:type_name -> google.fhir.r5.core.Reference
	27,  // 25: google.fhir.r5.core.MeasureReport.StatusCode.value:type_name -> google.fhir.r5.core.MeasureReportStatusCode.Value
	28,  // 26: google.fhir.r5.core.MeasureReport.StatusCode.id:type_name -> google.fhir.r5.core.String
	20,  // 27: google.fhir.r5.core.MeasureReport.StatusCode.extension:type_name -> google.fhir.r5.core.Extension
	29,  // 28: google.fhir.r5.core.MeasureReport.TypeCode.value:type_name -> google.fhir.r5.core.MeasureReportTypeCode.Value
	28,  // 29: google.fhir.r5.core.MeasureReport.TypeCode.id:type_name -> google.fhir.r5.core.String
	20,  // 30: google.fhir.r5.core.MeasureReport.TypeCode.extension:type_name -> google.fhir.r5.core.Extension
	30,  // 31: google.fhir.r5.core.MeasureReport.DataUpdateTypeCode.value:type_name -> google.fhir.r5.core.SubmitDataUpdateTypeCode.Value
	28,  // 32: google.fhir.r5.core.MeasureReport.DataUpdateTypeCode.id:type_name -> google.fhir.r5.core.String
	20,  // 33: google.fhir.r5.core.MeasureReport.DataUpdateTypeCode.extension:type_name -> google.fhir.r5.core.Extension
	28,  // 34: google.fhir.r5.core.MeasureReport.Group.id:type_name -> google.fhir.r5.core.String
	20,  // 35: google.fhir.r5.core.MeasureReport.Group.extension:type_name -> google.fhir.r5.core.Extension
	20,  // 36: google.fhir.r5.core.MeasureReport.Group.modifier_extension:type_name -> google.fhir.r5.core.Extension
	28,  // 37: google.fhir.r5.core.MeasureReport.Group.link_id:type_name -> google.fhir.r5.core.String
	26,  // 38: google.fhir.r5.core.MeasureReport.Group.code:type_name -> google.fhir.r5.core.CodeableConcept
	23,  // 39: google.fhir.r5.core.MeasureReport.Group.subject:type_name -> google.fhir.r5.core.Reference
	5,   // 40: google.fhir.r5.core.MeasureReport.Group.population:type_name -> google.fhir.r5.core.MeasureReport.Group.Population
	6,   // 41: google.fhir.r5.core.MeasureReport.Group.measure_score:type_name -> google.fhir.r5.core.MeasureReport.Group.MeasureScoreX
	7,   // 42: google.fhir.r5.core.MeasureReport.Group.stratifier:type_name -> google.fhir.r5.core.MeasureReport.Group.Stratifier
	28,  // 43: google.fhir.r5.core.MeasureReport.Group.Population.id:type_name -> google.fhir.r5.core.String
	20,  // 44: google.fhir.r5.core.MeasureReport.Group.Population.extension:type_name -> google.fhir.r5.core.Extension
	20,  // 45: google.fhir.r5.core.MeasureReport.Group.Population.modifier_extension:type_name -> google.fhir.r5.core.Extension
	28,  // 46: google.fhir.r5.core.MeasureReport.Group.Population.link_id:type_name -> google.fhir.r5.core.String
	26,  // 47: google.fhir.r5.core.MeasureReport.Group.Population.code:type_name -> google.fhir.r5.core.CodeableConcept
	31,  // 48: google.fhir.r5.core.MeasureReport.Group.Population.count:type_name -> google.fhir.r5.core.Integer
	23,  // 49: google.fhir.r5.core.MeasureReport.Group.Population.subject_results:type_name -> google.fhir.r5.core.Reference
	23,  // 50: google.fhir.r5.core.MeasureReport.Group.Population.subject_report:type_name -> google.fhir.r5.core.Reference
	23,  // 51: google.fhir.r5.core.MeasureReport.Group.Population.subjects:type_name -> google.fhir.r5.core.Reference
	32,  // 52: google.fhir.r5.core.MeasureReport.Group.MeasureScoreX.quantity:type_name -> google.fhir.r5.core.Quantity
	24,  // 53: google.fhir.r5.core.MeasureReport.Group.MeasureScoreX.date_time:type_name -> google.fhir.r5.core.DateTime
	26,  // 54: google.fhir.r5.core.MeasureReport.Group.MeasureScoreX.codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	25,  // 55: google.fhir.r5.core.MeasureReport.Group.MeasureScoreX.period:type_name -> google.fhir.r5.core.Period
	33,  // 56: google.fhir.r5.core.MeasureReport.Group.MeasureScoreX.range:type_name -> google.fhir.r5.core.Range
	34,  // 57: google.fhir.r5.core.MeasureReport.Group.MeasureScoreX.duration:type_name -> google.fhir.r5.core.Duration
	28,  // 58: google.fhir.r5.core.MeasureReport.Group.Stratifier.id:type_name -> google.fhir.r5.core.String
	20,  // 59: google.fhir.r5.core.MeasureReport.Group.Stratifier.extension:type_name -> google.fhir.r5.core.Extension
	20,  // 60: google.fhir.r5.core.MeasureReport.Group.Stratifier.modifier_extension:type_name -> google.fhir.r5.core.Extension
	28,  // 61: google.fhir.r5.core.MeasureReport.Group.Stratifier.link_id:type_name -> google.fhir.r5.core.String
	26,  // 62: google.fhir.r5.core.MeasureReport.Group.Stratifier.code:type_name -> google.fhir.r5.core.CodeableConcept
	8,   // 63: google.fhir.r5.core.MeasureReport.Group.Stratifier.stratum:type_name -> google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup
	28,  // 64: google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.id:type_name -> google.fhir.r5.core.String
	20,  // 65: google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.extension:type_name -> google.fhir.r5.core.Extension
	20,  // 66: google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.modifier_extension:type_name -> google.fhir.r5.core.Extension
	9,   // 67: google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.value:type_name -> google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.ValueX
	10,  // 68: google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.component:type_name -> google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.Component
	11,  // 69: google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.population:type_name -> google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.StratifierGroupPopulation
	12,  // 70: google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.measure_score:type_name -> google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.MeasureScoreX
	26,  // 71: google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.ValueX.codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	35,  // 72: google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.ValueX.boolean:type_name -> google.fhir.r5.core.Boolean
	32,  // 73: google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.ValueX.quantity:type_name -> google.fhir.r5.core.Quantity
	33,  // 74: google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.ValueX.range:type_name -> google.fhir.r5.core.Range
	23,  // 75: google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.ValueX.reference:type_name -> google.fhir.r5.core.Reference
	28,  // 76: google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.Component.id:type_name -> google.fhir.r5.core.String
	20,  // 77: google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.Component.extension:type_name -> google.fhir.r5.core.Extension
	20,  // 78: google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.Component.modifier_extension:type_name -> google.fhir.r5.core.Extension
	28,  // 79: google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.Component.link_id:type_name -> google.fhir.r5.core.String
	26,  // 80: google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.Component.code:type_name -> google.fhir.r5.core.CodeableConcept
	13,  // 81: google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.Component.value:type_name -> google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.Component.ValueX
	28,  // 82: google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.StratifierGroupPopulation.id:type_name -> google.fhir.r5.core.String
	20,  // 83: google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.StratifierGroupPopulation.extension:type_name -> google.fhir.r5.core.Extension
	20,  // 84: google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.StratifierGroupPopulation.modifier_extension:type_name -> google.fhir.r5.core.Extension
	28,  // 85: google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.StratifierGroupPopulation.link_id:type_name -> google.fhir.r5.core.String
	26,  // 86: google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.StratifierGroupPopulation.code:type_name -> google.fhir.r5.core.CodeableConcept
	31,  // 87: google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.StratifierGroupPopulation.count:type_name -> google.fhir.r5.core.Integer
	23,  // 88: google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.StratifierGroupPopulation.subject_results:type_name -> google.fhir.r5.core.Reference
	23,  // 89: google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.StratifierGroupPopulation.subject_report:type_name -> google.fhir.r5.core.Reference
	23,  // 90: google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.StratifierGroupPopulation.subjects:type_name -> google.fhir.r5.core.Reference
	32,  // 91: google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.MeasureScoreX.quantity:type_name -> google.fhir.r5.core.Quantity
	24,  // 92: google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.MeasureScoreX.date_time:type_name -> google.fhir.r5.core.DateTime
	26,  // 93: google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.MeasureScoreX.codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	25,  // 94: google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.MeasureScoreX.period:type_name -> google.fhir.r5.core.Period
	33,  // 95: google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.MeasureScoreX.range:type_name -> google.fhir.r5.core.Range
	34,  // 96: google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.MeasureScoreX.duration:type_name -> google.fhir.r5.core.Duration
	26,  // 97: google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.Component.ValueX.codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	35,  // 98: google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.Component.ValueX.boolean:type_name -> google.fhir.r5.core.Boolean
	32,  // 99: google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.Component.ValueX.quantity:type_name -> google.fhir.r5.core.Quantity
	33,  // 100: google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.Component.ValueX.range:type_name -> google.fhir.r5.core.Range
	23,  // 101: google.fhir.r5.core.MeasureReport.Group.Stratifier.StratifierGroup.Component.ValueX.reference:type_name -> google.fhir.r5.core.Reference
	102, // [102:102] is the sub-list for method output_type
	102, // [102:102] is the sub-list for method input_type
	102, // [102:102] is the sub-list for extension type_name
	102, // [102:102] is the sub-list for extension extendee
	0,   // [0:102] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_init() }
func file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_init() {
	if File_proto_google_fhir_proto_r5_core_resources_measure_report_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasureReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasureReport_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasureReport_TypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasureReport_DataUpdateTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasureReport_Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasureReport_Group_Population); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasureReport_Group_MeasureScoreX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasureReport_Group_Stratifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasureReport_Group_Stratifier_StratifierGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasureReport_Group_Stratifier_StratifierGroup_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasureReport_Group_Stratifier_StratifierGroup_Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasureReport_Group_Stratifier_StratifierGroup_StratifierGroupPopulation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*MeasureReport_Group_MeasureScoreX_Quantity)(nil),
		(*MeasureReport_Group_MeasureScoreX_DateTime)(nil),
		(*MeasureReport_Group_MeasureScoreX_CodeableConcept)(nil),
		(*MeasureReport_Group_MeasureScoreX_Period)(nil),
		(*MeasureReport_Group_MeasureScoreX_Range)(nil),
		(*MeasureReport_Group_MeasureScoreX_Duration)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*MeasureReport_Group_Stratifier_StratifierGroup_ValueX_CodeableConcept)(nil),
		(*MeasureReport_Group_Stratifier_StratifierGroup_ValueX_Boolean)(nil),
		(*MeasureReport_Group_Stratifier_StratifierGroup_ValueX_Quantity)(nil),
		(*MeasureReport_Group_Stratifier_StratifierGroup_ValueX_Range)(nil),
		(*MeasureReport_Group_Stratifier_StratifierGroup_ValueX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX_Quantity)(nil),
		(*MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX_DateTime)(nil),
		(*MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX_CodeableConcept)(nil),
		(*MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX_Period)(nil),
		(*MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX_Range)(nil),
		(*MeasureReport_Group_Stratifier_StratifierGroup_MeasureScoreX_Duration)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*MeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX_CodeableConcept)(nil),
		(*MeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX_Boolean)(nil),
		(*MeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX_Quantity)(nil),
		(*MeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX_Range)(nil),
		(*MeasureReport_Group_Stratifier_StratifierGroup_Component_ValueX_Reference)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r5_core_resources_measure_report_proto = out.File
	file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_rawDesc = nil
	file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_goTypes = nil
	file_proto_google_fhir_proto_r5_core_resources_measure_report_proto_depIdxs = nil
}
