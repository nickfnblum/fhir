//    Copyright 2023 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.21.12
// source: proto/google/fhir/proto/r5/core/resources/audit_event.proto

package audit_event_go_proto

import (
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	codes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/codes_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for AuditEvent.
// Record of an event.
// See http://hl7.org/fhir/StructureDefinition/AuditEvent
type AuditEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*anypb.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type/identifier of event
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,21,rep,name=category,proto3" json:"category,omitempty"`
	// Specific type of event
	Code     *datatypes_go_proto.CodeableConcept `protobuf:"bytes,22,opt,name=code,proto3" json:"code,omitempty"`
	Action   *AuditEvent_ActionCode              `protobuf:"bytes,12,opt,name=action,proto3" json:"action,omitempty"`
	Severity *AuditEvent_SeverityCode            `protobuf:"bytes,23,opt,name=severity,proto3" json:"severity,omitempty"`
	Occurred *AuditEvent_OccurredX               `protobuf:"bytes,24,opt,name=occurred,proto3" json:"occurred,omitempty"`
	// Time when the event was recorded
	Recorded *datatypes_go_proto.Instant `protobuf:"bytes,14,opt,name=recorded,proto3" json:"recorded,omitempty"`
	Outcome  *AuditEvent_Outcome         `protobuf:"bytes,25,opt,name=outcome,proto3" json:"outcome,omitempty"`
	// Authorization related to the event
	Authorization []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,26,rep,name=authorization,proto3" json:"authorization,omitempty"`
	// Workflow authorization within which this event occurred
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,27,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// The patient is the subject of the data used/created/updated/deleted during
	// the activity
	Patient *datatypes_go_proto.Reference `protobuf:"bytes,28,opt,name=patient,proto3" json:"patient,omitempty"`
	// Encounter within which this event occurred or which the event is tightly
	// associated
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,29,opt,name=encounter,proto3" json:"encounter,omitempty"`
	Agent     []*AuditEvent_Agent           `protobuf:"bytes,18,rep,name=agent,proto3" json:"agent,omitempty"`
	Source    *AuditEvent_Source            `protobuf:"bytes,19,opt,name=source,proto3" json:"source,omitempty"`
	Entity    []*AuditEvent_Entity          `protobuf:"bytes,20,rep,name=entity,proto3" json:"entity,omitempty"`
}

func (x *AuditEvent) Reset() {
	*x = AuditEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditEvent) ProtoMessage() {}

func (x *AuditEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditEvent.ProtoReflect.Descriptor instead.
func (*AuditEvent) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_rawDescGZIP(), []int{0}
}

func (x *AuditEvent) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AuditEvent) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *AuditEvent) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *AuditEvent) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *AuditEvent) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *AuditEvent) GetContained() []*anypb.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *AuditEvent) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *AuditEvent) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *AuditEvent) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *AuditEvent) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *AuditEvent) GetAction() *AuditEvent_ActionCode {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *AuditEvent) GetSeverity() *AuditEvent_SeverityCode {
	if x != nil {
		return x.Severity
	}
	return nil
}

func (x *AuditEvent) GetOccurred() *AuditEvent_OccurredX {
	if x != nil {
		return x.Occurred
	}
	return nil
}

func (x *AuditEvent) GetRecorded() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Recorded
	}
	return nil
}

func (x *AuditEvent) GetOutcome() *AuditEvent_Outcome {
	if x != nil {
		return x.Outcome
	}
	return nil
}

func (x *AuditEvent) GetAuthorization() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *AuditEvent) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *AuditEvent) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *AuditEvent) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *AuditEvent) GetAgent() []*AuditEvent_Agent {
	if x != nil {
		return x.Agent
	}
	return nil
}

func (x *AuditEvent) GetSource() *AuditEvent_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *AuditEvent) GetEntity() []*AuditEvent_Entity {
	if x != nil {
		return x.Entity
	}
	return nil
}

// Type of action performed during the event
type AuditEvent_ActionCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.AuditEventActionCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.AuditEventActionCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension           `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AuditEvent_ActionCode) Reset() {
	*x = AuditEvent_ActionCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditEvent_ActionCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditEvent_ActionCode) ProtoMessage() {}

func (x *AuditEvent_ActionCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditEvent_ActionCode.ProtoReflect.Descriptor instead.
func (*AuditEvent_ActionCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_rawDescGZIP(), []int{0, 0}
}

func (x *AuditEvent_ActionCode) GetValue() codes_go_proto.AuditEventActionCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.AuditEventActionCode_Value(0)
}

func (x *AuditEvent_ActionCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AuditEvent_ActionCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// emergency | alert | critical | error | warning | notice | informational |
// debug
type AuditEvent_SeverityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.AuditEventSeverityCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.AuditEventSeverityCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                  `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension             `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AuditEvent_SeverityCode) Reset() {
	*x = AuditEvent_SeverityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditEvent_SeverityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditEvent_SeverityCode) ProtoMessage() {}

func (x *AuditEvent_SeverityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditEvent_SeverityCode.ProtoReflect.Descriptor instead.
func (*AuditEvent_SeverityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_rawDescGZIP(), []int{0, 1}
}

func (x *AuditEvent_SeverityCode) GetValue() codes_go_proto.AuditEventSeverityCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.AuditEventSeverityCode_Value(0)
}

func (x *AuditEvent_SeverityCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AuditEvent_SeverityCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// When the activity occurred
type AuditEvent_OccurredX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*AuditEvent_OccurredX_Period
	//	*AuditEvent_OccurredX_DateTime
	Choice isAuditEvent_OccurredX_Choice `protobuf_oneof:"choice"`
}

func (x *AuditEvent_OccurredX) Reset() {
	*x = AuditEvent_OccurredX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditEvent_OccurredX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditEvent_OccurredX) ProtoMessage() {}

func (x *AuditEvent_OccurredX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditEvent_OccurredX.ProtoReflect.Descriptor instead.
func (*AuditEvent_OccurredX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_rawDescGZIP(), []int{0, 2}
}

func (m *AuditEvent_OccurredX) GetChoice() isAuditEvent_OccurredX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *AuditEvent_OccurredX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*AuditEvent_OccurredX_Period); ok {
		return x.Period
	}
	return nil
}

func (x *AuditEvent_OccurredX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*AuditEvent_OccurredX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

type isAuditEvent_OccurredX_Choice interface {
	isAuditEvent_OccurredX_Choice()
}

type AuditEvent_OccurredX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,1,opt,name=period,proto3,oneof"`
}

type AuditEvent_OccurredX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,2,opt,name=date_time,json=dateTime,proto3,oneof"`
}

func (*AuditEvent_OccurredX_Period) isAuditEvent_OccurredX_Choice() {}

func (*AuditEvent_OccurredX_DateTime) isAuditEvent_OccurredX_Choice() {}

// Whether the event succeeded or failed
type AuditEvent_Outcome struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Whether the event succeeded or failed
	Code *datatypes_go_proto.Coding `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// Additional outcome detail
	Detail []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,rep,name=detail,proto3" json:"detail,omitempty"`
}

func (x *AuditEvent_Outcome) Reset() {
	*x = AuditEvent_Outcome{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditEvent_Outcome) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditEvent_Outcome) ProtoMessage() {}

func (x *AuditEvent_Outcome) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditEvent_Outcome.ProtoReflect.Descriptor instead.
func (*AuditEvent_Outcome) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_rawDescGZIP(), []int{0, 3}
}

func (x *AuditEvent_Outcome) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AuditEvent_Outcome) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *AuditEvent_Outcome) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *AuditEvent_Outcome) GetCode() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *AuditEvent_Outcome) GetDetail() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Detail
	}
	return nil
}

// Actor involved in the event
type AuditEvent_Agent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// How agent participated
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Agent role in the event
	Role []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,rep,name=role,proto3" json:"role,omitempty"`
	// Identifier of who
	Who *datatypes_go_proto.Reference `protobuf:"bytes,6,opt,name=who,proto3" json:"who,omitempty"`
	// Whether user is initiator
	Requestor *datatypes_go_proto.Boolean `protobuf:"bytes,9,opt,name=requestor,proto3" json:"requestor,omitempty"`
	// The agent location when the event occurred
	Location *datatypes_go_proto.Reference `protobuf:"bytes,10,opt,name=location,proto3" json:"location,omitempty"`
	// Policy that authorized the agent participation in the event
	Policy  []*datatypes_go_proto.Uri  `protobuf:"bytes,11,rep,name=policy,proto3" json:"policy,omitempty"`
	Network *AuditEvent_Agent_NetworkX `protobuf:"bytes,15,opt,name=network,proto3" json:"network,omitempty"`
	// Allowable authorization for this agent
	Authorization []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,16,rep,name=authorization,proto3" json:"authorization,omitempty"`
}

func (x *AuditEvent_Agent) Reset() {
	*x = AuditEvent_Agent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditEvent_Agent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditEvent_Agent) ProtoMessage() {}

func (x *AuditEvent_Agent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditEvent_Agent.ProtoReflect.Descriptor instead.
func (*AuditEvent_Agent) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_rawDescGZIP(), []int{0, 4}
}

func (x *AuditEvent_Agent) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AuditEvent_Agent) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *AuditEvent_Agent) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *AuditEvent_Agent) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *AuditEvent_Agent) GetRole() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *AuditEvent_Agent) GetWho() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Who
	}
	return nil
}

func (x *AuditEvent_Agent) GetRequestor() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Requestor
	}
	return nil
}

func (x *AuditEvent_Agent) GetLocation() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *AuditEvent_Agent) GetPolicy() []*datatypes_go_proto.Uri {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *AuditEvent_Agent) GetNetwork() *AuditEvent_Agent_NetworkX {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *AuditEvent_Agent) GetAuthorization() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Authorization
	}
	return nil
}

// Audit Event Reporter
type AuditEvent_Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Logical source location within the enterprise
	Site *datatypes_go_proto.Reference `protobuf:"bytes,7,opt,name=site,proto3" json:"site,omitempty"`
	// The identity of source detecting the event
	Observer *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=observer,proto3" json:"observer,omitempty"`
	// The type of source where event originated
	Type []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,rep,name=type,proto3" json:"type,omitempty"`
}

func (x *AuditEvent_Source) Reset() {
	*x = AuditEvent_Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditEvent_Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditEvent_Source) ProtoMessage() {}

func (x *AuditEvent_Source) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditEvent_Source.ProtoReflect.Descriptor instead.
func (*AuditEvent_Source) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_rawDescGZIP(), []int{0, 5}
}

func (x *AuditEvent_Source) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AuditEvent_Source) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *AuditEvent_Source) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *AuditEvent_Source) GetSite() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Site
	}
	return nil
}

func (x *AuditEvent_Source) GetObserver() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Observer
	}
	return nil
}

func (x *AuditEvent_Source) GetType() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

// Data or objects used
type AuditEvent_Entity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Specific instance of resource
	What *datatypes_go_proto.Reference `protobuf:"bytes,4,opt,name=what,proto3" json:"what,omitempty"`
	// What role the entity played
	Role *datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,opt,name=role,proto3" json:"role,omitempty"`
	// Security labels on the entity
	SecurityLabel []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,rep,name=security_label,json=securityLabel,proto3" json:"security_label,omitempty"`
	// Query parameters
	Query  *datatypes_go_proto.Base64Binary `protobuf:"bytes,11,opt,name=query,proto3" json:"query,omitempty"`
	Detail []*AuditEvent_Entity_Detail      `protobuf:"bytes,12,rep,name=detail,proto3" json:"detail,omitempty"`
	// Entity is attributed to this agent
	Agent []*AuditEvent_Agent `protobuf:"bytes,15,rep,name=agent,proto3" json:"agent,omitempty"`
}

func (x *AuditEvent_Entity) Reset() {
	*x = AuditEvent_Entity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditEvent_Entity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditEvent_Entity) ProtoMessage() {}

func (x *AuditEvent_Entity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditEvent_Entity.ProtoReflect.Descriptor instead.
func (*AuditEvent_Entity) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_rawDescGZIP(), []int{0, 6}
}

func (x *AuditEvent_Entity) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AuditEvent_Entity) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *AuditEvent_Entity) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *AuditEvent_Entity) GetWhat() *datatypes_go_proto.Reference {
	if x != nil {
		return x.What
	}
	return nil
}

func (x *AuditEvent_Entity) GetRole() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *AuditEvent_Entity) GetSecurityLabel() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.SecurityLabel
	}
	return nil
}

func (x *AuditEvent_Entity) GetQuery() *datatypes_go_proto.Base64Binary {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *AuditEvent_Entity) GetDetail() []*AuditEvent_Entity_Detail {
	if x != nil {
		return x.Detail
	}
	return nil
}

func (x *AuditEvent_Entity) GetAgent() []*AuditEvent_Agent {
	if x != nil {
		return x.Agent
	}
	return nil
}

// This agent network location for the activity
type AuditEvent_Agent_NetworkX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*AuditEvent_Agent_NetworkX_Reference
	//	*AuditEvent_Agent_NetworkX_Uri
	//	*AuditEvent_Agent_NetworkX_StringValue
	Choice isAuditEvent_Agent_NetworkX_Choice `protobuf_oneof:"choice"`
}

func (x *AuditEvent_Agent_NetworkX) Reset() {
	*x = AuditEvent_Agent_NetworkX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditEvent_Agent_NetworkX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditEvent_Agent_NetworkX) ProtoMessage() {}

func (x *AuditEvent_Agent_NetworkX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditEvent_Agent_NetworkX.ProtoReflect.Descriptor instead.
func (*AuditEvent_Agent_NetworkX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (m *AuditEvent_Agent_NetworkX) GetChoice() isAuditEvent_Agent_NetworkX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *AuditEvent_Agent_NetworkX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*AuditEvent_Agent_NetworkX_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *AuditEvent_Agent_NetworkX) GetUri() *datatypes_go_proto.Uri {
	if x, ok := x.GetChoice().(*AuditEvent_Agent_NetworkX_Uri); ok {
		return x.Uri
	}
	return nil
}

func (x *AuditEvent_Agent_NetworkX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*AuditEvent_Agent_NetworkX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isAuditEvent_Agent_NetworkX_Choice interface {
	isAuditEvent_Agent_NetworkX_Choice()
}

type AuditEvent_Agent_NetworkX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,1,opt,name=reference,proto3,oneof"`
}

type AuditEvent_Agent_NetworkX_Uri struct {
	Uri *datatypes_go_proto.Uri `protobuf:"bytes,2,opt,name=uri,proto3,oneof"`
}

type AuditEvent_Agent_NetworkX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=string_value,json=string,proto3,oneof"`
}

func (*AuditEvent_Agent_NetworkX_Reference) isAuditEvent_Agent_NetworkX_Choice() {}

func (*AuditEvent_Agent_NetworkX_Uri) isAuditEvent_Agent_NetworkX_Choice() {}

func (*AuditEvent_Agent_NetworkX_StringValue) isAuditEvent_Agent_NetworkX_Choice() {}

// Additional Information about the entity
type AuditEvent_Entity_Detail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Name of the property
	Type  *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	Value *AuditEvent_Entity_Detail_ValueX    `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AuditEvent_Entity_Detail) Reset() {
	*x = AuditEvent_Entity_Detail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditEvent_Entity_Detail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditEvent_Entity_Detail) ProtoMessage() {}

func (x *AuditEvent_Entity_Detail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditEvent_Entity_Detail.ProtoReflect.Descriptor instead.
func (*AuditEvent_Entity_Detail) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_rawDescGZIP(), []int{0, 6, 0}
}

func (x *AuditEvent_Entity_Detail) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AuditEvent_Entity_Detail) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *AuditEvent_Entity_Detail) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *AuditEvent_Entity_Detail) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *AuditEvent_Entity_Detail) GetValue() *AuditEvent_Entity_Detail_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

// Property value
type AuditEvent_Entity_Detail_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*AuditEvent_Entity_Detail_ValueX_Quantity
	//	*AuditEvent_Entity_Detail_ValueX_CodeableConcept
	//	*AuditEvent_Entity_Detail_ValueX_StringValue
	//	*AuditEvent_Entity_Detail_ValueX_Boolean
	//	*AuditEvent_Entity_Detail_ValueX_Integer
	//	*AuditEvent_Entity_Detail_ValueX_Range
	//	*AuditEvent_Entity_Detail_ValueX_Ratio
	//	*AuditEvent_Entity_Detail_ValueX_Time
	//	*AuditEvent_Entity_Detail_ValueX_DateTime
	//	*AuditEvent_Entity_Detail_ValueX_Period
	//	*AuditEvent_Entity_Detail_ValueX_Base64Binary
	Choice isAuditEvent_Entity_Detail_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *AuditEvent_Entity_Detail_ValueX) Reset() {
	*x = AuditEvent_Entity_Detail_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditEvent_Entity_Detail_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditEvent_Entity_Detail_ValueX) ProtoMessage() {}

func (x *AuditEvent_Entity_Detail_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditEvent_Entity_Detail_ValueX.ProtoReflect.Descriptor instead.
func (*AuditEvent_Entity_Detail_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_rawDescGZIP(), []int{0, 6, 0, 0}
}

func (m *AuditEvent_Entity_Detail_ValueX) GetChoice() isAuditEvent_Entity_Detail_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *AuditEvent_Entity_Detail_ValueX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*AuditEvent_Entity_Detail_ValueX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *AuditEvent_Entity_Detail_ValueX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*AuditEvent_Entity_Detail_ValueX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *AuditEvent_Entity_Detail_ValueX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*AuditEvent_Entity_Detail_ValueX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *AuditEvent_Entity_Detail_ValueX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*AuditEvent_Entity_Detail_ValueX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *AuditEvent_Entity_Detail_ValueX) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetChoice().(*AuditEvent_Entity_Detail_ValueX_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *AuditEvent_Entity_Detail_ValueX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*AuditEvent_Entity_Detail_ValueX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *AuditEvent_Entity_Detail_ValueX) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetChoice().(*AuditEvent_Entity_Detail_ValueX_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *AuditEvent_Entity_Detail_ValueX) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetChoice().(*AuditEvent_Entity_Detail_ValueX_Time); ok {
		return x.Time
	}
	return nil
}

func (x *AuditEvent_Entity_Detail_ValueX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*AuditEvent_Entity_Detail_ValueX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *AuditEvent_Entity_Detail_ValueX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*AuditEvent_Entity_Detail_ValueX_Period); ok {
		return x.Period
	}
	return nil
}

func (x *AuditEvent_Entity_Detail_ValueX) GetBase64Binary() *datatypes_go_proto.Base64Binary {
	if x, ok := x.GetChoice().(*AuditEvent_Entity_Detail_ValueX_Base64Binary); ok {
		return x.Base64Binary
	}
	return nil
}

type isAuditEvent_Entity_Detail_ValueX_Choice interface {
	isAuditEvent_Entity_Detail_ValueX_Choice()
}

type AuditEvent_Entity_Detail_ValueX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,3,opt,name=quantity,proto3,oneof"`
}

type AuditEvent_Entity_Detail_ValueX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type AuditEvent_Entity_Detail_ValueX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=string_value,json=string,proto3,oneof"`
}

type AuditEvent_Entity_Detail_ValueX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,5,opt,name=boolean,proto3,oneof"`
}

type AuditEvent_Entity_Detail_ValueX_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,6,opt,name=integer,proto3,oneof"`
}

type AuditEvent_Entity_Detail_ValueX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,7,opt,name=range,proto3,oneof"`
}

type AuditEvent_Entity_Detail_ValueX_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,8,opt,name=ratio,proto3,oneof"`
}

type AuditEvent_Entity_Detail_ValueX_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,9,opt,name=time,proto3,oneof"`
}

type AuditEvent_Entity_Detail_ValueX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,10,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type AuditEvent_Entity_Detail_ValueX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,11,opt,name=period,proto3,oneof"`
}

type AuditEvent_Entity_Detail_ValueX_Base64Binary struct {
	Base64Binary *datatypes_go_proto.Base64Binary `protobuf:"bytes,2,opt,name=base64_binary,json=base64Binary,proto3,oneof"`
}

func (*AuditEvent_Entity_Detail_ValueX_Quantity) isAuditEvent_Entity_Detail_ValueX_Choice() {}

func (*AuditEvent_Entity_Detail_ValueX_CodeableConcept) isAuditEvent_Entity_Detail_ValueX_Choice() {}

func (*AuditEvent_Entity_Detail_ValueX_StringValue) isAuditEvent_Entity_Detail_ValueX_Choice() {}

func (*AuditEvent_Entity_Detail_ValueX_Boolean) isAuditEvent_Entity_Detail_ValueX_Choice() {}

func (*AuditEvent_Entity_Detail_ValueX_Integer) isAuditEvent_Entity_Detail_ValueX_Choice() {}

func (*AuditEvent_Entity_Detail_ValueX_Range) isAuditEvent_Entity_Detail_ValueX_Choice() {}

func (*AuditEvent_Entity_Detail_ValueX_Ratio) isAuditEvent_Entity_Detail_ValueX_Choice() {}

func (*AuditEvent_Entity_Detail_ValueX_Time) isAuditEvent_Entity_Detail_ValueX_Choice() {}

func (*AuditEvent_Entity_Detail_ValueX_DateTime) isAuditEvent_Entity_Detail_ValueX_Choice() {}

func (*AuditEvent_Entity_Detail_ValueX_Period) isAuditEvent_Entity_Detail_ValueX_Choice() {}

func (*AuditEvent_Entity_Detail_ValueX_Base64Binary) isAuditEvent_Entity_Detail_ValueX_Choice() {}

var File_proto_google_fhir_proto_r5_core_resources_audit_event_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_rawDesc = []byte{
	0x0a, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72,
	0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x92, 0x2e, 0x0a, 0x0a, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a,
	0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52,
	0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x42,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x08,
	0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x58, 0x52, 0x08, 0x6f, 0x63, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x52,
	0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0xc6, 0x01, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f,
	0x6e, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x8a, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08,
	0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x1a, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x11, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x04,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x47, 0x0a,
	0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0d,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x12,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x14, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x1a, 0xad, 0x02, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x3a, 0x6d, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2d, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01,
	0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x64, 0x65, 0x1a, 0xb3, 0x02, 0x0a, 0x0c, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6f, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x31, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x92, 0x01, 0x0a, 0x09, 0x4f, 0x63, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x64, 0x58, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83,
	0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xba, 0x02,
	0x0a, 0x07, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x06,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a, 0x8e, 0x08, 0x0a, 0x05, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x12, 0xac, 0x01, 0x0a, 0x03, 0x77, 0x68, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x7a, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10,
	0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x03, 0x77, 0x68,
	0x6f, 0x12, 0x3a, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x12, 0x4a, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x06, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x55, 0x72, 0x69, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x48, 0x0a, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x58, 0x52, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x4a, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0xd7, 0x01, 0x0a, 0x08, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x58, 0x12, 0x4e,
	0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2c,
	0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x55, 0x72, 0x69, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x3b, 0x0a, 0x0c,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xf9, 0x03, 0x0a, 0x06,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x42, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x73, 0x69, 0x74, 0x65, 0x12, 0xb6, 0x01, 0x0a, 0x08, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x7a, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43,
	0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x52, 0x08, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x38, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xdb, 0x0c, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x04,
	0x77, 0x68, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x04, 0x77, 0x68, 0x61, 0x74,
	0x12, 0x38, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x37, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x45, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x3b, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x1a, 0x8e, 0x08, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x52, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0xb3, 0x05, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x12, 0x38, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x05, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x32, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48,
	0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x48, 0x0a, 0x0d, 0x62, 0x61, 0x73,
	0x65, 0x36, 0x34, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0x3e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x42, 0x7b, 0x98, 0xc6, 0xb0,
	0xb5, 0x07, 0x05, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x01, 0x5a, 0x58,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_rawDescData = file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_rawDesc
)

func file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_rawDescData
}

var file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_goTypes = []interface{}{
	(*AuditEvent)(nil),                               // 0: google.fhir.r5.core.AuditEvent
	(*AuditEvent_ActionCode)(nil),                    // 1: google.fhir.r5.core.AuditEvent.ActionCode
	(*AuditEvent_SeverityCode)(nil),                  // 2: google.fhir.r5.core.AuditEvent.SeverityCode
	(*AuditEvent_OccurredX)(nil),                     // 3: google.fhir.r5.core.AuditEvent.OccurredX
	(*AuditEvent_Outcome)(nil),                       // 4: google.fhir.r5.core.AuditEvent.Outcome
	(*AuditEvent_Agent)(nil),                         // 5: google.fhir.r5.core.AuditEvent.Agent
	(*AuditEvent_Source)(nil),                        // 6: google.fhir.r5.core.AuditEvent.Source
	(*AuditEvent_Entity)(nil),                        // 7: google.fhir.r5.core.AuditEvent.Entity
	(*AuditEvent_Agent_NetworkX)(nil),                // 8: google.fhir.r5.core.AuditEvent.Agent.NetworkX
	(*AuditEvent_Entity_Detail)(nil),                 // 9: google.fhir.r5.core.AuditEvent.Entity.Detail
	(*AuditEvent_Entity_Detail_ValueX)(nil),          // 10: google.fhir.r5.core.AuditEvent.Entity.Detail.ValueX
	(*datatypes_go_proto.Id)(nil),                    // 11: google.fhir.r5.core.Id
	(*datatypes_go_proto.Meta)(nil),                  // 12: google.fhir.r5.core.Meta
	(*datatypes_go_proto.Uri)(nil),                   // 13: google.fhir.r5.core.Uri
	(*datatypes_go_proto.Code)(nil),                  // 14: google.fhir.r5.core.Code
	(*datatypes_go_proto.Narrative)(nil),             // 15: google.fhir.r5.core.Narrative
	(*anypb.Any)(nil),                                // 16: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),             // 17: google.fhir.r5.core.Extension
	(*datatypes_go_proto.CodeableConcept)(nil),       // 18: google.fhir.r5.core.CodeableConcept
	(*datatypes_go_proto.Instant)(nil),               // 19: google.fhir.r5.core.Instant
	(*datatypes_go_proto.Reference)(nil),             // 20: google.fhir.r5.core.Reference
	(codes_go_proto.AuditEventActionCode_Value)(0),   // 21: google.fhir.r5.core.AuditEventActionCode.Value
	(*datatypes_go_proto.String)(nil),                // 22: google.fhir.r5.core.String
	(codes_go_proto.AuditEventSeverityCode_Value)(0), // 23: google.fhir.r5.core.AuditEventSeverityCode.Value
	(*datatypes_go_proto.Period)(nil),                // 24: google.fhir.r5.core.Period
	(*datatypes_go_proto.DateTime)(nil),              // 25: google.fhir.r5.core.DateTime
	(*datatypes_go_proto.Coding)(nil),                // 26: google.fhir.r5.core.Coding
	(*datatypes_go_proto.Boolean)(nil),               // 27: google.fhir.r5.core.Boolean
	(*datatypes_go_proto.Base64Binary)(nil),          // 28: google.fhir.r5.core.Base64Binary
	(*datatypes_go_proto.Quantity)(nil),              // 29: google.fhir.r5.core.Quantity
	(*datatypes_go_proto.Integer)(nil),               // 30: google.fhir.r5.core.Integer
	(*datatypes_go_proto.Range)(nil),                 // 31: google.fhir.r5.core.Range
	(*datatypes_go_proto.Ratio)(nil),                 // 32: google.fhir.r5.core.Ratio
	(*datatypes_go_proto.Time)(nil),                  // 33: google.fhir.r5.core.Time
}
var file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_depIdxs = []int32{
	11, // 0: google.fhir.r5.core.AuditEvent.id:type_name -> google.fhir.r5.core.Id
	12, // 1: google.fhir.r5.core.AuditEvent.meta:type_name -> google.fhir.r5.core.Meta
	13, // 2: google.fhir.r5.core.AuditEvent.implicit_rules:type_name -> google.fhir.r5.core.Uri
	14, // 3: google.fhir.r5.core.AuditEvent.language:type_name -> google.fhir.r5.core.Code
	15, // 4: google.fhir.r5.core.AuditEvent.text:type_name -> google.fhir.r5.core.Narrative
	16, // 5: google.fhir.r5.core.AuditEvent.contained:type_name -> google.protobuf.Any
	17, // 6: google.fhir.r5.core.AuditEvent.extension:type_name -> google.fhir.r5.core.Extension
	17, // 7: google.fhir.r5.core.AuditEvent.modifier_extension:type_name -> google.fhir.r5.core.Extension
	18, // 8: google.fhir.r5.core.AuditEvent.category:type_name -> google.fhir.r5.core.CodeableConcept
	18, // 9: google.fhir.r5.core.AuditEvent.code:type_name -> google.fhir.r5.core.CodeableConcept
	1,  // 10: google.fhir.r5.core.AuditEvent.action:type_name -> google.fhir.r5.core.AuditEvent.ActionCode
	2,  // 11: google.fhir.r5.core.AuditEvent.severity:type_name -> google.fhir.r5.core.AuditEvent.SeverityCode
	3,  // 12: google.fhir.r5.core.AuditEvent.occurred:type_name -> google.fhir.r5.core.AuditEvent.OccurredX
	19, // 13: google.fhir.r5.core.AuditEvent.recorded:type_name -> google.fhir.r5.core.Instant
	4,  // 14: google.fhir.r5.core.AuditEvent.outcome:type_name -> google.fhir.r5.core.AuditEvent.Outcome
	18, // 15: google.fhir.r5.core.AuditEvent.authorization:type_name -> google.fhir.r5.core.CodeableConcept
	20, // 16: google.fhir.r5.core.AuditEvent.based_on:type_name -> google.fhir.r5.core.Reference
	20, // 17: google.fhir.r5.core.AuditEvent.patient:type_name -> google.fhir.r5.core.Reference
	20, // 18: google.fhir.r5.core.AuditEvent.encounter:type_name -> google.fhir.r5.core.Reference
	5,  // 19: google.fhir.r5.core.AuditEvent.agent:type_name -> google.fhir.r5.core.AuditEvent.Agent
	6,  // 20: google.fhir.r5.core.AuditEvent.source:type_name -> google.fhir.r5.core.AuditEvent.Source
	7,  // 21: google.fhir.r5.core.AuditEvent.entity:type_name -> google.fhir.r5.core.AuditEvent.Entity
	21, // 22: google.fhir.r5.core.AuditEvent.ActionCode.value:type_name -> google.fhir.r5.core.AuditEventActionCode.Value
	22, // 23: google.fhir.r5.core.AuditEvent.ActionCode.id:type_name -> google.fhir.r5.core.String
	17, // 24: google.fhir.r5.core.AuditEvent.ActionCode.extension:type_name -> google.fhir.r5.core.Extension
	23, // 25: google.fhir.r5.core.AuditEvent.SeverityCode.value:type_name -> google.fhir.r5.core.AuditEventSeverityCode.Value
	22, // 26: google.fhir.r5.core.AuditEvent.SeverityCode.id:type_name -> google.fhir.r5.core.String
	17, // 27: google.fhir.r5.core.AuditEvent.SeverityCode.extension:type_name -> google.fhir.r5.core.Extension
	24, // 28: google.fhir.r5.core.AuditEvent.OccurredX.period:type_name -> google.fhir.r5.core.Period
	25, // 29: google.fhir.r5.core.AuditEvent.OccurredX.date_time:type_name -> google.fhir.r5.core.DateTime
	22, // 30: google.fhir.r5.core.AuditEvent.Outcome.id:type_name -> google.fhir.r5.core.String
	17, // 31: google.fhir.r5.core.AuditEvent.Outcome.extension:type_name -> google.fhir.r5.core.Extension
	17, // 32: google.fhir.r5.core.AuditEvent.Outcome.modifier_extension:type_name -> google.fhir.r5.core.Extension
	26, // 33: google.fhir.r5.core.AuditEvent.Outcome.code:type_name -> google.fhir.r5.core.Coding
	18, // 34: google.fhir.r5.core.AuditEvent.Outcome.detail:type_name -> google.fhir.r5.core.CodeableConcept
	22, // 35: google.fhir.r5.core.AuditEvent.Agent.id:type_name -> google.fhir.r5.core.String
	17, // 36: google.fhir.r5.core.AuditEvent.Agent.extension:type_name -> google.fhir.r5.core.Extension
	17, // 37: google.fhir.r5.core.AuditEvent.Agent.modifier_extension:type_name -> google.fhir.r5.core.Extension
	18, // 38: google.fhir.r5.core.AuditEvent.Agent.type:type_name -> google.fhir.r5.core.CodeableConcept
	18, // 39: google.fhir.r5.core.AuditEvent.Agent.role:type_name -> google.fhir.r5.core.CodeableConcept
	20, // 40: google.fhir.r5.core.AuditEvent.Agent.who:type_name -> google.fhir.r5.core.Reference
	27, // 41: google.fhir.r5.core.AuditEvent.Agent.requestor:type_name -> google.fhir.r5.core.Boolean
	20, // 42: google.fhir.r5.core.AuditEvent.Agent.location:type_name -> google.fhir.r5.core.Reference
	13, // 43: google.fhir.r5.core.AuditEvent.Agent.policy:type_name -> google.fhir.r5.core.Uri
	8,  // 44: google.fhir.r5.core.AuditEvent.Agent.network:type_name -> google.fhir.r5.core.AuditEvent.Agent.NetworkX
	18, // 45: google.fhir.r5.core.AuditEvent.Agent.authorization:type_name -> google.fhir.r5.core.CodeableConcept
	22, // 46: google.fhir.r5.core.AuditEvent.Source.id:type_name -> google.fhir.r5.core.String
	17, // 47: google.fhir.r5.core.AuditEvent.Source.extension:type_name -> google.fhir.r5.core.Extension
	17, // 48: google.fhir.r5.core.AuditEvent.Source.modifier_extension:type_name -> google.fhir.r5.core.Extension
	20, // 49: google.fhir.r5.core.AuditEvent.Source.site:type_name -> google.fhir.r5.core.Reference
	20, // 50: google.fhir.r5.core.AuditEvent.Source.observer:type_name -> google.fhir.r5.core.Reference
	18, // 51: google.fhir.r5.core.AuditEvent.Source.type:type_name -> google.fhir.r5.core.CodeableConcept
	22, // 52: google.fhir.r5.core.AuditEvent.Entity.id:type_name -> google.fhir.r5.core.String
	17, // 53: google.fhir.r5.core.AuditEvent.Entity.extension:type_name -> google.fhir.r5.core.Extension
	17, // 54: google.fhir.r5.core.AuditEvent.Entity.modifier_extension:type_name -> google.fhir.r5.core.Extension
	20, // 55: google.fhir.r5.core.AuditEvent.Entity.what:type_name -> google.fhir.r5.core.Reference
	18, // 56: google.fhir.r5.core.AuditEvent.Entity.role:type_name -> google.fhir.r5.core.CodeableConcept
	18, // 57: google.fhir.r5.core.AuditEvent.Entity.security_label:type_name -> google.fhir.r5.core.CodeableConcept
	28, // 58: google.fhir.r5.core.AuditEvent.Entity.query:type_name -> google.fhir.r5.core.Base64Binary
	9,  // 59: google.fhir.r5.core.AuditEvent.Entity.detail:type_name -> google.fhir.r5.core.AuditEvent.Entity.Detail
	5,  // 60: google.fhir.r5.core.AuditEvent.Entity.agent:type_name -> google.fhir.r5.core.AuditEvent.Agent
	20, // 61: google.fhir.r5.core.AuditEvent.Agent.NetworkX.reference:type_name -> google.fhir.r5.core.Reference
	13, // 62: google.fhir.r5.core.AuditEvent.Agent.NetworkX.uri:type_name -> google.fhir.r5.core.Uri
	22, // 63: google.fhir.r5.core.AuditEvent.Agent.NetworkX.string_value:type_name -> google.fhir.r5.core.String
	22, // 64: google.fhir.r5.core.AuditEvent.Entity.Detail.id:type_name -> google.fhir.r5.core.String
	17, // 65: google.fhir.r5.core.AuditEvent.Entity.Detail.extension:type_name -> google.fhir.r5.core.Extension
	17, // 66: google.fhir.r5.core.AuditEvent.Entity.Detail.modifier_extension:type_name -> google.fhir.r5.core.Extension
	18, // 67: google.fhir.r5.core.AuditEvent.Entity.Detail.type:type_name -> google.fhir.r5.core.CodeableConcept
	10, // 68: google.fhir.r5.core.AuditEvent.Entity.Detail.value:type_name -> google.fhir.r5.core.AuditEvent.Entity.Detail.ValueX
	29, // 69: google.fhir.r5.core.AuditEvent.Entity.Detail.ValueX.quantity:type_name -> google.fhir.r5.core.Quantity
	18, // 70: google.fhir.r5.core.AuditEvent.Entity.Detail.ValueX.codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	22, // 71: google.fhir.r5.core.AuditEvent.Entity.Detail.ValueX.string_value:type_name -> google.fhir.r5.core.String
	27, // 72: google.fhir.r5.core.AuditEvent.Entity.Detail.ValueX.boolean:type_name -> google.fhir.r5.core.Boolean
	30, // 73: google.fhir.r5.core.AuditEvent.Entity.Detail.ValueX.integer:type_name -> google.fhir.r5.core.Integer
	31, // 74: google.fhir.r5.core.AuditEvent.Entity.Detail.ValueX.range:type_name -> google.fhir.r5.core.Range
	32, // 75: google.fhir.r5.core.AuditEvent.Entity.Detail.ValueX.ratio:type_name -> google.fhir.r5.core.Ratio
	33, // 76: google.fhir.r5.core.AuditEvent.Entity.Detail.ValueX.time:type_name -> google.fhir.r5.core.Time
	25, // 77: google.fhir.r5.core.AuditEvent.Entity.Detail.ValueX.date_time:type_name -> google.fhir.r5.core.DateTime
	24, // 78: google.fhir.r5.core.AuditEvent.Entity.Detail.ValueX.period:type_name -> google.fhir.r5.core.Period
	28, // 79: google.fhir.r5.core.AuditEvent.Entity.Detail.ValueX.base64_binary:type_name -> google.fhir.r5.core.Base64Binary
	80, // [80:80] is the sub-list for method output_type
	80, // [80:80] is the sub-list for method input_type
	80, // [80:80] is the sub-list for extension type_name
	80, // [80:80] is the sub-list for extension extendee
	0,  // [0:80] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_init() }
func file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_init() {
	if File_proto_google_fhir_proto_r5_core_resources_audit_event_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditEvent_ActionCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditEvent_SeverityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditEvent_OccurredX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditEvent_Outcome); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditEvent_Agent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditEvent_Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditEvent_Entity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditEvent_Agent_NetworkX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditEvent_Entity_Detail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditEvent_Entity_Detail_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*AuditEvent_OccurredX_Period)(nil),
		(*AuditEvent_OccurredX_DateTime)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*AuditEvent_Agent_NetworkX_Reference)(nil),
		(*AuditEvent_Agent_NetworkX_Uri)(nil),
		(*AuditEvent_Agent_NetworkX_StringValue)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*AuditEvent_Entity_Detail_ValueX_Quantity)(nil),
		(*AuditEvent_Entity_Detail_ValueX_CodeableConcept)(nil),
		(*AuditEvent_Entity_Detail_ValueX_StringValue)(nil),
		(*AuditEvent_Entity_Detail_ValueX_Boolean)(nil),
		(*AuditEvent_Entity_Detail_ValueX_Integer)(nil),
		(*AuditEvent_Entity_Detail_ValueX_Range)(nil),
		(*AuditEvent_Entity_Detail_ValueX_Ratio)(nil),
		(*AuditEvent_Entity_Detail_ValueX_Time)(nil),
		(*AuditEvent_Entity_Detail_ValueX_DateTime)(nil),
		(*AuditEvent_Entity_Detail_ValueX_Period)(nil),
		(*AuditEvent_Entity_Detail_ValueX_Base64Binary)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r5_core_resources_audit_event_proto = out.File
	file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_rawDesc = nil
	file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_goTypes = nil
	file_proto_google_fhir_proto_r5_core_resources_audit_event_proto_depIdxs = nil
}
