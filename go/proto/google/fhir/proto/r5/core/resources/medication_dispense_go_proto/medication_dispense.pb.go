//    Copyright 2023 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.21.12
// source: proto/google/fhir/proto/r5/core/resources/medication_dispense.proto

package medication_dispense_go_proto

import (
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	codes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/codes_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for MedicationDispense.
// Dispensing a medication to a named patient.
// See http://hl7.org/fhir/StructureDefinition/MedicationDispense
type MedicationDispense struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*anypb.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Plan that is fulfilled by this dispense
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,34,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// Event that dispense is part of
	PartOf []*datatypes_go_proto.Reference `protobuf:"bytes,11,rep,name=part_of,json=partOf,proto3" json:"part_of,omitempty"`
	Status *MedicationDispense_StatusCode  `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
	// Why a dispense was not performed
	NotPerformedReason *datatypes_go_proto.CodeableReference `protobuf:"bytes,35,opt,name=not_performed_reason,json=notPerformedReason,proto3" json:"not_performed_reason,omitempty"`
	// When the status changed
	StatusChanged *datatypes_go_proto.DateTime `protobuf:"bytes,36,opt,name=status_changed,json=statusChanged,proto3" json:"status_changed,omitempty"`
	// Type of medication dispense
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,37,rep,name=category,proto3" json:"category,omitempty"`
	// What medication was supplied
	Medication *datatypes_go_proto.CodeableReference `protobuf:"bytes,38,opt,name=medication,proto3" json:"medication,omitempty"`
	// Who the dispense is for
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,16,opt,name=subject,proto3" json:"subject,omitempty"`
	// Encounter associated with event
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,39,opt,name=encounter,proto3" json:"encounter,omitempty"`
	// Information that supports the dispensing of the medication
	SupportingInformation []*datatypes_go_proto.Reference `protobuf:"bytes,18,rep,name=supporting_information,json=supportingInformation,proto3" json:"supporting_information,omitempty"`
	Performer             []*MedicationDispense_Performer `protobuf:"bytes,19,rep,name=performer,proto3" json:"performer,omitempty"`
	// Where the dispense occurred
	Location *datatypes_go_proto.Reference `protobuf:"bytes,20,opt,name=location,proto3" json:"location,omitempty"`
	// Medication order that authorizes the dispense
	AuthorizingPrescription []*datatypes_go_proto.Reference `protobuf:"bytes,21,rep,name=authorizing_prescription,json=authorizingPrescription,proto3" json:"authorizing_prescription,omitempty"`
	// Trial fill, partial fill, emergency fill, etc
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,22,opt,name=type,proto3" json:"type,omitempty"`
	// Amount dispensed
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,23,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Amount of medication expressed as a timing amount
	DaysSupply *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,24,opt,name=days_supply,json=daysSupply,proto3" json:"days_supply,omitempty"`
	// When the recording of the dispense started
	Recorded *datatypes_go_proto.DateTime `protobuf:"bytes,40,opt,name=recorded,proto3" json:"recorded,omitempty"`
	// When product was packaged and reviewed
	WhenPrepared *datatypes_go_proto.DateTime `protobuf:"bytes,25,opt,name=when_prepared,json=whenPrepared,proto3" json:"when_prepared,omitempty"`
	// When product was given out
	WhenHandedOver *datatypes_go_proto.DateTime `protobuf:"bytes,26,opt,name=when_handed_over,json=whenHandedOver,proto3" json:"when_handed_over,omitempty"`
	// Where the medication was/will be sent
	Destination *datatypes_go_proto.Reference `protobuf:"bytes,27,opt,name=destination,proto3" json:"destination,omitempty"`
	// Who collected the medication or where the medication was delivered
	Receiver []*datatypes_go_proto.Reference `protobuf:"bytes,28,rep,name=receiver,proto3" json:"receiver,omitempty"`
	// Information about the dispense
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,29,rep,name=note,proto3" json:"note,omitempty"`
	// Full representation of the dosage instructions
	RenderedDosageInstruction *datatypes_go_proto.Markdown `protobuf:"bytes,41,opt,name=rendered_dosage_instruction,json=renderedDosageInstruction,proto3" json:"rendered_dosage_instruction,omitempty"`
	// How the medication is to be used by the patient or administered by the
	// caregiver
	DosageInstruction []*datatypes_go_proto.Dosage     `protobuf:"bytes,30,rep,name=dosage_instruction,json=dosageInstruction,proto3" json:"dosage_instruction,omitempty"`
	Substitution      *MedicationDispense_Substitution `protobuf:"bytes,31,opt,name=substitution,proto3" json:"substitution,omitempty"`
	// A list of relevant lifecycle events
	EventHistory []*datatypes_go_proto.Reference `protobuf:"bytes,33,rep,name=event_history,json=eventHistory,proto3" json:"event_history,omitempty"`
}

func (x *MedicationDispense) Reset() {
	*x = MedicationDispense{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_dispense_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationDispense) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationDispense) ProtoMessage() {}

func (x *MedicationDispense) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_dispense_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationDispense.ProtoReflect.Descriptor instead.
func (*MedicationDispense) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_dispense_proto_rawDescGZIP(), []int{0}
}

func (x *MedicationDispense) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationDispense) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *MedicationDispense) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *MedicationDispense) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *MedicationDispense) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *MedicationDispense) GetContained() []*anypb.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *MedicationDispense) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationDispense) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationDispense) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *MedicationDispense) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *MedicationDispense) GetPartOf() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.PartOf
	}
	return nil
}

func (x *MedicationDispense) GetStatus() *MedicationDispense_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MedicationDispense) GetNotPerformedReason() *datatypes_go_proto.CodeableReference {
	if x != nil {
		return x.NotPerformedReason
	}
	return nil
}

func (x *MedicationDispense) GetStatusChanged() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.StatusChanged
	}
	return nil
}

func (x *MedicationDispense) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *MedicationDispense) GetMedication() *datatypes_go_proto.CodeableReference {
	if x != nil {
		return x.Medication
	}
	return nil
}

func (x *MedicationDispense) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *MedicationDispense) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *MedicationDispense) GetSupportingInformation() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.SupportingInformation
	}
	return nil
}

func (x *MedicationDispense) GetPerformer() []*MedicationDispense_Performer {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *MedicationDispense) GetLocation() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *MedicationDispense) GetAuthorizingPrescription() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.AuthorizingPrescription
	}
	return nil
}

func (x *MedicationDispense) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MedicationDispense) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *MedicationDispense) GetDaysSupply() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.DaysSupply
	}
	return nil
}

func (x *MedicationDispense) GetRecorded() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Recorded
	}
	return nil
}

func (x *MedicationDispense) GetWhenPrepared() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.WhenPrepared
	}
	return nil
}

func (x *MedicationDispense) GetWhenHandedOver() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.WhenHandedOver
	}
	return nil
}

func (x *MedicationDispense) GetDestination() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *MedicationDispense) GetReceiver() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Receiver
	}
	return nil
}

func (x *MedicationDispense) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *MedicationDispense) GetRenderedDosageInstruction() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.RenderedDosageInstruction
	}
	return nil
}

func (x *MedicationDispense) GetDosageInstruction() []*datatypes_go_proto.Dosage {
	if x != nil {
		return x.DosageInstruction
	}
	return nil
}

func (x *MedicationDispense) GetSubstitution() *MedicationDispense_Substitution {
	if x != nil {
		return x.Substitution
	}
	return nil
}

func (x *MedicationDispense) GetEventHistory() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.EventHistory
	}
	return nil
}

// preparation | in-progress | cancelled | on-hold | completed |
// entered-in-error | stopped | declined | unknown
type MedicationDispense_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.MedicationDispenseStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.MedicationDispenseStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                   `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MedicationDispense_StatusCode) Reset() {
	*x = MedicationDispense_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_dispense_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationDispense_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationDispense_StatusCode) ProtoMessage() {}

func (x *MedicationDispense_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_dispense_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationDispense_StatusCode.ProtoReflect.Descriptor instead.
func (*MedicationDispense_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_dispense_proto_rawDescGZIP(), []int{0, 0}
}

func (x *MedicationDispense_StatusCode) GetValue() codes_go_proto.MedicationDispenseStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.MedicationDispenseStatusCode_Value(0)
}

func (x *MedicationDispense_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationDispense_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Who performed event
type MedicationDispense_Performer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Who performed the dispense and what they did
	Function *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=function,proto3" json:"function,omitempty"`
	// Individual who was performing
	Actor *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=actor,proto3" json:"actor,omitempty"`
}

func (x *MedicationDispense_Performer) Reset() {
	*x = MedicationDispense_Performer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_dispense_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationDispense_Performer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationDispense_Performer) ProtoMessage() {}

func (x *MedicationDispense_Performer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_dispense_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationDispense_Performer.ProtoReflect.Descriptor instead.
func (*MedicationDispense_Performer) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_dispense_proto_rawDescGZIP(), []int{0, 1}
}

func (x *MedicationDispense_Performer) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationDispense_Performer) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationDispense_Performer) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationDispense_Performer) GetFunction() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *MedicationDispense_Performer) GetActor() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Actor
	}
	return nil
}

// Whether a substitution was performed on the dispense
type MedicationDispense_Substitution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Whether a substitution was or was not performed on the dispense
	WasSubstituted *datatypes_go_proto.Boolean `protobuf:"bytes,4,opt,name=was_substituted,json=wasSubstituted,proto3" json:"was_substituted,omitempty"`
	// Code signifying whether a different drug was dispensed from what was
	// prescribed
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// Why was substitution made
	Reason []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,rep,name=reason,proto3" json:"reason,omitempty"`
	// Who is responsible for the substitution
	ResponsibleParty *datatypes_go_proto.Reference `protobuf:"bytes,8,opt,name=responsible_party,json=responsibleParty,proto3" json:"responsible_party,omitempty"`
}

func (x *MedicationDispense_Substitution) Reset() {
	*x = MedicationDispense_Substitution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_dispense_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationDispense_Substitution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationDispense_Substitution) ProtoMessage() {}

func (x *MedicationDispense_Substitution) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_dispense_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationDispense_Substitution.ProtoReflect.Descriptor instead.
func (*MedicationDispense_Substitution) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_dispense_proto_rawDescGZIP(), []int{0, 2}
}

func (x *MedicationDispense_Substitution) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationDispense_Substitution) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationDispense_Substitution) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationDispense_Substitution) GetWasSubstituted() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.WasSubstituted
	}
	return nil
}

func (x *MedicationDispense_Substitution) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MedicationDispense_Substitution) GetReason() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *MedicationDispense_Substitution) GetResponsibleParty() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ResponsibleParty
	}
	return nil
}

var File_proto_google_fhir_proto_r5_core_resources_medication_dispense_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r5_core_resources_medication_dispense_proto_rawDesc = []byte{
	0x0a, 0x43, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb2,
	0x20, 0x0a, 0x12, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73,
	0x70, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a,
	0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52,
	0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x08, 0x62,
	0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x07, 0x62,
	0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x66, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6f,
	0x66, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x2d, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x18, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x70, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x12, 0x52,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x58, 0x0a, 0x14, 0x6e, 0x6f, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x6e, 0x6f, 0x74, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x12, 0x40, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x25,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x4e, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1e, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x4d,
	0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x65, 0x0a,
	0x16, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x15, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x72, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65,
	0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x72, 0x0a, 0x18, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x17, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x17, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x3f, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x44, 0x0a, 0x0b, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x64, 0x61, 0x79, 0x73,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x39, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x65, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65,
	0x64, 0x12, 0x42, 0x0a, 0x0d, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0c, 0x77, 0x68, 0x65, 0x6e, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x10, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x68, 0x61,
	0x6e, 0x64, 0x65, 0x64, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0e,
	0x77, 0x68, 0x65, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x50,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x92, 0x01, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x1c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x56, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x08, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x1d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x5d, 0x0a, 0x1b, 0x72, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x19,
	0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x64, 0x44, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x12, 0x64, 0x6f, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x6f, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x11, 0x64, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70,
	0x65, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x55, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x10, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0a, 0x50, 0x72,
	0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0xbc, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a,
	0x74, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x69,
	0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xba, 0x03, 0x0a, 0x09, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a,
	0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0xb0, 0x01, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x7a, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x05, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x1a, 0x99, 0x04, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x0f, 0x77, 0x61, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0e, 0x77, 0x61,
	0x73, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x87, 0x01, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x3a, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x3a, 0x9c,
	0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3a, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x50, 0x77, 0x68, 0x65,
	0x6e, 0x48, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x2e, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x77,
	0x68, 0x65, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x20, 0x3e, 0x3d,
	0x20, 0x77, 0x68, 0x65, 0x6e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x4a, 0x04, 0x08,
	0x07, 0x10, 0x08, 0x42, 0x83, 0x01, 0x98, 0xc6, 0xb0, 0xb5, 0x07, 0x05, 0x0a, 0x17, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x01, 0x5a, 0x60, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65,
	0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_proto_google_fhir_proto_r5_core_resources_medication_dispense_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r5_core_resources_medication_dispense_proto_rawDescData = file_proto_google_fhir_proto_r5_core_resources_medication_dispense_proto_rawDesc
)

func file_proto_google_fhir_proto_r5_core_resources_medication_dispense_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r5_core_resources_medication_dispense_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r5_core_resources_medication_dispense_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r5_core_resources_medication_dispense_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r5_core_resources_medication_dispense_proto_rawDescData
}

var file_proto_google_fhir_proto_r5_core_resources_medication_dispense_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_proto_google_fhir_proto_r5_core_resources_medication_dispense_proto_goTypes = []interface{}{
	(*MedicationDispense)(nil),                             // 0: google.fhir.r5.core.MedicationDispense
	(*MedicationDispense_StatusCode)(nil),                  // 1: google.fhir.r5.core.MedicationDispense.StatusCode
	(*MedicationDispense_Performer)(nil),                   // 2: google.fhir.r5.core.MedicationDispense.Performer
	(*MedicationDispense_Substitution)(nil),                // 3: google.fhir.r5.core.MedicationDispense.Substitution
	(*datatypes_go_proto.Id)(nil),                          // 4: google.fhir.r5.core.Id
	(*datatypes_go_proto.Meta)(nil),                        // 5: google.fhir.r5.core.Meta
	(*datatypes_go_proto.Uri)(nil),                         // 6: google.fhir.r5.core.Uri
	(*datatypes_go_proto.Code)(nil),                        // 7: google.fhir.r5.core.Code
	(*datatypes_go_proto.Narrative)(nil),                   // 8: google.fhir.r5.core.Narrative
	(*anypb.Any)(nil),                                      // 9: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),                   // 10: google.fhir.r5.core.Extension
	(*datatypes_go_proto.Identifier)(nil),                  // 11: google.fhir.r5.core.Identifier
	(*datatypes_go_proto.Reference)(nil),                   // 12: google.fhir.r5.core.Reference
	(*datatypes_go_proto.CodeableReference)(nil),           // 13: google.fhir.r5.core.CodeableReference
	(*datatypes_go_proto.DateTime)(nil),                    // 14: google.fhir.r5.core.DateTime
	(*datatypes_go_proto.CodeableConcept)(nil),             // 15: google.fhir.r5.core.CodeableConcept
	(*datatypes_go_proto.SimpleQuantity)(nil),              // 16: google.fhir.r5.core.SimpleQuantity
	(*datatypes_go_proto.Annotation)(nil),                  // 17: google.fhir.r5.core.Annotation
	(*datatypes_go_proto.Markdown)(nil),                    // 18: google.fhir.r5.core.Markdown
	(*datatypes_go_proto.Dosage)(nil),                      // 19: google.fhir.r5.core.Dosage
	(codes_go_proto.MedicationDispenseStatusCode_Value)(0), // 20: google.fhir.r5.core.MedicationDispenseStatusCode.Value
	(*datatypes_go_proto.String)(nil),                      // 21: google.fhir.r5.core.String
	(*datatypes_go_proto.Boolean)(nil),                     // 22: google.fhir.r5.core.Boolean
}
var file_proto_google_fhir_proto_r5_core_resources_medication_dispense_proto_depIdxs = []int32{
	4,  // 0: google.fhir.r5.core.MedicationDispense.id:type_name -> google.fhir.r5.core.Id
	5,  // 1: google.fhir.r5.core.MedicationDispense.meta:type_name -> google.fhir.r5.core.Meta
	6,  // 2: google.fhir.r5.core.MedicationDispense.implicit_rules:type_name -> google.fhir.r5.core.Uri
	7,  // 3: google.fhir.r5.core.MedicationDispense.language:type_name -> google.fhir.r5.core.Code
	8,  // 4: google.fhir.r5.core.MedicationDispense.text:type_name -> google.fhir.r5.core.Narrative
	9,  // 5: google.fhir.r5.core.MedicationDispense.contained:type_name -> google.protobuf.Any
	10, // 6: google.fhir.r5.core.MedicationDispense.extension:type_name -> google.fhir.r5.core.Extension
	10, // 7: google.fhir.r5.core.MedicationDispense.modifier_extension:type_name -> google.fhir.r5.core.Extension
	11, // 8: google.fhir.r5.core.MedicationDispense.identifier:type_name -> google.fhir.r5.core.Identifier
	12, // 9: google.fhir.r5.core.MedicationDispense.based_on:type_name -> google.fhir.r5.core.Reference
	12, // 10: google.fhir.r5.core.MedicationDispense.part_of:type_name -> google.fhir.r5.core.Reference
	1,  // 11: google.fhir.r5.core.MedicationDispense.status:type_name -> google.fhir.r5.core.MedicationDispense.StatusCode
	13, // 12: google.fhir.r5.core.MedicationDispense.not_performed_reason:type_name -> google.fhir.r5.core.CodeableReference
	14, // 13: google.fhir.r5.core.MedicationDispense.status_changed:type_name -> google.fhir.r5.core.DateTime
	15, // 14: google.fhir.r5.core.MedicationDispense.category:type_name -> google.fhir.r5.core.CodeableConcept
	13, // 15: google.fhir.r5.core.MedicationDispense.medication:type_name -> google.fhir.r5.core.CodeableReference
	12, // 16: google.fhir.r5.core.MedicationDispense.subject:type_name -> google.fhir.r5.core.Reference
	12, // 17: google.fhir.r5.core.MedicationDispense.encounter:type_name -> google.fhir.r5.core.Reference
	12, // 18: google.fhir.r5.core.MedicationDispense.supporting_information:type_name -> google.fhir.r5.core.Reference
	2,  // 19: google.fhir.r5.core.MedicationDispense.performer:type_name -> google.fhir.r5.core.MedicationDispense.Performer
	12, // 20: google.fhir.r5.core.MedicationDispense.location:type_name -> google.fhir.r5.core.Reference
	12, // 21: google.fhir.r5.core.MedicationDispense.authorizing_prescription:type_name -> google.fhir.r5.core.Reference
	15, // 22: google.fhir.r5.core.MedicationDispense.type:type_name -> google.fhir.r5.core.CodeableConcept
	16, // 23: google.fhir.r5.core.MedicationDispense.quantity:type_name -> google.fhir.r5.core.SimpleQuantity
	16, // 24: google.fhir.r5.core.MedicationDispense.days_supply:type_name -> google.fhir.r5.core.SimpleQuantity
	14, // 25: google.fhir.r5.core.MedicationDispense.recorded:type_name -> google.fhir.r5.core.DateTime
	14, // 26: google.fhir.r5.core.MedicationDispense.when_prepared:type_name -> google.fhir.r5.core.DateTime
	14, // 27: google.fhir.r5.core.MedicationDispense.when_handed_over:type_name -> google.fhir.r5.core.DateTime
	12, // 28: google.fhir.r5.core.MedicationDispense.destination:type_name -> google.fhir.r5.core.Reference
	12, // 29: google.fhir.r5.core.MedicationDispense.receiver:type_name -> google.fhir.r5.core.Reference
	17, // 30: google.fhir.r5.core.MedicationDispense.note:type_name -> google.fhir.r5.core.Annotation
	18, // 31: google.fhir.r5.core.MedicationDispense.rendered_dosage_instruction:type_name -> google.fhir.r5.core.Markdown
	19, // 32: google.fhir.r5.core.MedicationDispense.dosage_instruction:type_name -> google.fhir.r5.core.Dosage
	3,  // 33: google.fhir.r5.core.MedicationDispense.substitution:type_name -> google.fhir.r5.core.MedicationDispense.Substitution
	12, // 34: google.fhir.r5.core.MedicationDispense.event_history:type_name -> google.fhir.r5.core.Reference
	20, // 35: google.fhir.r5.core.MedicationDispense.StatusCode.value:type_name -> google.fhir.r5.core.MedicationDispenseStatusCode.Value
	21, // 36: google.fhir.r5.core.MedicationDispense.StatusCode.id:type_name -> google.fhir.r5.core.String
	10, // 37: google.fhir.r5.core.MedicationDispense.StatusCode.extension:type_name -> google.fhir.r5.core.Extension
	21, // 38: google.fhir.r5.core.MedicationDispense.Performer.id:type_name -> google.fhir.r5.core.String
	10, // 39: google.fhir.r5.core.MedicationDispense.Performer.extension:type_name -> google.fhir.r5.core.Extension
	10, // 40: google.fhir.r5.core.MedicationDispense.Performer.modifier_extension:type_name -> google.fhir.r5.core.Extension
	15, // 41: google.fhir.r5.core.MedicationDispense.Performer.function:type_name -> google.fhir.r5.core.CodeableConcept
	12, // 42: google.fhir.r5.core.MedicationDispense.Performer.actor:type_name -> google.fhir.r5.core.Reference
	21, // 43: google.fhir.r5.core.MedicationDispense.Substitution.id:type_name -> google.fhir.r5.core.String
	10, // 44: google.fhir.r5.core.MedicationDispense.Substitution.extension:type_name -> google.fhir.r5.core.Extension
	10, // 45: google.fhir.r5.core.MedicationDispense.Substitution.modifier_extension:type_name -> google.fhir.r5.core.Extension
	22, // 46: google.fhir.r5.core.MedicationDispense.Substitution.was_substituted:type_name -> google.fhir.r5.core.Boolean
	15, // 47: google.fhir.r5.core.MedicationDispense.Substitution.type:type_name -> google.fhir.r5.core.CodeableConcept
	15, // 48: google.fhir.r5.core.MedicationDispense.Substitution.reason:type_name -> google.fhir.r5.core.CodeableConcept
	12, // 49: google.fhir.r5.core.MedicationDispense.Substitution.responsible_party:type_name -> google.fhir.r5.core.Reference
	50, // [50:50] is the sub-list for method output_type
	50, // [50:50] is the sub-list for method input_type
	50, // [50:50] is the sub-list for extension type_name
	50, // [50:50] is the sub-list for extension extendee
	0,  // [0:50] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r5_core_resources_medication_dispense_proto_init() }
func file_proto_google_fhir_proto_r5_core_resources_medication_dispense_proto_init() {
	if File_proto_google_fhir_proto_r5_core_resources_medication_dispense_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r5_core_resources_medication_dispense_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationDispense); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_dispense_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationDispense_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_dispense_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationDispense_Performer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_dispense_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationDispense_Substitution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r5_core_resources_medication_dispense_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r5_core_resources_medication_dispense_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r5_core_resources_medication_dispense_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r5_core_resources_medication_dispense_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r5_core_resources_medication_dispense_proto = out.File
	file_proto_google_fhir_proto_r5_core_resources_medication_dispense_proto_rawDesc = nil
	file_proto_google_fhir_proto_r5_core_resources_medication_dispense_proto_goTypes = nil
	file_proto_google_fhir_proto_r5_core_resources_medication_dispense_proto_depIdxs = nil
}
