//    Copyright 2023 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.21.12
// source: proto/google/fhir/proto/r5/core/resources/claim.proto

package claim_go_proto

import (
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	codes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/codes_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for Claim.
// Claim, Pre-determination or Pre-authorization.
// See http://hl7.org/fhir/StructureDefinition/Claim
type Claim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*anypb.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business Identifier for claim
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Number for tracking
	TraceNumber []*datatypes_go_proto.Identifier `protobuf:"bytes,37,rep,name=trace_number,json=traceNumber,proto3" json:"trace_number,omitempty"`
	Status      *Claim_StatusCode                `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Category or discipline
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,opt,name=type,proto3" json:"type,omitempty"`
	// More granular claim type
	SubType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,opt,name=sub_type,json=subType,proto3" json:"sub_type,omitempty"`
	Use     *Claim_UseCode                      `protobuf:"bytes,14,opt,name=use,proto3" json:"use,omitempty"`
	// The recipient of the products and services
	Patient *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=patient,proto3" json:"patient,omitempty"`
	// Relevant time frame for the claim
	BillablePeriod *datatypes_go_proto.Period `protobuf:"bytes,16,opt,name=billable_period,json=billablePeriod,proto3" json:"billable_period,omitempty"`
	// Resource creation date
	Created *datatypes_go_proto.DateTime `protobuf:"bytes,17,opt,name=created,proto3" json:"created,omitempty"`
	// Author of the claim
	Enterer *datatypes_go_proto.Reference `protobuf:"bytes,18,opt,name=enterer,proto3" json:"enterer,omitempty"`
	// Target
	Insurer *datatypes_go_proto.Reference `protobuf:"bytes,19,opt,name=insurer,proto3" json:"insurer,omitempty"`
	// Party responsible for the claim
	Provider *datatypes_go_proto.Reference `protobuf:"bytes,20,opt,name=provider,proto3" json:"provider,omitempty"`
	// Desired processing urgency
	Priority *datatypes_go_proto.CodeableConcept `protobuf:"bytes,21,opt,name=priority,proto3" json:"priority,omitempty"`
	// For whom to reserve funds
	FundsReserve *datatypes_go_proto.CodeableConcept `protobuf:"bytes,22,opt,name=funds_reserve,json=fundsReserve,proto3" json:"funds_reserve,omitempty"`
	Related      []*Claim_RelatedClaim               `protobuf:"bytes,23,rep,name=related,proto3" json:"related,omitempty"`
	// Prescription authorizing services and products
	Prescription *datatypes_go_proto.Reference `protobuf:"bytes,24,opt,name=prescription,proto3" json:"prescription,omitempty"`
	// Original prescription if superseded by fulfiller
	OriginalPrescription *datatypes_go_proto.Reference `protobuf:"bytes,25,opt,name=original_prescription,json=originalPrescription,proto3" json:"original_prescription,omitempty"`
	Payee                *Claim_Payee                  `protobuf:"bytes,26,opt,name=payee,proto3" json:"payee,omitempty"`
	// Treatment referral
	Referral *datatypes_go_proto.Reference `protobuf:"bytes,27,opt,name=referral,proto3" json:"referral,omitempty"`
	// Encounters associated with the listed treatments
	Encounter []*datatypes_go_proto.Reference `protobuf:"bytes,38,rep,name=encounter,proto3" json:"encounter,omitempty"`
	// Servicing facility
	Facility *datatypes_go_proto.Reference `protobuf:"bytes,28,opt,name=facility,proto3" json:"facility,omitempty"`
	// Package billing code
	DiagnosisRelatedGroup *datatypes_go_proto.CodeableConcept `protobuf:"bytes,39,opt,name=diagnosis_related_group,json=diagnosisRelatedGroup,proto3" json:"diagnosis_related_group,omitempty"`
	Event                 []*Claim_Event                      `protobuf:"bytes,40,rep,name=event,proto3" json:"event,omitempty"`
	CareTeam              []*Claim_CareTeam                   `protobuf:"bytes,29,rep,name=care_team,json=careTeam,proto3" json:"care_team,omitempty"`
	SupportingInfo        []*Claim_SupportingInformation      `protobuf:"bytes,30,rep,name=supporting_info,json=supportingInfo,proto3" json:"supporting_info,omitempty"`
	Diagnosis             []*Claim_Diagnosis                  `protobuf:"bytes,31,rep,name=diagnosis,proto3" json:"diagnosis,omitempty"`
	Procedure             []*Claim_Procedure                  `protobuf:"bytes,32,rep,name=procedure,proto3" json:"procedure,omitempty"`
	Insurance             []*Claim_Insurance                  `protobuf:"bytes,33,rep,name=insurance,proto3" json:"insurance,omitempty"`
	Accident              *Claim_Accident                     `protobuf:"bytes,34,opt,name=accident,proto3" json:"accident,omitempty"`
	// Paid by the patient
	PatientPaid *datatypes_go_proto.Money `protobuf:"bytes,41,opt,name=patient_paid,json=patientPaid,proto3" json:"patient_paid,omitempty"`
	Item        []*Claim_Item             `protobuf:"bytes,35,rep,name=item,proto3" json:"item,omitempty"`
	// Total claim cost
	Total *datatypes_go_proto.Money `protobuf:"bytes,36,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *Claim) Reset() {
	*x = Claim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Claim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Claim) ProtoMessage() {}

func (x *Claim) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Claim.ProtoReflect.Descriptor instead.
func (*Claim) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_claim_proto_rawDescGZIP(), []int{0}
}

func (x *Claim) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Claim) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Claim) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Claim) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Claim) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Claim) GetContained() []*anypb.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Claim) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Claim) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Claim) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Claim) GetTraceNumber() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.TraceNumber
	}
	return nil
}

func (x *Claim) GetStatus() *Claim_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Claim) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Claim) GetSubType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.SubType
	}
	return nil
}

func (x *Claim) GetUse() *Claim_UseCode {
	if x != nil {
		return x.Use
	}
	return nil
}

func (x *Claim) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *Claim) GetBillablePeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.BillablePeriod
	}
	return nil
}

func (x *Claim) GetCreated() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Claim) GetEnterer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Enterer
	}
	return nil
}

func (x *Claim) GetInsurer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Insurer
	}
	return nil
}

func (x *Claim) GetProvider() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *Claim) GetPriority() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *Claim) GetFundsReserve() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.FundsReserve
	}
	return nil
}

func (x *Claim) GetRelated() []*Claim_RelatedClaim {
	if x != nil {
		return x.Related
	}
	return nil
}

func (x *Claim) GetPrescription() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Prescription
	}
	return nil
}

func (x *Claim) GetOriginalPrescription() *datatypes_go_proto.Reference {
	if x != nil {
		return x.OriginalPrescription
	}
	return nil
}

func (x *Claim) GetPayee() *Claim_Payee {
	if x != nil {
		return x.Payee
	}
	return nil
}

func (x *Claim) GetReferral() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Referral
	}
	return nil
}

func (x *Claim) GetEncounter() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *Claim) GetFacility() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Facility
	}
	return nil
}

func (x *Claim) GetDiagnosisRelatedGroup() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DiagnosisRelatedGroup
	}
	return nil
}

func (x *Claim) GetEvent() []*Claim_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *Claim) GetCareTeam() []*Claim_CareTeam {
	if x != nil {
		return x.CareTeam
	}
	return nil
}

func (x *Claim) GetSupportingInfo() []*Claim_SupportingInformation {
	if x != nil {
		return x.SupportingInfo
	}
	return nil
}

func (x *Claim) GetDiagnosis() []*Claim_Diagnosis {
	if x != nil {
		return x.Diagnosis
	}
	return nil
}

func (x *Claim) GetProcedure() []*Claim_Procedure {
	if x != nil {
		return x.Procedure
	}
	return nil
}

func (x *Claim) GetInsurance() []*Claim_Insurance {
	if x != nil {
		return x.Insurance
	}
	return nil
}

func (x *Claim) GetAccident() *Claim_Accident {
	if x != nil {
		return x.Accident
	}
	return nil
}

func (x *Claim) GetPatientPaid() *datatypes_go_proto.Money {
	if x != nil {
		return x.PatientPaid
	}
	return nil
}

func (x *Claim) GetItem() []*Claim_Item {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *Claim) GetTotal() *datatypes_go_proto.Money {
	if x != nil {
		return x.Total
	}
	return nil
}

// active | cancelled | draft | entered-in-error
type Claim_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.FinancialResourceStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.FinancialResourceStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                  `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Claim_StatusCode) Reset() {
	*x = Claim_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Claim_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Claim_StatusCode) ProtoMessage() {}

func (x *Claim_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Claim_StatusCode.ProtoReflect.Descriptor instead.
func (*Claim_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_claim_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Claim_StatusCode) GetValue() codes_go_proto.FinancialResourceStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.FinancialResourceStatusCode_Value(0)
}

func (x *Claim_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Claim_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// claim | preauthorization | predetermination
type Claim_UseCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.UseCode_Value    `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.UseCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Claim_UseCode) Reset() {
	*x = Claim_UseCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Claim_UseCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Claim_UseCode) ProtoMessage() {}

func (x *Claim_UseCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Claim_UseCode.ProtoReflect.Descriptor instead.
func (*Claim_UseCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_claim_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Claim_UseCode) GetValue() codes_go_proto.UseCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.UseCode_Value(0)
}

func (x *Claim_UseCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Claim_UseCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Prior or corollary claims
type Claim_RelatedClaim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Reference to the related claim
	Claim *datatypes_go_proto.Reference `protobuf:"bytes,4,opt,name=claim,proto3" json:"claim,omitempty"`
	// How the reference claim is related
	Relationship *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=relationship,proto3" json:"relationship,omitempty"`
	// File or case reference
	Reference *datatypes_go_proto.Identifier `protobuf:"bytes,6,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *Claim_RelatedClaim) Reset() {
	*x = Claim_RelatedClaim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Claim_RelatedClaim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Claim_RelatedClaim) ProtoMessage() {}

func (x *Claim_RelatedClaim) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Claim_RelatedClaim.ProtoReflect.Descriptor instead.
func (*Claim_RelatedClaim) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_claim_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Claim_RelatedClaim) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Claim_RelatedClaim) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Claim_RelatedClaim) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Claim_RelatedClaim) GetClaim() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Claim
	}
	return nil
}

func (x *Claim_RelatedClaim) GetRelationship() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Relationship
	}
	return nil
}

func (x *Claim_RelatedClaim) GetReference() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Reference
	}
	return nil
}

// Recipient of benefits payable
type Claim_Payee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Category of recipient
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Recipient reference
	Party *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=party,proto3" json:"party,omitempty"`
}

func (x *Claim_Payee) Reset() {
	*x = Claim_Payee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Claim_Payee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Claim_Payee) ProtoMessage() {}

func (x *Claim_Payee) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Claim_Payee.ProtoReflect.Descriptor instead.
func (*Claim_Payee) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_claim_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Claim_Payee) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Claim_Payee) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Claim_Payee) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Claim_Payee) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Claim_Payee) GetParty() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Party
	}
	return nil
}

// Event information
type Claim_Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Specific event
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	When *Claim_Event_WhenX                  `protobuf:"bytes,5,opt,name=when,proto3" json:"when,omitempty"`
}

func (x *Claim_Event) Reset() {
	*x = Claim_Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Claim_Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Claim_Event) ProtoMessage() {}

func (x *Claim_Event) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Claim_Event.ProtoReflect.Descriptor instead.
func (*Claim_Event) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_claim_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Claim_Event) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Claim_Event) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Claim_Event) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Claim_Event) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Claim_Event) GetWhen() *Claim_Event_WhenX {
	if x != nil {
		return x.When
	}
	return nil
}

// Members of the care team
type Claim_CareTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Order of care team
	Sequence *datatypes_go_proto.PositiveInt `protobuf:"bytes,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Practitioner or organization
	Provider *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=provider,proto3" json:"provider,omitempty"`
	// Indicator of the lead practitioner
	Responsible *datatypes_go_proto.Boolean `protobuf:"bytes,6,opt,name=responsible,proto3" json:"responsible,omitempty"`
	// Function within the team
	Role *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=role,proto3" json:"role,omitempty"`
	// Practitioner or provider specialization
	Specialty *datatypes_go_proto.CodeableConcept `protobuf:"bytes,9,opt,name=specialty,proto3" json:"specialty,omitempty"`
}

func (x *Claim_CareTeam) Reset() {
	*x = Claim_CareTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Claim_CareTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Claim_CareTeam) ProtoMessage() {}

func (x *Claim_CareTeam) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Claim_CareTeam.ProtoReflect.Descriptor instead.
func (*Claim_CareTeam) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_claim_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Claim_CareTeam) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Claim_CareTeam) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Claim_CareTeam) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Claim_CareTeam) GetSequence() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.Sequence
	}
	return nil
}

func (x *Claim_CareTeam) GetProvider() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *Claim_CareTeam) GetResponsible() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Responsible
	}
	return nil
}

func (x *Claim_CareTeam) GetRole() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *Claim_CareTeam) GetSpecialty() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Specialty
	}
	return nil
}

// Supporting information
type Claim_SupportingInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Information instance identifier
	Sequence *datatypes_go_proto.PositiveInt `protobuf:"bytes,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Classification of the supplied information
	Category *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=category,proto3" json:"category,omitempty"`
	// Type of information
	Code   *datatypes_go_proto.CodeableConcept  `protobuf:"bytes,6,opt,name=code,proto3" json:"code,omitempty"`
	Timing *Claim_SupportingInformation_TimingX `protobuf:"bytes,7,opt,name=timing,proto3" json:"timing,omitempty"`
	Value  *Claim_SupportingInformation_ValueX  `protobuf:"bytes,8,opt,name=value,proto3" json:"value,omitempty"`
	// Explanation for the information
	Reason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,9,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *Claim_SupportingInformation) Reset() {
	*x = Claim_SupportingInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Claim_SupportingInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Claim_SupportingInformation) ProtoMessage() {}

func (x *Claim_SupportingInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Claim_SupportingInformation.ProtoReflect.Descriptor instead.
func (*Claim_SupportingInformation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_claim_proto_rawDescGZIP(), []int{0, 6}
}

func (x *Claim_SupportingInformation) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Claim_SupportingInformation) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Claim_SupportingInformation) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Claim_SupportingInformation) GetSequence() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.Sequence
	}
	return nil
}

func (x *Claim_SupportingInformation) GetCategory() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Claim_SupportingInformation) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Claim_SupportingInformation) GetTiming() *Claim_SupportingInformation_TimingX {
	if x != nil {
		return x.Timing
	}
	return nil
}

func (x *Claim_SupportingInformation) GetValue() *Claim_SupportingInformation_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Claim_SupportingInformation) GetReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Reason
	}
	return nil
}

// Pertinent diagnosis information
type Claim_Diagnosis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Diagnosis instance identifier
	Sequence  *datatypes_go_proto.PositiveInt `protobuf:"bytes,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Diagnosis *Claim_Diagnosis_DiagnosisX     `protobuf:"bytes,5,opt,name=diagnosis,proto3" json:"diagnosis,omitempty"`
	// Timing or nature of the diagnosis
	Type []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,rep,name=type,proto3" json:"type,omitempty"`
	// Present on admission
	OnAdmission *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=on_admission,json=onAdmission,proto3" json:"on_admission,omitempty"`
}

func (x *Claim_Diagnosis) Reset() {
	*x = Claim_Diagnosis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Claim_Diagnosis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Claim_Diagnosis) ProtoMessage() {}

func (x *Claim_Diagnosis) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Claim_Diagnosis.ProtoReflect.Descriptor instead.
func (*Claim_Diagnosis) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_claim_proto_rawDescGZIP(), []int{0, 7}
}

func (x *Claim_Diagnosis) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Claim_Diagnosis) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Claim_Diagnosis) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Claim_Diagnosis) GetSequence() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.Sequence
	}
	return nil
}

func (x *Claim_Diagnosis) GetDiagnosis() *Claim_Diagnosis_DiagnosisX {
	if x != nil {
		return x.Diagnosis
	}
	return nil
}

func (x *Claim_Diagnosis) GetType() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Claim_Diagnosis) GetOnAdmission() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.OnAdmission
	}
	return nil
}

// Clinical procedures performed
type Claim_Procedure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Procedure instance identifier
	Sequence *datatypes_go_proto.PositiveInt `protobuf:"bytes,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Category of Procedure
	Type []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,rep,name=type,proto3" json:"type,omitempty"`
	// When the procedure was performed
	Date      *datatypes_go_proto.DateTime `protobuf:"bytes,6,opt,name=date,proto3" json:"date,omitempty"`
	Procedure *Claim_Procedure_ProcedureX  `protobuf:"bytes,7,opt,name=procedure,proto3" json:"procedure,omitempty"`
	// Unique device identifier
	Udi []*datatypes_go_proto.Reference `protobuf:"bytes,8,rep,name=udi,proto3" json:"udi,omitempty"`
}

func (x *Claim_Procedure) Reset() {
	*x = Claim_Procedure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Claim_Procedure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Claim_Procedure) ProtoMessage() {}

func (x *Claim_Procedure) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Claim_Procedure.ProtoReflect.Descriptor instead.
func (*Claim_Procedure) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_claim_proto_rawDescGZIP(), []int{0, 8}
}

func (x *Claim_Procedure) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Claim_Procedure) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Claim_Procedure) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Claim_Procedure) GetSequence() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.Sequence
	}
	return nil
}

func (x *Claim_Procedure) GetType() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Claim_Procedure) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *Claim_Procedure) GetProcedure() *Claim_Procedure_ProcedureX {
	if x != nil {
		return x.Procedure
	}
	return nil
}

func (x *Claim_Procedure) GetUdi() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Udi
	}
	return nil
}

// Patient insurance information
type Claim_Insurance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Insurance instance identifier
	Sequence *datatypes_go_proto.PositiveInt `protobuf:"bytes,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Coverage to be used for adjudication
	Focal *datatypes_go_proto.Boolean `protobuf:"bytes,5,opt,name=focal,proto3" json:"focal,omitempty"`
	// Pre-assigned Claim number
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,6,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Insurance information
	Coverage *datatypes_go_proto.Reference `protobuf:"bytes,7,opt,name=coverage,proto3" json:"coverage,omitempty"`
	// Additional provider contract number
	BusinessArrangement *datatypes_go_proto.String `protobuf:"bytes,8,opt,name=business_arrangement,json=businessArrangement,proto3" json:"business_arrangement,omitempty"`
	// Prior authorization reference number
	PreAuthRef []*datatypes_go_proto.String `protobuf:"bytes,9,rep,name=pre_auth_ref,json=preAuthRef,proto3" json:"pre_auth_ref,omitempty"`
	// Adjudication results
	ClaimResponse *datatypes_go_proto.Reference `protobuf:"bytes,10,opt,name=claim_response,json=claimResponse,proto3" json:"claim_response,omitempty"`
}

func (x *Claim_Insurance) Reset() {
	*x = Claim_Insurance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Claim_Insurance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Claim_Insurance) ProtoMessage() {}

func (x *Claim_Insurance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Claim_Insurance.ProtoReflect.Descriptor instead.
func (*Claim_Insurance) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_claim_proto_rawDescGZIP(), []int{0, 9}
}

func (x *Claim_Insurance) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Claim_Insurance) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Claim_Insurance) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Claim_Insurance) GetSequence() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.Sequence
	}
	return nil
}

func (x *Claim_Insurance) GetFocal() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Focal
	}
	return nil
}

func (x *Claim_Insurance) GetIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Claim_Insurance) GetCoverage() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Coverage
	}
	return nil
}

func (x *Claim_Insurance) GetBusinessArrangement() *datatypes_go_proto.String {
	if x != nil {
		return x.BusinessArrangement
	}
	return nil
}

func (x *Claim_Insurance) GetPreAuthRef() []*datatypes_go_proto.String {
	if x != nil {
		return x.PreAuthRef
	}
	return nil
}

func (x *Claim_Insurance) GetClaimResponse() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ClaimResponse
	}
	return nil
}

// Details of the event
type Claim_Accident struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// When the incident occurred
	Date *datatypes_go_proto.Date `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
	// The nature of the accident
	Type     *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Location *Claim_Accident_LocationX           `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *Claim_Accident) Reset() {
	*x = Claim_Accident{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Claim_Accident) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Claim_Accident) ProtoMessage() {}

func (x *Claim_Accident) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Claim_Accident.ProtoReflect.Descriptor instead.
func (*Claim_Accident) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_claim_proto_rawDescGZIP(), []int{0, 10}
}

func (x *Claim_Accident) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Claim_Accident) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Claim_Accident) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Claim_Accident) GetDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *Claim_Accident) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Claim_Accident) GetLocation() *Claim_Accident_LocationX {
	if x != nil {
		return x.Location
	}
	return nil
}

// Product or service provided
type Claim_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Item instance identifier
	Sequence *datatypes_go_proto.PositiveInt `protobuf:"bytes,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Number for tracking
	TraceNumber []*datatypes_go_proto.Identifier `protobuf:"bytes,25,rep,name=trace_number,json=traceNumber,proto3" json:"trace_number,omitempty"`
	// Applicable careTeam members
	CareTeamSequence []*datatypes_go_proto.PositiveInt `protobuf:"bytes,5,rep,name=care_team_sequence,json=careTeamSequence,proto3" json:"care_team_sequence,omitempty"`
	// Applicable diagnoses
	DiagnosisSequence []*datatypes_go_proto.PositiveInt `protobuf:"bytes,6,rep,name=diagnosis_sequence,json=diagnosisSequence,proto3" json:"diagnosis_sequence,omitempty"`
	// Applicable procedures
	ProcedureSequence []*datatypes_go_proto.PositiveInt `protobuf:"bytes,7,rep,name=procedure_sequence,json=procedureSequence,proto3" json:"procedure_sequence,omitempty"`
	// Applicable exception and supporting information
	InformationSequence []*datatypes_go_proto.PositiveInt `protobuf:"bytes,8,rep,name=information_sequence,json=informationSequence,proto3" json:"information_sequence,omitempty"`
	// Revenue or cost center code
	Revenue *datatypes_go_proto.CodeableConcept `protobuf:"bytes,9,opt,name=revenue,proto3" json:"revenue,omitempty"`
	// Benefit classification
	Category *datatypes_go_proto.CodeableConcept `protobuf:"bytes,10,opt,name=category,proto3" json:"category,omitempty"`
	// Billing, service, product, or drug code
	ProductOrService *datatypes_go_proto.CodeableConcept `protobuf:"bytes,11,opt,name=product_or_service,json=productOrService,proto3" json:"product_or_service,omitempty"`
	// End of a range of codes
	ProductOrServiceEnd *datatypes_go_proto.CodeableConcept `protobuf:"bytes,26,opt,name=product_or_service_end,json=productOrServiceEnd,proto3" json:"product_or_service_end,omitempty"`
	// Request or Referral for Service
	Request []*datatypes_go_proto.Reference `protobuf:"bytes,27,rep,name=request,proto3" json:"request,omitempty"`
	// Product or service billing modifiers
	Modifier []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,rep,name=modifier,proto3" json:"modifier,omitempty"`
	// Program the product or service is provided under
	ProgramCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,rep,name=program_code,json=programCode,proto3" json:"program_code,omitempty"`
	Serviced    *Claim_Item_ServicedX                 `protobuf:"bytes,14,opt,name=serviced,proto3" json:"serviced,omitempty"`
	Location    *Claim_Item_LocationX                 `protobuf:"bytes,15,opt,name=location,proto3" json:"location,omitempty"`
	// Paid by the patient
	PatientPaid *datatypes_go_proto.Money `protobuf:"bytes,28,opt,name=patient_paid,json=patientPaid,proto3" json:"patient_paid,omitempty"`
	// Count of products or services
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,16,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Fee, charge or cost per item
	UnitPrice *datatypes_go_proto.Money `protobuf:"bytes,17,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price,omitempty"`
	// Price scaling factor
	Factor *datatypes_go_proto.Decimal `protobuf:"bytes,18,opt,name=factor,proto3" json:"factor,omitempty"`
	// Total tax
	Tax *datatypes_go_proto.Money `protobuf:"bytes,29,opt,name=tax,proto3" json:"tax,omitempty"`
	// Total item cost
	Net *datatypes_go_proto.Money `protobuf:"bytes,19,opt,name=net,proto3" json:"net,omitempty"`
	// Unique device identifier
	Udi      []*datatypes_go_proto.Reference `protobuf:"bytes,20,rep,name=udi,proto3" json:"udi,omitempty"`
	BodySite []*Claim_Item_BodySite          `protobuf:"bytes,30,rep,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	// Encounters associated with the listed treatments
	Encounter []*datatypes_go_proto.Reference `protobuf:"bytes,23,rep,name=encounter,proto3" json:"encounter,omitempty"`
	Detail    []*Claim_Item_Detail            `protobuf:"bytes,24,rep,name=detail,proto3" json:"detail,omitempty"`
}

func (x *Claim_Item) Reset() {
	*x = Claim_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Claim_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Claim_Item) ProtoMessage() {}

func (x *Claim_Item) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Claim_Item.ProtoReflect.Descriptor instead.
func (*Claim_Item) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_claim_proto_rawDescGZIP(), []int{0, 11}
}

func (x *Claim_Item) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Claim_Item) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Claim_Item) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Claim_Item) GetSequence() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.Sequence
	}
	return nil
}

func (x *Claim_Item) GetTraceNumber() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.TraceNumber
	}
	return nil
}

func (x *Claim_Item) GetCareTeamSequence() []*datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.CareTeamSequence
	}
	return nil
}

func (x *Claim_Item) GetDiagnosisSequence() []*datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.DiagnosisSequence
	}
	return nil
}

func (x *Claim_Item) GetProcedureSequence() []*datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.ProcedureSequence
	}
	return nil
}

func (x *Claim_Item) GetInformationSequence() []*datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.InformationSequence
	}
	return nil
}

func (x *Claim_Item) GetRevenue() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Revenue
	}
	return nil
}

func (x *Claim_Item) GetCategory() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Claim_Item) GetProductOrService() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ProductOrService
	}
	return nil
}

func (x *Claim_Item) GetProductOrServiceEnd() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ProductOrServiceEnd
	}
	return nil
}

func (x *Claim_Item) GetRequest() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *Claim_Item) GetModifier() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Modifier
	}
	return nil
}

func (x *Claim_Item) GetProgramCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ProgramCode
	}
	return nil
}

func (x *Claim_Item) GetServiced() *Claim_Item_ServicedX {
	if x != nil {
		return x.Serviced
	}
	return nil
}

func (x *Claim_Item) GetLocation() *Claim_Item_LocationX {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Claim_Item) GetPatientPaid() *datatypes_go_proto.Money {
	if x != nil {
		return x.PatientPaid
	}
	return nil
}

func (x *Claim_Item) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *Claim_Item) GetUnitPrice() *datatypes_go_proto.Money {
	if x != nil {
		return x.UnitPrice
	}
	return nil
}

func (x *Claim_Item) GetFactor() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Factor
	}
	return nil
}

func (x *Claim_Item) GetTax() *datatypes_go_proto.Money {
	if x != nil {
		return x.Tax
	}
	return nil
}

func (x *Claim_Item) GetNet() *datatypes_go_proto.Money {
	if x != nil {
		return x.Net
	}
	return nil
}

func (x *Claim_Item) GetUdi() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Udi
	}
	return nil
}

func (x *Claim_Item) GetBodySite() []*Claim_Item_BodySite {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *Claim_Item) GetEncounter() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *Claim_Item) GetDetail() []*Claim_Item_Detail {
	if x != nil {
		return x.Detail
	}
	return nil
}

// Occurance date or period
type Claim_Event_WhenX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*Claim_Event_WhenX_DateTime
	//	*Claim_Event_WhenX_Period
	Choice isClaim_Event_WhenX_Choice `protobuf_oneof:"choice"`
}

func (x *Claim_Event_WhenX) Reset() {
	*x = Claim_Event_WhenX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Claim_Event_WhenX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Claim_Event_WhenX) ProtoMessage() {}

func (x *Claim_Event_WhenX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Claim_Event_WhenX.ProtoReflect.Descriptor instead.
func (*Claim_Event_WhenX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_claim_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (m *Claim_Event_WhenX) GetChoice() isClaim_Event_WhenX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Claim_Event_WhenX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*Claim_Event_WhenX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *Claim_Event_WhenX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*Claim_Event_WhenX_Period); ok {
		return x.Period
	}
	return nil
}

type isClaim_Event_WhenX_Choice interface {
	isClaim_Event_WhenX_Choice()
}

type Claim_Event_WhenX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type Claim_Event_WhenX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*Claim_Event_WhenX_DateTime) isClaim_Event_WhenX_Choice() {}

func (*Claim_Event_WhenX_Period) isClaim_Event_WhenX_Choice() {}

// When it occurred
type Claim_SupportingInformation_TimingX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*Claim_SupportingInformation_TimingX_Date
	//	*Claim_SupportingInformation_TimingX_Period
	Choice isClaim_SupportingInformation_TimingX_Choice `protobuf_oneof:"choice"`
}

func (x *Claim_SupportingInformation_TimingX) Reset() {
	*x = Claim_SupportingInformation_TimingX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Claim_SupportingInformation_TimingX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Claim_SupportingInformation_TimingX) ProtoMessage() {}

func (x *Claim_SupportingInformation_TimingX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Claim_SupportingInformation_TimingX.ProtoReflect.Descriptor instead.
func (*Claim_SupportingInformation_TimingX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_claim_proto_rawDescGZIP(), []int{0, 6, 0}
}

func (m *Claim_SupportingInformation_TimingX) GetChoice() isClaim_SupportingInformation_TimingX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Claim_SupportingInformation_TimingX) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetChoice().(*Claim_SupportingInformation_TimingX_Date); ok {
		return x.Date
	}
	return nil
}

func (x *Claim_SupportingInformation_TimingX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*Claim_SupportingInformation_TimingX_Period); ok {
		return x.Period
	}
	return nil
}

type isClaim_SupportingInformation_TimingX_Choice interface {
	isClaim_SupportingInformation_TimingX_Choice()
}

type Claim_SupportingInformation_TimingX_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,1,opt,name=date,proto3,oneof"`
}

type Claim_SupportingInformation_TimingX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*Claim_SupportingInformation_TimingX_Date) isClaim_SupportingInformation_TimingX_Choice() {}

func (*Claim_SupportingInformation_TimingX_Period) isClaim_SupportingInformation_TimingX_Choice() {}

// Data to be provided
type Claim_SupportingInformation_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*Claim_SupportingInformation_ValueX_Boolean
	//	*Claim_SupportingInformation_ValueX_StringValue
	//	*Claim_SupportingInformation_ValueX_Quantity
	//	*Claim_SupportingInformation_ValueX_Attachment
	//	*Claim_SupportingInformation_ValueX_Reference
	//	*Claim_SupportingInformation_ValueX_Identifier
	Choice isClaim_SupportingInformation_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *Claim_SupportingInformation_ValueX) Reset() {
	*x = Claim_SupportingInformation_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Claim_SupportingInformation_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Claim_SupportingInformation_ValueX) ProtoMessage() {}

func (x *Claim_SupportingInformation_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Claim_SupportingInformation_ValueX.ProtoReflect.Descriptor instead.
func (*Claim_SupportingInformation_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_claim_proto_rawDescGZIP(), []int{0, 6, 1}
}

func (m *Claim_SupportingInformation_ValueX) GetChoice() isClaim_SupportingInformation_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Claim_SupportingInformation_ValueX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*Claim_SupportingInformation_ValueX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *Claim_SupportingInformation_ValueX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*Claim_SupportingInformation_ValueX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *Claim_SupportingInformation_ValueX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*Claim_SupportingInformation_ValueX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *Claim_SupportingInformation_ValueX) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetChoice().(*Claim_SupportingInformation_ValueX_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *Claim_SupportingInformation_ValueX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*Claim_SupportingInformation_ValueX_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *Claim_SupportingInformation_ValueX) GetIdentifier() *datatypes_go_proto.Identifier {
	if x, ok := x.GetChoice().(*Claim_SupportingInformation_ValueX_Identifier); ok {
		return x.Identifier
	}
	return nil
}

type isClaim_SupportingInformation_ValueX_Choice interface {
	isClaim_SupportingInformation_ValueX_Choice()
}

type Claim_SupportingInformation_ValueX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,1,opt,name=boolean,proto3,oneof"`
}

type Claim_SupportingInformation_ValueX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,2,opt,name=string_value,json=string,proto3,oneof"`
}

type Claim_SupportingInformation_ValueX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,3,opt,name=quantity,proto3,oneof"`
}

type Claim_SupportingInformation_ValueX_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,4,opt,name=attachment,proto3,oneof"`
}

type Claim_SupportingInformation_ValueX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=reference,proto3,oneof"`
}

type Claim_SupportingInformation_ValueX_Identifier struct {
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,6,opt,name=identifier,proto3,oneof"`
}

func (*Claim_SupportingInformation_ValueX_Boolean) isClaim_SupportingInformation_ValueX_Choice() {}

func (*Claim_SupportingInformation_ValueX_StringValue) isClaim_SupportingInformation_ValueX_Choice() {
}

func (*Claim_SupportingInformation_ValueX_Quantity) isClaim_SupportingInformation_ValueX_Choice() {}

func (*Claim_SupportingInformation_ValueX_Attachment) isClaim_SupportingInformation_ValueX_Choice() {}

func (*Claim_SupportingInformation_ValueX_Reference) isClaim_SupportingInformation_ValueX_Choice() {}

func (*Claim_SupportingInformation_ValueX_Identifier) isClaim_SupportingInformation_ValueX_Choice() {}

// Nature of illness or problem
type Claim_Diagnosis_DiagnosisX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*Claim_Diagnosis_DiagnosisX_CodeableConcept
	//	*Claim_Diagnosis_DiagnosisX_Reference
	Choice isClaim_Diagnosis_DiagnosisX_Choice `protobuf_oneof:"choice"`
}

func (x *Claim_Diagnosis_DiagnosisX) Reset() {
	*x = Claim_Diagnosis_DiagnosisX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Claim_Diagnosis_DiagnosisX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Claim_Diagnosis_DiagnosisX) ProtoMessage() {}

func (x *Claim_Diagnosis_DiagnosisX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Claim_Diagnosis_DiagnosisX.ProtoReflect.Descriptor instead.
func (*Claim_Diagnosis_DiagnosisX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_claim_proto_rawDescGZIP(), []int{0, 7, 0}
}

func (m *Claim_Diagnosis_DiagnosisX) GetChoice() isClaim_Diagnosis_DiagnosisX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Claim_Diagnosis_DiagnosisX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*Claim_Diagnosis_DiagnosisX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *Claim_Diagnosis_DiagnosisX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*Claim_Diagnosis_DiagnosisX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isClaim_Diagnosis_DiagnosisX_Choice interface {
	isClaim_Diagnosis_DiagnosisX_Choice()
}

type Claim_Diagnosis_DiagnosisX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type Claim_Diagnosis_DiagnosisX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*Claim_Diagnosis_DiagnosisX_CodeableConcept) isClaim_Diagnosis_DiagnosisX_Choice() {}

func (*Claim_Diagnosis_DiagnosisX_Reference) isClaim_Diagnosis_DiagnosisX_Choice() {}

// Specific clinical procedure
type Claim_Procedure_ProcedureX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*Claim_Procedure_ProcedureX_CodeableConcept
	//	*Claim_Procedure_ProcedureX_Reference
	Choice isClaim_Procedure_ProcedureX_Choice `protobuf_oneof:"choice"`
}

func (x *Claim_Procedure_ProcedureX) Reset() {
	*x = Claim_Procedure_ProcedureX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Claim_Procedure_ProcedureX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Claim_Procedure_ProcedureX) ProtoMessage() {}

func (x *Claim_Procedure_ProcedureX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Claim_Procedure_ProcedureX.ProtoReflect.Descriptor instead.
func (*Claim_Procedure_ProcedureX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_claim_proto_rawDescGZIP(), []int{0, 8, 0}
}

func (m *Claim_Procedure_ProcedureX) GetChoice() isClaim_Procedure_ProcedureX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Claim_Procedure_ProcedureX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*Claim_Procedure_ProcedureX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *Claim_Procedure_ProcedureX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*Claim_Procedure_ProcedureX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isClaim_Procedure_ProcedureX_Choice interface {
	isClaim_Procedure_ProcedureX_Choice()
}

type Claim_Procedure_ProcedureX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type Claim_Procedure_ProcedureX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*Claim_Procedure_ProcedureX_CodeableConcept) isClaim_Procedure_ProcedureX_Choice() {}

func (*Claim_Procedure_ProcedureX_Reference) isClaim_Procedure_ProcedureX_Choice() {}

// Where the event occurred
type Claim_Accident_LocationX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*Claim_Accident_LocationX_Address
	//	*Claim_Accident_LocationX_Reference
	Choice isClaim_Accident_LocationX_Choice `protobuf_oneof:"choice"`
}

func (x *Claim_Accident_LocationX) Reset() {
	*x = Claim_Accident_LocationX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Claim_Accident_LocationX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Claim_Accident_LocationX) ProtoMessage() {}

func (x *Claim_Accident_LocationX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Claim_Accident_LocationX.ProtoReflect.Descriptor instead.
func (*Claim_Accident_LocationX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_claim_proto_rawDescGZIP(), []int{0, 10, 0}
}

func (m *Claim_Accident_LocationX) GetChoice() isClaim_Accident_LocationX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Claim_Accident_LocationX) GetAddress() *datatypes_go_proto.Address {
	if x, ok := x.GetChoice().(*Claim_Accident_LocationX_Address); ok {
		return x.Address
	}
	return nil
}

func (x *Claim_Accident_LocationX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*Claim_Accident_LocationX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isClaim_Accident_LocationX_Choice interface {
	isClaim_Accident_LocationX_Choice()
}

type Claim_Accident_LocationX_Address struct {
	Address *datatypes_go_proto.Address `protobuf:"bytes,1,opt,name=address,proto3,oneof"`
}

type Claim_Accident_LocationX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*Claim_Accident_LocationX_Address) isClaim_Accident_LocationX_Choice() {}

func (*Claim_Accident_LocationX_Reference) isClaim_Accident_LocationX_Choice() {}

// Date or dates of service or product delivery
type Claim_Item_ServicedX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*Claim_Item_ServicedX_Date
	//	*Claim_Item_ServicedX_Period
	Choice isClaim_Item_ServicedX_Choice `protobuf_oneof:"choice"`
}

func (x *Claim_Item_ServicedX) Reset() {
	*x = Claim_Item_ServicedX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Claim_Item_ServicedX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Claim_Item_ServicedX) ProtoMessage() {}

func (x *Claim_Item_ServicedX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Claim_Item_ServicedX.ProtoReflect.Descriptor instead.
func (*Claim_Item_ServicedX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_claim_proto_rawDescGZIP(), []int{0, 11, 0}
}

func (m *Claim_Item_ServicedX) GetChoice() isClaim_Item_ServicedX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Claim_Item_ServicedX) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetChoice().(*Claim_Item_ServicedX_Date); ok {
		return x.Date
	}
	return nil
}

func (x *Claim_Item_ServicedX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*Claim_Item_ServicedX_Period); ok {
		return x.Period
	}
	return nil
}

type isClaim_Item_ServicedX_Choice interface {
	isClaim_Item_ServicedX_Choice()
}

type Claim_Item_ServicedX_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,1,opt,name=date,proto3,oneof"`
}

type Claim_Item_ServicedX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*Claim_Item_ServicedX_Date) isClaim_Item_ServicedX_Choice() {}

func (*Claim_Item_ServicedX_Period) isClaim_Item_ServicedX_Choice() {}

// Place of service or where product was supplied
type Claim_Item_LocationX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*Claim_Item_LocationX_CodeableConcept
	//	*Claim_Item_LocationX_Address
	//	*Claim_Item_LocationX_Reference
	Choice isClaim_Item_LocationX_Choice `protobuf_oneof:"choice"`
}

func (x *Claim_Item_LocationX) Reset() {
	*x = Claim_Item_LocationX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Claim_Item_LocationX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Claim_Item_LocationX) ProtoMessage() {}

func (x *Claim_Item_LocationX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Claim_Item_LocationX.ProtoReflect.Descriptor instead.
func (*Claim_Item_LocationX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_claim_proto_rawDescGZIP(), []int{0, 11, 1}
}

func (m *Claim_Item_LocationX) GetChoice() isClaim_Item_LocationX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Claim_Item_LocationX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*Claim_Item_LocationX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *Claim_Item_LocationX) GetAddress() *datatypes_go_proto.Address {
	if x, ok := x.GetChoice().(*Claim_Item_LocationX_Address); ok {
		return x.Address
	}
	return nil
}

func (x *Claim_Item_LocationX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*Claim_Item_LocationX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isClaim_Item_LocationX_Choice interface {
	isClaim_Item_LocationX_Choice()
}

type Claim_Item_LocationX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type Claim_Item_LocationX_Address struct {
	Address *datatypes_go_proto.Address `protobuf:"bytes,2,opt,name=address,proto3,oneof"`
}

type Claim_Item_LocationX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=reference,proto3,oneof"`
}

func (*Claim_Item_LocationX_CodeableConcept) isClaim_Item_LocationX_Choice() {}

func (*Claim_Item_LocationX_Address) isClaim_Item_LocationX_Choice() {}

func (*Claim_Item_LocationX_Reference) isClaim_Item_LocationX_Choice() {}

// Anatomical location
type Claim_Item_BodySite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Location
	Site []*datatypes_go_proto.CodeableReference `protobuf:"bytes,4,rep,name=site,proto3" json:"site,omitempty"`
	// Sub-location
	SubSite []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,rep,name=sub_site,json=subSite,proto3" json:"sub_site,omitempty"`
}

func (x *Claim_Item_BodySite) Reset() {
	*x = Claim_Item_BodySite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Claim_Item_BodySite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Claim_Item_BodySite) ProtoMessage() {}

func (x *Claim_Item_BodySite) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Claim_Item_BodySite.ProtoReflect.Descriptor instead.
func (*Claim_Item_BodySite) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_claim_proto_rawDescGZIP(), []int{0, 11, 2}
}

func (x *Claim_Item_BodySite) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Claim_Item_BodySite) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Claim_Item_BodySite) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Claim_Item_BodySite) GetSite() []*datatypes_go_proto.CodeableReference {
	if x != nil {
		return x.Site
	}
	return nil
}

func (x *Claim_Item_BodySite) GetSubSite() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.SubSite
	}
	return nil
}

// Product or service provided
type Claim_Item_Detail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Item instance identifier
	Sequence *datatypes_go_proto.PositiveInt `protobuf:"bytes,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Number for tracking
	TraceNumber []*datatypes_go_proto.Identifier `protobuf:"bytes,16,rep,name=trace_number,json=traceNumber,proto3" json:"trace_number,omitempty"`
	// Revenue or cost center code
	Revenue *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=revenue,proto3" json:"revenue,omitempty"`
	// Benefit classification
	Category *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=category,proto3" json:"category,omitempty"`
	// Billing, service, product, or drug code
	ProductOrService *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=product_or_service,json=productOrService,proto3" json:"product_or_service,omitempty"`
	// End of a range of codes
	ProductOrServiceEnd *datatypes_go_proto.CodeableConcept `protobuf:"bytes,17,opt,name=product_or_service_end,json=productOrServiceEnd,proto3" json:"product_or_service_end,omitempty"`
	// Service/Product billing modifiers
	Modifier []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,rep,name=modifier,proto3" json:"modifier,omitempty"`
	// Program the product or service is provided under
	ProgramCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,9,rep,name=program_code,json=programCode,proto3" json:"program_code,omitempty"`
	// Paid by the patient
	PatientPaid *datatypes_go_proto.Money `protobuf:"bytes,18,opt,name=patient_paid,json=patientPaid,proto3" json:"patient_paid,omitempty"`
	// Count of products or services
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,10,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Fee, charge or cost per item
	UnitPrice *datatypes_go_proto.Money `protobuf:"bytes,11,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price,omitempty"`
	// Price scaling factor
	Factor *datatypes_go_proto.Decimal `protobuf:"bytes,12,opt,name=factor,proto3" json:"factor,omitempty"`
	// Total tax
	Tax *datatypes_go_proto.Money `protobuf:"bytes,19,opt,name=tax,proto3" json:"tax,omitempty"`
	// Total item cost
	Net *datatypes_go_proto.Money `protobuf:"bytes,13,opt,name=net,proto3" json:"net,omitempty"`
	// Unique device identifier
	Udi       []*datatypes_go_proto.Reference `protobuf:"bytes,14,rep,name=udi,proto3" json:"udi,omitempty"`
	SubDetail []*Claim_Item_Detail_SubDetail  `protobuf:"bytes,15,rep,name=sub_detail,json=subDetail,proto3" json:"sub_detail,omitempty"`
}

func (x *Claim_Item_Detail) Reset() {
	*x = Claim_Item_Detail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Claim_Item_Detail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Claim_Item_Detail) ProtoMessage() {}

func (x *Claim_Item_Detail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Claim_Item_Detail.ProtoReflect.Descriptor instead.
func (*Claim_Item_Detail) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_claim_proto_rawDescGZIP(), []int{0, 11, 3}
}

func (x *Claim_Item_Detail) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Claim_Item_Detail) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Claim_Item_Detail) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Claim_Item_Detail) GetSequence() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.Sequence
	}
	return nil
}

func (x *Claim_Item_Detail) GetTraceNumber() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.TraceNumber
	}
	return nil
}

func (x *Claim_Item_Detail) GetRevenue() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Revenue
	}
	return nil
}

func (x *Claim_Item_Detail) GetCategory() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Claim_Item_Detail) GetProductOrService() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ProductOrService
	}
	return nil
}

func (x *Claim_Item_Detail) GetProductOrServiceEnd() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ProductOrServiceEnd
	}
	return nil
}

func (x *Claim_Item_Detail) GetModifier() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Modifier
	}
	return nil
}

func (x *Claim_Item_Detail) GetProgramCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ProgramCode
	}
	return nil
}

func (x *Claim_Item_Detail) GetPatientPaid() *datatypes_go_proto.Money {
	if x != nil {
		return x.PatientPaid
	}
	return nil
}

func (x *Claim_Item_Detail) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *Claim_Item_Detail) GetUnitPrice() *datatypes_go_proto.Money {
	if x != nil {
		return x.UnitPrice
	}
	return nil
}

func (x *Claim_Item_Detail) GetFactor() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Factor
	}
	return nil
}

func (x *Claim_Item_Detail) GetTax() *datatypes_go_proto.Money {
	if x != nil {
		return x.Tax
	}
	return nil
}

func (x *Claim_Item_Detail) GetNet() *datatypes_go_proto.Money {
	if x != nil {
		return x.Net
	}
	return nil
}

func (x *Claim_Item_Detail) GetUdi() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Udi
	}
	return nil
}

func (x *Claim_Item_Detail) GetSubDetail() []*Claim_Item_Detail_SubDetail {
	if x != nil {
		return x.SubDetail
	}
	return nil
}

// Product or service provided
type Claim_Item_Detail_SubDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Item instance identifier
	Sequence *datatypes_go_proto.PositiveInt `protobuf:"bytes,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Number for tracking
	TraceNumber []*datatypes_go_proto.Identifier `protobuf:"bytes,15,rep,name=trace_number,json=traceNumber,proto3" json:"trace_number,omitempty"`
	// Revenue or cost center code
	Revenue *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=revenue,proto3" json:"revenue,omitempty"`
	// Benefit classification
	Category *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=category,proto3" json:"category,omitempty"`
	// Billing, service, product, or drug code
	ProductOrService *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=product_or_service,json=productOrService,proto3" json:"product_or_service,omitempty"`
	// End of a range of codes
	ProductOrServiceEnd *datatypes_go_proto.CodeableConcept `protobuf:"bytes,16,opt,name=product_or_service_end,json=productOrServiceEnd,proto3" json:"product_or_service_end,omitempty"`
	// Service/Product billing modifiers
	Modifier []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,rep,name=modifier,proto3" json:"modifier,omitempty"`
	// Program the product or service is provided under
	ProgramCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,9,rep,name=program_code,json=programCode,proto3" json:"program_code,omitempty"`
	// Paid by the patient
	PatientPaid *datatypes_go_proto.Money `protobuf:"bytes,17,opt,name=patient_paid,json=patientPaid,proto3" json:"patient_paid,omitempty"`
	// Count of products or services
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,10,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Fee, charge or cost per item
	UnitPrice *datatypes_go_proto.Money `protobuf:"bytes,11,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price,omitempty"`
	// Price scaling factor
	Factor *datatypes_go_proto.Decimal `protobuf:"bytes,12,opt,name=factor,proto3" json:"factor,omitempty"`
	// Total tax
	Tax *datatypes_go_proto.Money `protobuf:"bytes,18,opt,name=tax,proto3" json:"tax,omitempty"`
	// Total item cost
	Net *datatypes_go_proto.Money `protobuf:"bytes,13,opt,name=net,proto3" json:"net,omitempty"`
	// Unique device identifier
	Udi []*datatypes_go_proto.Reference `protobuf:"bytes,14,rep,name=udi,proto3" json:"udi,omitempty"`
}

func (x *Claim_Item_Detail_SubDetail) Reset() {
	*x = Claim_Item_Detail_SubDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Claim_Item_Detail_SubDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Claim_Item_Detail_SubDetail) ProtoMessage() {}

func (x *Claim_Item_Detail_SubDetail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Claim_Item_Detail_SubDetail.ProtoReflect.Descriptor instead.
func (*Claim_Item_Detail_SubDetail) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_claim_proto_rawDescGZIP(), []int{0, 11, 3, 0}
}

func (x *Claim_Item_Detail_SubDetail) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Claim_Item_Detail_SubDetail) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Claim_Item_Detail_SubDetail) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Claim_Item_Detail_SubDetail) GetSequence() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.Sequence
	}
	return nil
}

func (x *Claim_Item_Detail_SubDetail) GetTraceNumber() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.TraceNumber
	}
	return nil
}

func (x *Claim_Item_Detail_SubDetail) GetRevenue() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Revenue
	}
	return nil
}

func (x *Claim_Item_Detail_SubDetail) GetCategory() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Claim_Item_Detail_SubDetail) GetProductOrService() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ProductOrService
	}
	return nil
}

func (x *Claim_Item_Detail_SubDetail) GetProductOrServiceEnd() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ProductOrServiceEnd
	}
	return nil
}

func (x *Claim_Item_Detail_SubDetail) GetModifier() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Modifier
	}
	return nil
}

func (x *Claim_Item_Detail_SubDetail) GetProgramCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ProgramCode
	}
	return nil
}

func (x *Claim_Item_Detail_SubDetail) GetPatientPaid() *datatypes_go_proto.Money {
	if x != nil {
		return x.PatientPaid
	}
	return nil
}

func (x *Claim_Item_Detail_SubDetail) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *Claim_Item_Detail_SubDetail) GetUnitPrice() *datatypes_go_proto.Money {
	if x != nil {
		return x.UnitPrice
	}
	return nil
}

func (x *Claim_Item_Detail_SubDetail) GetFactor() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Factor
	}
	return nil
}

func (x *Claim_Item_Detail_SubDetail) GetTax() *datatypes_go_proto.Money {
	if x != nil {
		return x.Tax
	}
	return nil
}

func (x *Claim_Item_Detail_SubDetail) GetNet() *datatypes_go_proto.Money {
	if x != nil {
		return x.Net
	}
	return nil
}

func (x *Claim_Item_Detail_SubDetail) GetUdi() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Udi
	}
	return nil
}

var File_proto_google_fhir_proto_r5_core_resources_claim_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r5_core_resources_claim_proto_rawDesc = []byte{
	0x0a, 0x35, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x19, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xdd, 0x71, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x42, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x25, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a,
	0x08, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c,
	0x0a, 0x03, 0x75, 0x73, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x03, 0x75, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x07,
	0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x0f, 0x62,
	0x69, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x52, 0x0e, 0x62, 0x69, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0x3f, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x82, 0x01, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x72, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x48, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x07,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x75, 0x72,
	0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x69, 0x6e,
	0x73, 0x75, 0x72, 0x65, 0x72, 0x12, 0x76, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x3a, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c,
	0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x40, 0x0a,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x49, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x66, 0x75,
	0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x86, 0x01,
	0x0a, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x42, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x12, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x97, 0x01, 0x0a, 0x15, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x42, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x11, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x12, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x36, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x65, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x2e, 0x50, 0x61, 0x79, 0x65,
	0x65, 0x52, 0x05, 0x70, 0x61, 0x79, 0x65, 0x65, 0x12, 0x50, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x61, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x14, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x12, 0x4d, 0x0a, 0x09, 0x65, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x26, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09,
	0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x08, 0x66, 0x61, 0x63,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x20, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x66,
	0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x5c, 0x0a, 0x17, 0x64, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x15,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x28,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a,
	0x09, 0x63, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x2e, 0x43, 0x61, 0x72,
	0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x08, 0x63, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12,
	0x59, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x42, 0x0a, 0x09, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x69, 0x73, 0x52, 0x09, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x12, 0x42,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x18, 0x20, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x2e, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x73,
	0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x2e, 0x41, 0x63, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x61,
	0x63, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0b, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x23,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x30, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x1a, 0xab, 0x02,
	0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x64, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x26, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x66, 0x6d, 0x2d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x94, 0x02, 0x0a, 0x07,
	0x55, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x64, 0x8a, 0xf9,
	0x83, 0xb2, 0x05, 0x26, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x2d, 0x75, 0x73, 0x65, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01,
	0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x64, 0x65, 0x1a, 0x94, 0x03, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a,
	0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0b, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x05, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x12, 0x48, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x3d, 0x0a, 0x09, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x96, 0x03, 0x0a, 0x05, 0x50, 0x61,
	0x79, 0x65, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x90, 0x01, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x5a, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x1a, 0xd8, 0x03, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x77, 0x68, 0x65, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x68, 0x65, 0x6e, 0x58, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x1a, 0x8e, 0x01, 0x0a,
	0x05, 0x57, 0x68, 0x65, 0x6e, 0x58, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83,
	0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xc6, 0x04,
	0x0a, 0x08, 0x43, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x7c, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x40, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0b, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x74, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x09, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x74, 0x79, 0x1a, 0xa7, 0x09, 0x0a, 0x15, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x08, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x48, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x58, 0x52, 0x06,
	0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x1a, 0x83, 0x01, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x58, 0x12,
	0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xa4, 0x03, 0x0a, 0x06, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x58, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x3b,
	0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00,
	0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x3a, 0x06,
	0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x1a, 0xb0, 0x05, 0x0a, 0x09, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x55,
	0x0a, 0x09, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x2e, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69,
	0x73, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x09, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x47, 0x0a, 0x0c, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0b, 0x6f, 0x6e, 0x41,
	0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xc2, 0x01, 0x0a, 0x0a, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x58, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x4f, 0x0a, 0x09, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83,
	0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x4a, 0x04, 0x08,
	0x08, 0x10, 0x09, 0x1a, 0xd4, 0x05, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x08, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x55,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x64, 0x75, 0x72, 0x65, 0x12, 0x3e, 0x0a, 0x03, 0x75, 0x64, 0x69, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x0c, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x03, 0x75, 0x64, 0x69, 0x1a, 0xc2, 0x01, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x58, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x4f, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xc5, 0x05, 0x0a, 0x09, 0x49,
	0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x66, 0x6f, 0x63, 0x61,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x66,
	0x6f, 0x63, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x14, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x08, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x13, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x72, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x52, 0x65, 0x66, 0x12, 0x5a, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0d, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x1a, 0xaa, 0x04, 0x0a, 0x08, 0x41, 0x63, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x2e, 0x41, 0x63, 0x63, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xa7, 0x01, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x58, 0x12, 0x38, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4e, 0x0a,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0,
	0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a,
	0xcd, 0x28, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x0b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x12,
	0x63, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x52, 0x10, 0x63, 0x61, 0x72, 0x65,
	0x54, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x12,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x52, 0x11, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4f, 0x0a,
	0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x52, 0x11, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x53,
	0x0a, 0x14, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x52, 0x13,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x52, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x16, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x65, 0x6e, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x45, 0x6e, 0x64, 0x12, 0xb7, 0x01, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x7d, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x11, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x12, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40,
	0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x47, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x64, 0x58, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64,
	0x12, 0x45, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0b, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x52, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x03, 0x74, 0x61, 0x78, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x52, 0x03, 0x74, 0x61, 0x78, 0x12, 0x2c, 0x0a, 0x03, 0x6e, 0x65, 0x74, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52,
	0x03, 0x6e, 0x65, 0x74, 0x12, 0x3e, 0x0a, 0x03, 0x75, 0x64, 0x69, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x0c, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x03, 0x75, 0x64, 0x69, 0x12, 0x45, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x74,
	0x65, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74,
	0x65, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x09, 0x65,
	0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52,
	0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x06, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a, 0x85, 0x01, 0x0a, 0x09, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x58, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x1a, 0xfa, 0x01, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x58,
	0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4e, 0x0a,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0,
	0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a,
	0xc9, 0x02, 0x0a, 0x08, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x73, 0x75,
	0x62, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x53, 0x69, 0x74, 0x65, 0x1a, 0x81, 0x13, 0x0a, 0x06,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x44, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x49, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0b, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x07, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x52, 0x0a, 0x12,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x10,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x59, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6f, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x40, 0x0a, 0x08, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x47, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0b, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x34, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52,
	0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x03, 0x74, 0x61, 0x78, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x52, 0x03, 0x74, 0x61, 0x78, 0x12, 0x2c, 0x0a, 0x03, 0x6e, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x03,
	0x6e, 0x65, 0x74, 0x12, 0x3e, 0x0a, 0x03, 0x75, 0x64, 0x69, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x0c, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x03,
	0x75, 0x64, 0x69, 0x12, 0x4f, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e,
	0x53, 0x75, 0x62, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x09, 0x73, 0x75, 0x62, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x1a, 0x98, 0x09, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x08,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x07, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x52, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x16,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61,
	0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0b, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x34, 0x0a,
	0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x03, 0x74, 0x61, 0x78, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x03, 0x74, 0x61,
	0x78, 0x12, 0x2c, 0x0a, 0x03, 0x6e, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x03, 0x6e, 0x65, 0x74, 0x12,
	0x3e, 0x0a, 0x03, 0x75, 0x64, 0x69, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0c, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x03, 0x75, 0x64, 0x69, 0x3a,
	0x39, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2d, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08,
	0x42, 0x75, 0x98, 0xc6, 0xb0, 0xb5, 0x07, 0x05, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x50, 0x01, 0x5a, 0x52, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x67,
	0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r5_core_resources_claim_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r5_core_resources_claim_proto_rawDescData = file_proto_google_fhir_proto_r5_core_resources_claim_proto_rawDesc
)

func file_proto_google_fhir_proto_r5_core_resources_claim_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r5_core_resources_claim_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r5_core_resources_claim_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r5_core_resources_claim_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r5_core_resources_claim_proto_rawDescData
}

var file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_proto_google_fhir_proto_r5_core_resources_claim_proto_goTypes = []interface{}{
	(*Claim)(nil),                                         // 0: google.fhir.r5.core.Claim
	(*Claim_StatusCode)(nil),                              // 1: google.fhir.r5.core.Claim.StatusCode
	(*Claim_UseCode)(nil),                                 // 2: google.fhir.r5.core.Claim.UseCode
	(*Claim_RelatedClaim)(nil),                            // 3: google.fhir.r5.core.Claim.RelatedClaim
	(*Claim_Payee)(nil),                                   // 4: google.fhir.r5.core.Claim.Payee
	(*Claim_Event)(nil),                                   // 5: google.fhir.r5.core.Claim.Event
	(*Claim_CareTeam)(nil),                                // 6: google.fhir.r5.core.Claim.CareTeam
	(*Claim_SupportingInformation)(nil),                   // 7: google.fhir.r5.core.Claim.SupportingInformation
	(*Claim_Diagnosis)(nil),                               // 8: google.fhir.r5.core.Claim.Diagnosis
	(*Claim_Procedure)(nil),                               // 9: google.fhir.r5.core.Claim.Procedure
	(*Claim_Insurance)(nil),                               // 10: google.fhir.r5.core.Claim.Insurance
	(*Claim_Accident)(nil),                                // 11: google.fhir.r5.core.Claim.Accident
	(*Claim_Item)(nil),                                    // 12: google.fhir.r5.core.Claim.Item
	(*Claim_Event_WhenX)(nil),                             // 13: google.fhir.r5.core.Claim.Event.WhenX
	(*Claim_SupportingInformation_TimingX)(nil),           // 14: google.fhir.r5.core.Claim.SupportingInformation.TimingX
	(*Claim_SupportingInformation_ValueX)(nil),            // 15: google.fhir.r5.core.Claim.SupportingInformation.ValueX
	(*Claim_Diagnosis_DiagnosisX)(nil),                    // 16: google.fhir.r5.core.Claim.Diagnosis.DiagnosisX
	(*Claim_Procedure_ProcedureX)(nil),                    // 17: google.fhir.r5.core.Claim.Procedure.ProcedureX
	(*Claim_Accident_LocationX)(nil),                      // 18: google.fhir.r5.core.Claim.Accident.LocationX
	(*Claim_Item_ServicedX)(nil),                          // 19: google.fhir.r5.core.Claim.Item.ServicedX
	(*Claim_Item_LocationX)(nil),                          // 20: google.fhir.r5.core.Claim.Item.LocationX
	(*Claim_Item_BodySite)(nil),                           // 21: google.fhir.r5.core.Claim.Item.BodySite
	(*Claim_Item_Detail)(nil),                             // 22: google.fhir.r5.core.Claim.Item.Detail
	(*Claim_Item_Detail_SubDetail)(nil),                   // 23: google.fhir.r5.core.Claim.Item.Detail.SubDetail
	(*datatypes_go_proto.Id)(nil),                         // 24: google.fhir.r5.core.Id
	(*datatypes_go_proto.Meta)(nil),                       // 25: google.fhir.r5.core.Meta
	(*datatypes_go_proto.Uri)(nil),                        // 26: google.fhir.r5.core.Uri
	(*datatypes_go_proto.Code)(nil),                       // 27: google.fhir.r5.core.Code
	(*datatypes_go_proto.Narrative)(nil),                  // 28: google.fhir.r5.core.Narrative
	(*anypb.Any)(nil),                                     // 29: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),                  // 30: google.fhir.r5.core.Extension
	(*datatypes_go_proto.Identifier)(nil),                 // 31: google.fhir.r5.core.Identifier
	(*datatypes_go_proto.CodeableConcept)(nil),            // 32: google.fhir.r5.core.CodeableConcept
	(*datatypes_go_proto.Reference)(nil),                  // 33: google.fhir.r5.core.Reference
	(*datatypes_go_proto.Period)(nil),                     // 34: google.fhir.r5.core.Period
	(*datatypes_go_proto.DateTime)(nil),                   // 35: google.fhir.r5.core.DateTime
	(*datatypes_go_proto.Money)(nil),                      // 36: google.fhir.r5.core.Money
	(codes_go_proto.FinancialResourceStatusCode_Value)(0), // 37: google.fhir.r5.core.FinancialResourceStatusCode.Value
	(*datatypes_go_proto.String)(nil),                     // 38: google.fhir.r5.core.String
	(codes_go_proto.UseCode_Value)(0),                     // 39: google.fhir.r5.core.UseCode.Value
	(*datatypes_go_proto.PositiveInt)(nil),                // 40: google.fhir.r5.core.PositiveInt
	(*datatypes_go_proto.Boolean)(nil),                    // 41: google.fhir.r5.core.Boolean
	(*datatypes_go_proto.Date)(nil),                       // 42: google.fhir.r5.core.Date
	(*datatypes_go_proto.SimpleQuantity)(nil),             // 43: google.fhir.r5.core.SimpleQuantity
	(*datatypes_go_proto.Decimal)(nil),                    // 44: google.fhir.r5.core.Decimal
	(*datatypes_go_proto.Quantity)(nil),                   // 45: google.fhir.r5.core.Quantity
	(*datatypes_go_proto.Attachment)(nil),                 // 46: google.fhir.r5.core.Attachment
	(*datatypes_go_proto.Address)(nil),                    // 47: google.fhir.r5.core.Address
	(*datatypes_go_proto.CodeableReference)(nil),          // 48: google.fhir.r5.core.CodeableReference
}
var file_proto_google_fhir_proto_r5_core_resources_claim_proto_depIdxs = []int32{
	24,  // 0: google.fhir.r5.core.Claim.id:type_name -> google.fhir.r5.core.Id
	25,  // 1: google.fhir.r5.core.Claim.meta:type_name -> google.fhir.r5.core.Meta
	26,  // 2: google.fhir.r5.core.Claim.implicit_rules:type_name -> google.fhir.r5.core.Uri
	27,  // 3: google.fhir.r5.core.Claim.language:type_name -> google.fhir.r5.core.Code
	28,  // 4: google.fhir.r5.core.Claim.text:type_name -> google.fhir.r5.core.Narrative
	29,  // 5: google.fhir.r5.core.Claim.contained:type_name -> google.protobuf.Any
	30,  // 6: google.fhir.r5.core.Claim.extension:type_name -> google.fhir.r5.core.Extension
	30,  // 7: google.fhir.r5.core.Claim.modifier_extension:type_name -> google.fhir.r5.core.Extension
	31,  // 8: google.fhir.r5.core.Claim.identifier:type_name -> google.fhir.r5.core.Identifier
	31,  // 9: google.fhir.r5.core.Claim.trace_number:type_name -> google.fhir.r5.core.Identifier
	1,   // 10: google.fhir.r5.core.Claim.status:type_name -> google.fhir.r5.core.Claim.StatusCode
	32,  // 11: google.fhir.r5.core.Claim.type:type_name -> google.fhir.r5.core.CodeableConcept
	32,  // 12: google.fhir.r5.core.Claim.sub_type:type_name -> google.fhir.r5.core.CodeableConcept
	2,   // 13: google.fhir.r5.core.Claim.use:type_name -> google.fhir.r5.core.Claim.UseCode
	33,  // 14: google.fhir.r5.core.Claim.patient:type_name -> google.fhir.r5.core.Reference
	34,  // 15: google.fhir.r5.core.Claim.billable_period:type_name -> google.fhir.r5.core.Period
	35,  // 16: google.fhir.r5.core.Claim.created:type_name -> google.fhir.r5.core.DateTime
	33,  // 17: google.fhir.r5.core.Claim.enterer:type_name -> google.fhir.r5.core.Reference
	33,  // 18: google.fhir.r5.core.Claim.insurer:type_name -> google.fhir.r5.core.Reference
	33,  // 19: google.fhir.r5.core.Claim.provider:type_name -> google.fhir.r5.core.Reference
	32,  // 20: google.fhir.r5.core.Claim.priority:type_name -> google.fhir.r5.core.CodeableConcept
	32,  // 21: google.fhir.r5.core.Claim.funds_reserve:type_name -> google.fhir.r5.core.CodeableConcept
	3,   // 22: google.fhir.r5.core.Claim.related:type_name -> google.fhir.r5.core.Claim.RelatedClaim
	33,  // 23: google.fhir.r5.core.Claim.prescription:type_name -> google.fhir.r5.core.Reference
	33,  // 24: google.fhir.r5.core.Claim.original_prescription:type_name -> google.fhir.r5.core.Reference
	4,   // 25: google.fhir.r5.core.Claim.payee:type_name -> google.fhir.r5.core.Claim.Payee
	33,  // 26: google.fhir.r5.core.Claim.referral:type_name -> google.fhir.r5.core.Reference
	33,  // 27: google.fhir.r5.core.Claim.encounter:type_name -> google.fhir.r5.core.Reference
	33,  // 28: google.fhir.r5.core.Claim.facility:type_name -> google.fhir.r5.core.Reference
	32,  // 29: google.fhir.r5.core.Claim.diagnosis_related_group:type_name -> google.fhir.r5.core.CodeableConcept
	5,   // 30: google.fhir.r5.core.Claim.event:type_name -> google.fhir.r5.core.Claim.Event
	6,   // 31: google.fhir.r5.core.Claim.care_team:type_name -> google.fhir.r5.core.Claim.CareTeam
	7,   // 32: google.fhir.r5.core.Claim.supporting_info:type_name -> google.fhir.r5.core.Claim.SupportingInformation
	8,   // 33: google.fhir.r5.core.Claim.diagnosis:type_name -> google.fhir.r5.core.Claim.Diagnosis
	9,   // 34: google.fhir.r5.core.Claim.procedure:type_name -> google.fhir.r5.core.Claim.Procedure
	10,  // 35: google.fhir.r5.core.Claim.insurance:type_name -> google.fhir.r5.core.Claim.Insurance
	11,  // 36: google.fhir.r5.core.Claim.accident:type_name -> google.fhir.r5.core.Claim.Accident
	36,  // 37: google.fhir.r5.core.Claim.patient_paid:type_name -> google.fhir.r5.core.Money
	12,  // 38: google.fhir.r5.core.Claim.item:type_name -> google.fhir.r5.core.Claim.Item
	36,  // 39: google.fhir.r5.core.Claim.total:type_name -> google.fhir.r5.core.Money
	37,  // 40: google.fhir.r5.core.Claim.StatusCode.value:type_name -> google.fhir.r5.core.FinancialResourceStatusCode.Value
	38,  // 41: google.fhir.r5.core.Claim.StatusCode.id:type_name -> google.fhir.r5.core.String
	30,  // 42: google.fhir.r5.core.Claim.StatusCode.extension:type_name -> google.fhir.r5.core.Extension
	39,  // 43: google.fhir.r5.core.Claim.UseCode.value:type_name -> google.fhir.r5.core.UseCode.Value
	38,  // 44: google.fhir.r5.core.Claim.UseCode.id:type_name -> google.fhir.r5.core.String
	30,  // 45: google.fhir.r5.core.Claim.UseCode.extension:type_name -> google.fhir.r5.core.Extension
	38,  // 46: google.fhir.r5.core.Claim.RelatedClaim.id:type_name -> google.fhir.r5.core.String
	30,  // 47: google.fhir.r5.core.Claim.RelatedClaim.extension:type_name -> google.fhir.r5.core.Extension
	30,  // 48: google.fhir.r5.core.Claim.RelatedClaim.modifier_extension:type_name -> google.fhir.r5.core.Extension
	33,  // 49: google.fhir.r5.core.Claim.RelatedClaim.claim:type_name -> google.fhir.r5.core.Reference
	32,  // 50: google.fhir.r5.core.Claim.RelatedClaim.relationship:type_name -> google.fhir.r5.core.CodeableConcept
	31,  // 51: google.fhir.r5.core.Claim.RelatedClaim.reference:type_name -> google.fhir.r5.core.Identifier
	38,  // 52: google.fhir.r5.core.Claim.Payee.id:type_name -> google.fhir.r5.core.String
	30,  // 53: google.fhir.r5.core.Claim.Payee.extension:type_name -> google.fhir.r5.core.Extension
	30,  // 54: google.fhir.r5.core.Claim.Payee.modifier_extension:type_name -> google.fhir.r5.core.Extension
	32,  // 55: google.fhir.r5.core.Claim.Payee.type:type_name -> google.fhir.r5.core.CodeableConcept
	33,  // 56: google.fhir.r5.core.Claim.Payee.party:type_name -> google.fhir.r5.core.Reference
	38,  // 57: google.fhir.r5.core.Claim.Event.id:type_name -> google.fhir.r5.core.String
	30,  // 58: google.fhir.r5.core.Claim.Event.extension:type_name -> google.fhir.r5.core.Extension
	30,  // 59: google.fhir.r5.core.Claim.Event.modifier_extension:type_name -> google.fhir.r5.core.Extension
	32,  // 60: google.fhir.r5.core.Claim.Event.type:type_name -> google.fhir.r5.core.CodeableConcept
	13,  // 61: google.fhir.r5.core.Claim.Event.when:type_name -> google.fhir.r5.core.Claim.Event.WhenX
	38,  // 62: google.fhir.r5.core.Claim.CareTeam.id:type_name -> google.fhir.r5.core.String
	30,  // 63: google.fhir.r5.core.Claim.CareTeam.extension:type_name -> google.fhir.r5.core.Extension
	30,  // 64: google.fhir.r5.core.Claim.CareTeam.modifier_extension:type_name -> google.fhir.r5.core.Extension
	40,  // 65: google.fhir.r5.core.Claim.CareTeam.sequence:type_name -> google.fhir.r5.core.PositiveInt
	33,  // 66: google.fhir.r5.core.Claim.CareTeam.provider:type_name -> google.fhir.r5.core.Reference
	41,  // 67: google.fhir.r5.core.Claim.CareTeam.responsible:type_name -> google.fhir.r5.core.Boolean
	32,  // 68: google.fhir.r5.core.Claim.CareTeam.role:type_name -> google.fhir.r5.core.CodeableConcept
	32,  // 69: google.fhir.r5.core.Claim.CareTeam.specialty:type_name -> google.fhir.r5.core.CodeableConcept
	38,  // 70: google.fhir.r5.core.Claim.SupportingInformation.id:type_name -> google.fhir.r5.core.String
	30,  // 71: google.fhir.r5.core.Claim.SupportingInformation.extension:type_name -> google.fhir.r5.core.Extension
	30,  // 72: google.fhir.r5.core.Claim.SupportingInformation.modifier_extension:type_name -> google.fhir.r5.core.Extension
	40,  // 73: google.fhir.r5.core.Claim.SupportingInformation.sequence:type_name -> google.fhir.r5.core.PositiveInt
	32,  // 74: google.fhir.r5.core.Claim.SupportingInformation.category:type_name -> google.fhir.r5.core.CodeableConcept
	32,  // 75: google.fhir.r5.core.Claim.SupportingInformation.code:type_name -> google.fhir.r5.core.CodeableConcept
	14,  // 76: google.fhir.r5.core.Claim.SupportingInformation.timing:type_name -> google.fhir.r5.core.Claim.SupportingInformation.TimingX
	15,  // 77: google.fhir.r5.core.Claim.SupportingInformation.value:type_name -> google.fhir.r5.core.Claim.SupportingInformation.ValueX
	32,  // 78: google.fhir.r5.core.Claim.SupportingInformation.reason:type_name -> google.fhir.r5.core.CodeableConcept
	38,  // 79: google.fhir.r5.core.Claim.Diagnosis.id:type_name -> google.fhir.r5.core.String
	30,  // 80: google.fhir.r5.core.Claim.Diagnosis.extension:type_name -> google.fhir.r5.core.Extension
	30,  // 81: google.fhir.r5.core.Claim.Diagnosis.modifier_extension:type_name -> google.fhir.r5.core.Extension
	40,  // 82: google.fhir.r5.core.Claim.Diagnosis.sequence:type_name -> google.fhir.r5.core.PositiveInt
	16,  // 83: google.fhir.r5.core.Claim.Diagnosis.diagnosis:type_name -> google.fhir.r5.core.Claim.Diagnosis.DiagnosisX
	32,  // 84: google.fhir.r5.core.Claim.Diagnosis.type:type_name -> google.fhir.r5.core.CodeableConcept
	32,  // 85: google.fhir.r5.core.Claim.Diagnosis.on_admission:type_name -> google.fhir.r5.core.CodeableConcept
	38,  // 86: google.fhir.r5.core.Claim.Procedure.id:type_name -> google.fhir.r5.core.String
	30,  // 87: google.fhir.r5.core.Claim.Procedure.extension:type_name -> google.fhir.r5.core.Extension
	30,  // 88: google.fhir.r5.core.Claim.Procedure.modifier_extension:type_name -> google.fhir.r5.core.Extension
	40,  // 89: google.fhir.r5.core.Claim.Procedure.sequence:type_name -> google.fhir.r5.core.PositiveInt
	32,  // 90: google.fhir.r5.core.Claim.Procedure.type:type_name -> google.fhir.r5.core.CodeableConcept
	35,  // 91: google.fhir.r5.core.Claim.Procedure.date:type_name -> google.fhir.r5.core.DateTime
	17,  // 92: google.fhir.r5.core.Claim.Procedure.procedure:type_name -> google.fhir.r5.core.Claim.Procedure.ProcedureX
	33,  // 93: google.fhir.r5.core.Claim.Procedure.udi:type_name -> google.fhir.r5.core.Reference
	38,  // 94: google.fhir.r5.core.Claim.Insurance.id:type_name -> google.fhir.r5.core.String
	30,  // 95: google.fhir.r5.core.Claim.Insurance.extension:type_name -> google.fhir.r5.core.Extension
	30,  // 96: google.fhir.r5.core.Claim.Insurance.modifier_extension:type_name -> google.fhir.r5.core.Extension
	40,  // 97: google.fhir.r5.core.Claim.Insurance.sequence:type_name -> google.fhir.r5.core.PositiveInt
	41,  // 98: google.fhir.r5.core.Claim.Insurance.focal:type_name -> google.fhir.r5.core.Boolean
	31,  // 99: google.fhir.r5.core.Claim.Insurance.identifier:type_name -> google.fhir.r5.core.Identifier
	33,  // 100: google.fhir.r5.core.Claim.Insurance.coverage:type_name -> google.fhir.r5.core.Reference
	38,  // 101: google.fhir.r5.core.Claim.Insurance.business_arrangement:type_name -> google.fhir.r5.core.String
	38,  // 102: google.fhir.r5.core.Claim.Insurance.pre_auth_ref:type_name -> google.fhir.r5.core.String
	33,  // 103: google.fhir.r5.core.Claim.Insurance.claim_response:type_name -> google.fhir.r5.core.Reference
	38,  // 104: google.fhir.r5.core.Claim.Accident.id:type_name -> google.fhir.r5.core.String
	30,  // 105: google.fhir.r5.core.Claim.Accident.extension:type_name -> google.fhir.r5.core.Extension
	30,  // 106: google.fhir.r5.core.Claim.Accident.modifier_extension:type_name -> google.fhir.r5.core.Extension
	42,  // 107: google.fhir.r5.core.Claim.Accident.date:type_name -> google.fhir.r5.core.Date
	32,  // 108: google.fhir.r5.core.Claim.Accident.type:type_name -> google.fhir.r5.core.CodeableConcept
	18,  // 109: google.fhir.r5.core.Claim.Accident.location:type_name -> google.fhir.r5.core.Claim.Accident.LocationX
	38,  // 110: google.fhir.r5.core.Claim.Item.id:type_name -> google.fhir.r5.core.String
	30,  // 111: google.fhir.r5.core.Claim.Item.extension:type_name -> google.fhir.r5.core.Extension
	30,  // 112: google.fhir.r5.core.Claim.Item.modifier_extension:type_name -> google.fhir.r5.core.Extension
	40,  // 113: google.fhir.r5.core.Claim.Item.sequence:type_name -> google.fhir.r5.core.PositiveInt
	31,  // 114: google.fhir.r5.core.Claim.Item.trace_number:type_name -> google.fhir.r5.core.Identifier
	40,  // 115: google.fhir.r5.core.Claim.Item.care_team_sequence:type_name -> google.fhir.r5.core.PositiveInt
	40,  // 116: google.fhir.r5.core.Claim.Item.diagnosis_sequence:type_name -> google.fhir.r5.core.PositiveInt
	40,  // 117: google.fhir.r5.core.Claim.Item.procedure_sequence:type_name -> google.fhir.r5.core.PositiveInt
	40,  // 118: google.fhir.r5.core.Claim.Item.information_sequence:type_name -> google.fhir.r5.core.PositiveInt
	32,  // 119: google.fhir.r5.core.Claim.Item.revenue:type_name -> google.fhir.r5.core.CodeableConcept
	32,  // 120: google.fhir.r5.core.Claim.Item.category:type_name -> google.fhir.r5.core.CodeableConcept
	32,  // 121: google.fhir.r5.core.Claim.Item.product_or_service:type_name -> google.fhir.r5.core.CodeableConcept
	32,  // 122: google.fhir.r5.core.Claim.Item.product_or_service_end:type_name -> google.fhir.r5.core.CodeableConcept
	33,  // 123: google.fhir.r5.core.Claim.Item.request:type_name -> google.fhir.r5.core.Reference
	32,  // 124: google.fhir.r5.core.Claim.Item.modifier:type_name -> google.fhir.r5.core.CodeableConcept
	32,  // 125: google.fhir.r5.core.Claim.Item.program_code:type_name -> google.fhir.r5.core.CodeableConcept
	19,  // 126: google.fhir.r5.core.Claim.Item.serviced:type_name -> google.fhir.r5.core.Claim.Item.ServicedX
	20,  // 127: google.fhir.r5.core.Claim.Item.location:type_name -> google.fhir.r5.core.Claim.Item.LocationX
	36,  // 128: google.fhir.r5.core.Claim.Item.patient_paid:type_name -> google.fhir.r5.core.Money
	43,  // 129: google.fhir.r5.core.Claim.Item.quantity:type_name -> google.fhir.r5.core.SimpleQuantity
	36,  // 130: google.fhir.r5.core.Claim.Item.unit_price:type_name -> google.fhir.r5.core.Money
	44,  // 131: google.fhir.r5.core.Claim.Item.factor:type_name -> google.fhir.r5.core.Decimal
	36,  // 132: google.fhir.r5.core.Claim.Item.tax:type_name -> google.fhir.r5.core.Money
	36,  // 133: google.fhir.r5.core.Claim.Item.net:type_name -> google.fhir.r5.core.Money
	33,  // 134: google.fhir.r5.core.Claim.Item.udi:type_name -> google.fhir.r5.core.Reference
	21,  // 135: google.fhir.r5.core.Claim.Item.body_site:type_name -> google.fhir.r5.core.Claim.Item.BodySite
	33,  // 136: google.fhir.r5.core.Claim.Item.encounter:type_name -> google.fhir.r5.core.Reference
	22,  // 137: google.fhir.r5.core.Claim.Item.detail:type_name -> google.fhir.r5.core.Claim.Item.Detail
	35,  // 138: google.fhir.r5.core.Claim.Event.WhenX.date_time:type_name -> google.fhir.r5.core.DateTime
	34,  // 139: google.fhir.r5.core.Claim.Event.WhenX.period:type_name -> google.fhir.r5.core.Period
	42,  // 140: google.fhir.r5.core.Claim.SupportingInformation.TimingX.date:type_name -> google.fhir.r5.core.Date
	34,  // 141: google.fhir.r5.core.Claim.SupportingInformation.TimingX.period:type_name -> google.fhir.r5.core.Period
	41,  // 142: google.fhir.r5.core.Claim.SupportingInformation.ValueX.boolean:type_name -> google.fhir.r5.core.Boolean
	38,  // 143: google.fhir.r5.core.Claim.SupportingInformation.ValueX.string_value:type_name -> google.fhir.r5.core.String
	45,  // 144: google.fhir.r5.core.Claim.SupportingInformation.ValueX.quantity:type_name -> google.fhir.r5.core.Quantity
	46,  // 145: google.fhir.r5.core.Claim.SupportingInformation.ValueX.attachment:type_name -> google.fhir.r5.core.Attachment
	33,  // 146: google.fhir.r5.core.Claim.SupportingInformation.ValueX.reference:type_name -> google.fhir.r5.core.Reference
	31,  // 147: google.fhir.r5.core.Claim.SupportingInformation.ValueX.identifier:type_name -> google.fhir.r5.core.Identifier
	32,  // 148: google.fhir.r5.core.Claim.Diagnosis.DiagnosisX.codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	33,  // 149: google.fhir.r5.core.Claim.Diagnosis.DiagnosisX.reference:type_name -> google.fhir.r5.core.Reference
	32,  // 150: google.fhir.r5.core.Claim.Procedure.ProcedureX.codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	33,  // 151: google.fhir.r5.core.Claim.Procedure.ProcedureX.reference:type_name -> google.fhir.r5.core.Reference
	47,  // 152: google.fhir.r5.core.Claim.Accident.LocationX.address:type_name -> google.fhir.r5.core.Address
	33,  // 153: google.fhir.r5.core.Claim.Accident.LocationX.reference:type_name -> google.fhir.r5.core.Reference
	42,  // 154: google.fhir.r5.core.Claim.Item.ServicedX.date:type_name -> google.fhir.r5.core.Date
	34,  // 155: google.fhir.r5.core.Claim.Item.ServicedX.period:type_name -> google.fhir.r5.core.Period
	32,  // 156: google.fhir.r5.core.Claim.Item.LocationX.codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	47,  // 157: google.fhir.r5.core.Claim.Item.LocationX.address:type_name -> google.fhir.r5.core.Address
	33,  // 158: google.fhir.r5.core.Claim.Item.LocationX.reference:type_name -> google.fhir.r5.core.Reference
	38,  // 159: google.fhir.r5.core.Claim.Item.BodySite.id:type_name -> google.fhir.r5.core.String
	30,  // 160: google.fhir.r5.core.Claim.Item.BodySite.extension:type_name -> google.fhir.r5.core.Extension
	30,  // 161: google.fhir.r5.core.Claim.Item.BodySite.modifier_extension:type_name -> google.fhir.r5.core.Extension
	48,  // 162: google.fhir.r5.core.Claim.Item.BodySite.site:type_name -> google.fhir.r5.core.CodeableReference
	32,  // 163: google.fhir.r5.core.Claim.Item.BodySite.sub_site:type_name -> google.fhir.r5.core.CodeableConcept
	38,  // 164: google.fhir.r5.core.Claim.Item.Detail.id:type_name -> google.fhir.r5.core.String
	30,  // 165: google.fhir.r5.core.Claim.Item.Detail.extension:type_name -> google.fhir.r5.core.Extension
	30,  // 166: google.fhir.r5.core.Claim.Item.Detail.modifier_extension:type_name -> google.fhir.r5.core.Extension
	40,  // 167: google.fhir.r5.core.Claim.Item.Detail.sequence:type_name -> google.fhir.r5.core.PositiveInt
	31,  // 168: google.fhir.r5.core.Claim.Item.Detail.trace_number:type_name -> google.fhir.r5.core.Identifier
	32,  // 169: google.fhir.r5.core.Claim.Item.Detail.revenue:type_name -> google.fhir.r5.core.CodeableConcept
	32,  // 170: google.fhir.r5.core.Claim.Item.Detail.category:type_name -> google.fhir.r5.core.CodeableConcept
	32,  // 171: google.fhir.r5.core.Claim.Item.Detail.product_or_service:type_name -> google.fhir.r5.core.CodeableConcept
	32,  // 172: google.fhir.r5.core.Claim.Item.Detail.product_or_service_end:type_name -> google.fhir.r5.core.CodeableConcept
	32,  // 173: google.fhir.r5.core.Claim.Item.Detail.modifier:type_name -> google.fhir.r5.core.CodeableConcept
	32,  // 174: google.fhir.r5.core.Claim.Item.Detail.program_code:type_name -> google.fhir.r5.core.CodeableConcept
	36,  // 175: google.fhir.r5.core.Claim.Item.Detail.patient_paid:type_name -> google.fhir.r5.core.Money
	43,  // 176: google.fhir.r5.core.Claim.Item.Detail.quantity:type_name -> google.fhir.r5.core.SimpleQuantity
	36,  // 177: google.fhir.r5.core.Claim.Item.Detail.unit_price:type_name -> google.fhir.r5.core.Money
	44,  // 178: google.fhir.r5.core.Claim.Item.Detail.factor:type_name -> google.fhir.r5.core.Decimal
	36,  // 179: google.fhir.r5.core.Claim.Item.Detail.tax:type_name -> google.fhir.r5.core.Money
	36,  // 180: google.fhir.r5.core.Claim.Item.Detail.net:type_name -> google.fhir.r5.core.Money
	33,  // 181: google.fhir.r5.core.Claim.Item.Detail.udi:type_name -> google.fhir.r5.core.Reference
	23,  // 182: google.fhir.r5.core.Claim.Item.Detail.sub_detail:type_name -> google.fhir.r5.core.Claim.Item.Detail.SubDetail
	38,  // 183: google.fhir.r5.core.Claim.Item.Detail.SubDetail.id:type_name -> google.fhir.r5.core.String
	30,  // 184: google.fhir.r5.core.Claim.Item.Detail.SubDetail.extension:type_name -> google.fhir.r5.core.Extension
	30,  // 185: google.fhir.r5.core.Claim.Item.Detail.SubDetail.modifier_extension:type_name -> google.fhir.r5.core.Extension
	40,  // 186: google.fhir.r5.core.Claim.Item.Detail.SubDetail.sequence:type_name -> google.fhir.r5.core.PositiveInt
	31,  // 187: google.fhir.r5.core.Claim.Item.Detail.SubDetail.trace_number:type_name -> google.fhir.r5.core.Identifier
	32,  // 188: google.fhir.r5.core.Claim.Item.Detail.SubDetail.revenue:type_name -> google.fhir.r5.core.CodeableConcept
	32,  // 189: google.fhir.r5.core.Claim.Item.Detail.SubDetail.category:type_name -> google.fhir.r5.core.CodeableConcept
	32,  // 190: google.fhir.r5.core.Claim.Item.Detail.SubDetail.product_or_service:type_name -> google.fhir.r5.core.CodeableConcept
	32,  // 191: google.fhir.r5.core.Claim.Item.Detail.SubDetail.product_or_service_end:type_name -> google.fhir.r5.core.CodeableConcept
	32,  // 192: google.fhir.r5.core.Claim.Item.Detail.SubDetail.modifier:type_name -> google.fhir.r5.core.CodeableConcept
	32,  // 193: google.fhir.r5.core.Claim.Item.Detail.SubDetail.program_code:type_name -> google.fhir.r5.core.CodeableConcept
	36,  // 194: google.fhir.r5.core.Claim.Item.Detail.SubDetail.patient_paid:type_name -> google.fhir.r5.core.Money
	43,  // 195: google.fhir.r5.core.Claim.Item.Detail.SubDetail.quantity:type_name -> google.fhir.r5.core.SimpleQuantity
	36,  // 196: google.fhir.r5.core.Claim.Item.Detail.SubDetail.unit_price:type_name -> google.fhir.r5.core.Money
	44,  // 197: google.fhir.r5.core.Claim.Item.Detail.SubDetail.factor:type_name -> google.fhir.r5.core.Decimal
	36,  // 198: google.fhir.r5.core.Claim.Item.Detail.SubDetail.tax:type_name -> google.fhir.r5.core.Money
	36,  // 199: google.fhir.r5.core.Claim.Item.Detail.SubDetail.net:type_name -> google.fhir.r5.core.Money
	33,  // 200: google.fhir.r5.core.Claim.Item.Detail.SubDetail.udi:type_name -> google.fhir.r5.core.Reference
	201, // [201:201] is the sub-list for method output_type
	201, // [201:201] is the sub-list for method input_type
	201, // [201:201] is the sub-list for extension type_name
	201, // [201:201] is the sub-list for extension extendee
	0,   // [0:201] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r5_core_resources_claim_proto_init() }
func file_proto_google_fhir_proto_r5_core_resources_claim_proto_init() {
	if File_proto_google_fhir_proto_r5_core_resources_claim_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Claim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Claim_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Claim_UseCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Claim_RelatedClaim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Claim_Payee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Claim_Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Claim_CareTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Claim_SupportingInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Claim_Diagnosis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Claim_Procedure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Claim_Insurance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Claim_Accident); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Claim_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Claim_Event_WhenX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Claim_SupportingInformation_TimingX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Claim_SupportingInformation_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Claim_Diagnosis_DiagnosisX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Claim_Procedure_ProcedureX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Claim_Accident_LocationX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Claim_Item_ServicedX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Claim_Item_LocationX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Claim_Item_BodySite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Claim_Item_Detail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Claim_Item_Detail_SubDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*Claim_Event_WhenX_DateTime)(nil),
		(*Claim_Event_WhenX_Period)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*Claim_SupportingInformation_TimingX_Date)(nil),
		(*Claim_SupportingInformation_TimingX_Period)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*Claim_SupportingInformation_ValueX_Boolean)(nil),
		(*Claim_SupportingInformation_ValueX_StringValue)(nil),
		(*Claim_SupportingInformation_ValueX_Quantity)(nil),
		(*Claim_SupportingInformation_ValueX_Attachment)(nil),
		(*Claim_SupportingInformation_ValueX_Reference)(nil),
		(*Claim_SupportingInformation_ValueX_Identifier)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*Claim_Diagnosis_DiagnosisX_CodeableConcept)(nil),
		(*Claim_Diagnosis_DiagnosisX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*Claim_Procedure_ProcedureX_CodeableConcept)(nil),
		(*Claim_Procedure_ProcedureX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*Claim_Accident_LocationX_Address)(nil),
		(*Claim_Accident_LocationX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*Claim_Item_ServicedX_Date)(nil),
		(*Claim_Item_ServicedX_Period)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*Claim_Item_LocationX_CodeableConcept)(nil),
		(*Claim_Item_LocationX_Address)(nil),
		(*Claim_Item_LocationX_Reference)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r5_core_resources_claim_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r5_core_resources_claim_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r5_core_resources_claim_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r5_core_resources_claim_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r5_core_resources_claim_proto = out.File
	file_proto_google_fhir_proto_r5_core_resources_claim_proto_rawDesc = nil
	file_proto_google_fhir_proto_r5_core_resources_claim_proto_goTypes = nil
	file_proto_google_fhir_proto_r5_core_resources_claim_proto_depIdxs = nil
}
